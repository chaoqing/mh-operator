# -*- coding: utf-8 -*-
import typing

# Import specific members from typing used in hints
from typing import (
    Any,
    Callable,
    Dict,
    FrozenSet,
    Generic,
    Iterable,
    Iterator,
    List,
    Mapping,
    Optional,
    Sequence,
    Set,
    Tuple,
    TypeVar,
    Union,
    overload,
)

import datetime
from enum import Enum

import Agilent
import System

# Discovered Generic TypeVars:
I = TypeVar("I")
K = TypeVar("K")
K2 = TypeVar("K2")
P = TypeVar("P")
R = TypeVar("R")
T = TypeVar("T")
U = TypeVar("U")
V = TypeVar("V")
V2 = TypeVar("V2")
from . import (
    BaselineParamWrapper,
    IIonGroupingParameters,
    IRlzArrayIterator,
    IsotopeModel,
    ITofCal,
    PeakFilterParamWrapper,
    PeakLocateParamWrapper,
    RlzArrayMetrics,
    SpectrumParamWrapper,
    WtcCalibration,
)
from .GUI.Plot import Pane
from .MassHunter import (
    ICompound,
    IIsotopeCluster,
    IsotopeCharacteristics,
    ISpectralPeakFinderParameters,
    SpectralPeakThresholdType,
)
from .MIDAC import (
    AbundanceMeasure,
    FragmentationClass,
    FragmentationOpMode,
    IDoubleRange,
    IIntRange,
    IMidacFileInfo,
    IMidacFrameInfo,
    IMidacMsDetails,
    IMidacMsDetailsChrom,
    IMidacMsDetailsSpec,
    IMidacMsFilters,
    IMidacMsFiltersChrom,
    IMidacMsFiltersSpec,
    IMidacUnitConverter,
    MidacUnits,
)

# Stubs for namespace: Agilent.MassSpectrometry.DataAnalysis

class Abbreviations(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Acq: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly
    Chrom: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = (
        ...
    )  # static # readonly
    Cmd: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly
    MS: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly
    Max: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly
    Min: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly
    Spec: Agilent.MassSpectrometry.DataAnalysis.Abbreviations = ...  # static # readonly

class AcqDataClearOptions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ClearAll: Agilent.MassSpectrometry.DataAnalysis.AcqDataClearOptions = (
        ...
    )  # static # readonly
    ClearMsOnly: Agilent.MassSpectrometry.DataAnalysis.AcqDataClearOptions = (
        ...
    )  # static # readonly
    ClearNothing: Agilent.MassSpectrometry.DataAnalysis.AcqDataClearOptions = (
        ...
    )  # static # readonly

class AcqDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IAcqDataSource,
    Agilent.MassSpectrometry.DataAnalysis.DataSource,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AcqDataSource
    ) -> None: ...

    AnalysisNumber: int
    BatchDirName: str
    DataDirName: str
    DeviceId: int
    DeviceName: str
    DeviceNumber: int
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.AcqDataSource: ...

class AcqStatus(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    End: Agilent.MassSpectrometry.DataAnalysis.AcqStatus = ...  # static # readonly
    Init: Agilent.MassSpectrometry.DataAnalysis.AcqStatus = ...  # static # readonly
    Start: Agilent.MassSpectrometry.DataAnalysis.AcqStatus = ...  # static # readonly
    Stop: Agilent.MassSpectrometry.DataAnalysis.AcqStatus = ...  # static # readonly

class AcquisitionMetaData(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IAcqMetaData,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AcquisitionMetaData
    ) -> None: ...

class ActualType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Periodic: Agilent.MassSpectrometry.DataAnalysis.ActualType = (
        ...
    )  # static # readonly
    Scan: Agilent.MassSpectrometry.DataAnalysis.ActualType = ...  # static # readonly

class ActualsConstants:  # Class
    Actual: str = ...  # static # readonly
    ActualId: str = ...  # static # readonly
    Actuals: str = ...  # static # readonly
    ActualsType: str = ...  # static # readonly
    Category: str = ...  # static # readonly
    DataType: str = ...  # static # readonly
    DeviceId: str = ...  # static # readonly
    DeviceMethod: str = ...  # static # readonly
    DeviceType: str = ...  # static # readonly
    DisplayDigits: str = ...  # static # readonly
    DisplayEffects: str = ...  # static # readonly
    DisplayFormat: str = ...  # static # readonly
    DisplayName: str = ...  # static # readonly
    Unit: str = ...  # static # readonly

class AdductDeductStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Adduct: Agilent.MassSpectrometry.DataAnalysis.AdductDeductStatus = (
        ...
    )  # static # readonly
    Deduct: Agilent.MassSpectrometry.DataAnalysis.AdductDeductStatus = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.AdductDeductStatus = (
        ...
    )  # static # readonly

class AlgorithmInfo(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo
):  # Class
    @overload
    def __init__(
        self,
        name: str,
        variationName: str,
        version: str,
        author: str,
        pSets: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IParameterSet
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AlgorithmInfo
    ) -> None: ...
    @overload
    def __init__(
        self,
        name: str,
        variationName: str,
        version: str,
        author: str,
        pSets: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IParameterSet
        ],
        specExtractDetails: Agilent.MassSpectrometry.DataAnalysis.SpectrumExtractDetails,
    ) -> None: ...

class AlgorithmProgressMonitor(
    Agilent.MassSpectrometry.DataAnalysis.ProgressMonitor
):  # Class
    def __init__(
        self,
        notifyProgressDel: Agilent.MassSpectrometry.DataAnalysis.NotifyProgressDelegate,
        algorithm: Agilent.MassSpectrometry.DataAnalysis.IInterruptAlgorithm,
        startPercent: int,
        endPercent: int,
    ) -> None: ...

    MessagePrefix: str

    def StopMonitoringProgress(self) -> None: ...

class AlgorithmType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FindByFormula: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType = (
        ...
    )  # static # readonly
    FindCompounds: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType = (
        ...
    )  # static # readonly
    Integration: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType = (
        ...
    )  # static # readonly
    Masslist: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType = (
        ...
    )  # static # readonly
    UserSpecified: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType = (
        ...
    )  # static # readonly

class AminoAcid(Agilent.MassSpectrometry.DataAnalysis.IAminoAcid):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szSymbolSingleLetter: str,
        szSymbolThreeLetter: str,
        szFormula: str,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    AminoAcidFormula: str
    AminoAcidName: str
    AminoAcidSingleLetterSymbol: str
    AminoAcidThreeLetterSymbol: str
    AminoAcidType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class AminoAcidCaliper(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICaliper,
    Agilent.MassSpectrometry.DataAnalysis.DeltaMassCaliper,
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AminoAcidCaliper
    ) -> None: ...

    MassAssignment: Agilent.MassSpectrometry.DataAnalysis.IsotopicMassAssignment
    MassTolerance: float
    MassWindowType: Agilent.MassSpectrometry.DataAnalysis.E_MASSWINDOWTYPE

class AnalysisMethodLoadOptions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    LoadFromResults: Agilent.MassSpectrometry.DataAnalysis.AnalysisMethodLoadOptions = (
        ...
    )  # static # readonly
    LoadFromWorklist: (
        Agilent.MassSpectrometry.DataAnalysis.AnalysisMethodLoadOptions
    ) = ...  # static # readonly
    UseCurrentlyLoaded: (
        Agilent.MassSpectrometry.DataAnalysis.AnalysisMethodLoadOptions
    ) = ...  # static # readonly

class AnchoredProperties(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AnchoredProperties
    ) -> None: ...

    LinePattern: Agilent.MassSpectrometry.DataAnalysis.LinePattern
    LineWeight: float
    NormalizationInformation: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    PointerColor: System.Drawing.Color
    PointerTip: Agilent.MassSpectrometry.DataAnalysis.PointerTip
    ShowPointer: bool
    TipDataX: float
    TipDataY: float

    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class AnnotationCategory(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Caliper: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory = (
        ...
    )  # static # readonly
    Image: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory = (
        ...
    )  # static # readonly
    Text: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory = (
        ...
    )  # static # readonly

class AnnotationList(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IAnnotationList
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AnnotationList
    ) -> None: ...

    Annotations: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ]  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def CreateAndInit(
        self,
        category: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory,
        iAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...
    def Add(
        self, annotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ) -> None: ...
    def DeleteAll(self) -> None: ...
    def GetAnnotationWithID(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...
    def GetHashCode(self) -> int: ...
    def Delete(
        self, annotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ) -> None: ...

class AnnotationSymbol(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Circle: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly
    Diamond: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly
    Gaussian: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly
    Rectangle: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly
    TriangleDown: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly
    TriangleUp: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol = (
        ...
    )  # static # readonly

class AnnotationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Anchored: Agilent.MassSpectrometry.DataAnalysis.AnnotationType = (
        ...
    )  # static # readonly
    Floating: Agilent.MassSpectrometry.DataAnalysis.AnnotationType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.AnnotationType = (
        ...
    )  # static # readonly

class AppFeatureConfig:  # Class
    Key_AbundanceSaturates: str  # static # readonly
    Key_AccurateMass: str  # static # readonly
    Key_AdcData: str  # static # readonly
    Key_AdvancedFeatures: str = ...  # static # readonly
    Key_Debug: str  # static # readonly
    Key_GcSep: str  # static # readonly
    Key_HardIonization: str  # static # readonly
    Key_Incomplete: str  # static # readonly
    Key_LcMsMassCalRules: str  # static # readonly
    Key_LcSep: str  # static # readonly
    Key_MsLevel1: str  # static # readonly
    Key_MsLevel2: str  # static # readonly
    Key_MsLevel3: str  # static # readonly
    Key_NewMfeMassDefectFilter: str  # static # readonly
    Key_NoSep: str  # static # readonly
    Key_Not_AbundanceSaturates: str  # static # readonly
    Key_Not_AccurateMass: str  # static # readonly
    Key_Not_AdcData: str  # static # readonly
    Key_Not_AdvancedFeatures: str = ...  # static # readonly
    Key_Not_Debug: str  # static # readonly
    Key_Not_GC: str  # static # readonly
    Key_Not_HardIonization: str  # static # readonly
    Key_Not_Incomplete: str  # static # readonly
    Key_Not_LC: str  # static # readonly
    Key_Not_LcMsMassCalRules: str  # static # readonly
    Key_Not_MS1: str  # static # readonly
    Key_Not_MS2: str  # static # readonly
    Key_Not_MS3: str  # static # readonly
    Key_Not_NewMfeMassDefectFilter: str  # static # readonly
    Key_Not_NoChromatography: str  # static # readonly
    Key_Not_OtherChromatography: str  # static # readonly
    Key_Not_PlotTitleHistoryDetail: str  # static # readonly
    Key_Not_ShowChangeIconInUI: str  # static # readonly
    Key_Not_ShowErrorIconInUI: str  # static # readonly
    Key_Not_ShowWarningIconInUI: str  # static # readonly
    Key_Not_SoftIonization: str  # static # readonly
    Key_Not_UnitMass: str  # static # readonly
    Key_Not_UvData: str  # static # readonly
    Key_Null: str  # static # readonly
    Key_OtherSep: str  # static # readonly
    Key_PlotTitleHistoryDetail: str  # static # readonly
    Key_ShowChangeIconInUI: str  # static # readonly
    Key_ShowErrorIconInUI: str  # static # readonly
    Key_ShowWarningIconInUI: str  # static # readonly
    Key_SoftIonization: str  # static # readonly
    Key_UnitMass: str  # static # readonly
    Key_UvData: str  # static # readonly

    AppChangeDelegate: (
        Agilent.MassSpectrometry.DataAnalysis.AppFeatureConfigChangeDelegate
    )  # static
    AppInitializeDelegate: (
        Agilent.MassSpectrometry.DataAnalysis.AppFeatureConfigInitializeDelegate
    )  # static
    Configuration: (
        Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfig
    )  # static # readonly

    @staticmethod
    def Clear() -> None: ...

class AppFeatureConfigChangeDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    def BeginInvoke(
        self,
        featureConfig: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfig,
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        featureConfig: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfig,
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    ) -> bool: ...

class AppFeatureConfigInitializeDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    def BeginInvoke(
        self,
        featureConfig: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfig,
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        featureConfig: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfig,
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    ) -> bool: ...

class AppFeatureConfigKeyCode(
    Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode
):  # Class
    def __init__(self, maxPosFlags: int) -> None: ...

    Value: Any  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def ValueEquals(self, otherValue: Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    def FlagState(self, flagIdx: int) -> bool: ...

class ApseBackgroundSource(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DesignatedBackgroundSpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource
    ) = ...  # static # readonly
    DesignatedTimeRange: Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource = (
        ...
    )  # static # readonly
    PeakEnd: Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource = (
        ...
    )  # static # readonly
    PeakStart: Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource = (
        ...
    )  # static # readonly
    PeakStartAndEnd: Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource = (
        ...
    )  # static # readonly

class ArcherBinaryWriter(System.IDisposable, System.IO.BinaryWriter):  # Class
    def __init__(
        self,
        fileStream: System.IO.FileStream,
        fileType: Agilent.MassSpectrometry.DataAnalysis.FileType,
        fileVersion: int,
    ) -> None: ...
    def Close(self) -> None: ...

class AreaSumSliceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    End: Agilent.MassSpectrometry.DataAnalysis.AreaSumSliceType = (
        ...
    )  # static # readonly
    Start: Agilent.MassSpectrometry.DataAnalysis.AreaSumSliceType = (
        ...
    )  # static # readonly
    StartUseNegativeArea: Agilent.MassSpectrometry.DataAnalysis.AreaSumSliceType = (
        ...
    )  # static # readonly

class AsymmetricRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.RangeBase,
    Agilent.MassSpectrometry.DataAnalysis.IAsymmetricRange,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, center: float, lowSpan: float, highSpan: float) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AsymmetricRange
    ) -> None: ...

    Center: float
    End: float  # readonly
    HighSpan: float
    LowSpan: float
    Start: float  # readonly

    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IAsymmetricRange: ...

class AttributDefinitionOrder(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AbbreviatedName: Agilent.MassSpectrometry.DataAnalysis.AttributDefinitionOrder = (
        ...
    )  # static # readonly
    CategoryAndDisplayName: (
        Agilent.MassSpectrometry.DataAnalysis.AttributDefinitionOrder
    ) = ...  # static # readonly
    DisplayName: Agilent.MassSpectrometry.DataAnalysis.AttributDefinitionOrder = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.AttributDefinitionOrder = (
        ...
    )  # static # readonly

class AttributeDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self, resourcePrefix: str) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    ) -> None: ...
    @overload
    def __init__(
        self,
        resourcePrefix: str,
        source: Dict[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
            Agilent.MassSpectrometry.DataAnalysis.ResultAttributeInfo,
        ],
    ) -> None: ...

    AttributeOrder: Agilent.MassSpectrometry.DataAnalysis.AttributDefinitionOrder
    Dictionary: Dict[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        Agilent.MassSpectrometry.DataAnalysis.ResultAttributeInfo,
    ]  # readonly

    @overload
    def FindResourceString(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        strType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> str: ...
    @overload
    def FindResourceString(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        strType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        debugString: str,
    ) -> str: ...
    def SetConfigTag(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        configTag: str,
    ) -> None: ...
    @overload
    def Add(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        category: str,
        attrType: System.Type,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        asPeakLabel: bool,
        asKey: bool,
        forTable: bool,
        isComputed: bool,
    ) -> None: ...
    @overload
    def Add(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        category: str,
        attrType: System.Type,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        asPeakLabel: bool,
        asKey: bool,
        forTable: bool,
    ) -> None: ...
    @overload
    def Add(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        attrType: System.Type,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        asPeakLabel: bool,
        asKey: bool,
    ) -> None: ...
    @overload
    def Add(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        attrType: System.Type,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        asPeakLabel: bool,
        asKey: bool,
        forTable: bool,
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions: ...

class AutoDataTranslator(System.IDisposable):  # Class
    def __init__(self, dataFile: str) -> None: ...

    FileName: str  # readonly
    FileType: (
        Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
    )  # readonly
    GCMSTranslatorFullPathName: str  # static
    LCMSTranslatorFullPathName: str  # static
    OpenLABTranslatorFullPathName: str  # static
    OutputDirectory: str
    TranslatorArguments: str
    TranslatorFullPathName: str

    @staticmethod
    def IsLCMSTranslatorInstalled() -> bool: ...
    def AbortTranslation(self) -> None: ...
    def WaitForTranslationFinished(
        self, timeoutInSeconds: int, abortIfNotFinished: bool
    ) -> bool: ...
    @staticmethod
    def IsGCMSTranslatorInstalled() -> bool: ...
    def StartTranslation(self) -> None: ...
    def Dispose(self) -> None: ...
    @overload
    @staticmethod
    def IsFileTranslated(dataFile: str) -> bool: ...
    @overload
    @staticmethod
    def IsFileTranslated() -> bool: ...
    def IsTranslatorInstalled(self) -> bool: ...

    # Nested Types

    class DataFileType(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        GCMSChemStation: (
            Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
        ) = ...  # static # readonly
        LCMSChemStation: (
            Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
        ) = ...  # static # readonly
        OpenLABarchive: (
            Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
        ) = ...  # static # readonly
        Undefined: (
            Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
        ) = ...  # static # readonly
        Varian: (
            Agilent.MassSpectrometry.DataAnalysis.AutoDataTranslator.DataFileType
        ) = ...  # static # readonly

class AutoMsMsCpdDetails:  # Class
    ...

class AutoScaleDeconvolution:  # Class
    def __init__(
        self, chromData: Agilent.MassSpectrometry.DataAnalysis.ChromData
    ) -> None: ...
    def Run(
        self,
        chromRegion: Agilent.MassSpectrometry.DataAnalysis.ChromRegion,
        peaks: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...

class Averagine(Biochemistry.CompositionModel):  # Class
    def __init__(self) -> None: ...

    A2DominatingMass: float  # readonly
    CarbonMassFractionRange: Mathematics.RangeDouble  # readonly

    def GetIsotopeMassOffset(self, isotopeIndex: int, m0: float) -> float: ...

class BDAAcquisitionData(
    Agilent.MassSpectrometry.DataAnalysis.IBDAAcquisitionData
):  # Class
    def __init__(self) -> None: ...

class BDAActualData(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IBDAActualData
):  # Class
    def __init__(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAActualData: ...

class BDAChromData(
    Agilent.MassSpectrometry.DataAnalysis.IBDAChromData,
    Agilent.MassSpectrometry.DataAnalysis.ILwXyData,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BDAChromData
    ) -> None: ...

    ChromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter
    DeviceIDInfo: int  # readonly
    IsICPData: bool  # readonly
    MSOverallScanRecordInformation: (
        Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo
    )  # readonly
    MeasuredMassRange: Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection
    MeasuredMassRangeInfo: (
        Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection
    )  # readonly
    XSpecificData: Agilent.MassSpectrometry.DataAnalysis.XSpecificData  # readonly

    @staticmethod
    def CreateBDAChromData(
        xArray: List[float],
        yArray: List[float],
        chromFilter: Agilent.MassSpectrometry.DataAnalysis.BDAChromFilter,
        overallScanRecInfo: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromData: ...
    def Add(
        self, addend: Agilent.MassSpectrometry.DataAnalysis.BDAChromData
    ) -> Agilent.MassSpectrometry.DataAnalysis.BDAChromData: ...
    def GetYAxisInfo(
        self,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        valueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        label: str,
    ) -> None: ...
    def TrimXRange(self, minX: float, maxX: float) -> None: ...
    def GetXAxisInfo(
        self,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        valueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromData: ...
    def Smooth(
        self,
        smoothingFunction: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType,
        windowWidth: int,
        gaussianWidth: float,
    ) -> None: ...

class BDAChromFilter(
    Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter, System.ICloneable
):  # Class
    def __init__(self) -> None: ...

    SmoothFunction: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType
    SmoothFunctionWidth: int
    SmoothGaussianWidth: float
    Smoothed: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter: ...

class BDAChromFilterIcp(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter,
    Agilent.MassSpectrometry.DataAnalysis.BDAChromFilter,
    Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilterIcp,
):  # Class
    def __init__(self) -> None: ...

class BDADataAccess(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.IBDAUserCalibration,
    Agilent.MassSpectrometry.DataAnalysis.IBDAActuals,
    Agilent.MassSpectrometry.DataAnalysis.IBDADataAccess,
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    Agilent.MassSpectrometry.DataAnalysis.IBDAEvents,
    Agilent.MassSpectrometry.DataAnalysis.IBDASample,
    Agilent.MassSpectrometry.DataAnalysis.IBDAReadChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IBDAReadSpectra,
):  # Class
    def __init__(self) -> None: ...

    CancelIndicator: Agilent.MassSpectrometry.DataAnalysis.CancelIndicator

    def GetActualsdDefinitionForTimeRange(
        self, startTime: float, endTime: float
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IBDAActualData
    ]: ...
    def GetTimeSegmentsIDArray(self) -> List[int]: ...
    def GetActualsForTimeRange(
        self, startTime: float, endTime: float
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IBDAActualData
    ]: ...
    @overload
    @staticmethod
    def GetSampleData(
        strFileName: str, category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    ) -> System.Data.DataSet: ...
    @overload
    @staticmethod
    def GetSampleData(
        strFileName: str,
        category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory,
        internalNameArray: List[str],
        displayNameArray: List[str],
        displayValueArray: List[str],
    ) -> None: ...
    @staticmethod
    def GetMsScanDirSize(filename: str) -> int: ...
    def GetDeviceTable(self) -> System.Data.DataTable: ...

    ProgressEvent: (
        Agilent.MassSpectrometry.DataAnalysis.BDAProgressEventHandler
    )  # Event

class BDAFileInformation(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    ) -> None: ...
    def Close(self) -> None: ...
    @staticmethod
    def CombineFileInformation(
        inArray: List[Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation: ...

class BDAMSScanFileInformation(
    Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanFileInformation,
    Iterable[Any],
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanFileInformation
    ) -> None: ...
    def GetEnumerator(self) -> Iterator[Any]: ...

    # Nested Types

    class MSScanFileInformationIterator(Iterator[Any]):  # Class
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(
            self, info: Agilent.MassSpectrometry.DataAnalysis.BDAMSScanFileInformation
        ) -> None: ...

        Current: (
            Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation
        )  # readonly

        def MoveNext(self) -> bool: ...
        def Reset(self) -> None: ...

class BDAMSScanTypeInformation(
    Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation
    ) -> None: ...

class BDAMultiEicParameters(
    Agilent.MassSpectrometry.DataAnalysis.IBDAMultiEicParameters
):  # Class
    def __init__(self) -> None: ...

class BDAPeak(Agilent.MassSpectrometry.DataAnalysis.IBDAPeak):  # Class
    def __init__(self) -> None: ...

class BDAPeakSpecFilter(
    Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter
    ) -> None: ...

class BDAPeakSpectrumParameters(
    Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpectrumParameters
):  # Class
    def __init__(self) -> None: ...

class BDAProgressEventArgs(System.EventArgs):  # Class
    @overload
    def __init__(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        stageMessage: str,
        percentComplete: int,
        canCancelTask: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        stageMessage: str,
        percentComplete: int,
    ) -> None: ...

    CanCancelTask: bool  # readonly
    PercentComplete: int  # readonly
    ProgressStage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage  # readonly
    StageMessage: str  # readonly

class BDAProgressEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.BDAProgressEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.BDAProgressEventArgs,
    ) -> None: ...

class BDARangeCollection(
    List[Any],
    System.Collections.CollectionBase,
    Iterable[Any],
    Sequence[Any],
    System.ICloneable,
):  # Class
    def __init__(self) -> None: ...
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def __setitem__(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> None: ...
    def Sort(
        self, direction: Agilent.MassSpectrometry.DataAnalysis.SortDirection
    ) -> None: ...
    def Contains(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> bool: ...
    def CopyTo(
        self, array: List[Agilent.MassSpectrometry.DataAnalysis.IRange], index: int
    ) -> None: ...
    def CopyToClone(
        self, array: List[Agilent.MassSpectrometry.DataAnalysis.IRange], index: int
    ) -> None: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection
    ) -> bool: ...
    @overload
    def Add(self, range: Agilent.MassSpectrometry.DataAnalysis.IRange) -> int: ...
    @overload
    def Add(
        self, rangecoll: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    ) -> None: ...
    def Reverse(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def Remove(self, index: int) -> None: ...
    def IsEmpty(self) -> bool: ...
    def SetEmpty(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection: ...
    @overload
    def AddClone(self, range: Agilent.MassSpectrometry.DataAnalysis.IRange) -> int: ...
    @overload
    def AddClone(
        self, rangecoll: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    ) -> None: ...
    def CloneSetUnits(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection: ...

class BDASampleData(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IBDASampleData
):  # Class
    def __init__(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDASampleData: ...

class BDASpecData(
    Agilent.MassSpectrometry.DataAnalysis.ILwXyData,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BDASpecData
    ) -> None: ...

    AcquiredTimeRangesInfo: (
        Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection
    )  # readonly
    Calibration: WtcCalibration
    DeviceIDInfo: int  # readonly
    FileXSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType  # readonly
    FilteredScanCountInfo: int  # readonly
    IsDataInMassUnits: bool  # readonly
    IsEmptySpectrumInfo: bool  # readonly
    IsICPData: bool  # readonly
    IsNullMSSpectrumFormat: bool  # readonly
    MSOverallScanRecordInformation: (
        Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo
    )  # readonly
    MSSpectrumFormatXSamplingType: (
        Agilent.MassSpectrometry.DataAnalysis.XSamplingType
    )  # readonly
    MeasuredMassRangeInfo: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    OverallAcqTimeRangeInfo: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    SelectedIonsInfo: System.Collections.Generic.List[float]  # readonly
    SpectrumTypeInfo: Agilent.MassSpectrometry.DataAnalysis.SpecType  # readonly
    StorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    XArrayNotExpanded: List[float]  # readonly
    XSpecificData: Agilent.MassSpectrometry.DataAnalysis.XSpecificData  # readonly

    def GetYAxisInfo(
        self,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        valueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def GetPointDataValueTypeForIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataValueType: ...
    def GetXAxisInfo(
        self,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        valueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def SetData(self, arrayX: List[float], arrayY: List[float]) -> None: ...
    def Clear(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    def IsDeviceOfTypeTOF(self) -> bool: ...

class BDASpecFilter(
    Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BDASpecFilter
    ) -> None: ...

    ScanMethodNumber: int

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter: ...

class BDASpecFilterIcp(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilterIcp,
    Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter,
    Agilent.MassSpectrometry.DataAnalysis.BDASpecFilter,
):  # Class
    def __init__(self) -> None: ...

class BDASpecPair(Agilent.MassSpectrometry.DataAnalysis.IBDASpecPair):  # Class
    def __init__(self) -> None: ...

class BLPickFromRangeType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Clear: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Left: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range1: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range2: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range3: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range4: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range5: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range6: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range7: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range8: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Range9: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly
    Right: Agilent.MassSpectrometry.DataAnalysis.BLPickFromRangeType = (
        ...
    )  # static # readonly

class BUF:  # Class
    @staticmethod
    def RangeClone(
        value_: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    @overload
    @staticmethod
    def IsSinglePoint(
        rangecoll: Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsSinglePoint(range: Agilent.MassSpectrometry.DataAnalysis.IRange) -> bool: ...
    @staticmethod
    def RangeArrayClone(
        value_: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRange]: ...
    @staticmethod
    def Round(digits: int, dval: float) -> float: ...
    @staticmethod
    def ThrowUserMessageError(
        resourceStringKey: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages,
        messageParameters: List[Any],
    ) -> None: ...
    @staticmethod
    def DumpTrace(e: System.Exception) -> None: ...
    @staticmethod
    def DumpTraceWithStack(e: System.Exception) -> None: ...
    @staticmethod
    def FormatMessageString(
        formatStringKey: str, messageParameters: List[Any]
    ) -> str: ...

class BackgroundSourceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DesignatedBackgroundSpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    ) = ...  # static # readonly
    DesignatedTimeRange: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType = (
        ...
    )  # static # readonly
    PeakEnd: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType = (
        ...
    )  # static # readonly
    PeakStart: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType = (
        ...
    )  # static # readonly
    PeakStartAndEnd: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType = (
        ...
    )  # static # readonly

class BaseCommonMessage(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NoNoisePoints: Agilent.MassSpectrometry.DataAnalysis.BaseCommonMessage = (
        ...
    )  # static # readonly

class BaseDataAccessMessages(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CantOverwriteFactoryMethod: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    ContentsFile_Invalid: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    CorruptedScans: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    Datafile_Invalid: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    Datafile_Locked: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    Datafile_NoData: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    Datafile_NoWorklistFound_AcqCompleted: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    Datafile_NoWorklistFound_AcqIncomplete: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    Datafile_OpenError: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    Datafile_ReadCompleteError: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    ErrorLoadingXMLFile: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    Matching_Spectrum_Error: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    No_MSData: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    No_MSNonMSData: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    No_UVData: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    SamplingType_NotSupported: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly
    WorklistFile_Old: Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages = (
        ...
    )  # static # readonly
    ZeroSpectrumExported: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataAccessMessages
    ) = ...  # static # readonly

class BaseDataObjectsUtility:  # Class
    @staticmethod
    def GetUnitForValueType(
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...
    @staticmethod
    def GetSpectrumXUncertainty(
        msStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode,
        overallScanRecInfo: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo,
        calParams: WtcCalibration,
        tofProfileValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        isTofDevice: bool,
        uValue: float,
        uType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType,
    ) -> None: ...
    @overload
    @staticmethod
    def GetSpectrumXSamplingType(
        msStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode,
        fileSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType,
        xValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        overallScanRecInfo: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo,
        isTofDevice: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.XSamplingType: ...
    @overload
    @staticmethod
    def GetSpectrumXSamplingType(
        msStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode,
        fileSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType,
        xValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        overallScanRecInfo: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo,
        isTofDevice: bool,
        isICPDataFile: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.XSamplingType: ...

class BaseDataWriter(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.IBaseNonMSDataWriter,
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    Agilent.MassSpectrometry.DataAnalysis.IBaseDataWriter,
):  # Class
    def __init__(self) -> None: ...

    PERIODIC_ACTUALS_FILEVERSION: int = ...  # static # readonly
    RUNTIME_CALIB_FILEVERSION: int = ...  # static # readonly
    SCAN_ACTUALS_FILEVERSION: int = ...  # static # readonly
    XSPECIFIC_MSSCAN_FILEVERSION: int = ...  # static # readonly

    AcqDataPath: str  # readonly
    DataFilePathName: str  # readonly
    GenerateChecksum: bool
    GenerateIconFile: bool
    IsMSDataSupported: bool  # readonly
    PeriodicActualIDArray: List[int]  # readonly
    ProfileDataWrittenByCaller: bool

    def WritePeriodicActuals(
        self, periodicActuals: List[Agilent.MassSpectrometry.DataAnalysis.MSActualInfo]
    ) -> None: ...
    def RegenerateChecksum(self) -> None: ...
    def EndWritingData(self) -> None: ...
    def AppendSample(
        self, sampleInfo: Agilent.MassSpectrometry.DataAnalysis.Sample
    ) -> None: ...
    def WriteTimeSegments(
        self, msTimeSegments: Agilent.MassSpectrometry.DataAnalysis.MSTimeSegments
    ) -> None: ...
    def Util_DefaultCalibCoeffToTofCal(
        self, cc: Agilent.MassSpectrometry.DataAnalysis.DefaultCalibCoeff
    ) -> ITofCal: ...
    def AddChromatogram(
        self,
        Name: str,
        Description: str,
        XStart: float,
        XDelta: float,
        YAxisLabel: str,
        YArray: List[float],
    ) -> None: ...
    def AddSignal(
        self,
        Name: str,
        Description: str,
        XStart: float,
        XDelta: float,
        YAxisLabel: str,
        YArray: List[float],
    ) -> None: ...
    def EndStoringData(self) -> None: ...
    def BeginWritingData(
        self, msdevice: Agilent.MassSpectrometry.DataAnalysis.Device
    ) -> None: ...
    def WriteSample(
        self, sampleInfo: Agilent.MassSpectrometry.DataAnalysis.Sample
    ) -> None: ...
    def Util_RunTimeCalibCoeffToTofCal(
        self, cc: Agilent.MassSpectrometry.DataAnalysis.RunTimeCalibCoeff
    ) -> ITofCal: ...
    def Util_TofCalToRunTimeCalibCoeff(
        self, calibration: ITofCal
    ) -> Agilent.MassSpectrometry.DataAnalysis.RunTimeCalibCoeff: ...
    @overload
    def WriteDefaultCalibration(self, calibration: ITofCal) -> int: ...
    @overload
    def WriteDefaultCalibration(
        self, calCoeff: Agilent.MassSpectrometry.DataAnalysis.DefaultCalibCoeff
    ) -> int: ...
    def CreateDataFileForNonMSTranslation(
        self, dataFilePath: str, bOverwrite: bool
    ) -> None: ...
    def WriteScanHeader(
        self, scanheaderInfo: Agilent.MassSpectrometry.DataAnalysis.ScanHeader
    ) -> None: ...
    @overload
    def CreateDataFile(
        self, dataFileName: str, schemaFile: str, bOverwrite: bool
    ) -> None: ...
    @overload
    def CreateDataFile(
        self,
        dataFileName: str,
        schemaFile: str,
        msscanXSpecificSchemaFileName: str,
        bOverwrite: bool,
    ) -> None: ...
    def BeginWritingNonMSDataForDevice(
        self, device: Agilent.MassSpectrometry.DataAnalysis.Device
    ) -> None: ...
    def EndWritingNonMSDataForDevice(self) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
    ) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
        msscanXSpecificData: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            List[Agilent.MassSpectrometry.DataAnalysis.MSScan_XSpecific]
        ],
    ) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
        scanActuals: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            List[Agilent.MassSpectrometry.DataAnalysis.MSActualInfo]
        ],
        runtimeCalibration: List[
            Agilent.MassSpectrometry.DataAnalysis.RunTimeCalibCoeff
        ],
    ) -> None: ...
    def AddSpectrum(
        self, ScanTime: float, SamplingPeriod: float, XStart: float, YArray: List[float]
    ) -> None: ...
    @overload
    def WriteActualDefinitions(
        self, actualDefintions: List[Agilent.MassSpectrometry.DataAnalysis.MSActualDef]
    ) -> None: ...
    @overload
    def WriteActualDefinitions(self, actualDefintionsXmlFile: str) -> None: ...
    def BeginStoringData(
        self, contentsInfo: Agilent.MassSpectrometry.DataAnalysis.Contents
    ) -> None: ...
    def WriteTimeSegmentXSpecificData(
        self,
        mstsXSpecificData: List[Agilent.MassSpectrometry.DataAnalysis.MSTS_XSpecific],
    ) -> None: ...

class BaseDataWriterMessages(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CHECKSUM_WARNING: Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages = (
        ...
    )  # static # readonly
    CUSTOMICON_WARNING: Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages = (
        ...
    )  # static # readonly
    ERR_FRAMEHEADER: Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages = (
        ...
    )  # static # readonly
    ERR_SCANHEADER: Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages = (
        ...
    )  # static # readonly
    InvalidDataFile: Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages = (
        ...
    )  # static # readonly
    SCAN_HEADER_NOT_WRITTEN: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages
    ) = ...  # static # readonly
    UnSupported_MSStorage: (
        Agilent.MassSpectrometry.DataAnalysis.BaseDataWriterMessages
    ) = ...  # static # readonly

class BaseMsUtilsMessage(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NotEnoughArtificialAtomsToSubtract: (
        Agilent.MassSpectrometry.DataAnalysis.BaseMsUtilsMessage
    ) = ...  # static # readonly
    NotEnoughAtomsToSubtract: (
        Agilent.MassSpectrometry.DataAnalysis.BaseMsUtilsMessage
    ) = ...  # static # readonly

class BaseNestedTable(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Generic[I, T],
    Agilent.MassSpectrometry.DataAnalysis.CoreList[I],
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Sequence[I],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Iterable[I],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[I],
    Iterable[Any],
    List[I],
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        attrDefs: Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions,
        unitDict: Agilent.MassSpectrometry.DataAnalysis.UnitDictionary,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BaseNestedTable
    ) -> None: ...

    LastID: int
    ValueDictionary: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttributeValueDictionary
    )  # readonly

class BaseUtilities:  # Class
    HIGH_RESOLUTION_CHRONOS_MODELNUMBER: str  # static # readonly
    HIGH_RESOLUTION_QTOF_MODELNUMBER1: str  # static # readonly
    HIGH_RESOLUTION_QTOF_MODELNUMBER2: str  # static # readonly

    @staticmethod
    def GetResourceStringForResourceManager(
        fullKey: str, localized: bool, rm: System.Resources.ResourceManager
    ) -> str: ...
    @staticmethod
    def GetEnumStringEx(
        enumValue: Any,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        casing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
        localized: bool,
        resourceKey: str,
        resourceAssembly: str,
    ) -> str: ...
    @overload
    @staticmethod
    def GetEnumString(enumValue: Any, localized: bool) -> str: ...
    @overload
    @staticmethod
    def GetEnumString(
        enumValue: Any,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        casing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
        localized: bool,
    ) -> str: ...
    @staticmethod
    def GetScanTypesAllMSAndAllMSNExpanded(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        isScanTypeAll: bool,
        arrMSScanType: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.MSScanType
        ],
        arrMSMSScanType: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.MSScanType
        ],
    ) -> None: ...
    @staticmethod
    def XmlStreamWriter(
        stream: System.IO.Stream, omitXmlDeclaration: bool
    ) -> System.Xml.XmlWriter: ...
    @staticmethod
    def StreamToString(stream: System.IO.Stream) -> str: ...
    @overload
    @staticmethod
    def GetResourceString(
        basicKey: str,
        keyQualifier: str,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        stringCasing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
        localized: bool,
    ) -> str: ...
    @overload
    @staticmethod
    def GetResourceString(fullKey: str, localized: bool) -> str: ...
    @overload
    @staticmethod
    def GetMSScanTypes(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ]: ...
    @overload
    @staticmethod
    def GetMSScanTypes(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        bExpandAllMSType: bool,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ]: ...
    @staticmethod
    def XmlStreamReader(
        stream: System.IO.Stream, conformance: System.Xml.ConformanceLevel
    ) -> System.Xml.XmlReader: ...
    @staticmethod
    def GetAnalysisNameFromPath(analysisPath: str) -> str: ...
    @staticmethod
    def FormatLong(
        lValue: int,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        numDigits: int,
    ) -> str: ...
    @staticmethod
    def GetFormatString(
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        numDigits: int,
    ) -> str: ...
    @staticmethod
    def GetDeviceTypeFlags(
        testValue: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        bMSType: bool,
        bNonMSType: bool,
    ) -> None: ...
    @overload
    @staticmethod
    def GetMSMSScanTypes(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ]: ...
    @overload
    @staticmethod
    def GetMSMSScanTypes(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        bExpandAllMSNType: bool,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ]: ...
    @staticmethod
    def GetCompositeFormatString(
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        numDigits: int,
    ) -> str: ...
    @overload
    @staticmethod
    def GetResourceObjectForAssembly(
        assembly: System.Reflection.Assembly, fullKey: str, localized: bool
    ) -> Any: ...
    @overload
    @staticmethod
    def GetResourceObjectForAssembly(
        assembly: System.Reflection.Assembly,
        fullKey: str,
        localized: bool,
        resourceManager: System.Resources.ResourceManager,
    ) -> Any: ...
    @staticmethod
    def IsScanTypeMixedMSMS(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> bool: ...
    @staticmethod
    def GetResourceStringForAssemblyEx(
        assembly: System.Reflection.Assembly,
        basicKey: str,
        keyQualifier: str,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        stringCasing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
        localized: bool,
        resourceKey: str,
    ) -> str: ...
    @staticmethod
    def GetChromTypeFlags(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
        bMSType: bool,
        bNonMSSignalType: bool,
        bNonMSSpecType: bool,
    ) -> None: ...
    @staticmethod
    def ParseCsvString(s: str) -> List[str]: ...
    @staticmethod
    def GetIonModes(
        ionMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    ]: ...
    @staticmethod
    def IsNonMSSpectrumChromType(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
    ) -> bool: ...
    @staticmethod
    def FilterPeaks(
        xArray: List[float],
        yArray: List[float],
        absThreshold: float,
        relativeThresholdPct: float,
        limitPeaks: bool,
        maxPeaks: int,
    ) -> None: ...
    @staticmethod
    def IsMSChromType(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
    ) -> bool: ...
    @staticmethod
    def GetResourceObjectForResourceManager(
        fullKey: str, localized: bool, rm: System.Resources.ResourceManager
    ) -> Any: ...
    @staticmethod
    def IsScanTypeMixedMS(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> bool: ...
    @staticmethod
    def GetAppConfigSetting(keyName: str, defaultValue: T) -> T: ...
    @staticmethod
    def StripPathToExtension(path: str, extension: str) -> str: ...
    @staticmethod
    def StringToStream(source: str) -> System.IO.MemoryStream: ...
    @staticmethod
    def IsScanTypeMS(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> bool: ...
    @staticmethod
    def IsScanTypeMixedMSMS_MS(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> bool: ...
    @staticmethod
    def IsSpectrumBasedChromType(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
    ) -> bool: ...
    @overload
    @staticmethod
    def GetResourceStringForAssembly(
        assembly: System.Reflection.Assembly,
        basicKey: str,
        keyQualifier: str,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
        stringCasing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
        localized: bool,
    ) -> str: ...
    @overload
    @staticmethod
    def GetResourceStringForAssembly(
        assembly: System.Reflection.Assembly, fullKey: str, localized: bool
    ) -> str: ...
    @overload
    @staticmethod
    def GetResourceStringForAssembly(
        assembly: System.Reflection.Assembly,
        fullKey: str,
        localized: bool,
        resourceManager: System.Resources.ResourceManager,
    ) -> str: ...
    @staticmethod
    def GetMethodNameFromPath(methodPath: str) -> str: ...
    @staticmethod
    def GetStoredDataTypes(
        storedType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ]: ...
    @staticmethod
    def GetScanTypes(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        isScanTypeAll: bool,
        arrMSScanType: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.MSScanType
        ],
        arrMSMSScanType: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.MSScanType
        ],
    ) -> None: ...
    @overload
    @staticmethod
    def Round(stepSize: float, val: float) -> float: ...
    @overload
    @staticmethod
    def Round(digits: int, dval: float) -> float: ...
    @staticmethod
    def DoesDeviceStoreUVSpectra(
        testValue: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
    ) -> bool: ...
    @staticmethod
    def MapScanTypeToMSLevel(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MSLevel: ...
    @staticmethod
    def IsScanTypeMSMS(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> bool: ...
    @staticmethod
    def IsNonMSChromType(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
    ) -> bool: ...
    @staticmethod
    def IsNonMSSignalChromType(
        testValue: Agilent.MassSpectrometry.DataAnalysis.ChromType,
    ) -> bool: ...
    @staticmethod
    def FormatDouble(
        dValue: float,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        numDigits: int,
    ) -> str: ...

class BaseXYArrayStore(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    DataUnits: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    ForcedZeroYMin: bool
    UseInterpolated: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.BaseXYArrayStore: ...

class BaselineCorrectionType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Advanced: Agilent.MassSpectrometry.DataAnalysis.BaselineCorrectionType = (
        ...
    )  # static # readonly
    Classical: Agilent.MassSpectrometry.DataAnalysis.BaselineCorrectionType = (
        ...
    )  # static # readonly
    NoPenetration: Agilent.MassSpectrometry.DataAnalysis.BaselineCorrectionType = (
        ...
    )  # static # readonly

class BaselinePreferenceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BaselineDrop: Agilent.MassSpectrometry.DataAnalysis.BaselinePreferenceType = (
        ...
    )  # static # readonly
    Tangent: Agilent.MassSpectrometry.DataAnalysis.BaselinePreferenceType = (
        ...
    )  # static # readonly

class BatchExtAlgorithmType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FindByFormula: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType = (
        ...
    )  # static # readonly
    FindByLMFERecursion: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType = (
        ...
    )  # static # readonly
    FindByMFE: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType = (
        ...
    )  # static # readonly
    FindByRecursion: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType = (
        ...
    )  # static # readonly

class BatchExtractorFileFilter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileFilter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
        ],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BatchExtractorFileFilter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileFilter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileFilter: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
        ],
    ) -> bool: ...

class BatchExtractorFileSelect(
    Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        SelectedFile: str,
        chkValue: bool,
        SampleGroup: System.Collections.Generic.List[str],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BatchExtractorFileSelect
    ) -> None: ...

    AutoShow: bool
    FileName: str
    SampleGroups: System.Collections.Generic.List[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect: ...

class BdaApseParameters:  # Class
    def __init__(self) -> None: ...

    AllowedFgXLimits: List[float]
    BdaApseParms: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter
    BdaBgSpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    BdaFgSpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    BgXLimits1: List[float]
    BgXLimits2: List[float]
    DesiredFgXLimits: List[float]
    GetTofInMzUnits: bool

class BdaMsFileAccess:  # Class
    @staticmethod
    def FileIsAMassHunterFile(dataFilePath: str) -> bool: ...
    @staticmethod
    def FileIsAMassHunterImsFile(dataFilePath: str) -> bool: ...
    @staticmethod
    def GetMsScanInfoAccessor(
        dataFilePath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsScanInfoAccess: ...
    @staticmethod
    def GetImsFileAccessor(
        dataFilePath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaImsFileAccess: ...

class BdaRegressionTest:  # Class
    ChromatogramLogFolder: str  # static
    DoChromatogramLogging: bool  # static

    @staticmethod
    def LogChromatogram(
        srcFilePath: str,
        originalFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter,
        excludeRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
        chrom: Agilent.MassSpectrometry.DataAnalysis.IBDAChromData,
    ) -> None: ...

class BdaSpecMath:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetSpectrumXSamplingType(
        msStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode,
        fileSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType,
        xValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        overallScanRecInfo: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo,
        isTofDevice: bool,
        isICPDataFile: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.XSamplingType: ...
    def Add(
        self,
        op1: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        op2: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    def Subtract(
        self,
        op1: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        op2: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        suppressNegative: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    def Threshold(
        self, op1: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData, threshold: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    def ZeroEmpty(
        self,
        op1: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        addBoundingValues: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...

class BinaryFileInfo:  # Class
    def __init__(self) -> None: ...
    def GetScanData(
        self,
        spectrumFormatId: int,
        pointValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> Any: ...
    def Initialize(self) -> None: ...
    @overload
    def SetScanData(
        self,
        spectrumFormatId: int,
        pointValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dataArray: Any,
    ) -> None: ...
    @overload
    def SetScanData(
        self,
        spectrumFormatId: int,
        bDummySpectrumFormatData: bool,
        pointValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dataArray: Any,
    ) -> None: ...
    def GetDummyFlagInfo(self, spectrumFormatId: int) -> bool: ...
    def ClearData(self) -> None: ...

class BioAnnotationAction(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Clear: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction = (
        ...
    )  # static # readonly
    Display: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction = (
        ...
    )  # static # readonly

class BoolParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IBoolParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialValue: bool) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.BoolParameter
    ) -> None: ...

    DefaultValue: bool
    Value: bool

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBoolParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBoolParameter: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...

class BoolValueStringDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> str: ...
    def BeginInvoke(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        boolValue: bool,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        boolValue: bool,
    ) -> str: ...

class CalculatedMass(
    Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.CalculatedMass
    ) -> None: ...

class Calibrant:  # Class
    def __init__(self) -> None: ...

    IdName: str
    Mass: float
    StandardUsage: Agilent.MassSpectrometry.DataAnalysis.CnEngine.StandardUsage
    Time: float

    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.Calibrant
    ) -> bool: ...
    def BinaryWrite(self, writer: System.IO.BinaryWriter) -> None: ...
    def BinaryRead(self, reader: System.IO.BinaryReader) -> None: ...
    @staticmethod
    def GetScalingFactors(
        calibrants: Dict[
            Agilent.MassSpectrometry.DataAnalysis.Calibrant,
            List[Agilent.MassSpectrometry.DataAnalysis.ICorrelatableObject],
        ]
    ) -> List[float]: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.Calibrant: ...
    def CalculateDataBlockLength(self) -> int: ...

class CaliperMeasureMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PeakToPeak: Agilent.MassSpectrometry.DataAnalysis.CaliperMeasureMode = (
        ...
    )  # static # readonly
    PointToPoint: Agilent.MassSpectrometry.DataAnalysis.CaliperMeasureMode = (
        ...
    )  # static # readonly

class CaliperSelectionDecorator(
    Agilent.MassSpectrometry.DataAnalysis.ISelectionDecorator
):  # Class
    def __init__(self) -> None: ...

    AnnotationID: int

    def Draw(
        self,
        g: System.Drawing.Graphics,
        pane: Pane,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> None: ...
    def IsHit(
        self,
        xcc: int,
        ycc: int,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGrabHandle: ...

class CaliperType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AminoAcid: Agilent.MassSpectrometry.DataAnalysis.CaliperType = (
        ...
    )  # static # readonly
    DeltaMass: Agilent.MassSpectrometry.DataAnalysis.CaliperType = (
        ...
    )  # static # readonly
    Modification: Agilent.MassSpectrometry.DataAnalysis.CaliperType = (
        ...
    )  # static # readonly

class CancelClickedHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self, callback: System.AsyncCallback, object: Any
    ) -> System.IAsyncResult: ...
    def Invoke(self) -> None: ...

class CancelIndicator:  # Class
    def __init__(self) -> None: ...

    Cancel: bool

    CancelClicked: Agilent.MassSpectrometry.DataAnalysis.CancelClickedHandler  # Event

class CandidateHit:  # Class
    def __init__(
        self,
        spectrumId: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId,
        overlapCount: int,
    ) -> None: ...

    LibraryRetentionIndex: float  # readonly
    LibraryRetentionTime: float  # readonly
    MatchFactor: float  # readonly
    OverlapCount: int  # readonly
    RTPenalty: float  # readonly
    RetentionTimeDifference: float  # readonly
    SpectrumId: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId  # readonly
    TargetRetentionIndex: float  # readonly

class CeCompositeSpectraMakingScheme(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NormedByMaxPeakHeight: (
        Agilent.MassSpectrometry.DataAnalysis.CeCompositeSpectraMakingScheme
    ) = ...  # static # readonly
    NormedBySummedPeakHeight: (
        Agilent.MassSpectrometry.DataAnalysis.CeCompositeSpectraMakingScheme
    ) = ...  # static # readonly
    SimpleAverage: (
        Agilent.MassSpectrometry.DataAnalysis.CeCompositeSpectraMakingScheme
    ) = ...  # static # readonly

class CenterWidthPctRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.RangeBase,
    Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPctRange,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, center: float, widthPct: float) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.CenterWidthPctRange
    ) -> None: ...

    Center: float
    End: float  # readonly
    Start: float  # readonly
    WidthPct: float

    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPctRange: ...

class CenterWidthPpmRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.RangeBase,
    Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPpmRange,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, center: float, widthPpm: float) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.CenterWidthPpmRange
    ) -> None: ...

    Center: float
    End: float  # readonly
    Start: float  # readonly
    WidthPpm: float

    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPpmRange: ...

class CenterWidthRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.RangeBase,
    Agilent.MassSpectrometry.DataAnalysis.ICenterWidthRange,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, center: float, width: float) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.CenterWidthRange
    ) -> None: ...

    Center: float
    End: float  # readonly
    Start: float  # readonly
    Width: float

    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthRange: ...

class ChangeNotifyDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self, callback: System.AsyncCallback, object: Any
    ) -> System.IAsyncResult: ...
    def Invoke(self) -> None: ...

class ChargeStateAssignment(
    Agilent.MassSpectrometry.DataAnalysis.IAssignChargeStates
):  # Class
    def __init__(self) -> None: ...
    def AssignChargeStates(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    ) -> None: ...

class CheckMarkStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Checked: Agilent.MassSpectrometry.DataAnalysis.CheckMarkStatus = (
        ...
    )  # static # readonly
    Unchecked: Agilent.MassSpectrometry.DataAnalysis.CheckMarkStatus = (
        ...
    )  # static # readonly

class ChemDataDictionary(
    Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ChemDataDictionary
    ) -> None: ...

    CustomerHomePath: str  # static # readonly
    DDMergedCustomDataSet: System.Data.DataSet  # readonly
    DDMergedDataSet: System.Data.DataSet  # readonly

    def AddAminoAcid(self, keyAA: str) -> None: ...
    def GetAllDNANucleotideNoNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide]: ...
    def SaveCustomDataDictionary(self) -> None: ...
    def AddLink(self, objLink: Agilent.MassSpectrometry.DataAnalysis.ILink) -> None: ...
    def DeleteReagent(self, deleteItem: str) -> None: ...
    def GetAllAminoAcidNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IAminoAcid]: ...
    def GetModificationCategory(
        self, categoryName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationCategory: ...
    def ModifyLink(
        self, oldName: str, newItem: Agilent.MassSpectrometry.DataAnalysis.ILink
    ) -> None: ...
    def ValidateElements(self, arrElement: List[str]) -> bool: ...
    def GetMatchSetsForSynthetic(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllIntactProteinModification(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IIntactProteinModification]: ...
    def DeleteModification(self, deleteItem: str) -> None: ...
    def CreateCustomDataDictionary(self) -> None: ...
    def GetVarModForOligoNTerm(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModification: ...
    def GetAllModificationCategories(
        self,
    ) -> Iterable[Agilent.MassSpectrometry.DataAnalysis.IModificationCategory]: ...
    def ModifyModificationCategory(
        self, newCategory: Agilent.MassSpectrometry.DataAnalysis.IModificationCategory
    ) -> None: ...
    def GetAllUncategorizedModifications(
        self,
    ) -> Iterable[Agilent.MassSpectrometry.DataAnalysis.IModification]: ...
    def SavePresetDataDictionary(self) -> None: ...
    def DeleteModificationProfile(self, profileID: System.Guid) -> None: ...
    def GetElementListMass(
        self,
        elementList: List[str],
        elementCounts: List[int],
        dMonoMass: float,
        dAvgMass: float,
        dApexMass: float,
    ) -> None: ...
    def RemoveRows(
        self, dTable: System.Data.DataTable, colName: str
    ) -> System.Data.DataTable: ...
    def GetAllRNANucleotideNoNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide]: ...
    def AddModification(
        self, objModification: Agilent.MassSpectrometry.DataAnalysis.IModification
    ) -> None: ...
    def GetAllDNAMutation(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNAPointMutation]: ...
    def DeleteLink(self, deleteItem: str) -> None: ...
    def GetMatchSetsForOligoNucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllLink(self) -> List[Agilent.MassSpectrometry.DataAnalysis.ILink]: ...
    def GetAllDNANucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide]: ...
    def GetAllRNANucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide]: ...
    def GetAllCategoriesForModification(
        self, modificationName: str
    ) -> Iterable[str]: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
    ) -> None: ...
    def BuildTableRelationships(self, ddDataset: System.Data.DataSet) -> None: ...
    def GetMatchSetsForProtein(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllAminoAcid(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IAminoAcid]: ...
    def GetMatchSetsForProteinDigest(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetRNANucleotide(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide: ...
    def LoadDataDictionary(self) -> None: ...
    def GetDataDictionary(self) -> System.Data.DataSet: ...
    def SaveMergedDataDictionary(self) -> None: ...
    def ValidateModifications(self, arrModName: List[str]) -> bool: ...
    def ValidateOligoNucleotideSequence(self, strSeqStringAA: str) -> bool: ...
    def ValidateParseFormula(
        self, formula: str, elements: List[str], counts: List[int]
    ) -> bool: ...
    def GetAllSampleArtifacts(self) -> List[str]: ...
    def GetAminoAcid(
        self, symbolSingleLetter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAminoAcid: ...
    def GetMatchSetsForRNAOligoNucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def UncategorizeModification(self, modificationName: str) -> None: ...
    def GetModsOfAA(self, keyAA: str) -> List[str]: ...
    def AddReagent(
        self, objReagent: Agilent.MassSpectrometry.DataAnalysis.IReagent
    ) -> None: ...
    def ValidateLinks(self, arrLinkName: List[str]) -> bool: ...
    @overload
    def GetModificationProfile(
        self, profileID: System.Guid
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationProfile: ...
    @overload
    def GetModificationProfile(
        self, profileName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationProfile: ...
    def GetPredictedModificationMaxLimit(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPredictedModificationMaxLimit: ...
    @staticmethod
    def GetLatestDictionaryWriteTime() -> System.DateTime: ...
    def GetAllReagent(self) -> List[Agilent.MassSpectrometry.DataAnalysis.IReagent]: ...
    def GetAllModification(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IModification]: ...
    def GetModification(
        self, modName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModification: ...
    def GetAminoAcidCounts(
        self, sequence: str, aaList: System.Collections.SortedList, bSeqValid: bool
    ) -> None: ...
    def ReLoadDataDictionary(self) -> System.Data.DataSet: ...
    def ValidateSequenceAAsNCTerms(
        self, strSeqStringAA: str, arrInvalidAA: System.Collections.ArrayList
    ) -> bool: ...
    def AddModificationProfile(
        self, profile: Agilent.MassSpectrometry.DataAnalysis.IModificationProfile
    ) -> None: ...
    def GetAllFmoc(self) -> List[str]: ...
    def SubtractElementCountsList(
        self,
        targetElementCountsList: System.Collections.SortedList,
        lossElementCountsList: System.Collections.SortedList,
    ) -> None: ...
    def ValidateElement(self, element: str) -> bool: ...
    def ModifyReagent(
        self, oldName: str, newItem: Agilent.MassSpectrometry.DataAnalysis.IReagent
    ) -> None: ...
    def GetSequenceFormula(
        self,
        seqType: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE,
        sequence: List[str],
        bAddNCTerm: bool,
        formula: str,
    ) -> None: ...
    def CalculateElementMass(
        self, symbol: str, monoMass: float, avgMass: float, apexMass: float
    ) -> None: ...
    def GetAllElement(self) -> List[Agilent.MassSpectrometry.DataAnalysis.IElement]: ...
    def DeleteAminoAcid(self, keyAA: str) -> None: ...
    def GetAllTboc(self) -> List[str]: ...
    def BuildForeignKeyConstraints(self, ddDataset: System.Data.DataSet) -> None: ...
    def GetElementCountsList(
        self, formula: str, elementCountsList: System.Collections.SortedList
    ) -> bool: ...
    def GetAllModificationProfiles(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IModificationProfile]: ...
    def CopyTo(
        self, destination: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
    ) -> None: ...
    def GetElement(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IElement: ...
    def Equal(
        self,
        chemDataDictionary: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary,
    ) -> bool: ...
    def GetLink(self, linkName: str) -> Agilent.MassSpectrometry.DataAnalysis.ILink: ...
    def ModifyModification(
        self,
        oldModName: str,
        newMod: Agilent.MassSpectrometry.DataAnalysis.IModification,
    ) -> None: ...
    def ValidateSequenceStringAAs(self, strSeqStringAA: str) -> bool: ...
    def CreatePresetDataDictionary(self) -> None: ...
    def GetFormulaMass(
        self, strFormula: str, dMonoMass: float, dAvgMass: float, dApexMass: float
    ) -> None: ...
    def ModifyModificationProfile(
        self, newProfile: Agilent.MassSpectrometry.DataAnalysis.IModificationProfile
    ) -> None: ...
    def GetReagent(
        self, reagentName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IReagent: ...
    def ComputeDeltaMass(
        self,
        strLossFormula: str,
        strGainFormula: str,
        dDeltaMonoM: float,
        dDeltaAvgM: float,
        dDeltaApexM: float,
    ) -> None: ...
    def GetCustomDataDictionary(self) -> System.Data.DataSet: ...
    def AddElementCountsList(
        self,
        targetElementCountsList: System.Collections.SortedList,
        gainElementCountsList: System.Collections.SortedList,
    ) -> None: ...
    def GetDNANucleotide(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide: ...

class ChemDataDictionaryStore:  # Class
    Dictionary: (
        Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
    )  # static # readonly

    @staticmethod
    def CheckTimeStamp(lastWriteTime: System.DateTime) -> bool: ...

class ChromData(System.IDisposable):  # Class
    @overload
    def __init__(
        self, dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess
    ) -> None: ...
    @overload
    def __init__(
        self,
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        algoFactory: Agilent.MassSpectrometry.DataAnalysis.ICoreAlgorithmFactory,
    ) -> None: ...

    AlgoFactory: Agilent.MassSpectrometry.DataAnalysis.ICoreAlgorithmFactory  # readonly
    ChromPeakFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter  # readonly
    ChromPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks  # readonly
    ChromPeakFinderParams: (
        Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
    )  # readonly
    ChromRegions: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ChromRegion
    ]  # readonly
    DataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess  # readonly
    EICPeakFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter  # readonly
    EICPeakFinderParams: (
        Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
    )  # readonly
    ExtractEICParamSet: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    )  # readonly
    ExtractSpectrumParamSet: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum
    )  # readonly
    IonPolarities: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    ]  # readonly
    IsAccurateMass: bool  # readonly
    MinRequiredNumberOfChromPoints: int  # readonly
    ParentChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram  # readonly
    RegionCount: int  # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    SeparationType: (
        Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique
    )  # readonly
    SignalToNoiseParams: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise
    )  # readonly
    SpectrumPeakFilter: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    )  # readonly
    SpectrumPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks  # readonly
    SpectrumPeakFinderParams: (
        Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
    )  # readonly
    TICParamSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom  # readonly
    TimeSegments: Agilent.MassSpectrometry.DataAnalysis.RangeCollection  # readonly

    @overload
    def RunDeconvolution(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @overload
    def RunDeconvolution(
        self, rtMin: float, rtMax: float
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @overload
    def RunDeconvolution(
        self,
        tdParams: Agilent.MassSpectrometry.DataAnalysis.TargetedDeconvolutionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    def DeconvolveSpectra(
        self,
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> None: ...
    @staticmethod
    def Initialize() -> None: ...
    def PerceiveComponents(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @staticmethod
    def FilterComponentsByShapeQuality(
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    def ScreenComponents(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    def CancelDeconvolution(self) -> None: ...
    def GetMzsOfInterest(
        self, scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> List[float]: ...
    def ComputeSignalToNoise(
        self,
        chrom: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        snrParamSet: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
    ) -> None: ...
    def Dispose(self) -> None: ...
    def FindTICPeaks(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> None: ...
    def GetTIC(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> Agilent.MassSpectrometry.DataAnalysis.IChromatogram: ...
    def GetIonPolarities(
        self, scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    ]: ...
    def GetSeparationTechnique(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique: ...

    ComponentRefinementStarting: (
        Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStartingEventHandler
    )  # Event
    ComponentRefinementStepDone: (
        Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStepDoneEventHandler
    )  # Event
    DeconvolutionCancelled: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionCancelledEventHandler
    )  # Event
    DeconvolutionStarting: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStartingEventHandler
    )  # Event
    DeconvolutionStepDone: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStepDoneEventHandler
    )  # Event

class ChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.DataDescription,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IChromDescription
    ) -> None: ...

    ChromSubType: Agilent.MassSpectrometry.DataAnalysis.ChromSubType
    ChromType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    CompoundNumbers: Agilent.MassSpectrometry.DataAnalysis.ICoreList[int]
    IsCycleSummed: bool
    SignalDescription: str
    SignalName: str

    @staticmethod
    def IsUVChromatogram(
        chromDescription: Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IChromDescription: ...

class ChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.PeakBase,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ChromPeak
    ) -> None: ...

    ChromPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    EndFlags: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags
    InitialWidthInMinutes: float
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    SaturationWarning: bool
    StartFlags: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags

    def MakeLwPeak(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak: ...

class ChromPeakList(
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.IItemHighlighting,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.ILastOperation,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.PeakListBase[T],
    Agilent.MassSpectrometry.DataAnalysis.ISortByAttribute,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.IChromPeakList,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPeakHiding,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ChromPeakList
    ) -> None: ...

    AnalysisPass: int
    BaselineOffset: float
    BaselinePoints: int
    BaselineStdDev: float
    FilterWidth: int
    LastError: int
    LastErrorMessage: str
    MessageList: str
    SpikeCount: int  # readonly
    SpikeList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Spike
    ]

    def AppendToMessageList(self, msg: str) -> None: ...
    def VInvalidateCrossPeakAttributes(self) -> None: ...
    def VComputeCrossPeakAttributes(self) -> None: ...

class ChromRegion:  # Class
    @overload
    def __init__(
        self,
        chromData: Agilent.MassSpectrometry.DataAnalysis.ChromData,
        peak: Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
    ) -> None: ...
    @overload
    def __init__(
        self,
        chromData: Agilent.MassSpectrometry.DataAnalysis.ChromData,
        tsIndex: int,
        xStart: float,
        xEnd: float,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
    ) -> None: ...

    ChromData: Agilent.MassSpectrometry.DataAnalysis.ChromData  # readonly
    End: float  # readonly
    IonPeaks: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]  # readonly
    MzOfInterest: float  # readonly
    Polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    Start: float  # readonly
    TimeSegmentIndex: int  # readonly

    @staticmethod
    def DeconvolveSpectra(
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> None: ...
    def ClearAllIonPeaks(self) -> None: ...
    @overload
    def FindEICPeaks(
        self,
        mz: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
        eic: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...
    @overload
    def FindEICPeaks(
        self,
        rtRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
        mz: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
        eic: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...
    @overload
    def FindEICPeaks(
        self,
        mzPeak: Agilent.MassSpectrometry.DataAnalysis.IPeak,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
        eic: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...
    @overload
    def FindEICPeaks(
        self,
        rtRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
        mzPeak: Agilent.MassSpectrometry.DataAnalysis.IPeak,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
        eic: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...
    def PerceiveComponents(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    def AddIonPeak(
        self, ionPeak: Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ) -> None: ...
    def FindSpectrumPeaks(
        self,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IPeak
    ]: ...
    def FilterComponents(
        self,
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @staticmethod
    def ApplyPeakShapeFilter(
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @overload
    def FindIonPeaks(
        self,
        mzPeak: Agilent.MassSpectrometry.DataAnalysis.IPeak,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> int: ...
    @overload
    def FindIonPeaks(
        self,
        mz: float,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
        polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        mzOfInterest: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> int: ...
    @staticmethod
    def CreateMZRange(
        mz: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...

class ChromSubType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AllIonsFrag: Agilent.MassSpectrometry.DataAnalysis.ChromSubType = (
        ...
    )  # static # readonly
    ReferenceIon: Agilent.MassSpectrometry.DataAnalysis.ChromSubType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ChromSubType = (
        ...
    )  # static # readonly

class ChromType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    BasePeak: Agilent.MassSpectrometry.DataAnalysis.ChromType = ...  # static # readonly
    ExtractedCompound: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    ExtractedIon: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    ExtractedWavelength: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    InstrumentParameter: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    MultipleReactionMode: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    SelectedIonMonitoring: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    Signal: Agilent.MassSpectrometry.DataAnalysis.ChromType = ...  # static # readonly
    TotalCompound: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    TotalIon: Agilent.MassSpectrometry.DataAnalysis.ChromType = ...  # static # readonly
    TotalWavelength: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ChromType = (
        ...
    )  # static # readonly

class ChromXUnitType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Minutes: Agilent.MassSpectrometry.DataAnalysis.ChromXUnitType = (
        ...
    )  # static # readonly
    ScanNumbers: Agilent.MassSpectrometry.DataAnalysis.ChromXUnitType = (
        ...
    )  # static # readonly
    Seconds: Agilent.MassSpectrometry.DataAnalysis.ChromXUnitType = (
        ...
    )  # static # readonly

class Chromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.FXDataBase,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.Chromatogram
    ) -> None: ...

    Count: int  # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.IChromDescription  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.IFXLimits  # readonly
    Title2: str  # readonly
    XYStore: Agilent.MassSpectrometry.DataAnalysis.IFXStore

    def CreatePSetUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...
    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    @staticmethod
    def Compare(
        chrom1: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        chrom2: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        compoundChroamtograms: bool,
    ) -> int: ...
    def ClearResults(self) -> bool: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    def CreatePSetPrecision(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IChromatogram: ...

class ClipFXDataAlgorithm:  # Class
    AlgorithmName: str  # static # readonly

    AlgorithmInfo: (
        Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo
    )  # static # readonly

    @staticmethod
    def ClipFXData(
        iFXData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        pSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    ) -> None: ...

class ClipboardDataFlag(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    MH_QUAL_CHROMATOGRAM_XML: (
        Agilent.MassSpectrometry.DataAnalysis.ClipboardDataFlag
    ) = ...  # static # readonly
    MH_QUAL_SPECTRA_XML: Agilent.MassSpectrometry.DataAnalysis.ClipboardDataFlag = (
        ...
    )  # static # readonly

class ClosestType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Closest: Agilent.MassSpectrometry.DataAnalysis.ClosestType = (
        ...
    )  # static # readonly
    ClosestNotGreater: Agilent.MassSpectrometry.DataAnalysis.ClosestType = (
        ...
    )  # static # readonly
    ClosestNotLess: Agilent.MassSpectrometry.DataAnalysis.ClosestType = (
        ...
    )  # static # readonly

class CnEngine:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def Run(
        objectLists: List[
            Sequence[Agilent.MassSpectrometry.DataAnalysis.ICorrelatableObject]
        ],
        dataDimension: int,
        customerScalingFactors: List[float],
        parameters: Agilent.MassSpectrometry.DataAnalysis.CnEngine.UserParameters,
    ) -> Sequence[Agilent.MassSpectrometry.DataAnalysis.IBucket]: ...
    @overload
    @staticmethod
    def Run(
        objectLists: List[
            Sequence[Agilent.MassSpectrometry.DataAnalysis.ICorrelatableObject]
        ],
        customerScalingFactors: List[float],
        parameters: Agilent.MassSpectrometry.DataAnalysis.CnEngine.UserParameters,
    ) -> Sequence[Agilent.MassSpectrometry.DataAnalysis.IBucket]: ...

    # Nested Types

    class IntensityNormalizationChoice(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        UseCustomerFactor: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.IntensityNormalizationChoice
        ) = ...  # static # readonly
        UseDataThemselves: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.IntensityNormalizationChoice
        ) = ...  # static # readonly
        UseStandards: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.IntensityNormalizationChoice
        ) = ...  # static # readonly

    class StandardUsage(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        IntensityOnly: Agilent.MassSpectrometry.DataAnalysis.CnEngine.StandardUsage = (
            ...
        )  # static # readonly
        TimeAndIntensity: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.StandardUsage
        ) = ...  # static # readonly
        TimeOnly: Agilent.MassSpectrometry.DataAnalysis.CnEngine.StandardUsage = (
            ...
        )  # static # readonly

    class TimeCorrectionChoice(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        UseDataThemselves: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.TimeCorrectionChoice
        ) = ...  # static # readonly
        UseStandards: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.TimeCorrectionChoice
        ) = ...  # static # readonly

    class UserParameters:  # Class
        def __init__(self) -> None: ...

        IntensityNormalizationChoice: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.IntensityNormalizationChoice
        )
        MassToleranceFunction: Agilent.MassSpectrometry.DataAnalysis.FunctionLinear
        MinSpectralCorrelationCoefficient: float
        SpectralCorrelationMzTolerance: float
        Standards: List[Agilent.MassSpectrometry.DataAnalysis.Calibrant]
        TimeCorrectionChoice: (
            Agilent.MassSpectrometry.DataAnalysis.CnEngine.TimeCorrectionChoice
        )
        TimeToleranceFunctionForCorrection: (
            Agilent.MassSpectrometry.DataAnalysis.FunctionLinear
        )
        TimeToleranceFunctionForCorrelation: (
            Agilent.MassSpectrometry.DataAnalysis.FunctionLinear
        )

        @overload
        def Equals(self, obj: Any) -> bool: ...
        @overload
        def Equals(
            self, other: Agilent.MassSpectrometry.DataAnalysis.CnEngine.UserParameters
        ) -> bool: ...
        def BinaryWrite(self, writer: System.IO.BinaryWriter) -> None: ...
        def BinaryRead(self, reader: System.IO.BinaryReader) -> None: ...
        def FromXmlOldClass(self, siblings: System.Xml.XmlNodeList) -> None: ...
        def GetHashCode(self) -> int: ...
        def Clone(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.CnEngine.UserParameters: ...
        def FromXml(self, siblings: System.Xml.XmlNodeList) -> None: ...
        def ToXml(self, document: System.Xml.XmlDocument) -> System.Xml.XmlElement: ...
        def CalculateDataBlockLength(self) -> int: ...

class CollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionParameter[T],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.CollectionParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ICollectionParameter[T]
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICollectionParameter[T]: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> bool: ...

class ColorParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IColorParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, initialValue: System.Drawing.Color, defaultValue: System.Drawing.Color
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ColorParameter
    ) -> None: ...

    AValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    BValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    DefaultValue: System.Drawing.Color
    GValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    RValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    Value: System.Drawing.Color

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IColorParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IColorParameter: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...

class ColumnConstants:  # Class
    Category: str = ...  # static # readonly
    DataValue: str = ...  # static # readonly
    DisplayEffectType: str = ...  # static # readonly
    DisplayName: str = ...  # static # readonly
    DisplayValue: str = ...  # static # readonly
    FileName: str = ...  # static # readonly
    InternalName: str = ...  # static # readonly
    Unit: str = ...  # static # readonly

class CommonAppSettingsMethod(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IDAMethod,
    Agilent.MassSpectrometry.DataAnalysis.DAMethod,
    Agilent.MassSpectrometry.DataAnalysis.IDataSourceInformation,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        originalMethod: Agilent.MassSpectrometry.DataAnalysis.CommonAppSettingsMethod,
    ) -> None: ...

    ParamKeyLineDefinitions: str  # static # readonly
    ParamKeyNumericPrecision: str  # static # readonly
    ParamKeyXUnits: str  # static # readonly

    Persisted: bool  # readonly

    def ReadSubClassMethod(self, methodDirPath: str) -> None: ...
    def WriteSubClassMethod(self, methodDirPath: str) -> None: ...

class Component(
    Iterable[Any], Iterable[Agilent.MassSpectrometry.DataAnalysis.IonPeak]
):  # Class
    def __init__(
        self, other: Agilent.MassSpectrometry.DataAnalysis.Component
    ) -> None: ...

    AssignedRT: float  # readonly
    ComponentArea: float  # readonly
    ComponentPerceptionParams: (
        Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    )  # readonly
    HighestMz: float  # readonly
    IonPeakCount: int  # readonly
    IsAccurateMass: bool  # readonly
    LargestPeak: Agilent.MassSpectrometry.DataAnalysis.IonPeak  # readonly
    LowestMz: float  # readonly
    MaxPeakArea: float  # readonly
    PeakShape: Agilent.MassSpectrometry.DataAnalysis.PeakShape  # readonly
    PeakShapeFilter: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilter  # readonly
    ShapeQualityMetric: float  # readonly
    SharpestPeak: Agilent.MassSpectrometry.DataAnalysis.IonPeak  # readonly
    Spectrum: Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrum  # readonly

    def GetIonByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IonPeak: ...
    def SortIonsByMZ(
        self,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]: ...
    def SetComponentShapeHeight(self, maxY: float) -> None: ...
    def GetIonsInMZRange(
        self,
        mz: float,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]: ...
    def RescaleAbundance(self, yScaleFactor: float) -> None: ...
    def SortIonsByAbundance(
        self,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]: ...
    def DeriveSpectrum(
        self,
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrum: ...
    def GetIonByMZ(
        self, mz: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.IonPeak: ...
    @staticmethod
    def FilterIonPeaksByMinMzSpacing(
        component: Agilent.MassSpectrometry.DataAnalysis.Component,
        massTolerancePpm: float,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]: ...
    def ApplyPeakShapeFilter(self) -> None: ...
    def FilterIonPeaksByHeight(
        self, cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> int: ...

class ComponentPerceptionParams:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, chromType: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique
    ) -> None: ...
    @overload
    def __init__(self, rtMin: float, rtMax: float) -> None: ...
    @overload
    def __init__(
        self,
        chromType: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique,
        rtMin: float,
        rtMax: float,
    ) -> None: ...
    @overload
    def __init__(self, xmlFileName: str) -> None: ...
    @overload
    def __init__(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    ) -> None: ...

    DECONVOLUTION_XML_FILE: str = ...  # static # readonly
    GC_DECONVOLUTION_XML_FILE: str = ...  # static # readonly
    LC_DECONVOLUTION_XML_FILE: str = ...  # static # readonly

    ApplySmoothing: bool
    AreaFilterAbsolute: float
    AreaFilterRelative: float
    AutoScaleWSFArray: List[float]
    ChromPeakThreshold: float
    ChromRangeHigh: float
    ChromRangeLow: float
    ChromSNRThreshold: float
    ComponentShapeQualityFilter: float
    Deskew: bool
    EICPeakThreshold: float
    EICSNRThreshold: float
    ExcludedMZs: List[float]
    ExcludedMzRanges: List[Agilent.MassSpectrometry.DataAnalysis.DoubleRangeD]
    HeightFilterAbsolute: float
    HeightFilterRelative: float
    HighSensitivityMode: bool
    LeftMZDelta: float
    MaxSpectrumPeaksPerChromPeak: int
    ModelShapePercentile: float
    MzDeltaUnits: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits
    MzValues: System.Collections.Generic.List[float]
    PeakShapeDiffMultiplier: float
    PeakShapeDiffThreshold: float
    PeakShapeFilter: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum
    QuietMode: bool
    RefineComponents: bool
    RemoveOverlap: bool
    RetentionTimeBinSize: float
    RightMZDelta: float
    SmoothingGaussianWidth: int
    SpectrumPeakThreshold: float
    SpectrumRTRangeHigh: float
    SpectrumRTRangeLow: float
    TaskScheduler: System.Threading.Tasks.TaskScheduler
    UseAutoScale: bool
    UseFeatures: bool
    UseFullComponentRange: bool
    UseIntegerMzValues: bool
    UseL2Norm: bool
    UseLargestPeakShape: bool
    WindowSizeFactor: float

    @overload
    def Write(self) -> None: ...
    @overload
    def Write(self, fileName: str) -> None: ...

class ComponentRefinementStartingEventArgs(System.EventArgs):  # Class
    NumSteps: int  # readonly

class ComponentRefinementStartingEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStartingEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStartingEventArgs,
    ) -> None: ...

class ComponentRefinementStepDoneEventArgs(System.EventArgs):  # Class
    ComponentRT: float  # readonly
    Step: int  # readonly

class ComponentRefinementStepDoneEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStepDoneEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ComponentRefinementStepDoneEventArgs,
    ) -> None: ...

class ComponentResolution(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    High: Agilent.MassSpectrometry.DataAnalysis.ComponentResolution = (
        ...
    )  # static # readonly
    Low: Agilent.MassSpectrometry.DataAnalysis.ComponentResolution = (
        ...
    )  # static # readonly
    Normal: Agilent.MassSpectrometry.DataAnalysis.ComponentResolution = (
        ...
    )  # static # readonly
    VeryHigh: Agilent.MassSpectrometry.DataAnalysis.ComponentResolution = (
        ...
    )  # static # readonly

class ComponentSpectrum:  # Class
    Abundances: List[float]  # readonly
    BasePeak: Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak  # readonly
    Component: Agilent.MassSpectrometry.DataAnalysis.Component  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak: ...
    MZValues: List[float]  # readonly
    NormalizedAbundances: List[float]  # readonly
    NumberOfPeaks: int  # readonly
    SpectrumPeaks: List[
        Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak
    ]  # readonly

    def Add(
        self, derivedPeak: Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak
    ) -> None: ...
    def GetPeaksInRange(
        self, mzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak
    ]: ...
    def RescaleAbundance(self, scaleFactor: float) -> None: ...
    def HasPeaksInRange(
        self, mzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> bool: ...
    def Remove(
        self, peak: Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak
    ) -> None: ...
    def GetPeakByFeatureID(
        self, featureID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ComponentSpectrumPeak: ...

class ComponentSpectrumPeak:  # Class
    Abundance: float  # readonly
    IonPeak: Agilent.MassSpectrometry.DataAnalysis.IonPeak  # readonly
    MZ: float  # readonly

    def RescaleAbundance(self, scaleFactor: float) -> None: ...

class ComponentTargetSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.TargetSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ITargetSpectrum,
):  # Class
    def Contains(self, mz: int) -> bool: ...
    def IsFlagged(self, mz: int) -> bool: ...

class CompositionCompatabilityTester:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def CanFindFormulaForIsotopes(
        isotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        clusterIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        massToleranceCoefficients: List[float],
        heightAccuracy: float,
        elementLimits: Sequence[Agilent.MassSpectrometry.DataAnalysis.ElementBounds],
    ) -> bool: ...

class Compound(
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.ICompound,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.Compound
    ) -> None: ...

    Key_Category_AcqMethodSearch: str  # static # readonly
    Key_Category_BioConfirm: str  # static # readonly
    Key_Category_CompoundId: str  # static # readonly
    Key_Category_DatabaseSearch: str  # static # readonly
    Key_Category_FormulaGeneration: str  # static # readonly
    Key_Category_General: str  # static # readonly
    Key_Category_LibSearch: str  # static # readonly
    Key_Category_MolecularFeature: str  # static # readonly
    Key_Category_SamplePurity: str  # static # readonly
    Key_Category_TargetScreening: str  # static # readonly
    c_AcqMethod: str  # static
    c_Bio: str  # static
    c_CpdId: str  # static
    c_DB: str  # static
    c_General: str  # static
    c_LibSearch: str  # static
    c_MFE: str  # static
    c_MFG: str  # static
    c_SamplePurity: str  # static
    c_Tgt: str  # static

    AcquisitionMetaData: Agilent.MassSpectrometry.DataAnalysis.IAcqMetaData
    DelayTime: float
    NotFoundString: str  # static # readonly
    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

    def CurrentUnit(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...
    @staticmethod
    def Compare(
        cpd1: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        cpd2: Agilent.MassSpectrometry.DataAnalysis.ICompound,
    ) -> int: ...
    def ClearResultAttributes(self) -> None: ...
    @staticmethod
    def LocalizedCategoryString(categoryKey: str) -> str: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    def ToString(self) -> str: ...

class CompoundElectronState(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Either: Agilent.MassSpectrometry.DataAnalysis.CompoundElectronState = (
        ...
    )  # static # readonly
    Even: Agilent.MassSpectrometry.DataAnalysis.CompoundElectronState = (
        ...
    )  # static # readonly
    Odd: Agilent.MassSpectrometry.DataAnalysis.CompoundElectronState = (
        ...
    )  # static # readonly

class CompoundGroup(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Iterable[Any],
    System.Runtime.Serialization.IDeserializationCallback,
    Sequence[Any],
    Iterable[
        System.Collections.Generic.KeyValuePair[
            str, Agilent.MassSpectrometry.DataAnalysis.ICompound
        ]
    ],
    Dict[Any, Any],
    Sequence[
        System.Collections.Generic.KeyValuePair[
            str, Agilent.MassSpectrometry.DataAnalysis.ICompound
        ]
    ],
    Agilent.MassSpectrometry.DataAnalysis.ICompoundGroup,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.ICloneable,
    Mapping[str, Agilent.MassSpectrometry.DataAnalysis.ICompound],
    Dict[str, Agilent.MassSpectrometry.DataAnalysis.ICompound],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    ResultAttributeValueDictionary: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttributeValueDictionary
    )  # readonly

    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class CompoundRowId:  # Class
    @overload
    def __init__(self, libraryID: int, compoundID: int) -> None: ...
    @overload
    def __init__(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...

    CompoundID: int  # readonly
    LibraryID: int  # readonly

class Compression:  # Class
    @overload
    @staticmethod
    def StoreAsZipDelimString(
        writer: System.Xml.XmlWriter, fArray: List[float], label: str, digits: int
    ) -> None: ...
    @overload
    @staticmethod
    def StoreAsZipDelimString(
        writer: System.Xml.XmlWriter, dArray: List[float], label: str, digits: int
    ) -> None: ...
    @staticmethod
    def StoreAsOnOffSparseData(
        writer: System.Xml.XmlWriter,
        dArray: List[float],
        stepSize: float,
        elemName: str,
    ) -> None: ...
    @staticmethod
    def ConvertToStep(t: float, stepSize: float) -> int: ...
    @overload
    @staticmethod
    def StoreAsBase64String(
        writer: System.Xml.XmlWriter, dArray: List[float], label: str
    ) -> None: ...
    @overload
    @staticmethod
    def StoreAsBase64String(
        writer: System.Xml.XmlWriter, fArray: List[float], label: str
    ) -> None: ...
    @staticmethod
    def ReadArrayData(
        node: System.Xml.XmlNode,
        pointCount: int,
        dArray: List[float],
        fArray: List[float],
    ) -> None: ...
    @staticmethod
    def StoreAsFirstDelta(
        writer: System.Xml.XmlWriter, first: float, stepSize: float, elemName: str
    ) -> None: ...

class CompressionScheme(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DataRange: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    DeflateStream: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    GZipStream: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    LPC: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    LZF: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    OneDataRange: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    PackedFloat: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    RlzByte: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    RlzInt: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    RlzPlain: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    TOF_NONE: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    Threshold: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly
    Wiff: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme = (
        ...
    )  # static # readonly

class ComputedHasValueDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...
    def BeginInvoke(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...

class ComputedResultAttributeValueDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> Any: ...
    def BeginInvoke(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> Any: ...

class CondensedSpectrum(System.ICloneable):  # Class
    def __init__(self) -> None: ...

    MAX_IONS: int = ...  # static # readonly
    RECORD_SIZE: int = ...  # static # readonly

    HeaderIndex: int
    def __getitem__(self, i: int, j: int) -> int: ...
    def __setitem__(self, i: int, j: int, value_: int) -> None: ...
    KVMax: int
    LowMass: int
    NumberOfIons: int
    SK2_MIIndex: int

    def Clone(self) -> Any: ...

class CondensedSpectrumBuffer:  # Class
    def __init__(self) -> None: ...

    BUFFER_SIZE: int = ...  # static # readonly

    FirstRec: int
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.CondensedSpectrum: ...
    def __setitem__(
        self,
        index: int,
        value_: Agilent.MassSpectrometry.DataAnalysis.CondensedSpectrum,
    ) -> None: ...
    LastRec: int

class CondensedSpectrumGenerator:  # Class
    def __init__(self) -> None: ...

class ConflictResolution(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DoNotAdd: Agilent.MassSpectrometry.DataAnalysis.ConflictResolution = (
        ...
    )  # static # readonly
    Duplicate: Agilent.MassSpectrometry.DataAnalysis.ConflictResolution = (
        ...
    )  # static # readonly
    Replace: Agilent.MassSpectrometry.DataAnalysis.ConflictResolution = (
        ...
    )  # static # readonly

class ConsistencyBase(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
):  # Class
    ...

class ContentToInclude(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AllResults: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude = (
        ...
    )  # static # readonly
    EntireDataFile: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude = (
        ...
    )  # static # readonly
    HighlightedResults: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude = (
        ...
    )  # static # readonly
    VisibleResults: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude = (
        ...
    )  # static # readonly

class Contents:  # Class
    def __init__(self) -> None: ...

    AcqSoftwareVersion: str
    AcquiredTime: System.DateTime
    InstrumentName: str
    MeasurementType: Agilent.MassSpectrometry.DataAnalysis.MeasurementType
    SeparationTechnique: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique

class ContentsConstants:  # Class
    AcqSoftwareVersion: str = ...  # static # readonly
    AcqStatus: str = ...  # static # readonly
    AcquiredTime: str = ...  # static # readonly
    Contents: str = ...  # static # readonly
    InstrumentName: str = ...  # static # readonly
    LockedMode: str = ...  # static # readonly
    MeasurementType: str = ...  # static # readonly
    SeparationTechnique: str = ...  # static # readonly
    Version: str = ...  # static # readonly

class ContextMenuLocation(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Anchored: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Background: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    ColumnHeader: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    ColumnRow: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Legend: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Node: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Peak: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Plot: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    PlotTitle: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation = (
        ...
    )  # static # readonly

class ConversionSupport(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PrecisionOnly: Agilent.MassSpectrometry.DataAnalysis.ConversionSupport = (
        ...
    )  # static # readonly
    UnitsAndPrecision: Agilent.MassSpectrometry.DataAnalysis.ConversionSupport = (
        ...
    )  # static # readonly

class CoreList(
    Iterable[T],
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[T],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    List[T],
    Sequence[T],
    Iterable[Any],
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def Add(self, item: T) -> None: ...
    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(self, other: Agilent.MassSpectrometry.DataAnalysis.CoreList) -> bool: ...

class CoreTypesMessages(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CantGetEicFromDeconvolutedSpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    DataWidthLessThanSmoothingWidth: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    DifferentDataObjects: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    FactoryInstalledMethodIsReadOnly: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    FindCpdUtilities_Msg_NoChromOfStorageType: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    FindCpdUtilities_Msg_WrongLevel: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Illegal_RTE_ManInt: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    IncompatibleMSStage: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    IncompatiblePolarity: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    IncompatibleSamplingType: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    IncompatibleStorageMode: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    Incompatible_UV_Spectra_type: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    MSG_NO_MZ_OF_INTEREST: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    MSG_Non_Integrateable_Chromatogram: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_CantFindAllSpecifiedPeaks: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_DuplicateHydrogenIsotopes: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_ExcelError: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    Msg_FbF_IntegratorNotSupported: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_ManualMfgPeaksNotAdjacent: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_ManualMfgPeaksNotUnique: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_MassCalcBadCombinations: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_MfgNotPossibleNotEnoughElements: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_NoMsBackgroundSpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_NoNoisePoints: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    Msg_NoNoiseRangeFound: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    Msg_NoNoiseRangeSpecified: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    Msg_TooFewNoisePoints: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly
    Msg_TooFewNoisePointsInAllWindows: (
        Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages
    ) = ...  # static # readonly
    OlderVersionDataFile: Agilent.MassSpectrometry.DataAnalysis.CoreTypesMessages = (
        ...
    )  # static # readonly

class CoreUtilities:  # Class
    def __init__(self) -> None: ...

    CE_TAG: str  # static
    FV_TAG: str  # static
    INSTRUMENT_TYPE_TAG: str  # static
    IONIZATION_MODE_TAG: str  # static
    IONPOLARITY_TAG: str  # static
    MEASURED_XMAX_TAG: str  # static
    MEASURED_XMIN_TAG: str  # static
    MS_STAGE_TAG: str  # static
    MS_STORAGE_FORMAT_TAG: str  # static
    RT_TAG: str  # static
    SCAN_TYPE_TAG: str  # static
    SELECT_MZ_TAG: str  # static
    YMAX_TAG: str  # static

    CircumventDeconvolutionCheck: bool  # static
    CurrentExecutablePath: str  # static # readonly
    DataDirExtension: str  # static # readonly
    MethodDirExtension: str  # static # readonly

    @staticmethod
    def GetAbbreviatedFilesNames(fullFileNames: List[str]) -> None: ...
    @staticmethod
    def AMRTDatabasePath() -> str: ...
    @staticmethod
    def CopyMethod(sourceMethodPath: str, destinationMethodPath: str) -> None: ...
    @staticmethod
    def GetMethodDirectoryPath() -> str: ...
    @staticmethod
    def XmlStreamWriter(
        stream: System.IO.Stream, omitXmlDeclaration: bool
    ) -> System.Xml.XmlWriter: ...
    @staticmethod
    def IsDeconvolutionInstalled() -> bool: ...
    @staticmethod
    def DefaultCpdDatabaseName() -> str: ...
    @staticmethod
    def StreamToString(stream: System.IO.Stream) -> str: ...
    @staticmethod
    def GetDADefaultDataPath() -> str: ...
    @staticmethod
    def MhSpecLibraryPath() -> str: ...
    @staticmethod
    def GetCustomerHomePath() -> str: ...
    @staticmethod
    def XmlStreamReader(
        stream: System.IO.Stream, conformance: System.Xml.ConformanceLevel
    ) -> System.Xml.XmlReader: ...
    @staticmethod
    def GetProteinSequencePath() -> str: ...
    @staticmethod
    def GetCommonAppSettingsFilePath() -> str: ...
    @staticmethod
    def GetUserSettingsSubDirForAssembly(
        assemblyName: str, assemblyVersion: str
    ) -> str: ...
    @staticmethod
    def ValidateOrCreateMethodPath(methodPath: str, createIfNotFound: bool) -> str: ...
    @staticmethod
    def ParseCsvString(s: str) -> List[str]: ...
    @staticmethod
    def CpdDatabasePath() -> str: ...
    @staticmethod
    def DefaultMetlinName() -> str: ...
    @staticmethod
    def GetWindowLayoutPath() -> str: ...
    @staticmethod
    def GetDAScriptDirectoryPath() -> str: ...
    @staticmethod
    def DoesAcqMethodExists(methodPath: str) -> bool: ...
    @staticmethod
    def GetDAWizardDirectoryPath() -> str: ...
    @staticmethod
    def GetDefaultReportDestinationPath() -> str: ...
    @staticmethod
    def GetConfiguredSeparationTechnique() -> str: ...
    @staticmethod
    def StringToStream(source: str) -> System.IO.MemoryStream: ...
    @staticmethod
    def ValidateOrCreateDAMethodPath(
        methodPath: str, createIfNotFound: bool
    ) -> str: ...
    @staticmethod
    def GetAcqDataDAMethodPaths(
        dataDirectoryPath: str,
    ) -> System.Collections.Generic.List[str]: ...
    @staticmethod
    def GetConfiguredMsDevice() -> str: ...
    @staticmethod
    def GetTypeInfo(psTypeName: str) -> System.Type: ...
    @staticmethod
    def DeleteRows(
        ds: System.Data.DataSet,
        tableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        keyColumnName: str,
        keyValue: int,
    ) -> None: ...
    @staticmethod
    def DefaultMetlinAMRTName() -> str: ...
    @overload
    @staticmethod
    def CreateDataSet(
        dataSetname: str,
        externalKeyName: str,
        externalkeyValue: int,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        ds: System.Data.DataSet,
    ) -> System.Data.DataSet: ...
    @overload
    @staticmethod
    def CreateDataSet(
        dataSetname: str,
        externalKeyName: str,
        externalkeyValue: int,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        ds: System.Data.DataSet,
        limitOnRows: int,
    ) -> System.Data.DataSet: ...
    @overload
    @staticmethod
    def CreateDataSet(
        dataSetname: str,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
    ) -> System.Data.DataSet: ...
    @overload
    @staticmethod
    def CreateDataSet(
        dataSetname: str,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        limitOnRows: int,
    ) -> System.Data.DataSet: ...
    @staticmethod
    def ValidatePath(pathString: str, fullPath: str) -> bool: ...
    @staticmethod
    def GetSpecialTestFlags() -> str: ...
    @staticmethod
    def IsDataDirMethod(methodPath: str) -> bool: ...
    @staticmethod
    def SuggestAttributeDisplayOrder(
        attributesToOrder: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
    ) -> None: ...
    @staticmethod
    def DefaultNistLibraryName() -> str: ...
    @staticmethod
    def GetConfigurationPath() -> str: ...
    @staticmethod
    def CpdDatabaseFileExtensions() -> System.Collections.Generic.List[str]: ...
    @staticmethod
    def CsSpecLibraryPath() -> str: ...
    @staticmethod
    def ConvertFXDatatoXMLString(
        flag: Agilent.MassSpectrometry.DataAnalysis.ClipboardDataFlag,
        dataItems: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem],
    ) -> str: ...
    @overload
    @staticmethod
    def RefreshDataSet(
        externalKeyName: str,
        externalkeyValue: int,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        dataSet: System.Data.DataSet,
    ) -> None: ...
    @overload
    @staticmethod
    def RefreshDataSet(
        externalKeyName: str,
        externalkeyValue: int,
        topMostTableDefinition: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
        dataSet: System.Data.DataSet,
        limitOnRows: int,
    ) -> None: ...

class CorrelatorParameters:  # Class
    CoordinateTolerances: List[Agilent.MassSpectrometry.DataAnalysis.FunctionLinear]
    MinSpectralCorrelationCoefficient: float
    SpectralCorrelationMzTolerance: float

class CpdDataObjectType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AvgMsMsSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    ChromDeconvCpdChromatogram: (
        Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType
    ) = ...  # static # readonly
    ChromDeconvSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    CleanedHighEnergySpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType
    ) = ...  # static # readonly
    CleanedSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    FragmentIonChromatogram: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    HighEnergySpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MFECpdChromatogram: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MFESpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MsChromatogram: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MsMsChromatogram: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MsMsSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MsMsSpectrumPerCE: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    MsSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly
    TofMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType = (
        ...
    )  # static # readonly

class CpdDbSearchFields(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mass: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields = (
        ...
    )  # static # readonly
    MolecularFormula: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields = (
        ...
    )  # static # readonly
    OptionalRetentionTime: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields = (
        ...
    )  # static # readonly
    RetentionTime: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields = (
        ...
    )  # static # readonly

class CpdFragmentDetails(
    Agilent.MassSpectrometry.DataAnalysis.ICpdFragmentDetails
):  # Class
    def __init__(self) -> None: ...

class CpdGroupFilterMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AllSamples: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode = (
        ...
    )  # static # readonly
    SamplesInEachGroup: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode = (
        ...
    )  # static # readonly
    SamplesInOneGroup: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode = (
        ...
    )  # static # readonly

class CpdGroupFrequencyFilterMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NumberOfFiles: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode = (
        ...
    )  # static # readonly
    PctOfFiles: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode = (
        ...
    )  # static # readonly

class CpdLabelPolicy:  # Class
    def __init__(self) -> None: ...

    LabelConfiguration: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration
    )  # static
    LastModificationTime: System.DateTime  # static # readonly

class CpdMiningAlgorithm(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FindByAMDIS: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByAutoMsMs: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByFormula: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByInfusionMolecularFeature: (
        Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    ) = ...  # static # readonly
    FindByIntegration: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByMRM: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByManualSelection: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByMaxEntropy: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByMolecularFeature: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByProteinMolecularFeature: (
        Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    ) = ...  # static # readonly
    FindBySpectrum: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    FindByTargetedMsMs: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    ProteinDeconvolution: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm = (
        ...
    )  # static # readonly

class CpdSpectralTypes(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    IonSet: Agilent.MassSpectrometry.DataAnalysis.CpdSpectralTypes = (
        ...
    )  # static # readonly
    MS: Agilent.MassSpectrometry.DataAnalysis.CpdSpectralTypes = (
        ...
    )  # static # readonly
    MSMS: Agilent.MassSpectrometry.DataAnalysis.CpdSpectralTypes = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.CpdSpectralTypes = (
        ...
    )  # static # readonly

class CpdStatus(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Accepted: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = ...  # static # readonly
    AcceptedManual: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = (
        ...
    )  # static # readonly
    Inspect: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = ...  # static # readonly
    Rejected: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = ...  # static # readonly
    RejectedManual: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.CpdStatus = (
        ...
    )  # static # readonly

class CurrentUnitDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(
        self, result: System.IAsyncResult
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...
    def BeginInvoke(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...

class DAMethod(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.DAMethodBase,
    Agilent.MassSpectrometry.DataAnalysis.IDAMethod,
    Agilent.MassSpectrometry.DataAnalysis.IDataSourceInformation,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, sourceMethod: Agilent.MassSpectrometry.DataAnalysis.DAMethod
    ) -> None: ...

    ExactCopyOfOriginal: bool
    IsFactoryInstalledMethod: bool  # readonly
    MethodDirectoryPath: str  # readonly
    MethodName: str
    OriginalMethodLocation: str
    Persisted: bool  # readonly
    VersionNumber: float

    def WriteSubClassMethod(self, methodDirPath: str) -> None: ...
    def Equals(self, obj: Any) -> bool: ...
    def CreateSubClassMethod(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.DAMethod: ...
    def GetHashCode(self) -> int: ...
    def ReadSubClassMethod(self, methodDirPath: str) -> None: ...
    def ContentEquals(
        self, toCompare: Agilent.MassSpectrometry.DataAnalysis.IDAMethod
    ) -> bool: ...
    def Clone(self) -> Any: ...
    def WriteXml(
        self, writer: System.Xml.XmlWriter, writeDAMethodInfo: bool, groupName: str
    ) -> None: ...
    def WriteMethod(self, methodDirPath: str) -> None: ...
    def ReadMethod(self, methodDirPath: str) -> None: ...

class DAMethodBase(
    Agilent.MassSpectrometry.DataAnalysis.IDataSourceInformation
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, sourceMethodBase: Agilent.MassSpectrometry.DataAnalysis.DAMethodBase
    ) -> None: ...
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    def __setitem__(
        self, usageKey: str, value_: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> None: ...
    PrecisionSettings: Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision

    def Equals(self, obj: Any) -> bool: ...
    def ContainsUsageKey(self, usageKey: str) -> bool: ...
    def GetAvailableParameterSets(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSetEnumerator: ...
    def GetLoadedParameterSets(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSetEnumerator: ...
    def GetHashCode(self) -> int: ...
    def GetUsageKeys(self) -> System.Collections.Specialized.StringCollection: ...
    def IsPsetLoaded(self, usageKey: str) -> bool: ...

class DNANucleotide(Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szSymbol: str,
        szFormula: str,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    DNANucleotideFormula: str
    DNANucleotideName: str
    DNANucleotideSymbol: str
    DNANucleotideType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class DNAPointMutation(
    Agilent.MassSpectrometry.DataAnalysis.IDNAPointMutation
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szFromAA: str,
        szToAA: str,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    DNAMutationType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE
    FromAA: str
    ToAA: str

class DataAccess(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.IReadChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
    Agilent.MassSpectrometry.DataAnalysis.IInterruptAlgorithm,
    Agilent.MassSpectrometry.DataAnalysis.IUserCalibration,
    Agilent.MassSpectrometry.DataAnalysis.IBDAConversion,
    Agilent.MassSpectrometry.DataAnalysis.IActuals,
    Agilent.MassSpectrometry.DataAnalysis.IReadSpectra,
    Agilent.MassSpectrometry.DataAnalysis.ISample,
):  # Class
    def __init__(self) -> None: ...

    CancelIndicator: Agilent.MassSpectrometry.DataAnalysis.CancelIndicator

    @staticmethod
    def GetMsScanDirSize(filename: str) -> int: ...
    @overload
    @staticmethod
    def GetSampleData(
        strFileName: str, category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    ) -> System.Data.DataSet: ...
    @overload
    @staticmethod
    def GetSampleData(
        strFileName: str,
        category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory,
        internalNameArray: List[str],
        displayNameArray: List[str],
        displayValueArray: List[str],
    ) -> None: ...
    def GetTimeSegmentsIDArray(self) -> List[int]: ...
    def GetQqqAcqMethodReader(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.QqqAcqMethodReader: ...

    ProgressEvent: Agilent.MassSpectrometry.DataAnalysis.ProgressEventHandler  # Event

class DataAction(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AddAnnotationMassCaliper: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeAllIonsFragResults: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeAnnotationMassCaliper: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeBestCombinedIDHit: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeCombinedIDHitHightlight: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeMSPeakListWithBYIon: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangeSpectralLibHit: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedAnchoredFlag: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedChargeState: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedCheckMark: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedCollisionEnergyLibraryHit: (
        Agilent.MassSpectrometry.DataAnalysis.DataAction
    ) = ...  # static # readonly
    ChangedColor: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedCombinedIDResult: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedCpdLabelForFXData: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedDBSearchResults: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedDataObject: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedDescription: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedDeviceDelays: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedExhibit: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedFormulaHighlight: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedHighlight: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedLibSearchHitHighlight: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedMFGResults: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedManualIdResult: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedNormalization: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedPeakLabels: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedPeakList: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedPeakListHighlights: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedPlotAnnotations: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSelectedDBHit: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSelectedFormula: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSequenceMatchHit: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSequenceMatchResult: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSignalToNoise: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedSpectralLibResult: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedUnitsPrecisionOfDataObject: (
        Agilent.MassSpectrometry.DataAnalysis.DataAction
    ) = ...  # static # readonly
    ChangedUnitsPrecisionOfDisplayPreferences: (
        Agilent.MassSpectrometry.DataAnalysis.DataAction
    ) = ...  # static # readonly
    ChangedValidationStatus: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedXZoomRange: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedXZoomRangeCompound: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedYZoomRange: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ChangedYZoomRangeCompound: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ClearedProcessingResults: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ExtractedMSActuals: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ItemAdded: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    ItemDeleted: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly
    RefreshAcqDataFile: Agilent.MassSpectrometry.DataAnalysis.DataAction = (
        ...
    )  # static # readonly

class DataDependentParams:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DataDependentParams
    ) -> None: ...

    DDOtherParams: List[float]
    DdScanID1: int
    DdScanID2: int
    DdScanID3: int
    ParentMzOfInterest: float
    ParentScanId: int

    @overload
    def Initialize(self) -> None: ...
    @overload
    def Initialize(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DataDependentParams
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.DataDependentParams: ...

class DataDescription(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> None: ...

    CpdMiningAlgorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    DataSource: Agilent.MassSpectrometry.DataAnalysis.IDataSource
    DelayTime: float  # readonly

    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDescription: ...

class DataFileValidation:  # Class
    def __init__(self) -> None: ...
    def Validate(self, datafilepathname: str) -> bool: ...

class DataFileValueDataType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Byte: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Float32: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Float64: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Int16: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Int32: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Int64: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType = (
        ...
    )  # static # readonly

class DataRoundingConstants:  # Class
    ROUND_QUAD_MRM_DIGITS: int = ...  # static # readonly

class DataSource(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IDataSource
    ) -> None: ...

    DataSourceType: Agilent.MassSpectrometry.DataAnalysis.DataSourceType
    SourceName: str
    SourcePath: str
    SourceTitle: str

    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.DataSource: ...

class DataSourceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Acquired: Agilent.MassSpectrometry.DataAnalysis.DataSourceType = (
        ...
    )  # static # readonly
    Imported: Agilent.MassSpectrometry.DataAnalysis.DataSourceType = (
        ...
    )  # static # readonly
    Reference: Agilent.MassSpectrometry.DataAnalysis.DataSourceType = (
        ...
    )  # static # readonly

class DataUnit(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    AbsorbanceUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    AbsorptionUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Abundance: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    AbundanceUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Centimeters: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Counts: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    CountsPerSecond: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Daltons: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Meters: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Microseconds: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Microvolts: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    MilliAbsorbanceUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    MilliDaltons: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    MilliThompsons: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Milliseconds: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Millivolts: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Minutes: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Nanometers: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Nanoseconds: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    NoUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    PartsPerMillion: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Percent: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    ResponseUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    ScanNumber: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Seconds: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Thompsons: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    Unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly
    UnitCharge: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    VoltageUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit = (
        ...
    )  # static # readonly
    Volts: Agilent.MassSpectrometry.DataAnalysis.DataUnit = ...  # static # readonly

class DataUnits(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IDataUnits,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.IDataUnits,
        asReadOnlyWrapper: bool,
    ) -> None: ...

    XUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    XValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    YUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    YValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDataUnits: ...

class DataValueType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AccumulationTime: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    AcqTime: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    AcqTimeDifference: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    AcqTimeResolution: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Analog: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    AnalogToPulse: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Conductivity: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    CorrelationCoefficient: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Current: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    DeconvolutedMass: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    DoubleBondEquivalent: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    FlightTime: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    ImDriftTime: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    IonAbundance: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.DataValueType = ...  # static # readonly
    MassDifference: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    MassToCharge: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    MatchScore: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    MaxMergeHeight: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    MzDifference: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    MzResolution: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    OpticalAbsorption: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    OpticalEmission: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Ordinate: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakArea: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakAreaRatio: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakHeightRatio: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakSymmetry: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakVolume: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PeakVolumeRatio: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Pulse: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    PulseToAnalogFactor: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    RefractiveIndex: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    RelativeDifference: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Response: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    ScanNumber: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    SignalToNoise: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Voltage: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly
    Wavelength: Agilent.MassSpectrometry.DataAnalysis.DataValueType = (
        ...
    )  # static # readonly

class DataView(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    AnalysisCentric: Agilent.MassSpectrometry.DataAnalysis.DataView = (
        ...
    )  # static # readonly
    DataCentric: Agilent.MassSpectrometry.DataAnalysis.DataView = (
        ...
    )  # static # readonly

class DeconvolutedIonSetMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IDeconvolutedIonSetMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.MsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DeconvolutedIonSetMsPeak
    ) -> None: ...

    DeconvolutedIonSetMsPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class DeconvolutedMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IDeconvolutedMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.MsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DeconvolutedMsPeak
    ) -> None: ...

    DeconvolutedMsPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class DeconvolutionAlgorithmType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    MaximumEntropy: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionAlgorithmType = (
        ...
    )  # static # readonly
    PeakModeling: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionAlgorithmType = (
        ...
    )  # static # readonly

class DeconvolutionCancelledEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class DeconvolutionIsotopeWidthType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Automatic: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionIsotopeWidthType = (
        ...
    )  # static # readonly
    OldAutomatic: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionIsotopeWidthType
    ) = ...  # static # readonly
    Specified: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionIsotopeWidthType = (
        ...
    )  # static # readonly

class DeconvolutionStartingEventArgs(System.EventArgs):  # Class
    NumSteps: int  # readonly

class DeconvolutionStartingEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStartingEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStartingEventArgs,
    ) -> None: ...

class DeconvolutionStepDoneEventArgs(System.EventArgs):  # Class
    MZ: float  # readonly
    Step: int  # readonly

class DeconvolutionStepDoneEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStepDoneEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.DeconvolutionStepDoneEventArgs,
    ) -> None: ...

class DeconvolvedSpectraSmoother:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Smooth(
        masses: List[float], intensities: List[float], smoothingStrengths: List[float]
    ) -> List[float]: ...

class DefaultCalibCoeff:  # Class
    def __init__(self) -> None: ...

    A: float
    MaxFlightTime: float
    MinFlightTime: float
    PolynomialCoeff: List[float]
    PolynomialWeighting: int
    To: float
    TraditionalWeighting: int
    ValueUseFlag: int

class DeisotopeMassSpectrum:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def DeisotopeSpectrumByPeakIsotopeCluster(
        massSpec: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    ) -> None: ...

class DelayCalculator:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def Adjust(currentDelay: float, newDelay: float, value_: float) -> float: ...
    @overload
    @staticmethod
    def Adjust(currentDelay: float, newDelay: float, values: List[float]) -> None: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        range: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        rngCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        range: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    @staticmethod
    def Adjust(
        currentDelay: float,
        newDelay: float,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        rngCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...

class DeltaMassCaliper(
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICaliper,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DeltaMassCaliper
    ) -> None: ...

    CaliperHeight: float
    CaliperLines: List[System.Drawing.Point]  # readonly
    CaliperPrecisionDigits: int
    CaliperPrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    EndDataX: float
    EndDataY: float
    FontSize: float
    FontStyle: System.Drawing.FontStyle
    Id: int
    IsMergedAnnotation: bool
    NormalizationInformation: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    StartDataX: float
    StartDataY: float
    TextColor: System.Drawing.Color
    TextFont: System.Drawing.Font
    TextOrientation: Agilent.MassSpectrometry.DataAnalysis.Orientation

    def Equals(self, obj: Any) -> bool: ...
    def Resize(
        self,
        pane: Pane,
        whichGrabHandle: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition,
        mouseClickXCC: int,
        mouseClickYCC: int,
        dataX: float,
        dataY: float,
    ) -> None: ...
    def CalculateAndGenerateText(self, startDataX: float, endDataX: float) -> str: ...
    @overload
    def IsHit(self, rcc: System.Drawing.Rectangle, pane: Pane) -> bool: ...
    @overload
    def IsHit(self, xcc: int, ycc: int, pane: Pane) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Draw(
        self, g: System.Drawing.Graphics, pane: Pane, paneRect: System.Drawing.Rectangle
    ) -> None: ...

class DesiredMSStorageType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly
    Peak: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly
    PeakElseProfile: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly
    Profile: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly
    ProfileElsePeak: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType = (
        ...
    )  # static # readonly

class DetectionFilteringType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FivePoint: Agilent.MassSpectrometry.DataAnalysis.DetectionFilteringType = (
        ...
    )  # static # readonly
    NinePoint: Agilent.MassSpectrometry.DataAnalysis.DetectionFilteringType = (
        ...
    )  # static # readonly
    SevenPoint: Agilent.MassSpectrometry.DataAnalysis.DetectionFilteringType = (
        ...
    )  # static # readonly

class Device:  # Class
    def __init__(self) -> None: ...

    Delay: float
    DeviceID: int
    DeviceName: str
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    DeviceVendor: Agilent.MassSpectrometry.DataAnalysis.DeviceVendor
    DriverVersion: str
    FirmwareVersion: str
    ModelName: str
    OrdinalNumber: int
    SerialNumber: str
    StoredDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType

class DeviceConfigInfo:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetDeviceConfigInformation() -> (
        Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    ): ...

class DeviceDelayInfo(
    Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType, ordinalNum: int
    ) -> None: ...
    @overload
    def __init__(
        self,
        devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        ordinalNum: int,
        delay: float,
        rt: float,
        used: bool,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DeviceDelayInfo
    ) -> None: ...

    Delay: float
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    OrdinalNumber: int  # readonly
    RT: float
    Used: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo: ...

class DeviceDelayInfoParameter(
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfoParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DeviceDelayInfoParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo
    Delay: float
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    OrdinalNumber: int  # readonly
    RetentionTime: float
    Used: bool
    Value: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfoParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def RTValueString(self) -> str: ...
    def Validate(self) -> bool: ...
    def DelayValueString(self) -> str: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfoParameter: ...
    def SetToDefault(self) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.DeviceDelayInfo
    ) -> bool: ...

class DeviceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ALS: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    AnalogDigitalConverter: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    BinaryPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CANValves: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CE: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    CTC: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    CapillaryPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    ChipCube: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    ColumnCompCluster: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLC1220DAD: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLC1220GradPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLC1220IsoPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLC1220Sampler: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLC1220VWD: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLCColumnOven: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLCGradPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLCIsoPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLCSampler: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    CompactLCVWD: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    DiodeArrayDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    ElectronCaptureDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    EvaporativeLightScatteringDetector: (
        Agilent.MassSpectrometry.DataAnalysis.DeviceType
    ) = ...  # static # readonly
    FlameIonizationDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    FlexCube: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    FluorescenceDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    GCDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    HDR: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    IonTrap: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    IsocraticPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    LowFlowPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    MicroWellPlateSampler: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    MultiWavelengthDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    NanoPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    PumpValveCluster: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    Quadrupole: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    QuadrupoleTimeOfFlight: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    QuaternaryPump: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    RefractiveIndexDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    SFC: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    TandemQuadrupole: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    ThermalConductivityDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    ThermostattedColumnCompartment: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    TimeOfFlight: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    UIB2: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.DeviceType = ...  # static # readonly
    VariableWavelengthDetector: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly
    WellPlateSampler: Agilent.MassSpectrometry.DataAnalysis.DeviceType = (
        ...
    )  # static # readonly

class DeviceVendor(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Agilent: Agilent.MassSpectrometry.DataAnalysis.DeviceVendor = (
        ...
    )  # static # readonly
    Other: Agilent.MassSpectrometry.DataAnalysis.DeviceVendor = ...  # static # readonly

class DevicesConstants:  # Class
    Delay: str = ...  # static # readonly
    Device: str = ...  # static # readonly
    DeviceID: str = ...  # static # readonly
    DeviceName: str = ...  # static # readonly
    DeviceType: str = ...  # static # readonly
    DeviceVendor: str = ...  # static # readonly
    Devices: str = ...  # static # readonly
    DisplayName: str = ...  # static # readonly
    DriverVersion: str = ...  # static # readonly
    FileVersion: str = ...  # static # readonly
    FirmwareVersion: str = ...  # static # readonly
    ModelNumber: str = ...  # static # readonly
    MultipleDevicesPresent: str = ...  # static # readonly
    OrdinalNumber: str = ...  # static # readonly
    SerialNumber: str = ...  # static # readonly
    SignalDescription: str = ...  # static # readonly
    SignalName: str = ...  # static # readonly
    SignalType: str = ...  # static # readonly
    StoredDataType: str = ...  # static # readonly

class DialogButtons(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Cancel: Agilent.MassSpectrometry.DataAnalysis.DialogButtons = (
        ...
    )  # static # readonly
    Default: Agilent.MassSpectrometry.DataAnalysis.DialogButtons = (
        ...
    )  # static # readonly
    OK: Agilent.MassSpectrometry.DataAnalysis.DialogButtons = ...  # static # readonly

class DifferentialCompound(
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
):  # Class
    def __init__(
        self,
        reference: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        sample: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        intensityAttr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        unitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary,
    ) -> None: ...

    AbundanceRatio: float  # readonly
    AverageMass: float  # readonly
    AverageRetentionTime: float  # readonly
    CompoundID: int  # readonly
    CompoundLabel: str  # readonly
    Found: Agilent.MassSpectrometry.DataAnalysis.Found  # readonly
    ReferencedCompound: Agilent.MassSpectrometry.DataAnalysis.ICompound  # readonly
    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    SampleCompound: Agilent.MassSpectrometry.DataAnalysis.ICompound  # readonly
    UpDownRegulation: (
        Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection
    )  # readonly

    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class DifferentialCompoundList(
    Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompoundList,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    Iterable[Any],
    System.ICloneable,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    List[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, list: Agilent.MassSpectrometry.DataAnalysis.DifferentialCompoundList
    ) -> None: ...

    UnitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary  # readonly

    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

    # Nested Types

    class DifferentialCompoundListIterator(
        Generic[U], Iterator[Any], System.IDisposable, Iterator[U]
    ):  # Class
        def __init__(
            self, list: Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompoundList
        ) -> None: ...

class DisplayEffectType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Bold: Agilent.MassSpectrometry.DataAnalysis.DisplayEffectType = (
        ...
    )  # static # readonly
    Hidden: Agilent.MassSpectrometry.DataAnalysis.DisplayEffectType = (
        ...
    )  # static # readonly
    Normal: Agilent.MassSpectrometry.DataAnalysis.DisplayEffectType = (
        ...
    )  # static # readonly

class DisplayPrecisionType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DigitsAfterDecimal: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType = (
        ...
    )  # static # readonly
    Exponential: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType = (
        ...
    )  # static # readonly

class DisplayPreferences(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IDataViewDependent,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DisplayPreferences
    ) -> None: ...

    ActiveDataView: Agilent.MassSpectrometry.DataAnalysis.DataView
    CheckMarkStatus: Agilent.MassSpectrometry.DataAnalysis.CheckMarkStatus
    Description: str
    DisplayGroup: int
    Exhibit: bool
    Highlighted: bool
    IconStatus: Agilent.MassSpectrometry.DataAnalysis.IconStatus
    IsVisibleInActiveDataView: bool  # readonly
    LineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PrimaryColor: System.Drawing.Color  # readonly
    ValidationStatus: Agilent.MassSpectrometry.DataAnalysis.ValidationStatus

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences: ...

class DisplaySettingsChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, e: System.EventArgs) -> None: ...

class DisplayTextResourceAssemblyAttribute(
    System.Runtime.InteropServices._Attribute, System.Attribute
):  # Class
    def __init__(self, assemblyName: str) -> None: ...

    AssemblyName: str  # readonly

class DisplayTextResourceAttribute(
    System.Runtime.InteropServices._Attribute, System.Attribute
):  # Class
    def __init__(self, resourceName: str) -> None: ...

    ResourceName: str  # readonly

class DisposableBase(System.IDisposable):  # Class
    def Dispose(self) -> None: ...

class DotProductSearch(System.IDisposable):  # Class
    @overload
    def __init__(
        self, library: Agilent.MassSpectrometry.DataAnalysis.ILibrary
    ) -> None: ...
    @overload
    def __init__(
        self,
        library: Agilent.MassSpectrometry.DataAnalysis.ILibrary,
        libSearchParams: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchParams,
    ) -> None: ...
    @overload
    def __init__(self, libraryName: str) -> None: ...
    @overload
    def __init__(
        self,
        libraryName: str,
        libFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
    ) -> None: ...
    @overload
    def __init__(
        self,
        libraryName: str,
        libFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
        libSearchParams: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchParams,
    ) -> None: ...

    BELOW_NOISE_WEIGHT: float = ...  # static # readonly
    FLAGGED_WEIGHT: float = ...  # static # readonly
    FOUR_PEAKS_WEIGHT: float = ...  # static # readonly
    MAX_SCORE: float = ...  # static # readonly
    ONE_PEAK_WEIGHT: float = ...  # static # readonly
    SCALING_FACTOR: float = ...  # static # readonly
    THREE_PEAKS_WEIGHT: float = ...  # static # readonly
    TWO_PEAKS_WEIGHT: float = ...  # static # readonly

    Library: Agilent.MassSpectrometry.DataAnalysis.INistLibrarySearch  # readonly
    LibrarySearchParams: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchParams

    def DebugWriteSearchResults(
        self,
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
        results: Dict[
            Agilent.MassSpectrometry.DataAnalysis.Component,
            System.Collections.Generic.List[
                Agilent.MassSpectrometry.DataAnalysis.CandidateHit
            ],
        ],
        dt: System.TimeSpan,
    ) -> None: ...
    def ComputeMatchScore_ByCASNumber(
        self,
        mzValuesTarget: List[float],
        abundanceValuesTarget: List[float],
        casNumber: str,
        filter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> Agilent.MassSpectrometry.DataAnalysis.CandidateHit: ...
    def ComputeMatchScore_ByCompoundName(
        self,
        mzValuesTarget: List[float],
        abundanceValuesTarget: List[float],
        compoundName: str,
        filter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> Agilent.MassSpectrometry.DataAnalysis.CandidateHit: ...
    def Dispose(self) -> None: ...
    def MakeSpectrumFilter(
        self, component: Agilent.MassSpectrometry.DataAnalysis.Component
    ) -> Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter: ...
    @overload
    def ComputeMatchScore(
        self,
        mzValuesTarget: List[float],
        abundanceValuesTarget: List[float],
        refSpectrum: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
        filter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> Agilent.MassSpectrometry.DataAnalysis.CandidateHit: ...
    @overload
    def ComputeMatchScore(
        self,
        mzValuesTarget: List[float],
        abundanceValuesTarget: List[float],
        mzValuesRef: List[float],
        abundanceValuesRef: List[float],
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> Agilent.MassSpectrometry.DataAnalysis.CandidateHit: ...
    @overload
    def Search(
        self,
        components: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Component
        ],
    ) -> Dict[
        Agilent.MassSpectrometry.DataAnalysis.Component,
        System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.CandidateHit
        ],
    ]: ...
    @overload
    def Search(
        self, component: Agilent.MassSpectrometry.DataAnalysis.Component
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self, mzValues: List[float], abundanceValues: List[float]
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self,
        mzValues: List[float],
        abundanceValues: List[float],
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self, mzValues: List[float], abundanceValues: List[float], retentionTime: float
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self,
        mzValues: List[float],
        abundanceValues: List[float],
        retentionTime: float,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self,
        mzValues: List[float],
        abundanceValues: List[float],
        filter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self,
        mzValues: List[float],
        abundanceValues: List[float],
        filter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...
    @overload
    def Search(
        self,
        mzValues: List[float],
        abundanceValues: List[float],
        specAttr: Agilent.MassSpectrometry.DataAnalysis.GenericSpectrumAttributes,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.CandidateHit
    ]: ...

class DoubleListParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IDoubleListParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float],
    ) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float],
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        digits: int,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DoubleListParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    DefaultValueString: str  # readonly
    ExtendedValueString: str  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDoubleListParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDoubleListParameter: ...
    def SetToDefault(self) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ToString(self) -> str: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    ) -> bool: ...

class DoubleParameter(
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialValue: float, defaultValue: float) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: float,
        defaultValue: float,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: float,
        defaultValue: float,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        digits: int,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.DoubleParameter
    ) -> None: ...

    CurrentPrecisionDigits: int
    DefaultValue: float
    DefaultValueString: str  # readonly
    ExtendedValueString: str  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit  # readonly
    RestrictValueToChoices: bool
    Value: float
    ValueChoices: List[float]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def GetUnitString(self, abbreviate: bool) -> str: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter: ...
    def SetToDefault(self) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ToString(self) -> str: ...
    def IsValueValid(self, value_: float) -> bool: ...

class DoubleParameterLimit(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        minimum: float,
        maximum: float,
        minimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
        maximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
    ) -> None: ...

    Maximum: float
    MaximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    Minimum: float
    MinimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def WriteXml(self, id: str, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit: ...

class DoubleRangeD:  # Class
    @overload
    def __init__(self, min: float, max: float) -> None: ...
    @overload
    def __init__(self, range: Agilent.MassSpectrometry.DataAnalysis.IRange) -> None: ...

    Max: float  # readonly
    Min: float  # readonly
    Width: float  # readonly

    @overload
    def Overlaps(
        self, range: Agilent.MassSpectrometry.DataAnalysis.DoubleRangeD
    ) -> bool: ...
    @overload
    def Overlaps(self, min: float, max: float) -> bool: ...
    def Contains(self, value_: float) -> bool: ...

    # Nested Types

    class MinComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.DoubleRangeD
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            a: Agilent.MassSpectrometry.DataAnalysis.DoubleRangeD,
            b: Agilent.MassSpectrometry.DataAnalysis.DoubleRangeD,
        ) -> int: ...

class DrawingMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Connected: Agilent.MassSpectrometry.DataAnalysis.DrawingMode = (
        ...
    )  # static # readonly
    Line: Agilent.MassSpectrometry.DataAnalysis.DrawingMode = ...  # static # readonly
    Point: Agilent.MassSpectrometry.DataAnalysis.DrawingMode = ...  # static # readonly

class DvTypeAndUnits(Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    ) -> None: ...

class E_ITEMTYPE(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ITEM_CUSTOM: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE = (
        ...
    )  # static # readonly
    ITEM_PRESET: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE = (
        ...
    )  # static # readonly

class E_MASSWINDOWTYPE(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ITEM_DA: Agilent.MassSpectrometry.DataAnalysis.E_MASSWINDOWTYPE = (
        ...
    )  # static # readonly
    ITEM_PPM: Agilent.MassSpectrometry.DataAnalysis.E_MASSWINDOWTYPE = (
        ...
    )  # static # readonly

class E_MATCH_MASS_SETS(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ITEM_DNA_POINT_MUTATION: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_EXTRA_AMINO_ACID: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_FMOC: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_IMMUNOGLOBULINGLYCOFORMS: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_INCOMPLETE_DIGEST: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_INTACT_OLIGONUCLEOTIDE: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_INTACT_PEPTIDE: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_INTACT_PROTEIN: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_MASS_MATCH: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_MISSING_AMINO_ACID: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_NOT_MATCH: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_NO_ENZYME_DIGESTION: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_OLIGONUCLEOTIDE_TRUNCATIONS: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_PREDICTED_MODIFICATIONS: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_PROTEIN_DIGEST: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_PROTEIN_MODIFICATIONS: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_PROTEIN_TRUNCATIONS: (
        Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS
    ) = ...  # static # readonly
    ITEM_SAMPLE_ARTIFACTS: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly
    ITEM_TBOC: Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS = (
        ...
    )  # static # readonly

class E_SEQUENCE_TYPE(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ITEM_DNA: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly
    ITEM_OLIGONUCLEOTIDE: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly
    ITEM_PROTEIN: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly
    ITEM_PROTEIN_DIGEST: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly
    ITEM_RNA: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly
    ITEM_SYNTHETIC_PEPTIDE: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE = (
        ...
    )  # static # readonly

class EicRtMzRanges(Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges):  # Class
    def __init__(self) -> None: ...

    IdComparer: System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges
    ]  # static # readonly
    RtComparer: System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges
    ]  # static # readonly

    @staticmethod
    def PartitionByRtRanges(
        fullList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges
        ],
    ) -> System.Collections.Generic.List[
        System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges
        ]
    ]: ...

class Element(Agilent.MassSpectrometry.DataAnalysis.IElement):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szSymbol: str,
        dAvgMass: float,
        dMonoMass: float,
        dApexMass: float,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    ElementApexMass: float
    ElementAvgMass: float
    ElementMonoMass: float
    ElementName: str
    ElementSymbol: str
    ElemetType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class ElementBounds:  # Class
    @overload
    def __init__(
        self, another: Agilent.MassSpectrometry.DataAnalysis.ElementBounds
    ) -> None: ...
    @overload
    def __init__(self, element: str, min: int, max: int) -> None: ...
    @overload
    def __init__(self) -> None: ...

    Element: str
    MaxCount: int
    MinCount: int

    @staticmethod
    def Convert(
        elementLimits: Dict[str, Mathematics.RangeInt]
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ElementBounds]: ...

class ElementLimit(
    Agilent.MassSpectrometry.DataAnalysis.IElementLimit, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ) -> None: ...
    @overload
    def __init__(self, element: str, minNumber: int, maxNumber: int) -> None: ...
    def Equals(self, other: Any) -> bool: ...

class ElementLimitListParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IElementLimitListParameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IElementLimit
        ],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IElementLimit
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ElementLimitListParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IElementLimitListParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IElementLimitListParameter: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.IElementLimit
        ],
    ) -> bool: ...

class EnumParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IEnumParameter[T],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialValue: T, defaultValue: T) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.EnumParameter
    ) -> None: ...

    DefaultValue: T
    EnumType: System.Type  # readonly
    LocalizedValueString: str  # readonly
    RestrictValueToChoices: bool
    Value: T
    ValueChoices: List[T]
    ValueString: str  # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IEnumParameter[T]
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IEnumParameter[T]: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...
    def IsValueValid(self, value_: Any) -> bool: ...

class EventHelper:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def FireEventSynchronously(del_: System.Delegate, args: List[Any]) -> None: ...
    @staticmethod
    def SetMessageReporter(
        reporter: Agilent.MassSpectrometry.DataAnalysis.IMessageReporter,
    ) -> None: ...
    @staticmethod
    def FireEventAsynchronously(del_: System.Delegate, args: List[Any]) -> None: ...

class ExcelUtilityClass:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetTemplateNameAndTypes(
        templateFolderPath: str, checkForAny: bool = ...
    ) -> System.Collections.Hashtable: ...

class FXArrayStore(
    Agilent.MassSpectrometry.DataAnalysis.BaseXYArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IFXArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IFXStore,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    def __init__(self) -> None: ...

    OuterObject: Agilent.MassSpectrometry.DataAnalysis.IFXData

    def ToString(self) -> str: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXStore: ...

class FXDataBase(
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.XYDataBase,
):  # Class
    DelayTime: float
    Description: Agilent.MassSpectrometry.DataAnalysis.IDescription  # readonly
    Manufactured: bool  # readonly
    NoiseResult: Agilent.MassSpectrometry.DataAnalysis.INoiseResult
    NormalizationInfo: (
        Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    )  # readonly
    PeakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList
    ResultList: Agilent.MassSpectrometry.DataAnalysis.IResultList
    SamplingPeriod: float
    Title2: str  # readonly
    XYProcessingHistory: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory

    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    def FindBaselineAdjustedYMax(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> float: ...
    def UpdatePrecision(self) -> bool: ...
    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    def ClearResults(self) -> bool: ...
    @staticmethod
    def UpdateFxDataDescription(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        description: Agilent.MassSpectrometry.DataAnalysis.IDescription,
        algorithmName: str,
        algorithmVariationName: str,
        algorithmVersion: str,
        algorithmAuthor: str,
    ) -> None: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    @staticmethod
    def UnitConverterDelayChange(
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
        newDelay: float,
    ) -> float: ...
    @staticmethod
    def UnitConverterDelayRestore(
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
        oldDelay: float,
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @staticmethod
    def FindPkMinYOffSet(
        fxDataBase: Agilent.MassSpectrometry.DataAnalysis.FXDataBase,
        xRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> float: ...
    @staticmethod
    def ComputeAndSetNormalizationInfo(
        mode: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes,
        databaseArray: List[Agilent.MassSpectrometry.DataAnalysis.FXDataBase],
        xRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    def RemoveCompoundInformation(self) -> None: ...
    def WriteFile(self, filePath: str, delimitor: str, appendData: bool) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def XOfMaximumInRange(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IRange, xValue: float
    ) -> bool: ...
    def CopyNormalizationInfoFrom(
        self, info: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    ) -> None: ...

class FXLimits(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IFXLimits,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.XYLimits,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IFXLimits
    ) -> None: ...

    MeasuredXMax: float
    MeasuredXMin: float
    XAtMaxY: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXLimits: ...

class FbfResult(
    Agilent.MassSpectrometry.DataAnalysis.IFbfResult,
    System.ICloneable,
    List[Any],
    List[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Sequence[Any],
    System.Collections.Generic.List[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.FbfResult
    ) -> None: ...
    @staticmethod
    def UndecoratedString(decoratedString: str) -> str: ...

class FbfResultList(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFbfResult
    ],
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFbfResult
    ],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IFbfResultList,
    List[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, fcResults: Agilent.MassSpectrometry.DataAnalysis.IFormulaConfirmResults
    ) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.IFbfResultList
    ) -> None: ...

    DelayTime: float
    FbfFoundHit: bool
    FragmentCoelutionScore: float
    FragmentConfirmed: bool
    FragmentIonInfoList: List[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo]
    MoleculeInfoExist: bool

    def NumFragIonEvaluated(self) -> int: ...
    def NumQualifiedFragIon(self) -> int: ...

class FileType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    ChromDirectoryBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    ChromatogramBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    Contents: Agilent.MassSpectrometry.DataAnalysis.FileType = ...  # static # readonly
    ImsFrameBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    ImsFrameMethod: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    ImsFrameSchema: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSDefaultMassCal: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSMassCalBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSPeakBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSProfileBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSScanBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSScanSchema: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSScan_XSpecific: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSTimeSegment: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSUserCalBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MSUserCalIndexBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    MethodParamChange: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    PeriodicActuals: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    ScanActuals: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    SpecDirectoryBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly
    SpectrumBinary: Agilent.MassSpectrometry.DataAnalysis.FileType = (
        ...
    )  # static # readonly

class FilterPropagator(
    Agilent.MassSpectrometry.DataAnalysis.IFilterPropagator
):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ChangeRangeCollectionToSingleRange(
        mzofIntRangeCol: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    @overload
    def CreateSpectrumRequest(
        self,
        desiredStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        sourceChromatograms: List[Agilent.MassSpectrometry.DataAnalysis.IChromatogram],
        retentionTimeRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...
    @overload
    def CreateSpectrumRequest(
        self,
        desiredStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        sourceChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...
    @overload
    def CreateSpectrumRequest(
        self,
        desiredStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        chromData: Agilent.MassSpectrometry.DataAnalysis.IBDAChromData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter: ...
    @overload
    def CreateChromatogramRequest(
        self,
        psetExtractChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def CreateChromatogramRequest(
        self,
        chromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType,
        includeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def CreateChromatogramRequest(
        self,
        signalWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @staticmethod
    def ChangeSpecTypeOfSpectrumRequest(
        psetExtractSpectrum: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        newSpecType: Agilent.MassSpectrometry.DataAnalysis.SpecType,
    ) -> None: ...
    @staticmethod
    def ChangeRangeCollectionToSingleRangeCollection(
        mzofIntRangeCol: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    @staticmethod
    def ChangeMzRangeArrayToSingleRange(
        rangeArray: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRange]: ...
    @staticmethod
    def SetupExtractChromForMSScanType(
        psetChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> None: ...

class FindCpdsByFormulaCpdDetails:  # Class
    ...

class FindPeaksChromBase:  # Class
    def __init__(
        self,
        standardUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        stdDelayInMinutes: float,
    ) -> None: ...

    Chrom_AppUnits: Agilent.MassSpectrometry.DataAnalysis.IFXData
    Chrom_StandardUnits: Agilent.MassSpectrometry.DataAnalysis.IFXData  # readonly
    RtRangeLimits_AppUnits: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    RtRangeLimits_StdUnits: (
        Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    )  # readonly

    def FilterAndPostProcessPeakList(
        self,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
        peakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    ) -> None: ...
    def AppPeakListToStdPeakList(
        self, pkList: Agilent.MassSpectrometry.DataAnalysis.IPeakList
    ) -> None: ...
    def AppRtToStdRt(self, rt: float) -> float: ...

class FindPeaksGeneralChrom(
    Agilent.MassSpectrometry.DataAnalysis.FindPeaksChromBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def LogRawRteResults(
        whereArray: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer],
        numPeaks: int,
        filePath: str,
    ) -> None: ...
    def FindManualPeak(
        self,
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
        newlyAddedPeakKey: int,
    ) -> List[int]: ...
    @staticmethod
    def LogIntegrableData(
        intData: Agilent.MassSpectrometry.DataAnalysis.RTEIntegrableData,
        msip: Agilent.MassSpectrometry.DataAnalysis.MSINT_PARAMS,
        filePath: str,
    ) -> None: ...

class FindPeaksGeneralChromParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Class
    def __init__(self) -> None: ...

    PeakFilterParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    PeakFinderParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator
    TimeRangeRestrictions: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection

class FindPeaksMS(Agilent.MassSpectrometry.DataAnalysis.IFindPeaks):  # Class
    def __init__(self) -> None: ...

    DoArea: bool
    DoWidth: bool

    @staticmethod
    def SetToAlgorithmDefaults(
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
        msLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel,
    ) -> None: ...

class FindPeaksMSParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Class
    def __init__(self) -> None: ...

    ChargeStateParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )
    PeakFilterParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    TOFParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder

class FindPeaksManualGeneralChromParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Class
    def __init__(self) -> None: ...

    ManualPeakParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetManualIntegration
    PeakFilterParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    PeakFinderParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator

class FindPeaksMsMsChrom(Agilent.MassSpectrometry.DataAnalysis.IFindPeaks):  # Class
    def __init__(self) -> None: ...

class FindPeaksMsMsChromError(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EmptyChromatogram: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    NoError: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    NotEnoughBaseline: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    NotEnoughPoints: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    NotEnoughSignal: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    ThresholdData: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly
    UnknownError: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMsMsChromError = (
        ...
    )  # static # readonly

class FindPeaksMsMsChromParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Class
    def __init__(self) -> None: ...

    PeakFilterParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    TimeRangeRestrictions: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection

class FindPeaksUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ExtendAndIntegrate(
        cgram: Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram,
        intAlgorithm: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
        iFindPeaksParameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...

class FloatingProperties(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FloatingProperties
    ) -> None: ...

    RelPercentageX: float
    RelPercentageY: float

    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class FoldChangeDirection(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DownRegulation: Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection = (
        ...
    )  # static # readonly
    Indeterminant: Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection = (
        ...
    )  # static # readonly
    NoChange: Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection = (
        ...
    )  # static # readonly
    UpRegulation: Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection = (
        ...
    )  # static # readonly

class Formula(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail
    ],
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail
    ],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPlotItemAnnotation,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IFormula,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.Formula
    ) -> None: ...

    HilightedColName: str  # static
    NestedTableName: str  # static

    AttrDefInterface: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    MaxCalculatedHeight: float  # readonly
    MaxObservedHeight: float  # readonly
    SumCalculatedHeight: float  # readonly
    SumObservedHeight: float  # readonly

class FormulaCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IInterruptAlgorithm
):  # Class
    def __init__(self) -> None: ...
    def FindFragmentFormulas(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        psetGeneralMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        bestIDMolecularFormula: str,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetPeakFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
        bFindFormulasForUnknownIons: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFragmentFormulaCalculatorResults: ...
    def Calculate(
        self,
        psetMfg: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults: ...
    def FindAllFragIonsFromMassSpectrum(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        psetGeneralMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        bestIDMolecularFormula: str,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetPeakFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    ) -> None: ...
    @overload
    def FindFormulas(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        mzOfInterestArray: List[float],
        mzInterpretation: Agilent.MassSpectrometry.DataAnalysis.FormulaCalculator.PeaksInterpretation,
        psetMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...
    @overload
    def FindFormulas(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        mzOfInterestArray: List[float],
        mzInterpretation: Agilent.MassSpectrometry.DataAnalysis.FormulaCalculator.PeaksInterpretation,
        psetMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        allowMultipleSpecies: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...
    @overload
    def FindFormulas(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        msMsSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        psetMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetChargeStateMsMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...
    @overload
    def FindFormulas(
        self,
        precursorMz: float,
        precursorZ: int,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        msMsSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        psetMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetChargeStateMsMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...
    @overload
    def FindFormulas(
        self,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        precursorMz: float,
        precursorZ: int,
        ionPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        msMsFragments: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        psetMFG: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        psetChargeStateMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetChargeStateMsMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...

    ProgressEvent: Agilent.MassSpectrometry.DataAnalysis.ProgressEventHandler  # Event

    # Nested Types

    class PeaksInterpretation(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        EachAPeakInOneCluster: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaCalculator.PeaksInterpretation
        ) = ...  # static # readonly
        EachIsACompound: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaCalculator.PeaksInterpretation
        ) = ...  # static # readonly
        MultiplesRepresentClusterIons: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaCalculator.PeaksInterpretation
        ) = ...  # static # readonly

class FormulaCalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IPlotItemAnnotation,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults,
    System.Runtime.Serialization.ISerializable,
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FormulaCalculatorResults
    ) -> None: ...

    NestedTableName: str  # static

class FormulaConfirmResults(
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.SpecialMsPeakResults,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IFormulaConfirmResults,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IFormulaConfirmResults
    ) -> None: ...

class FormulaGenerationRules(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AlmostNone: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules = (
        ...
    )  # static # readonly
    B0201: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules = (
        ...
    )  # static # readonly
    Permissive: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules = (
        ...
    )  # static # readonly

class FormulaGenerator:  # Class
    def __init__(self) -> None: ...

    LastTargetFormulaTracker: (
        Agilent.MassSpectrometry.DataAnalysis.ITargetFormulaTracker
    )  # static # readonly

    @overload
    @staticmethod
    def FindCompositions(
        compound: ICompound,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...
    @overload
    @staticmethod
    def FindCompositions(
        lowestIsotopeNeutralMass: float,
        representativeIsotopeCluster: List[
            Agilent.MassSpectrometry.DataAnalysis.SpectralPeak
        ],
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...
    @overload
    @staticmethod
    def FindCompositions(
        lowestIsotopeNeutralMass: float,
        representativeIsotopeCluster: List[
            Agilent.MassSpectrometry.DataAnalysis.SpectralPeak
        ],
        clusterIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...
    @overload
    @staticmethod
    def FindCompositions(
        isotopeCluster: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        clusterZ: int,
        radicalCationOrAnion: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...
    @overload
    @staticmethod
    def FindCompositions(
        neutralMass: float,
        massChoice: Agilent.MassSpectrometry.DataAnalysis.MassIsotopeChoice,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...

    # Nested Types

    class ElementCategory(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        AminoAcid: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.ElementCategory
        ) = ...  # static # readonly
        ChemicalElement: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.ElementCategory
        ) = ...  # static # readonly
        RNA: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.ElementCategory = (
            ...
        )  # static # readonly

    class UserParameters:  # Class
        def __init__(self) -> None: ...

        ApplyDBConfirming: bool
        AverageMzAbundancePower: int
        DoAbsoluteScoring: bool
        ElementBounds: List[Agilent.MassSpectrometry.DataAnalysis.ElementBounds]
        ElementCategory: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.ElementCategory
        )
        FormulaGenerationRules: (
            Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules
        )
        IntensityScoreWeight: float
        MassAccuracyCoeffients: List[float]
        MassScoreWeight: float
        MinMatchingScore: float
        MsMsScoreWeight: float
        RelativeIntensityAccuracy: float
        RequiredElectronState: (
            Agilent.MassSpectrometry.DataAnalysis.CompoundElectronState
        )
        SpacingScoreWeight: float
        TargetFormula: str

        def Clone(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters: ...
        def BinaryWrite(self, writer: System.IO.BinaryWriter) -> None: ...
        def BinaryRead(self, reader: System.IO.BinaryReader) -> None: ...

class FormulaGenerator2:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetProductsForGivenPrecursor(
        precursorFormula: str,
        precursorPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        precursorLowestIsotopeMZ: float,
        precursorZ: int,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuray: List[float],
        cleanedProductPeaks: List[Agilent.MassSpectrometry.DataAnalysis.IProduct],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPrecursor: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorIsotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorlowestIsotopeMZ: float,
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorIsotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorlowestIsotopeMZ: float,
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorIsotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorlowestIsotopeMZ: float,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        maxProductIsotopeClusterCount: int,
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...

class FormulaGeneratorMS2:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorIsotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorlowestIsotopeMZ: float,
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorIsotopes: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...
    @overload
    @staticmethod
    def FindPrecursorCompositions(
        precursorlowestIsotopeMZ: float,
        precursorIonSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        parametersForPrecursor: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
        isotopeCharacteristics: IsotopeCharacteristics,
        productPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        productMassAccuracyCoeffients: List[float],
        precursorNeutralLowestIsotopeMass: float,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IPrecursor]: ...

class FormulaList(
    List[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormula
    ],
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormula
    ],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Agilent.MassSpectrometry.DataAnalysis.IFormulaList,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FormulaList
    ) -> None: ...

    MassTooLargeMessage: str  # static
    NestedTableName: str  # static
    NoFormulaFoundMessage: str  # static

    AssignedAbundance: float
    ExceededNeutralMassLimit: float
    SpeciesDefinition: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    TargetFormulaTracker: Agilent.MassSpectrometry.DataAnalysis.ITargetFormulaTracker

class FormulaMsDetail(
    Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FormulaMsDetail
    ) -> None: ...

    NestedTableName: str  # static

    ParentList: Agilent.MassSpectrometry.DataAnalysis.IFormula

class FormulaMsMsDetail(
    Agilent.MassSpectrometry.DataAnalysis.IFormulaMsMsDetail,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FormulaMsMsDetail
    ) -> None: ...

    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

    def ConvertOldResults(
        self, precursorSpecies: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ) -> None: ...

class FormulaSource(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CompoundExchangeFile: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly
    CompoundGroups: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly
    Database: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly
    ExistingCpd: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly
    Formulas: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly
    Worklist: Agilent.MassSpectrometry.DataAnalysis.FormulaSource = (
        ...
    )  # static # readonly

class Found(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    InBoth: Agilent.MassSpectrometry.DataAnalysis.Found = ...  # static # readonly
    InReference: Agilent.MassSpectrometry.DataAnalysis.Found = ...  # static # readonly
    InSample: Agilent.MassSpectrometry.DataAnalysis.Found = ...  # static # readonly

class FragAllIonsResultList(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo
    ],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Agilent.MassSpectrometry.DataAnalysis.IFragAllIonsResultList,
    List[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo
    ],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Iterable[Any],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, fbfResultList: Agilent.MassSpectrometry.DataAnalysis.IFbfResultList
    ) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.IFragAllIonsResultList
    ) -> None: ...

    DelayTime: float

class FragEnergyMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Fixed: Agilent.MassSpectrometry.DataAnalysis.FragEnergyMode = (
        ...
    )  # static # readonly
    MultiSegment: Agilent.MassSpectrometry.DataAnalysis.FragEnergyMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.FragEnergyMode = (
        ...
    )  # static # readonly

class FragIonProcessInfo:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FragIonProcessInfo
    ) -> None: ...

    abundanceList: List[float]
    chromFilter: Agilent.MassSpectrometry.DataAnalysis.BDAChromFilter
    chromPkList: Agilent.MassSpectrometry.DataAnalysis.IPeakList
    coelutionScore: float
    fragCoreEic: Agilent.MassSpectrometry.DataAnalysis.IChromatogram
    fragIonSource: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource
    height: float
    ionConfirmed: bool
    msOverallScanRecordInfo: (
        Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo
    )
    mz: float
    notes: str
    optimalCE: float
    optimalFV: float
    parentCpdName: str
    referenceIon: bool
    retentionTimeDiff: float
    signalToNoise: float
    targetPk: Agilent.MassSpectrometry.DataAnalysis.IChromPeak
    targetPkIndex: int
    targetPkRT: float

    def DisqualifyFragProcessIon(self, disQnote: str) -> None: ...

class FragmentAssignerUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def DetermineIonSpecies(
        m0Formula: str, z: int, mz: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies: ...
    @staticmethod
    def FillResultForEachPeak(
        peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        candidates: List[
            Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate
        ],
        keepIsotope: bool,
        result: List[
            List[Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate]
        ],
        sortingKeys: List[float],
        peakIndex: int,
    ) -> None: ...
    @staticmethod
    def ProcessSpectrum(
        fragmentSpectrum: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow,
        parentZ: int,
        massAccuracyCoefficients: List[float],
        precursorMolecule: Agilent.MassSpectrometry.DataAnalysis.Molecule,
        parentChargeType: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion,
        parentMz: float,
    ) -> List[BasicTypes.FragmentIon]: ...
    @staticmethod
    def RemoveDuplicatedAssignments(
        mzSortedAssignments: List[
            List[Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate]
        ],
        peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
    ) -> None: ...
    @staticmethod
    def DetermineProductChargeRange(
        parentZ: int, productChargeCount: int, minChargeCount: int, maxChargeCount: int
    ) -> None: ...

class FragmentAssignmentCandidate:  # Class
    def __init__(self) -> None: ...

    Formula: str
    IsotopeIndex: int
    Molfile: str
    PredictedMz: float
    Score: float
    Z: int

    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate: ...

class FragmentFormulaCalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    Agilent.MassSpectrometry.DataAnalysis.IFragmentFormulaCalculatorResults,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Any],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.FragmentFormulaCalculatorResults,
    ) -> None: ...

class FragmentIonInfo(
    Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.FragmentIonInfo
    ) -> None: ...

    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class FragmentIonSource(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HighESpectrum: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource = (
        ...
    )  # static # readonly
    Library: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource = (
        ...
    )  # static # readonly

class FragmentationMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CID: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode = (
        ...
    )  # static # readonly
    ETD: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode = (
        ...
    )  # static # readonly

class FrameRegionShape(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    DriftRange: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    Ellipse: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    MassRange: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    Polygon: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    Rectangle: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape = (
        ...
    )  # static # readonly

class FunctionLinear(
    Agilent.MassSpectrometry.DataAnalysis.IFunction,
    Agilent.MassSpectrometry.DataAnalysis.FunctionPolynomial,
):  # Class
    def __init__(self, coefficients: List[float]) -> None: ...

    IsStrictlyAsceding: bool  # readonly

class FunctionPolynomial(Agilent.MassSpectrometry.DataAnalysis.IFunction):  # Class
    @overload
    def __init__(self, coeff: List[float]) -> None: ...
    @overload
    def __init__(self, coeff: List[float]) -> None: ...

    Coefficients: List[float]  # readonly
    IsConstant: bool  # readonly

    def GetHashCode(self) -> int: ...
    def Y(self, x: float) -> float: ...
    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.FunctionPolynomial
    ) -> bool: ...

class FxDataImport:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ReadAllObjectsFromFile(
        filePath: str,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IFXData
    ]: ...
    @overload
    @staticmethod
    def ReadSingleObjectFromFile(
        filePath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @overload
    @staticmethod
    def ReadSingleObjectFromFile(
        filePath: str, objectIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @staticmethod
    def MakeChromatogram(
        xArray: List[float], yArray: List[float], title: str, fullFilePath: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IChromatogram: ...
    @staticmethod
    def ReadXyArraysFromCSV(
        strCSVFile: str,
        xArray: List[float],
        yArray: List[float],
        title: str,
        isChromatogram: bool,
        isSpectrum: bool,
    ) -> None: ...
    @staticmethod
    def MakeMS(
        xArray: List[float], yArray: List[float], title: str, fullFilePath: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...

class GaussFit:  # Class
    def __init__(self) -> None: ...
    def GaussianFit(
        self,
        xArray: List[float],
        yArray: List[float],
        mean: float,
        stdDev: float,
        confidence: float,
    ) -> None: ...

class GcMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class GcMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class GenericAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation, System.ICloneable
):  # Class
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.GenericAnnotation
    ) -> None: ...
    @overload
    def __init__(self) -> None: ...

    GHOST_ANNOTATION_WIDTH: int  # static
    GRAY_PEN: System.Drawing.Pen  # static
    OFFSET: int  # static
    SIZE: int  # static

    AnchoredProperties: Agilent.MassSpectrometry.DataAnalysis.AnchoredProperties
    AnnotationOrientation: Agilent.MassSpectrometry.DataAnalysis.Orientation
    BodyH: float
    BodyW: float
    BodyXDC: float
    BodyYDC: float
    FloatingProperties: Agilent.MassSpectrometry.DataAnalysis.FloatingProperties
    Id: int
    IsGhostAnnotation: bool
    IsMergedAnnotation: bool
    NormalizationInformation: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    Type: Agilent.MassSpectrometry.DataAnalysis.AnnotationType

    def Equals(self, obj: Any) -> bool: ...
    @overload
    @staticmethod
    def PointInPolygon(
        p: System.Drawing.PointF, polygon: List[System.Drawing.PointF]
    ) -> bool: ...
    @overload
    @staticmethod
    def PointInPolygon(
        testX: float, testY: float, polygon: List[System.Drawing.PointF]
    ) -> bool: ...
    def UpdateFloatPosition(self, pane: Pane, bodyPC: System.Drawing.Point) -> None: ...
    @staticmethod
    def PrintPoints(pts: List[System.Drawing.PointF]) -> None: ...
    @staticmethod
    def GetAngle(a: Agilent.MassSpectrometry.DataAnalysis.Orientation) -> float: ...
    @overload
    def IsHit(self, selectionRect: System.Drawing.Rectangle, pane: Pane) -> bool: ...
    @overload
    def IsHit(self, xcc: int, ycc: int, pane: Pane) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Draw(
        self, g: System.Drawing.Graphics, pane: Pane, paneRect: System.Drawing.Rectangle
    ) -> None: ...
    @staticmethod
    def Distance(
        p: System.Drawing.Point, line: List[System.Drawing.PointF]
    ) -> float: ...
    @staticmethod
    def GetBoundingBoxRotated(
        upperLeftX: int, upperLeftY: int, width: float, height: float, angle: float
    ) -> List[System.Drawing.PointF]: ...
    @staticmethod
    def GetBoundingBox(
        upperLeftX: int,
        upperLeftY: int,
        width: float,
        height: float,
        angle: Agilent.MassSpectrometry.DataAnalysis.Orientation,
    ) -> System.Drawing.Rectangle: ...

class GenericSpectrumAttributes:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, basePeakSNR: float) -> None: ...
    @overload
    def __init__(
        self,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
    ) -> None: ...
    @overload
    def __init__(
        self,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
        basePeakSNR: float,
    ) -> None: ...
    @overload
    def __init__(
        self,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
        searchFilter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
    ) -> None: ...
    @overload
    def __init__(
        self,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
        searchFilter: Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter,
        basePeakSNR: float,
    ) -> None: ...

    DEFAULT_MASS_ACCURACY: (
        Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy
    ) = ...  # static # readonly
    NO_RT_INFO: float = ...  # static # readonly
    NO_SNR_INFO: float = ...  # static # readonly

    BasePeakSNR: float  # readonly
    IsBasePeakSNRDefined: bool  # readonly
    MassAccuracy: (
        Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy
    )  # readonly
    RetentionTime: float  # readonly
    SpectrumSearchFilter: (
        Agilent.MassSpectrometry.DataAnalysis.SpectrumSearchFilter
    )  # readonly

class GeneticTargetSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.TargetSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ITargetSpectrum,
):  # Class
    @overload
    def __init__(
        self, mzArray: List[float], abundArray: List[float], rt: float, threshold: float
    ) -> None: ...
    @overload
    def __init__(
        self,
        mzArray: List[float],
        abundArray: List[float],
        rt: float,
        massAccuracy: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy,
        threshold: float,
    ) -> None: ...
    @overload
    def __init__(
        self,
        mzArray: List[float],
        abundArray: List[float],
        specAttr: Agilent.MassSpectrometry.DataAnalysis.GenericSpectrumAttributes,
        threshold: float,
    ) -> None: ...
    def Contains(self, mzKey: int) -> bool: ...
    def IsFlagged(self, mzKey: int) -> bool: ...

class GenieFindPeaks(
    Agilent.MassSpectrometry.DataAnalysis.FindPeaksChromBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class GenieFindPeaksParameters(
    Agilent.MassSpectrometry.DataAnalysis.IGenieFindPeaksParameters,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
):  # Class
    def __init__(self) -> None: ...

class GenieTimedEvent(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        code: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode,
        time: float,
    ) -> None: ...
    @overload
    def __init__(
        self,
        code: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode,
        time: float,
        value_: float,
    ) -> None: ...
    @overload
    def __init__(
        self, gte: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEvent
    ) -> None: ...

    Code: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode
    Time: float
    Value: float

    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self, igte: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent: ...

class GenieTimedEventCode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ECALLVALLEYS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECAREAS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECARM: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECBACKWARD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECBASELINE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECDISABLE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECEND: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECFRONT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECHOLD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECIMMEDIATE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECNEGATIVE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECREJECT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECSHOULDERS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECSLICES: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECSP: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECTANGENT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECTHRESHOLD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    ECWIDTH: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECALLVALLEYS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECAREAS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECARM: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECBACKWARD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECBASELINE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECDISABLE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECEND: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECFRONT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECHOLD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECNEGATIVE: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECREJECT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECSHOULDERS: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECSLICES: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECSP: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECTANGENT: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECTHRESHOLD: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly
    MECWIDTH: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode = (
        ...
    )  # static # readonly

class GenieTimedEventCollection(
    Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent],
    Iterable[Any],
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ],
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, igtec: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection
    ) -> None: ...
    @staticmethod
    def DefaultCompare(
        te1: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent,
        te2: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent,
    ) -> int: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class GenieTimedEventCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollectionParameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        gtecp: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCollectionParameter,
    ) -> None: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...

class GrabHandle(Agilent.MassSpectrometry.DataAnalysis.IGrabHandle):  # Class
    def __init__(
        self,
        c: System.Windows.Forms.Cursor,
        position: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition,
    ) -> None: ...

    BRUSH: System.Drawing.Brush  # static
    PEN: System.Drawing.Pen  # static
    SIZE: int  # static

    BodyX: float
    BodyY: float
    DecoratorCursor: System.Windows.Forms.Cursor
    Position: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition  # readonly

    def Draw(self, g: System.Drawing.Graphics) -> None: ...
    def IsHit(self, xcc: float, ycc: float) -> bool: ...

class GrabHandleClickPosition(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Bottom: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    BottomLeft: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    BottomRight: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    Left: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    PointerHead: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    Right: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    Top: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    TopLeft: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly
    TopRight: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition = (
        ...
    )  # static # readonly

class GroupMsSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.MassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.GroupMsSpectrum
    ) -> None: ...

class HelpUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ShowHelpWindow(
        parent: System.Windows.Forms.Control, helpFileName: str, key: str
    ) -> None: ...
    @staticmethod
    def GetHelpFile(helpFileName: str, subDir: str) -> str: ...
    @staticmethod
    def ShowHelpWindowById(
        parent: System.Windows.Forms.Control, helpFileName: str, id: str, key: str
    ) -> None: ...

class HorizontalGrabHandle(
    Agilent.MassSpectrometry.DataAnalysis.IGrabHandle,
    Agilent.MassSpectrometry.DataAnalysis.GrabHandle,
):  # Class
    def __init__(
        self, position: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition
    ) -> None: ...

class I2DPoint(object):  # Interface
    X: float
    Y: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.I2DPoint: ...

class I3DPoint(object):  # Interface
    X1: float
    X2: float
    Y: float
    Z1: float
    Z2: float

class IAcqDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
):  # Interface
    AnalysisNumber: int
    BatchDirName: str  # readonly
    DataDirName: str  # readonly
    DeviceId: int
    DeviceName: str
    DeviceNumber: int
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType

class IAcqMetaData(
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Interface
    Count: int  # readonly

    def FindBPM(
        self, rtUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit, rtValue: float
    ) -> float: ...
    def GetClosestIndexAtRT(self, rt: float) -> int: ...
    def GetRT(self, index: int) -> float: ...
    def SetData(self, rt: List[float], bpm: List[float], pointCount: int) -> None: ...
    def SetRT(self, index: int, rt: float) -> None: ...
    def GetBPM(self, index: int) -> float: ...
    def SetBPM(self, index: int, bpMz: float) -> None: ...

class IAcqMethodIdentificationHit(object):  # Interface
    Best: bool
    CasId: str
    CollisionEnergy: float
    CompoundName: str
    FragmentorVoltage: float
    Highlighted: bool
    ID: int
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MatchScore: float
    PrecursorIon: float
    ProductIon: float

class IAcqMethodIdentificationResults(System.ICloneable):  # Interface
    Hits: List[
        Agilent.MassSpectrometry.DataAnalysis.IAcqMethodIdentificationHit
    ]  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly

    def GetDataSet(self) -> System.Data.DataSet: ...
    def GetBest(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAcqMethodIdentificationHit: ...
    def GetHighlightedHit(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAcqMethodIdentificationHit: ...
    def ClearBestFlags(self) -> None: ...
    def SetHighlightedHit(self, hitID: int) -> None: ...
    def SetAsBest(self, hitID: int) -> None: ...

class IActionItem(object):  # Interface
    ...

class IActuals(object):  # Interface
    def GetActuals(self, timeInMins: float) -> System.Data.DataSet: ...
    def GetActualNames(self) -> List[str]: ...
    def GetActualValue(
        self, actualDisplayName: str, xArray: List[float], yArray: List[float]
    ) -> None: ...
    def IsActualsPresent(self) -> bool: ...

class IAddToLibraryLC(object):  # Interface
    def CheckForDuplicates(
        self,
        cpds: System.Data.DataSet,
        pset: Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryCompoundLC,
    ) -> System.Data.DataSet: ...
    def SearchCompound(
        self,
        cpdParams: Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryUserSpectraLC,
    ) -> System.Data.DataSet: ...
    def Add(
        self,
        ds: System.Data.DataSet,
        spec: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
        pset: Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryLC,
    ) -> None: ...
    def IsAllowed(
        self, param: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    ) -> bool: ...

class IAdjustDelayTime(object):  # Interface
    def AdjustDelayTime(self, oldDelay: float, newDelay: float) -> None: ...

class IAdjustedExctrationRanges(object):  # Interface
    IsUndoAdjustment: bool  # readonly

    def GetItemIds(self) -> List[int]: ...
    def GetAdjustedRanges(
        self, itemId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def HasAdjustedRanges(self, itemId: int) -> bool: ...

class IAlgorithmInfo(System.ICloneable):  # Interface
    Author: str  # readonly
    Name: str  # readonly
    ParameterSets: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ]  # readonly
    SpectrumDetails: (
        Agilent.MassSpectrometry.DataAnalysis.SpectrumExtractDetails
    )  # readonly
    VariationName: str  # readonly
    Version: str  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo: ...

class IAminoAcid(object):  # Interface
    AminoAcidFormula: str
    AminoAcidName: str
    AminoAcidSingleLetterSymbol: str
    AminoAcidThreeLetterSymbol: str
    AminoAcidType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IAnalysis(object):  # Interface
    DataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess  # readonly
    FilePath: str  # readonly
    Name: str  # readonly

class IAnnotation(System.ICloneable):  # Interface
    Id: int
    NormalizationInformation: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo

    def Draw(
        self, g: System.Drawing.Graphics, pane: Pane, paneRect: System.Drawing.Rectangle
    ) -> None: ...
    @overload
    def IsHit(self, rect: System.Drawing.Rectangle, pane: Pane) -> bool: ...
    @overload
    def IsHit(self, xInControlCoor: int, yInControlCoor: int, pane: Pane) -> bool: ...

class IAnnotationList(System.ICloneable):  # Interface
    Annotations: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ]  # readonly

    def GetAnnotationWithID(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...
    def Add(
        self, annotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ) -> None: ...
    def Delete(
        self, annotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ) -> None: ...
    def CreateAndInit(
        self,
        category: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory,
        iAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...

class IAnnotationSettings(object):  # Interface
    CurrentAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    OriginalAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation

class IAppFeatureConfig(object):  # Interface
    LastModificationTime: System.DateTime  # readonly
    SupportedKeyStrings: System.Collections.Generic.List[str]  # readonly

    def Contains(self, keyString: str) -> bool: ...
    def AddKey(
        self, keyString: str, initialState: bool
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode: ...
    def KeyString(
        self, keyCode: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode
    ) -> str: ...
    def SetKeyState(self, keyString: str, newState: bool) -> None: ...
    def KeyCode(
        self, keyString: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode: ...
    def AddOrKey(
        self, keyString: str, simpleKeys: List[str]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode: ...
    @overload
    def IsApplicable(self, configTag: str) -> bool: ...
    @overload
    def IsApplicable(
        self, keyCode: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode
    ) -> bool: ...

class IAppFeatureConfigKeyCode(object):  # Interface
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IAppFeatureConfigKeyCode
    ) -> bool: ...

class IAssignChargeStates(object):  # Interface
    def AssignChargeStates(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    ) -> None: ...

class IAsymmetricRange(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    Center: float
    HighSpan: float
    LowSpan: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IAsymmetricRange: ...

class IAtom(object):  # Interface
    Alias: str  # readonly
    Charge: int  # readonly
    NucleonNumber: int  # readonly
    RadicalCode: int  # readonly
    Symbol: str  # readonly
    XCoordinadate: float  # readonly
    YCoordinadate: float  # readonly

    def GetBonds(
        self, structure: Agilent.MassSpectrometry.DataAnalysis.IMolecularStructure
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBond]: ...
    def GetImplicitHCount(
        self, structure: Agilent.MassSpectrometry.DataAnalysis.IMolecularStructure
    ) -> int: ...

class IBDAAcquisitionData(object):  # Interface
    BPMassArray: List[float]  # readonly
    PointCount: int  # readonly
    RetentionTimeArray: List[float]  # readonly

class IBDAActualData(object):  # Interface
    Category: str
    DataValue: Any
    DisplayEffectType: Agilent.MassSpectrometry.DataAnalysis.DisplayEffectType
    DisplayName: str
    DisplayValue: str
    InternalName: str
    Unit: str

class IBDAActuals(object):  # Interface
    def GetActualValue(
        self,
        actualDisplayName: str,
        xArrayValues: List[float],
        yArrayValues: List[float],
    ) -> None: ...
    def GetActuals(self, timeInMins: float) -> System.Data.DataSet: ...
    def GetActualCollection(
        self, timeInMins: float
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDAActualData]: ...
    def GetActualNames(self) -> List[str]: ...
    def IsActualsPresent(self) -> bool: ...

class IBDAChromData(Agilent.MassSpectrometry.DataAnalysis.ILwXyData):  # Interface
    AbundanceLimit: float  # readonly
    AcquiredTimeRange: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType  # readonly
    CollisionEnergy: float  # readonly
    DeviceName: str  # readonly
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    FragmentorVoltage: float  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    IsCycleSummed: bool  # readonly
    IsPrimaryMrm: bool  # readonly
    MSLevelInfo: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    MZOfInterest: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    MeasuredMassRange: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    MzRegionsWereExcluded: bool  # readonly
    OrdinalNumber: int  # readonly
    SamplingPeriod: float  # readonly
    SignalDescription: str  # readonly
    SignalName: str  # readonly
    Threshold: float  # readonly
    TotalDataPoints: int  # readonly
    XArray: List[float]  # readonly
    YArray: List[float]  # readonly

    def GetYAxisInfoChrom(
        self,
        yChromunit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        yChromvalueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def GetXAxisInfoChrom(
        self,
        xChromunit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        xChromvalueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromData: ...

class IBDAChromFilter(object):  # Interface
    ChargeStateLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    ChromatogramSubType: Agilent.MassSpectrometry.DataAnalysis.ChromSubType
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    Description: str
    DesiredMSStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DeviceName: str
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    DoCycleSum: bool
    ExtractOneChromatogramPerScanSegment: bool
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IncludeMassRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    Integrate: bool
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MzOfInterestFilter: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    OrdinalNumber: int
    ReferenceWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange
    SignalDescription: str
    SignalName: str
    SignalWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    SingleChromatogramForAllMasses: bool
    UseReference: bool
    YValueInCounts: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter: ...

class IBDAChromFilterIcp(
    Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter
):  # Interface
    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilterIcp: ...

class IBDAConversion(object):  # Interface
    def ToBdaPeakSpecFilter(
        self,
        psetApse: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
        specType: Agilent.MassSpectrometry.DataAnalysis.SpecType,
        msLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter: ...
    @overload
    def ToBdaPeakSpectrumParameters(
        self,
        psetApse: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
        psetSpectrum: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        sourceChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        backgroundSpectrum: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
        peakIndex: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpectrumParameters: ...
    @overload
    def ToBdaPeakSpectrumParameters(
        self,
        peakSpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter,
        specFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter,
        chromData: Agilent.MassSpectrometry.DataAnalysis.IBDAChromData,
        chromPeakList: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList,
        peakIndex: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpectrumParameters: ...
    def ToBdaChromFilter(
        self, psetChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter: ...
    def FromBdaSpecData(
        self, specData: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrum: ...
    def FromBdaChromData(
        self, chromData: Agilent.MassSpectrometry.DataAnalysis.IBDAChromData
    ) -> Agilent.MassSpectrometry.DataAnalysis.IChromatogram: ...
    def ToBdaSpecFilter(
        self, psetSpectrum: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter: ...

class IBDADataAccess(
    Agilent.MassSpectrometry.DataAnalysis.IBDAReadChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IBDAReadSpectra,
    Agilent.MassSpectrometry.DataAnalysis.IBDASample,
    Agilent.MassSpectrometry.DataAnalysis.IBDAActuals,
    Agilent.MassSpectrometry.DataAnalysis.IBDAUserCalibration,
):  # Interface
    AcquisitionMetaData: (
        Agilent.MassSpectrometry.DataAnalysis.IBDAAcquisitionData
    )  # readonly
    DataFileName: str  # readonly
    DesiredMSStorageTypeToUse: (
        Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    )
    FileInformation: (
        Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    )  # readonly
    MassRangesOverallLimit: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    QqqAcqMethodReader: (
        Agilent.MassSpectrometry.DataAnalysis.QqqAcqMethodReader
    )  # readonly
    ScanRejectionFlagValueTable: System.Data.DataTable
    SchemaDefaultDirectory: str

    def GetTimeSegmentDetails(
        self, timesegmentID: int, numOfScans: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def IsAcquisitionStatusComplete(self) -> bool: ...
    def GetTimeSegmentsIDArray(self) -> List[int]: ...
    @overload
    def OpenDataFile(self, filename: str) -> bool: ...
    @overload
    def OpenDataFile(self, filename: str, bOptimizeFileHandling: bool) -> bool: ...
    def GetScanRecordsInfo(
        self, scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection: ...
    def PersistScanRejectionFlagValueTable(self) -> None: ...
    def CloseDataFile(self) -> None: ...
    def IsDataFileOpen(self) -> bool: ...
    def GetScanRecord(
        self, i: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo: ...
    def GetMSScanInformation(
        self, retentionTime: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanFileInformation: ...
    def GetDataDependentScanInfo(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection: ...
    def RefreshDataFile(self, isNewDataPresent: bool) -> bool: ...
    def ClearScanRejectionFlagValueTable(self) -> None: ...
    def GetTimeSegmentRanges(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRange]: ...
    def GetElementNameCollection(self, timesegmentID: int) -> Dict[float, str]: ...
    def IsDataDependentScanInfoPresent(self) -> bool: ...

class IBDAEvents(object):  # Interface
    CancelIndicator: Agilent.MassSpectrometry.DataAnalysis.CancelIndicator

    ProgressEvent: (
        Agilent.MassSpectrometry.DataAnalysis.BDAProgressEventHandler
    )  # Event

class IBDAFileInformation(System.ICloneable):  # Interface
    AcquisitionTime: System.DateTime  # readonly
    DataFileName: str  # readonly
    IRMStatus: Agilent.MassSpectrometry.DataAnalysis.IRMStatus  # readonly
    MSScanFileInformation: (
        Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanFileInformation
    )  # readonly
    MeasurementType: Agilent.MassSpectrometry.DataAnalysis.MeasurementType  # readonly
    SeparationTechnique: (
        Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique
    )  # readonly

    def IsMSDataPresent(self) -> bool: ...
    def GetSpectrumXAxisLimit(
        self, deviceNameOrdinalNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def IsUVSignalPresent(
        self,
        devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        signalName: str,
        devName: str,
    ) -> bool: ...
    def GetDeviceName(
        self, devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    ) -> str: ...
    def Clear(self) -> None: ...
    def IsNonMSDataPresent(self) -> bool: ...
    def IsUVSpectralDataPresent(self) -> bool: ...
    def GetDeviceTable(
        self, desiredType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ) -> System.Data.DataTable: ...
    def GetSignalTable(
        self,
        deviceNameOrdinalNumber: str,
        desiredType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType,
    ) -> System.Data.DataTable: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation: ...
    def IsStoredDataTypePresent(
        self,
        deviceNameOrdinalNumber: str,
        desiredType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType,
    ) -> bool: ...

class IBDAMSScanFileInformation(System.ICloneable, Iterable[Any]):  # Interface
    CollisionEnergies: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        float
    ]  # readonly
    CollisionEnergy: List[float]  # readonly
    CompensationFieldValues: System.Collections.Generic.List[float]  # readonly
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    DispersionFieldValues: System.Collections.Generic.List[float]  # readonly
    FileHasMassSpectralData: bool  # readonly
    FragmentorVoltage: List[float]  # readonly
    FragmentorVoltages: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        float
    ]  # readonly
    IonModes: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    MRMTransitions: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    MSLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    MzScanRangeMaximum: float  # readonly
    MzScanRangeMinimum: float  # readonly
    SIMIons: List[float]  # readonly
    ScanMethodNumbers: List[int]  # readonly
    ScanTypes: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    ScanTypesInformationCount: int  # readonly
    SpectraFormat: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    TotalScansPresent: int  # readonly

    def Contains(
        self, key: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> bool: ...
    def IsMultipleSpectraPerScanPresent(self) -> bool: ...
    def IsFixedCycleLengthDataPresent(self) -> bool: ...
    @overload
    def GetMSScanTypeInformation(
        self, scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation: ...
    @overload
    def GetMSScanTypeInformation(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation]: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanFileInformation: ...

class IBDAMSScanTypeInformation(System.ICloneable):  # Interface
    IonPolarities: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    MzOfInterest: List[float]  # readonly

    def Contains(self, MzOfInterest: float) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAMSScanTypeInformation: ...

class IBDAMultiEicParameters(object):  # Interface
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    ChromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter
    EicRtMzList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IEicRtMzRanges
    ]
    MzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.MzExpansionMode
    SingleMzExpansionWidth: float
    SinglePpmExpansionWidth: float

class IBDAPeak(object):  # Interface
    BasePeakMass: float
    CenterX: float
    CenterY: float
    ChargeState: int
    EndBaselineY: float
    Height: float
    StartBaselineY: float

class IBDAPeakSpecFilter(object):  # Interface
    AvoidReturningEmtpySpectrum: bool
    BackgroundRtRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    BackgroundSource: Agilent.MassSpectrometry.DataAnalysis.ApseBackgroundSource
    GetSaturationMzRangesFromChromatogram: bool
    PeakHeightThreshold: float
    TofSaturationMzRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    TofSaturationThreshold: float
    UseApexScan: bool
    UseTofSaturationFilter: bool
    UseTofSaturationMzRange: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter: ...

class IBDAPeakSpectrumParameters(object):  # Interface
    ChromPeak: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ChromXArray: List[float]  # readonly
    ChromYArray: List[float]  # readonly
    NextChromPeak: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    PeakIndex: int
    PeakSpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter
    PrevChromPeak: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    SpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter

    def SetChromXYData(self, xArray: List[float], yArray: List[float]) -> None: ...

class IBDAReadChromatogram(object):  # Interface
    def GetMultipleEicChromatograms(
        self,
        mutltiEicParams: Agilent.MassSpectrometry.DataAnalysis.IBDAMultiEicParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDAChromData]: ...
    @overload
    def GetChromatogram(
        self, chromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDAChromData]: ...
    @overload
    def GetChromatogram(
        self,
        chromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter,
        excludeMassArray: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDAChromData]: ...

class IBDAReadSpectra(object):  # Interface
    def ReadSpectrumPair(
        self,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpectrumParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecPair]: ...
    @overload
    def ReadSpectrum(
        self,
        specRequest: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpecFilter,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecData]: ...
    @overload
    def ReadSpectrum(
        self, spectrumRequest: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecData]: ...
    @overload
    def ReadSpectrum(
        self,
        spectrumRequest: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter,
        startRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
        endRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecData]: ...
    @overload
    def ReadSpectrum(
        self, rowIndex: int, bMassUnits: bool
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    @overload
    def ReadSpectrum(
        self,
        rowIndex: int,
        bMassUnits: bool,
        desiredStorageMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    @overload
    def ReadSpectrum(
        self,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IBDAPeakSpectrumParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecData]: ...

class IBDASample(object):  # Interface
    def GetSampleValue(self, internalName: str) -> str: ...
    @overload
    def GetSampleData(
        self, category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    ) -> System.Data.DataSet: ...
    @overload
    def GetSampleData(self, internalNamePrefix: str) -> System.Data.DataSet: ...
    def GetSampleCollection(
        self, category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASampleData]: ...
    def GetSampleInfo(
        self, internalNamePrefix: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IBDASampleData]: ...

class IBDASampleData(object):  # Interface
    Category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    DataValue: Any
    DisplayName: str
    DisplayValue: str
    InternalName: str

class IBDASpecData(Agilent.MassSpectrometry.DataAnalysis.ILwXyData):  # Interface
    AbundanceLimit: float  # readonly
    AcquiredTimeRange: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    ChromPeakIndex: int
    CollisionEnergy: float  # readonly
    CompensationField: float  # readonly
    DeviceName: str  # readonly
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    DispersionField: float  # readonly
    FragmentorVoltage: float  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    IsDataInMassUnit: bool  # readonly
    MSLevelInfo: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    MZOfInterest: List[Agilent.MassSpectrometry.DataAnalysis.IRange]  # readonly
    MeasuredMassRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    OrdinalNumber: int  # readonly
    ParentScanId: int  # readonly
    SamplingPeriod: float  # readonly
    ScanId: int  # readonly
    SpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    SpectrumType: Agilent.MassSpectrometry.DataAnalysis.SpecType  # readonly
    Threshold: float  # readonly
    TofCalibration: WtcCalibration  # readonly
    TotalDataPoints: int  # readonly
    TotalScanCount: int  # readonly
    XArray: List[float]  # readonly
    YArray: List[float]  # readonly

    def GetPrecursorIntensity(self, precursorIntensity: float) -> bool: ...
    def GetYAxisInfoSpec(
        self,
        ySpecunit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        ySpecvalueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    @overload
    def TrimXRange(
        self, inclusiveRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> None: ...
    @overload
    def TrimXRange(
        self,
        inclusiveXRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
        addBoundingZeroes: bool,
    ) -> None: ...
    def ConvertDataToMassUnits(self) -> None: ...
    def ScaleYValues(
        self, yScaleFactor: float, scaledAbundanceLimit: float
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecData: ...
    def GetPrecursorCharge(self, charge: int) -> bool: ...
    def GetXAxisInfoSpec(
        self,
        xSpecunit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        xSpecvalueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
    ) -> None: ...
    def GetPrecursorIon(self, precursorCount: int) -> List[float]: ...

class IBDASpecFilter(object):  # Interface
    AverageSpectrum: bool
    BackgroundScanRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    ChromPeakIndex: int
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    DesiredMSStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DeviceName: str
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    ExtractByCycle: bool
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MassUnits: bool
    MzOfInterestFilter: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    OrdinalNumber: int
    ScaleFactorY: float
    ScaledAbundanceLimit: float
    ScanIds: List[int]
    ScanRange: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    SpectrumSubType: Agilent.MassSpectrometry.DataAnalysis.SpecSubType
    SpectrumType: Agilent.MassSpectrometry.DataAnalysis.SpecType
    XClipRanges: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    ZeroBoundWhenClipping: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter: ...

class IBDASpecFilterIcp(
    Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
):  # Interface
    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilterIcp
    ) -> bool: ...

class IBDASpecPair(object):  # Interface
    Final: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData
    Foreground: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData

class IBDAUserCalibration(object):  # Interface
    @overload
    def SaveUserCalibration(
        self,
        tofCalib: WtcCalibration,
        ionPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
    ) -> None: ...
    @overload
    def SaveUserCalibration(
        self,
        tofCalib: WtcCalibration,
        specfilterArray: List[Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter],
    ) -> None: ...
    def IsUserCalibrationPresent(self) -> bool: ...
    def ClearUserCalibration(self) -> None: ...

class IBaseDataWriter(object):  # Interface
    GenerateChecksum: bool
    GenerateIconFile: bool
    PeriodicActualIDArray: List[int]  # readonly
    ProfileDataWrittenByCaller: bool

    def AppendSample(
        self, sampleInfo: Agilent.MassSpectrometry.DataAnalysis.Sample
    ) -> None: ...
    def WritePeriodicActuals(
        self, actualDefintions: List[Agilent.MassSpectrometry.DataAnalysis.MSActualInfo]
    ) -> None: ...
    def WriteTimeSegmentXSpecificData(
        self,
        mstsXSpecificData: List[Agilent.MassSpectrometry.DataAnalysis.MSTS_XSpecific],
    ) -> None: ...
    def RegenerateChecksum(self) -> None: ...
    def CreateDataFileForNonMSTranslation(
        self, dataFileName: str, bOverwrite: bool
    ) -> None: ...
    def WriteTimeSegments(
        self, msTimeSegments: Agilent.MassSpectrometry.DataAnalysis.MSTimeSegments
    ) -> None: ...
    def BeginStoringData(
        self, contentsInfo: Agilent.MassSpectrometry.DataAnalysis.Contents
    ) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
    ) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
        scanActuals: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            List[Agilent.MassSpectrometry.DataAnalysis.MSActualInfo]
        ],
        runtimeCalibration: List[
            Agilent.MassSpectrometry.DataAnalysis.RunTimeCalibCoeff
        ],
    ) -> None: ...
    @overload
    def WriteData(
        self,
        fileData: List[Agilent.MassSpectrometry.DataAnalysis.BinaryFileInfo],
        scanRecords: List[Agilent.MassSpectrometry.DataAnalysis.ScanDetails],
        msscanXSpecificData: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            List[Agilent.MassSpectrometry.DataAnalysis.MSScan_XSpecific]
        ],
    ) -> None: ...
    def BeginWritingData(
        self, msdevices: Agilent.MassSpectrometry.DataAnalysis.Device
    ) -> None: ...
    def WriteScanHeader(
        self, scanheaderInfo: Agilent.MassSpectrometry.DataAnalysis.ScanHeader
    ) -> None: ...
    @overload
    def WriteActualDefinitions(
        self, actualDefintions: List[Agilent.MassSpectrometry.DataAnalysis.MSActualDef]
    ) -> None: ...
    @overload
    def WriteActualDefinitions(self, actualDefintionsXmlFile: str) -> None: ...
    def WriteSample(
        self, sampleInfo: Agilent.MassSpectrometry.DataAnalysis.Sample
    ) -> None: ...
    def EndStoringData(self) -> None: ...
    @overload
    def CreateDataFile(
        self, dataFileName: str, schemaFile: str, bOverwrite: bool
    ) -> None: ...
    @overload
    def CreateDataFile(
        self,
        dataFileName: str,
        schemaFile: str,
        msscanXSpecificSchemaFileName: str,
        bOverwrite: bool,
    ) -> None: ...
    @overload
    def WriteDefaultCalibration(
        self, calCoeff: Agilent.MassSpectrometry.DataAnalysis.DefaultCalibCoeff
    ) -> int: ...
    @overload
    def WriteDefaultCalibration(self, defaultCal: ITofCal) -> int: ...
    def EndWritingData(self) -> None: ...

class IBaseNonMSDataWriter(object):  # Interface
    def AddSignal(
        self,
        Name: str,
        Description: str,
        XStart: float,
        XDelta: float,
        YAxisLabel: str,
        YArray: List[float],
    ) -> None: ...
    def BeginWritingNonMSDataForDevice(
        self, device: Agilent.MassSpectrometry.DataAnalysis.Device
    ) -> None: ...
    def AddSpectrum(
        self, ScanTime: float, SamplingPeriod: float, XStart: float, YArray: List[float]
    ) -> None: ...
    def AddChromatogram(
        self,
        Name: str,
        Description: str,
        XStart: float,
        XDelta: float,
        YAxisLabel: str,
        YArray: List[float],
    ) -> None: ...
    def EndWritingNonMSDataForDevice(self) -> None: ...

class IBatchExtractorFileFilter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileFilter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileFilter: ...

class IBatchExtractorFileSelect(System.ICloneable):  # Interface
    AutoShow: bool
    FileName: str
    SampleGroups: System.Collections.Generic.List[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect: ...

class IBdaDevice(object):  # Interface
    Delay: float
    DeviceId: int
    DeviceName: str
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    DeviceVendor: Agilent.MassSpectrometry.DataAnalysis.DeviceVendor
    DriverVersion: str
    FirmwareVersion: str
    ModelName: str
    OrdinalNumber: int
    SerialNumber: str
    StoredDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBdaDevice: ...

class IBdaImsFileAccess(object):  # Interface
    FileInfo: Agilent.MassSpectrometry.DataAnalysis.IImsFileInfo  # readonly
    FourDSlice: Agilent.MassSpectrometry.DataAnalysis.IIms4DSlice  # readonly

    def QualifiedFrameNumbers(
        self, frameNumRange: IIntRange, specFilters: IMidacMsFilters
    ) -> System.Collections.Generic.List[int]: ...
    def ExpandedFrameNumberRange(
        self, acqTimeRange: IDoubleRange, completeCycle: bool
    ) -> IIntRange: ...
    def OpenFile(self, dataFilePath: str) -> None: ...
    @overload
    def FrameInfo(
        self,
        acqTimeRange: IDoubleRange,
        abundMeasure: AbundanceMeasure,
        completeCycle: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsFrameInfo: ...
    @overload
    def FrameInfo(
        self,
        frameNumberList: System.Collections.Generic.List[int],
        abundMeasure: AbundanceMeasure,
        completeCycle: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsFrameInfo: ...
    def TfsSpecDetails(
        self, frameNumberArray: List[int], abundMeasure: AbundanceMeasure
    ) -> Agilent.MassSpectrometry.DataAnalysis.IExtractDetailsMsSpec: ...
    def FrameCycleInfo(
        self, frameNumRange: IIntRange, specFilters: IMidacMsFilters, frameCount: int
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IImsFrameCycleInfo
    ]: ...
    def Close(self) -> None: ...
    def FillExtractDetails(
        self,
        frameNumArray: List[int],
        minDriftIdx: int,
        maxDriftIdx: int,
        converter: Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter,
        driftAbundCombine: AbundanceMeasure,
        frameAbundCombine: AbundanceMeasure,
        details: IMidacMsDetails,
    ) -> None: ...
    def ExpandedFrameNumberList(
        self, frameNumbers: System.Collections.Generic.List[int], completeCycle: bool
    ) -> System.Collections.Generic.List[int]: ...

class IBdaMsScanRecInfo(object):  # Interface
    AbundanceLimit: float  # readonly
    ActualsOffset: int  # readonly
    BasePeakAbundance: float  # readonly
    BasePeakMz: float  # readonly
    ChargeState: int  # readonly
    ChromScaleFactor: float  # readonly
    CollisionEnergy: float  # readonly
    CollisionEnergyIsDynamic: bool  # readonly
    CompensationField: float  # readonly
    CycleNumber: int  # readonly
    DdParentMzOfInterest: float  # readonly
    DdParentScanId: int  # readonly
    DdScanId1: int  # readonly
    DdScanId2: int  # readonly
    DdScanId3: int  # readonly
    DefaultCalibrationId: int  # readonly
    DispersionField: float  # readonly
    DwellTime: int  # readonly
    FragmentationMode: (
        Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    )  # readonly
    Fragmentor: float  # readonly
    FragmentorIsDynamic: bool  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    MassCalOffset: int  # readonly
    MeasuredMassRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    MzIsolationWidth: float  # readonly
    MzOfInterest: float  # readonly
    NumActualsPerScan: int  # readonly
    ScanId: int  # readonly
    ScanMethNumber: int  # readonly
    ScanTime: float  # readonly
    Status: int  # readonly
    TIC: float  # readonly
    Threshold: float  # readonly
    TimeSegmentId: int  # readonly
    XSamplingPeriod: float  # readonly
    XSpecificByteCount: int  # readonly
    XSpecificOffset: int  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo: ...

class IBdaMsScanRecordCollection(object):  # Interface
    Count: int  # readonly
    Enumerator: Iterable[
        System.Collections.Generic.KeyValuePair[
            int, Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
        ]
    ]  # readonly
    Keys: Dict.KeyCollection[
        int, Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
    ]  # readonly
    Values: Dict.ValueCollection[
        int, Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
    ]  # readonly

    def ChildMsScans(
        self, parentScanId: int
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
    ]: ...
    def ItemForIndex(
        self, msScanIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo: ...
    def ChildMsScanMzOfInterest(
        self, parentScanId: int
    ) -> System.Collections.Generic.List[float]: ...
    def Clear(self) -> None: ...
    @overload
    def Select(
        self,
        ionPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        msLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel,
        mzOfInterest: List[Agilent.MassSpectrometry.DataAnalysis.IRange],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
    ]: ...
    @overload
    def Select(
        self, scanIdArray: List[int]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection: ...
    def IndexOf(
        self, scanRec: Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo
    ) -> int: ...
    def TryGetValue(
        self,
        scanId: int,
        value_: Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo,
    ) -> bool: ...

class IBdaMsWriteUtils(object):  # Interface
    def WriteProfileScanData(
        self,
        profileBinWriter: System.IO.BinaryWriter,
        pointArrays: List[System.Array],
        spectrumFormat: Agilent.MassSpectrometry.DataAnalysis.IMsSpectrumFmt,
        byteCountWritten: int,
        pointCountWritten: int,
        uncompressedByteCount: int,
    ) -> int: ...
    def ClearDataFile(
        self,
        dataFilePath: str,
        acqDataOption: Agilent.MassSpectrometry.DataAnalysis.AcqDataClearOptions,
    ) -> None: ...
    def WriteTofDefaultCalibration(
        self, assemblyPath: str, dataFilePath: str, tofCal: ITofCal
    ) -> int: ...
    def WriteTimeSegmentFile(
        self,
        dataFilePath: str,
        timeSegments: Agilent.MassSpectrometry.DataAnalysis.IBdaTimeSegmentCollection,
    ) -> None: ...
    def WritePeakDetectedScanData(
        self,
        peakScanWriter: System.IO.BinaryWriter,
        pointArrays: List[System.Array],
        spectrumFormat: Agilent.MassSpectrometry.DataAnalysis.IMsSpectrumFmt,
        byteCountWritten: int,
        pointCountWritten: int,
    ) -> int: ...
    def CreateDeviceFile(
        self,
        dataFilePath: str,
        firstDevice: Agilent.MassSpectrometry.DataAnalysis.IBdaDevice,
    ) -> None: ...
    def CreateDataFile(self, dataFilePath: str) -> None: ...

class IBdaTimeSegment(object):  # Interface
    EndTime: float
    FixedCycleLength: bool
    ID: int
    MsAbsPfThreshold: float
    MsMsAbsPfThreshold: float
    MsMsRelPfThreshold: float
    MsRelPfThreshold: float
    NumberOfScans: int
    StartTime: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBdaTimeSegment: ...

class IBdaTimeSegmentCollection(object):  # Interface
    IrmStatus: Agilent.MassSpectrometry.DataAnalysis.IRMStatus
    TimeSegments: List[Agilent.MassSpectrometry.DataAnalysis.IBdaTimeSegment]

    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaTimeSegmentCollection: ...

class IBond(object):  # Interface
    BondOrder: int  # readonly
    StereoCode: int  # readonly

    def GetAtoms(
        self,
        structure: Agilent.MassSpectrometry.DataAnalysis.IMolecularStructure,
        atomA: Agilent.MassSpectrometry.DataAnalysis.IAtom,
        atomB: Agilent.MassSpectrometry.DataAnalysis.IAtom,
    ) -> None: ...

class IBoolParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: bool
    Value: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IBoolParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IBoolParameter: ...

class IBucket(object):  # Interface
    ObjectList: List[
        Agilent.MassSpectrometry.DataAnalysis.INormalizedObject
    ]  # readonly
    StandardType: (
        Agilent.MassSpectrometry.DataAnalysis.CnEngine.StandardUsage
    )  # readonly

class ICalculatedMass(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer, System.ICloneable
):  # Interface
    CalculatedMz: float
    Difference: float  # readonly
    IonSpecies: str
    MassDefect: float
    MonoisotopicMz: float
    ReferenceMz: float
    RelativeDifference: float  # readonly

class ICalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    System.ICloneable,
):  # Interface
    DataSet: System.Data.DataSet  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults: ...

class ICalculatorTable(object):  # Interface
    def Display(
        self, results: Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults
    ) -> None: ...

    ShowContextMenuEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateContextMenuEventHandler
    )  # Event

class ICaliper(
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation, System.ICloneable
):  # Interface
    StartDataX: float
    StartDataY: float
    TextFont: System.Drawing.Font
    TextOrientation: Agilent.MassSpectrometry.DataAnalysis.Orientation

    def CalculateAndGenerateText(self, startDataX: float, endDataX: float) -> str: ...

class ICenterWidthPctRange(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    Center: float
    WidthPct: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPctRange: ...

class ICenterWidthPpmRange(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    Center: float
    WidthPpm: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthPpmRange: ...

class ICenterWidthRange(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    Center: float
    Width: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICenterWidthRange: ...

class IChangeNotify(object):  # Interface
    def RemoveDelegate(
        self, del_: Agilent.MassSpectrometry.DataAnalysis.ChangeNotifyDelegate
    ) -> None: ...
    def AddDelegate(
        self, del_: Agilent.MassSpectrometry.DataAnalysis.ChangeNotifyDelegate
    ) -> None: ...

class IChemDataDictionary(object):  # Interface
    def GetAllDNANucleotideNoNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide]: ...
    def SaveCustomDataDictionary(self) -> None: ...
    def AddLink(self, objLink: Agilent.MassSpectrometry.DataAnalysis.ILink) -> None: ...
    def GetAllAminoAcidNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IAminoAcid]: ...
    def DeleteReagent(self, deleteItem: str) -> None: ...
    def GetModificationCategory(
        self, categoryName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationCategory: ...
    def ModifyLink(
        self, oldName: str, newItem: Agilent.MassSpectrometry.DataAnalysis.ILink
    ) -> None: ...
    def GetMatchSetsForSynthetic(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllIntactProteinModification(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IIntactProteinModification]: ...
    def DeleteModification(self, deleteItem: str) -> None: ...
    def GetAllModificationCategories(
        self,
    ) -> Iterable[Agilent.MassSpectrometry.DataAnalysis.IModificationCategory]: ...
    def ModifyModificationCategory(
        self, newCategory: Agilent.MassSpectrometry.DataAnalysis.IModificationCategory
    ) -> None: ...
    def GetAllUncategorizedModifications(
        self,
    ) -> Iterable[Agilent.MassSpectrometry.DataAnalysis.IModification]: ...
    def DeleteModificationProfile(self, profileID: System.Guid) -> None: ...
    def GetAllRNANucleotideNoNCTerm(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide]: ...
    def AddModification(
        self, objModification: Agilent.MassSpectrometry.DataAnalysis.IModification
    ) -> None: ...
    def GetAllDNAMutation(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNAPointMutation]: ...
    def DeleteLink(self, deleteItem: str) -> None: ...
    def GetMatchSetsForOligoNucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllLink(self) -> List[Agilent.MassSpectrometry.DataAnalysis.ILink]: ...
    def GetAllDNANucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide]: ...
    def GetAllRNANucleotide(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide]: ...
    def GetAllCategoriesForModification(
        self, modificationName: str
    ) -> Iterable[str]: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
    ) -> None: ...
    def GetMatchSetsForProtein(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetMatchSetsForProteinDigest(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.E_MATCH_MASS_SETS]: ...
    def GetAllAminoAcid(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IAminoAcid]: ...
    def GetRNANucleotide(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide: ...
    def ValidateModifications(self, arrModName: List[str]) -> bool: ...
    def ValidateOligoNucleotideSequence(self, strSeqStringAA: str) -> bool: ...
    def GetDataDictionary(self) -> System.Data.DataSet: ...
    def ValidateParseFormula(
        self, formula: str, elements: List[str], counts: List[int]
    ) -> bool: ...
    def GetAllSampleArtifacts(self) -> List[str]: ...
    def GetAminoAcid(
        self, symbolSingleLetter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAminoAcid: ...
    def UncategorizeModification(self, modificationName: str) -> None: ...
    def ValidateLinks(self, arrLinkName: List[str]) -> bool: ...
    def GetModsOfAA(self, keyAA: str) -> List[str]: ...
    def AddReagent(
        self, objReagent: Agilent.MassSpectrometry.DataAnalysis.IReagent
    ) -> None: ...
    @overload
    def GetModificationProfile(
        self, profileID: System.Guid
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationProfile: ...
    @overload
    def GetModificationProfile(
        self, profileName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationProfile: ...
    def GetPredictedModificationMaxLimit(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPredictedModificationMaxLimit: ...
    def GetAllReagent(self) -> List[Agilent.MassSpectrometry.DataAnalysis.IReagent]: ...
    def GetAllModification(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IModification]: ...
    def GetModification(
        self, modName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModification: ...
    def ReLoadDataDictionary(self) -> System.Data.DataSet: ...
    def AddModificationProfile(
        self, profile: Agilent.MassSpectrometry.DataAnalysis.IModificationProfile
    ) -> None: ...
    def GetAllFmoc(self) -> List[str]: ...
    def SubtractElementCountsList(
        self,
        targetElementCountsList: System.Collections.SortedList,
        lossElementCountsList: System.Collections.SortedList,
    ) -> None: ...
    def ModifyReagent(
        self, oldName: str, newItem: Agilent.MassSpectrometry.DataAnalysis.IReagent
    ) -> None: ...
    def GetSequenceFormula(
        self,
        seqType: Agilent.MassSpectrometry.DataAnalysis.E_SEQUENCE_TYPE,
        sequence: List[str],
        bAddNCTerm: bool,
        formula: str,
    ) -> None: ...
    def GetAllElement(self) -> List[Agilent.MassSpectrometry.DataAnalysis.IElement]: ...
    def GetAllTboc(self) -> List[str]: ...
    def GetElementCountsList(
        self, formula: str, elementCountsList: System.Collections.SortedList
    ) -> bool: ...
    def GetAllModificationProfiles(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IModificationProfile]: ...
    def CopyTo(
        self, destination: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary
    ) -> None: ...
    def GetElement(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IElement: ...
    def Equal(
        self,
        chemDataDictionary: Agilent.MassSpectrometry.DataAnalysis.IChemDataDictionary,
    ) -> bool: ...
    def GetLink(self, linkName: str) -> Agilent.MassSpectrometry.DataAnalysis.ILink: ...
    def ModifyModification(
        self,
        oldModName: str,
        newMod: Agilent.MassSpectrometry.DataAnalysis.IModification,
    ) -> None: ...
    def ValidateSequenceStringAAs(self, strSeqStringAA: str) -> bool: ...
    def ModifyModificationProfile(
        self, newProfile: Agilent.MassSpectrometry.DataAnalysis.IModificationProfile
    ) -> None: ...
    def GetFormulaMass(
        self, strFormula: str, dMonoMass: float, dAvgMass: float, dApexMass: float
    ) -> None: ...
    def GetReagent(
        self, reagentName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IReagent: ...
    def ComputeDeltaMass(
        self,
        strLossFormula: str,
        strGainFormula: str,
        dDeltaMonoM: float,
        dDeltaAvgM: float,
        dDeltaApexM: float,
    ) -> None: ...
    def GetCustomDataDictionary(self) -> System.Data.DataSet: ...
    def AddElementCountsList(
        self,
        targetElementCountsList: System.Collections.SortedList,
        gainElementCountsList: System.Collections.SortedList,
    ) -> None: ...
    def GetDNANucleotide(
        self, symbol: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IDNANucleotide: ...

class IChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    ChromSubType: Agilent.MassSpectrometry.DataAnalysis.ChromSubType
    ChromType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    CompoundNumbers: Agilent.MassSpectrometry.DataAnalysis.ICoreList[int]
    IsCycleSummed: bool
    SignalDescription: str
    SignalName: str

class IChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.IPeak, System.ICloneable
):  # Interface
    Area: float
    AreaPercent: float
    AreaSumPercent: float
    BasePeakMz: float
    BaselineCoefficients: List[float]
    BaselineIsLinear: bool  # readonly
    BaselineType: str  # readonly
    CapacityFactor: float
    CompoundName: str
    CompoundNumber: int
    EndBaselineY: float  # readonly
    EndX: float
    EndY: float
    FullWidthAtHalfMaximum: float
    NormalizedHeightPct: float
    Notes: str
    PeakType: Agilent.MassSpectrometry.DataAnalysis.PeakFlags
    Plates: float
    PlatesPerMeter: float
    Resolution: float
    SignalToNoise: float
    StartBaselineY: float  # readonly
    StartX: float
    StartY: float
    Symmetry: float
    TailingFactor: float
    Width: float
    WidthInMinutes: float  # readonly

    def BaselineYAtX(self, x: float) -> float: ...
    def AdjustPeakDelay(self, oldDelay: float, newDelay: float) -> None: ...

class IChromPeakList(
    Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Any],
):  # Interface
    AreaSum: float  # readonly
    MaxArea: float  # readonly

class IChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Description: Agilent.MassSpectrometry.DataAnalysis.IChromDescription  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IChromatogram: ...

class ICollectionElement(System.ICloneable):  # Interface
    def IsCollectionElementValid(self) -> bool: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class ICollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ICollectionParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICollectionParameter: ...

class IColorParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    AValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    BValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    DefaultValue: System.Drawing.Color
    GValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    RValue: Agilent.MassSpectrometry.DataAnalysis.ILongParameter  # readonly
    Value: System.Drawing.Color

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IColorParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IColorParameter: ...

class ICombineIsotope(System.ICloneable):  # Interface
    CalculatedHeight: float
    CalculatedHeightPercent: float
    CalculatedHeightSumPercent: float
    CalculatedMz: float
    Difference: float
    Height: float
    HeightPercent: float
    HeightSumPercent: float
    ID: int
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mz: float
    RelativeDifference: float

class ICombinedIDResultsPlus(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    CollisionEnergyLibraryHitID: int
    IdentificationTechniques: str  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    MergedIDHitsPlus: List[
        Agilent.MassSpectrometry.DataAnalysis.IMergedIDHitPlus
    ]  # readonly

    @overload
    def GetDataSet(self) -> System.Data.DataSet: ...
    @overload
    def GetDataSet(
        self, externalID: int, limitOnRows: int, existingDataSet: System.Data.DataSet
    ) -> None: ...
    def DeleteMergedIdHitsUsingID(self, hitIDs: List[int]) -> bool: ...
    def ContainBioConfirmResults(self) -> bool: ...
    def NumOfBioHits(self) -> int: ...
    def GetBest(self) -> Agilent.MassSpectrometry.DataAnalysis.IMergedIDHitPlus: ...
    def GetHighlightedHit(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMergedIDHitPlus: ...
    def ClearBestFlags(self) -> None: ...
    def ContainAllIonsResults(self) -> bool: ...
    def GetMergedIdHitFormulaeUsingID(self, hitIDs: List[int]) -> List[str]: ...
    def SetHighlightedHit(self, hitID: int) -> None: ...
    def SuggestBest(self) -> Agilent.MassSpectrometry.DataAnalysis.IMergedIDHitPlus: ...
    def SetAsBest(self, mergedIDHitID: int) -> None: ...

class ICommonBaseParamControl(object):  # Interface
    def ProcessExternalButtonPress(
        self, button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons
    ) -> None: ...
    def RefreshUI(self) -> None: ...
    def ContinueOKButtonPress(self) -> bool: ...
    def HighlightedData(self) -> List[int]: ...
    def ButtonEnabled(
        self, button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons
    ) -> bool: ...
    def HasHighlightedData(self) -> bool: ...

    ButtonPressEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ParamControlButtonPressEventHandler
    )  # Event

class IComposition(object):  # Interface
    DoubleBondEquivalent: float  # readonly
    Formula: str  # readonly
    IsTarget: bool
    IsotopeIntensityScore: float  # readonly
    IsotopePattern: Agilent.MassSpectrometry.DataAnalysis.IsotopePattern  # readonly
    IsotopePatternIonSpecies: (
        Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails
    )  # readonly
    IsotopeSpacingScore: float  # readonly
    LowestIsotopeMass: float  # readonly
    LowestIsotopeMassFromData: float  # readonly
    MassScore: float  # readonly
    MatchingScore: float  # readonly
    ModificationSpecies: (
        Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies
    )  # readonly
    MonoisotopicMass: float  # readonly

class ICompound(
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
):  # Interface
    Abundance: float
    AgilentId: int
    AlgorithmName: str
    Area: float
    AverageMass: float
    AvgColeutionScore: float
    BasePeakMz: float
    BioMatchDeltaMass: float
    BioMatchDeltaPPM: float
    BioMatchDescription: str
    BioMatchHitCount: int
    CasId: str
    CollisionEnergy: float
    CommonHitCount: int
    CompoundId: int
    CompoundName: str
    CompoundNumber: int
    CpdDetailsList: List[Agilent.MassSpectrometry.DataAnalysis.ICpdDetails]  # readonly
    CpdMiningAlgorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    CpdSpectralTypes: Agilent.MassSpectrometry.DataAnalysis.CpdSpectralTypes
    CpdsInGroup: int
    DataFileName: str
    DbMatchScore: float
    Difference: float  # readonly
    DigestEnzyme: str
    EndTime: float
    FragmentIonsConfirmed: int
    FragmentIonsConfirmedPercent: float
    FragmentIonsNotes: str
    FragmentIonsSource: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource
    FragmentIonsSpecified: int
    FragmentorVoltage: float
    GeneratedFormulaMass: float
    GeneratedFormulaScore: float
    GeneratedMassDifference: float  # readonly
    GeneratedMolecularFormula: str
    GroupNumber: int
    HasFragIonConfirmationResults: bool  # readonly
    HasKnownMass: bool  # readonly
    HasSearchableFormula: bool  # readonly
    Height: float
    HitCount: int
    HmpId: str
    IdentificationTechniqueBest: str
    IdentificationTechniques: str
    IonCount: int
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IsIdentified: bool  # readonly
    KeggId: str
    Label: str  # readonly
    LibSearchScore: float
    Links: str
    LipidId: str
    Location: str
    MPPID: str
    Mass: float
    MassStdDev: float
    MatchScore: int
    MaxZ: int
    MergedHitOverallScore: float
    MetlinId: str
    MinZ: int
    MissedCleavages: str
    Modifications: str
    ModifiedByUser: bool
    NCBIID: str
    Notes: str
    NumMSMSSpectra: int  # readonly
    PredictedModifications: str
    PrimaryBase: str
    PrimaryNote: str
    ProductIonMz: float
    PurityByADCPctArea: float
    PurityByADCPctHeight: float
    PurityByEICTICPctArea: float
    PurityByEICTICPctHeight: float
    PurityByTICPctArea: float
    PurityByTICPctHeight: float
    PurityByTWCPctArea: float
    PurityByTWCPctHeight: float
    PurityByUVAPctArea: float
    PurityByUVAPctHeight: float
    PurityByUVBPctArea: float
    PurityByUVBPctHeight: float
    PurityByUVCPctArea: float
    PurityByUVCPctHeight: float
    PurityComments: str
    PurityResult: Agilent.MassSpectrometry.DataAnalysis.SamplePurityResult
    PurityValue: float
    QualityScore: float
    ReferenceMass: float
    ReferenceMassDifference: float  # readonly
    ReferenceMolecularFormula: str
    ReferenceRetentionTime: float
    RelativeDifference: float  # readonly
    RelativeGeneratedMassDifference: float  # readonly
    RelativeReferenceMassDifference: float  # readonly
    RelativeVolumePct: float
    ResultList: Agilent.MassSpectrometry.DataAnalysis.IResultList
    RetentionTime: float
    RetentionTimeDifference: float  # readonly
    SaturationWarning: bool
    Sequence: str
    SequenceName: str
    SequenceType: str
    Significance: float
    SignificantIonMz: float
    StartTime: float
    SummaryMolecularFormula: str
    SwissProtID: str
    TargetFormulaMass: float
    TargetMassMatch: float
    TargetMolecularFormula: str
    TgtFlagSeverity: Agilent.MassSpectrometry.DataAnalysis.TgtFlagSeverity
    TgtFlagSeverityString: str  # readonly
    TgtFlagString: str
    TgtMatchScore: float
    TgtMfgHit: int  # readonly
    TgtMfgScoreChange: float  # readonly
    TgtRetentionTime: float
    TgtRetentionTimeDifference: float  # readonly
    Uncertainty: float
    UniqueHitCount: int
    Volume: float
    Width: float
    ZCount: int

    def GetFindCompoundAlgorithmTypes(
        self,
    ) -> System.Collections.Generic.List[System.Type]: ...
    def SetCpdDetails(
        self,
        algorithmType: System.Type,
        cpdDetails: Agilent.MassSpectrometry.DataAnalysis.ICpdDetails,
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICompound: ...
    def GetCpdDetails(
        self, algorithmType: System.Type
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDetails: ...
    def UpdateFromResults(self) -> None: ...

class ICompoundCorrelationEngine(object):  # Interface
    def Run(
        self,
        reference: List[Agilent.MassSpectrometry.DataAnalysis.ICompound],
        sample: List[Agilent.MassSpectrometry.DataAnalysis.ICompound],
        parameterSet: Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompoundList: ...

class ICompoundGroup(
    Dict[str, Agilent.MassSpectrometry.DataAnalysis.ICompound],
    Sequence[
        System.Collections.Generic.KeyValuePair[
            str, Agilent.MassSpectrometry.DataAnalysis.ICompound
        ]
    ],
    Iterable[
        System.Collections.Generic.KeyValuePair[
            str, Agilent.MassSpectrometry.DataAnalysis.ICompound
        ]
    ],
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
):  # Interface
    AreaMax: int  # readonly
    AreaMedian: int  # readonly
    AreaMin: int  # readonly
    CASID: str
    CompoundGroupFormula: str
    CompoundGroupName: str
    CompoundGroupNumber: int
    CompoundName: str
    FrequencyFound: int  # readonly
    FrequencyMissed: int  # readonly
    HMPID: str
    HeightMax: int  # readonly
    HeightMedian: int  # readonly
    HeightMin: int  # readonly
    IonCountMax: int  # readonly
    IonCountMin: int  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    KEGGID: str
    LIPIDID: str
    METLINID: str
    MassMedian: float  # readonly
    MassPpmRSD: float  # readonly
    MaxAbsDiff: float  # readonly
    NCBIID: str
    PeakList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeak
    ]
    QScorePctRSD: float  # readonly
    RetentionTimeDifference: float  # readonly
    RetentionTimeMedian: float  # readonly
    RetentionTimeSpan: float  # readonly
    RetentionTimeWidthAtBase: float  # readonly
    SingleIonFeatures: int  # readonly
    SwissProtID: str
    TargetMass: float
    TargetRetentionTime: float
    TgtScorePctRSD: float  # readonly
    VolumeMax: int  # readonly
    VolumeMedian: int  # readonly
    VolumeMin: int  # readonly

class ICompoundIdentification(object):  # Interface
    @overload
    def RunDeconvolution(
        self,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    @overload
    def RunDeconvolution(
        self, rtMin: float, rtMax: float
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...

class IConsistency(object):  # Interface
    CheckingSuspended: bool
    HasChanged: bool  # readonly

    def MakeConsistent(self) -> None: ...

class IConvertibleValueContainer(object):  # Interface
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...

class ICoreAlgorithmFactory(object):  # Interface
    def GetPSetSignalToNoise(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise: ...
    def UpdateChromPeakFinderParams(
        self,
        peakFinderParams: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> None: ...
    def GetChromPeakFinderParams(
        self, peakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters: ...
    def GetPSetExtractChrom(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def GetMinRequiredNumberOfChromPoints(
        self, peakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks
    ) -> int: ...
    def GetPSetExtractSpectrum(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...
    def GetChromPeakFinder(
        self, separationType: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindPeaks: ...
    def GetSpectrumPeakFinderParams(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters: ...
    def GetSpectrumPeakFinder(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindPeaks: ...
    def RunFeatureDeconvolution(
        self,
        chromRegion: Agilent.MassSpectrometry.DataAnalysis.ChromRegion,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Component
    ]: ...
    def GetSignalToNoiseAlgorithm(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISignalToNoise: ...
    def GetScanDeskewParameters(
        self,
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        chromRegion: Agilent.MassSpectrometry.DataAnalysis.ChromRegion,
        mzHigh: float,
        skewRate: float,
    ) -> None: ...

class ICoreList(
    List[T],
    Sequence[T],
    Iterable[T],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
):  # Interface
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(self, comparer: System.Collections.Generic.IComparer[T]) -> None: ...
    def Reverse(self) -> None: ...
    def FindIndex(self, match: System.Predicate[T]) -> int: ...
    def Exists(self, match: System.Predicate[T]) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList: ...
    def Find(self, match: System.Predicate[T]) -> T: ...
    def ToArray(self) -> List[T]: ...

class ICorrelatableObject(object):  # Interface
    IdName: str  # readonly
    Intensity: float  # readonly
    Mass: float  # readonly
    Time: float  # readonly

    def GetMetadataSquaredDistance(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.ICorrelatableObject,
        parameters: Agilent.MassSpectrometry.DataAnalysis.CorrelatorParameters,
    ) -> float: ...

class ICpdDatabase(object):  # Interface
    def SearchMass(
        self,
        mass: float,
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearch: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    @overload
    def SearchCompound(
        self,
        cpdToSearch: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearch: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetPositiveSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
        psetNegativeSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    @overload
    def SearchCompound(
        self,
        cpdToSearch: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearch: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetPositiveSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
        psetNegativeSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
        psetCharge: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    def SearchPeak(
        self,
        spectrumToSearch: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        mzValuesToSearch: List[float],
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearchParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetPositiveSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
        psetNegativeSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
        psetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    def SearchFormula(
        self,
        formula: str,
        observedRt: float,
        observedMass: float,
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearch: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    def SearchMassAndRT(
        self,
        mass: float,
        retentionTime: float,
        psetDatabase: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase,
        psetSearch: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
        psetSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...

class ICpdDbAccessor(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
):  # Interface
    DatabaseName: str  # readonly
    DatabaseVersion: str  # readonly

    def SearchByFormula(
        self,
        dbFilter: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode,
        formulaToMatch: str,
    ) -> System.Data.DataSet: ...
    def OpenDatabase(self, fullPath: str) -> bool: ...
    def SearchByMassAndTime(
        self,
        dbFilter: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode,
        massToMatch: float,
        massTolerance: float,
        allowEntriesWithoutTimes: bool,
        retentionTimeToMatch: float,
        retentionTimeTolerance: float,
    ) -> System.Data.DataSet: ...
    def GetAllDBEntries(self) -> System.Data.DataSet: ...
    def SearchSpectrumByID(
        self, Id: int
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.LibSpectrumInfo
    ]: ...
    def SearchByMass(
        self,
        dbFilter: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode,
        massToMatch: float,
        massTolerance: float,
    ) -> System.Data.DataSet: ...

class ICpdDbSearchHit(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Interface
    AgilentId: int
    Best: bool
    CasId: str
    CompoundId: int
    CompoundName: str
    DigestEnzyme: str
    FormulaOfM: str
    FormulaOfMz: str  # readonly
    Highlighted: bool
    HmpId: str
    ID: int
    IonSpecies: str
    IsotopeAbundanceMatch: float
    IsotopeSpacingMatch: float
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    KeggId: str
    Links: str
    LipidId: str
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Location: str
    Mass: float
    MassDifference: float  # readonly
    MassMatch: float
    MatchScore: float
    MetlinId: str
    Modifications: str
    Notes: str
    NumSpectra: int
    PredictedModifications: str
    ReferenceMass: float
    ReferenceRetentionTime: float
    ReferenceRetentionTimeAvailable: str
    RelativeMassDifference: float  # readonly
    RetentionTime: float
    RetentionTimeDifference: float  # readonly
    RetentionTimeMatch: float
    Sequence: str
    SequenceName: str
    SequenceType: str
    Structure: str
    SwissProtId: str

    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def GetById(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit: ...

class ICpdDbSearchHitList(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Interface
    BestCompoundName: str  # readonly
    BestFormulaOfM: str  # readonly
    BestFormulaOfMz: str  # readonly
    BestHit: Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit  # readonly
    BestIonSpecies: str  # readonly
    CommonHitCount: int
    DatabaseName: str
    DatabaseVersion: str
    HitCount: int
    ID: int
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mz: float
    UniqueHitCount: int

    def SetAsBest(self, cpdId: int) -> None: ...
    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def GetById(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHit: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList: ...

class ICpdDbSearchMsDetail(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.ICloneable,
):  # Interface
    CalculatedHeight: float
    CalculatedHeightPercent: float  # readonly
    CalculatedMz: float
    Difference: float  # readonly
    Height: float
    HeightPercent: float  # readonly
    ID: int
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mz: float
    RelativeDifference: float  # readonly

    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchMsDetail: ...

class ICpdDbSearchResults(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Interface
    def GetById(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchHitList: ...
    def SetAsHighlighted(self, hitId: int) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ICpdDbSearchResults: ...
    def ClearHighlights(self) -> None: ...
    def SetAsBest(self, hitId: int) -> bool: ...

class ICpdDetails(object):  # Interface
    AlgorithmType: System.Type  # readonly

class ICpdFragmentDetails(object):  # Interface
    BConfirmBasedOnAbsNum: bool
    CEHighE: List[float]
    ConfirmPercentThreshold: float
    DevType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    FVHighE: List[float]
    FragIonProcessInfo: List[Agilent.MassSpectrometry.DataAnalysis.FragIonProcessInfo]
    MSStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    NumOfConfFragRequired: int
    TotalConsolidatedFragIons: int
    XArrayMaster: List[float]
    bMolecularIonOptional: bool
    bMultipleCEs: bool
    bUseRefIon: bool

class ICpdMSMSDetails(object):  # Interface
    def MsMsScanInfo(
        self, polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    ) -> List[List[Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo]]: ...

class ICpdResult(object):  # Interface
    Compound: Agilent.MassSpectrometry.DataAnalysis.ICompound
    FxDataList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFXData
    ]
    KeyChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram
    PeakKey: int

class ICpdResultComparer(
    Agilent.MassSpectrometry.DataAnalysis.ResultAttributeComparer,
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.ICpdResult
    ],
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributes
    ],
):  # Class
    def __init__(
        self,
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        sortDir: Agilent.MassSpectrometry.DataAnalysis.SortDirection,
    ) -> None: ...

class ICreateFXDataList(object):  # Interface
    def CreateFXCoreList(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFXData
    ]: ...

class IDAMethod(System.ICloneable):  # Interface
    ExactCopyOfOriginal: bool
    IsFactoryInstalledMethod: bool  # readonly
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    def __setitem__(
        self, usageKey: str, value_: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> None: ...
    MethodDirectoryPath: str  # readonly
    MethodName: str
    OriginalMethodLocation: str
    Persisted: bool  # readonly

    def ReadMethod(self, methodDirPath: str) -> None: ...
    def WriteMethod(self, methodDirPath: str) -> None: ...
    def ContentEquals(
        self, toComapre: Agilent.MassSpectrometry.DataAnalysis.IDAMethod
    ) -> bool: ...

class IDNANucleotide(object):  # Interface
    DNANucleotideFormula: str
    DNANucleotideName: str
    DNANucleotideSymbol: str
    DNANucleotideType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IDNAPointMutation(object):  # Interface
    DNAMutationType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE
    FromAA: str
    ToAA: str

class IDataAccess(
    Agilent.MassSpectrometry.DataAnalysis.IReadChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IReadSpectra,
    Agilent.MassSpectrometry.DataAnalysis.ISample,
    Agilent.MassSpectrometry.DataAnalysis.IActuals,
    Agilent.MassSpectrometry.DataAnalysis.IUserCalibration,
):  # Interface
    AcquisitionMetaData: Agilent.MassSpectrometry.DataAnalysis.IAcqMetaData  # readonly
    BaseDataAccess: Agilent.MassSpectrometry.DataAnalysis.IBDADataAccess  # readonly
    DataFileName: str  # readonly
    DataUnit: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits  # readonly
    DesiredMSStorageTypeToUse: (
        Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    )
    FileInformation: (
        Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    )  # readonly
    MassRangesOverallLimit: (
        Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    )  # readonly
    ScanRejectionFlagValueTable: System.Data.DataTable
    SchemaDefaultDirectory: str

    def GetTimeSegmentDetails(
        self, timesegmentID: int, numOfScans: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def IsAcquisitionStatusComplete(self) -> bool: ...
    def GetTimeSegmentsIDArray(self) -> List[int]: ...
    @overload
    def OpenDataFile(self, filename: str) -> bool: ...
    @overload
    def OpenDataFile(self, filename: str, bOptimizeFileHandling: bool) -> bool: ...
    def GetScanRecordsInfo(
        self, scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection: ...
    def PersistScanRejectionFlagValueTable(self) -> None: ...
    def SetUnitValue(
        self, psetUnits: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits
    ) -> None: ...
    def CloseDataFile(self) -> None: ...
    def IsFileOpen(self) -> bool: ...
    def GetDataDependentScanInfo(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection: ...
    def RefreshDataFile(self, isNewDataPresent: bool) -> bool: ...
    def ClearScanRejectionFlagValueTable(self) -> None: ...
    def UpdateDelayInformation(
        self,
        psetDeviceDelay: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo,
    ) -> None: ...
    def GetMsDeviceDelayTime(self, dDelay: float) -> bool: ...
    def GetElementNameCollection(self, timesegmentID: int) -> Dict[float, str]: ...
    def GetTimeSegmentRanges(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def IsDataDependentScanInfoPresent(self) -> bool: ...

class IDataActionItem(Agilent.MassSpectrometry.DataAnalysis.IActionItem):  # Interface
    Action: Agilent.MassSpectrometry.DataAnalysis.DataAction  # readonly
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly

class IDataItem(object):  # Interface
    DataObj: Any  # readonly
    DataSourceID: int  # readonly
    DisplayPreferences: (
        Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences
    )  # readonly
    DisplayPreferencesOverrides: Dict[
        str, Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences
    ]  # readonly
    InnerDataObject: Any  # readonly
    ItemGroup: Agilent.MassSpectrometry.DataAnalysis.ItemGroup  # readonly
    ItemID: int  # readonly
    ItemType: Agilent.MassSpectrometry.DataAnalysis.ItemType  # readonly
    ParentID: int  # readonly

    def Order(
        self, op2: Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ) -> Agilent.MassSpectrometry.DataAnalysis.ItemOrder: ...

class IDataItemComparer(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ],
    Agilent.MassSpectrometry.DataAnalysis.ResultAttributeComparer,
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributes
    ],
):  # Class
    def __init__(
        self,
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        sortDir: Agilent.MassSpectrometry.DataAnalysis.SortDirection,
    ) -> None: ...

class IDataItemUtilities(object):  # Interface
    def CombinedFileInformation(
        self, sources: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation: ...

class IDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency, System.ICloneable
):  # Interface
    DataSourceType: Agilent.MassSpectrometry.DataAnalysis.DataSourceType
    SourceName: str  # readonly
    SourcePath: str
    SourceTitle: str  # readonly

    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...

class IDataSourceDependent(object):  # Interface
    DataSourceInfo: Agilent.MassSpectrometry.DataAnalysis.IDataSourceInformation

class IDataSourceInformation(object):  # Interface
    ...

class IDataUnits(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency, System.ICloneable
):  # Interface
    XUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    XValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    YUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    YValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDataUnits: ...

class IDataViewDependent(object):  # Interface
    ActiveDataView: Agilent.MassSpectrometry.DataAnalysis.DataView
    IsVisibleInActiveDataView: bool  # readonly

class IDeconvolutedIonSetMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    CalculatedMass: float
    Mass: float
    MassDifference: float  # readonly

class IDeconvolutedMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    Area: float
    EndX: float
    FitScore: int
    MaximumEntropyPeakHeight: float
    Significance: float
    StartX: float
    Uncertainty: float
    Width: float

class IDelayTimeContainer(object):  # Interface
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...

class IDescription(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    CpdMiningAlgorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    DataSource: Agilent.MassSpectrometry.DataAnalysis.IDataSource
    DelayTime: float  # readonly

    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDescription: ...

class IDeviceDelayInfo(System.ICloneable):  # Interface
    Delay: float
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    OrdinalNumber: int  # readonly
    RT: float
    Used: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo: ...

class IDeviceDelayInfoParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo
    Delay: float
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType  # readonly
    OrdinalNumber: int  # readonly
    RetentionTime: float
    Used: bool
    Value: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfo

    def DelayValueString(self) -> str: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfoParameter
    ) -> bool: ...
    def RTValueString(self) -> str: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IDeviceDelayInfoParameter: ...

class IDifferentialCompound(
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    AbundanceRatio: float  # readonly
    AverageMass: float  # readonly
    AverageRetentionTime: float  # readonly
    CompoundID: int  # readonly
    CompoundLabel: str  # readonly
    Found: Agilent.MassSpectrometry.DataAnalysis.Found  # readonly
    ReferencedCompound: Agilent.MassSpectrometry.DataAnalysis.ICompound  # readonly
    SampleCompound: Agilent.MassSpectrometry.DataAnalysis.ICompound  # readonly
    UpDownRegulation: (
        Agilent.MassSpectrometry.DataAnalysis.FoldChangeDirection
    )  # readonly

class IDifferentialCompoundList(
    System.ICloneable,
    List[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IDifferentialCompound],
    Iterable[Any],
):  # Interface
    UnitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary  # readonly

class IDisplayPreferences(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency, System.ICloneable
):  # Interface
    CheckMarkStatus: Agilent.MassSpectrometry.DataAnalysis.CheckMarkStatus
    Description: str
    DisplayGroup: int
    Exhibit: bool
    Highlighted: bool
    IconStatus: Agilent.MassSpectrometry.DataAnalysis.IconStatus
    LineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PrimaryColor: System.Drawing.Color  # readonly
    ValidationStatus: Agilent.MassSpectrometry.DataAnalysis.ValidationStatus

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences: ...

class IDoubleListParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    Limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDoubleListParameter
    ) -> bool: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    ) -> bool: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDoubleListParameter: ...

class IDoubleParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DefaultValue: float
    Limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit  # readonly
    Value: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter
    ) -> bool: ...
    def IsValueValid(self, value_: float) -> bool: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter: ...

class IEicRtMzRanges(object):  # Interface
    ID: int
    MzList: System.Collections.Generic.List[float]
    MzRangeList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IRange
    ]
    RtMax: float
    RtMin: float

    def Clear(self) -> None: ...

class IElement(object):  # Interface
    ElementApexMass: float
    ElementAvgMass: float
    ElementMonoMass: float
    ElementName: str
    ElementSymbol: str
    ElemetType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IElementLimit(System.ICloneable):  # Interface
    Element: str
    MaximumNumber: int
    MinimumNumber: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ) -> bool: ...
    def IsValid(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IElementLimit: ...

class IElementLimitListParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IElementLimitListParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IElementLimitListParameter: ...

class IEnumParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: T
    EnumType: System.Type  # readonly
    LocalizedValueString: str  # readonly
    Value: T

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IEnumParameter
    ) -> bool: ...
    def IsValueValid(self, value_: Any) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IEnumParameter: ...

class IExtractDetails(object):  # Interface
    ...

class IExtractDetailsMsChrom(
    IMidacMsDetailsChrom, Agilent.MassSpectrometry.DataAnalysis.IExtractDetails
):  # Interface
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IExtractDetailsMsChrom: ...

class IExtractDetailsMsSpec(
    IMidacMsDetailsSpec, Agilent.MassSpectrometry.DataAnalysis.IExtractDetails
):  # Interface
    AbundanceLimit: float
    AcqTimeRanges: List[IDoubleRange]
    CompensationFieldRange: IDoubleRange
    DispersionFieldRange: IDoubleRange
    DriftTimeRanges: List[IDoubleRange]
    FragmentationClass: FragmentationClass
    FragmentationEnergyIsFromAcqMethod: bool
    FragmentationEnergyRange: IDoubleRange
    FragmentationOpMode: FragmentationOpMode
    FragmentorVoltageIsFromAcqMethod: bool
    FragmentorVoltageRange: IDoubleRange
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IsPrimary: bool
    IsotopeWidth: float
    MaxFlightTimeBin: int
    MinFlightTimeBin: int
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    MzOfInterestChargeState: int
    MzOfInterestRanges: List[IDoubleRange]
    NumCombinedSpectra: int
    ParentScanID: int
    ScanID: int
    TofBinWidth: float
    TofMassCalibration: ITofCal

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IExtractDetailsMsSpec: ...

class IExtractFilters(object):  # Interface
    ...

class IExtractFiltersMsChrom(
    IMidacMsFiltersChrom, Agilent.MassSpectrometry.DataAnalysis.IExtractFilters
):  # Interface
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IExtractFiltersMsChrom: ...

class IExtractFiltersMsSpec(
    IMidacMsFiltersSpec, Agilent.MassSpectrometry.DataAnalysis.IExtractFilters
):  # Interface
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IExtractFiltersMsSpec: ...

class IFXArrayStore(object):  # Interface
    MeasuredRange: Agilent.MassSpectrometry.DataAnalysis.IRange

    def SetX(self, index: int, x: float) -> None: ...
    def SetY(self, index: int, y: float) -> None: ...
    def RefreshLimits(self) -> None: ...
    @overload
    def SetData(
        self,
        xarray: List[float],
        yarray: List[float],
        pointCount: int,
        measuredRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def SetData(
        self,
        xarray: List[float],
        yarray: List[float],
        accumTimeArray: List[float],
        pointCount: int,
        measuredRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def SetData(
        self,
        xstart: float,
        xstep: float,
        yarray: List[float],
        measuredRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    def GetXArray(self) -> List[float]: ...
    def GetAccumulationTimeArray(self) -> List[float]: ...
    def GetYArray(self) -> List[float]: ...

class IFXData(
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    DelayTime: float
    Description: Agilent.MassSpectrometry.DataAnalysis.IDescription  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.IFXLimits  # readonly
    Manufactured: bool  # readonly
    NoiseResult: Agilent.MassSpectrometry.DataAnalysis.INoiseResult
    NormalizationInfo: (
        Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    )  # readonly
    PeakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList
    ResultList: Agilent.MassSpectrometry.DataAnalysis.IResultList
    SamplingPeriod: float
    Title2: str  # readonly
    XYProcessingHistory: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory
    XYStore: Agilent.MassSpectrometry.DataAnalysis.IFXStore

    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    def FindBaselineAdjustedYMax(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> float: ...
    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    def ClearResults(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    def RemoveCompoundInformation(self) -> None: ...
    def XOfMaximumInRange(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IRange, xValue: float
    ) -> bool: ...
    def WriteFile(self, filePath: str, delimitor: str, appendData: bool) -> None: ...
    def CopyNormalizationInfoFrom(
        self, info: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    ) -> None: ...

class IFXLimits(
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
):  # Interface
    MeasuredXMax: float
    MeasuredXMin: float
    XAtMaxY: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXLimits: ...

class IFXStore(
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    ContiguousXRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection  # readonly
    DefaultYValue: float
    Limits: Agilent.MassSpectrometry.DataAnalysis.IFXLimits  # readonly
    UncertaintyType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType
    XUncertainty: float

    def YMinIndex(self, minPoint: int, maxPoint: int) -> int: ...
    def YMaxIndex(self, minPoint: int, maxPoint: int) -> int: ...
    def IndexAtX(
        self, x: float, closeType: Agilent.MassSpectrometry.DataAnalysis.ClosestType
    ) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFXStore: ...

class IFbfResult(
    List[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo],
    Iterable[Any],
    System.ICloneable,
):  # Interface
    AcqTimeUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit  # readonly
    AverageObservedMass: float  # readonly
    BareCompoundName: str  # readonly
    BareFormula: str  # readonly
    Best: bool
    BestIonSpeciesScores: (
        Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesScores
    )  # readonly
    DbCasId: str
    DbCompoundId: int
    DbCompoundName: str
    DbDigestEnzyme: str
    DbHmpId: str
    DbKeggId: str
    DbLinks: str
    DbLipidId: str
    DbLocation: str
    DbMass: float
    DbMetlinId: str
    DbModifications: str
    DbNotes: str
    DbPredictedModifications: str
    DbRT: float
    DbSequence: str
    DbSequenceName: str
    DbSequenceType: str
    DbStructure: str
    DbSwissProtId: str
    HasDbValues: bool  # readonly
    ID: int
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonSpeciesScores: List[Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesScores]
    IsotopeAbundanceScore: float
    IsotopeSpacingScore: float
    MassScore: float
    MatchScore: float
    ReferenceRetentionTimeAvailable: str  # readonly
    RetentionTimeScore: float
    TargetFormula: str
    TargetMass: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFbfResult: ...

class IFbfResultList(
    List[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFbfResult],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
):  # Interface
    BestHit: Agilent.MassSpectrometry.DataAnalysis.IFbfResult  # readonly
    BestOrFirstHit: Agilent.MassSpectrometry.DataAnalysis.IFbfResult  # readonly

    def GetById(self, id: int) -> Agilent.MassSpectrometry.DataAnalysis.IFbfResult: ...
    def SetAsBest(self, id: int) -> None: ...

class IFileActionLogWriter(object):  # Interface
    def IncreaseIndent(self) -> None: ...
    def BeginAppending(self) -> None: ...
    def LogMessage(self, message: str) -> None: ...
    def CloseLogFile(self) -> None: ...
    def RemoveLogFile(self) -> None: ...
    def DecreaseIndent(self) -> None: ...

class IFilterPropagator(object):  # Interface
    @overload
    def CreateChromatogramRequest(
        self,
        psetExtractChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def CreateChromatogramRequest(
        self,
        chromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType,
        includeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def CreateChromatogramRequest(
        self,
        signalWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange,
        sourceSpectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def CreateSpectrumRequest(
        self,
        desiredStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        sourceChromatograms: List[Agilent.MassSpectrometry.DataAnalysis.IChromatogram],
        retentionTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...
    @overload
    def CreateSpectrumRequest(
        self,
        desiredStorageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        sourceChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...

class IFindCompounds(object):  # Interface
    FXDataCoreListCreator: Agilent.MassSpectrometry.DataAnalysis.ICreateFXDataList

    def GetCpdDataObjects(
        self,
        compound: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        details: Agilent.MassSpectrometry.DataAnalysis.ICpdDetails,
        type: Agilent.MassSpectrometry.DataAnalysis.CpdDataObjectType,
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        resultOptions: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IFXData
    ]: ...
    def FindCompounds(
        self,
        findParameters: Agilent.MassSpectrometry.DataAnalysis.IFindCompoundsParameters,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindCpdResults: ...

class IFindCompoundsParameters(object):  # Interface
    AnalysisFileName: str
    DataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess
    FirstCompoundNumber: int
    FirstGroupNumber: int

class IFindCpdResults(object):  # Interface
    CpdResultList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICpdResult
    ]
    ErrorMessage: str
    GrpRawSpectra: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFXData
    ]
    MaxUsedGroupNumber: int
    OverallChromatograms: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IChromatogram
    ]

class IFindPeaks(object):  # Interface
    SupportsManualPeakFinding: bool  # readonly

    def ManualPeak(
        self,
        data: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPeak: ...
    def FindPeaks(
        self,
        data: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    ) -> None: ...

class IFindPeaksParameters(object):  # Interface
    ParameterSets: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ]
    PeakFilterParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter

    def ParameterSetByType(
        self, desiredType: System.Type
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...

class IFormula(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    AbsoluteRelativeDifference: float  # readonly
    Best: bool
    CalculatedMass: float
    CalculatedMz: float
    Coverage: float
    CrossSpeciesScore: float
    Difference: float  # readonly
    DoubleBondEquivalent: float
    FragmentMatchScore: float
    Highlighted: bool
    ID: int
    IonFormula: str
    IsotopeAbundanceMatch: float
    IsotopeSpacingMatch: float
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mass: float
    MassMatch: float
    MatchScore: float
    MolecularFormula: str
    MsMsDataSet: System.Data.DataSet  # readonly
    MsMsDetails: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaMsMsDetail
    ]
    Mz: float
    OverallMatchScore: float
    RelativeDifference: float  # readonly

    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def MolecularFormulaOfSpecies(
        self, ionSpecies: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ) -> str: ...
    def GetById(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFormula: ...

class IFormulaCalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Interface
    FirstListWithBest: Agilent.MassSpectrometry.DataAnalysis.IFormulaList  # readonly
    MostAbundantWithBest: Agilent.MassSpectrometry.DataAnalysis.IFormulaList  # readonly

    def SetAsSelected(self, formula: str) -> bool: ...
    def GetById(
        self, id: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaList: ...
    def SetAsHighlighted(self, formula: str) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults: ...
    def ClearHighlights(self) -> None: ...

class IFormulaConfirmResults(
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
):  # Interface
    AverageObservedMass: float  # readonly
    DbCasId: str
    DbCompoundName: str
    DbHmpId: str
    DbKeggId: str
    DbLipidId: str
    DbMass: float
    DbMetlinId: str
    DbNotes: str
    DbRT: float
    HasDbValues: bool  # readonly
    MatchScore: float
    TargetFormula: str
    TargetMass: float

    def BareString(self, decoratedString: str) -> str: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaConfirmResults: ...

class IFormulaList(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormula
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormula],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    Abundance: float  # readonly
    BestFormula: Agilent.MassSpectrometry.DataAnalysis.IFormula  # readonly
    FormulaOfM: str  # readonly
    ID: int
    IonSpecies: str  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    MolecularFormula: str  # readonly
    Mz: float

    def GetById(self, id: int) -> Agilent.MassSpectrometry.DataAnalysis.IFormula: ...
    def RemoveFormula(self, formula: str) -> None: ...
    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaList: ...
    def SetAsBest(self, formula: str) -> None: ...

class IFormulaMsDetail(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.ICloneable,
):  # Interface
    CalculatedHeight: float
    CalculatedHeightPercent: float  # readonly
    CalculatedHeightSumPercent: float  # readonly
    CalculatedMz: float
    Difference: float  # readonly
    Height: float
    HeightPercent: float  # readonly
    HeightSumPercent: float  # readonly
    ID: int
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mz: float
    RelativeDifference: float  # readonly

    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaMsDetail: ...

class IFormulaMsMsDetail(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer
):  # Interface
    CalculatedMz: float
    ChargeState: int
    Difference: float  # readonly
    FormulaDifference: str
    GroupID: int
    Height: float
    HeightPercent: float
    IonFormula: str
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Mz: float
    NeutralLossMass: float
    RelativeDifference: float  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IFormulaMsMsDetail: ...

class IFragAllIonsResultList(
    List[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFragmentIonInfo],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
):  # Interface
    AvgFragCoelutionScore: float
    NumFragConfirmed: int  # readonly
    NumFragIonEvaluated: int  # readonly
    ParentCpdConfirmed: bool

class IFragEnergySegmentEndPoint(object):  # Interface
    DriftBin: int
    FragmentationEnergy: float

    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFragEnergySegmentEndPoint: ...

class IFragmentAssigner(object):  # Interface
    def Assign(
        self,
        fragmentSpectrum: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        parentZ: int,
        parentMz: float,
        parentStructure: str,
    ) -> List[
        List[Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate]
    ]: ...
    def Setup(
        self,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow,
        parentChargeType: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion,
        massAccuracyCoefficients: List[float],
        minMzOfWellCalibratedRegion: float,
        massAccuracyAtMz0: float,
        minScore: float,
        keepIsotope: bool,
    ) -> None: ...

class IFragmentFormulaCalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IFormulaList],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
):  # Interface
    BestIDMolecularFormula: str

    def ConsolidateResults(
        self,
        standardResult: Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults,
        bestIDResult: Agilent.MassSpectrometry.DataAnalysis.IFormulaCalculatorResults,
    ) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFragmentFormulaCalculatorResults: ...

class IFragmentIonInfo(System.ICloneable):  # Interface
    CoeultionScore: float
    CollisionEnergy: float
    DbCpdName: str
    FragIonParentCpdName: str
    FragIonSource: Agilent.MassSpectrometry.DataAnalysis.FragmentIonSource
    FragmentIonsNotes: str
    FragmentorVoltage: float
    Height: float
    IonConfirmed: bool
    MZ: float
    RetentionTime: float
    RetentionTimeDiff: float
    SignalToNoise: float

    def DisqualifyFragIon(self, note: str) -> None: ...

class IFrameCECalculator(object):  # Interface
    @overload
    def CollisionEnergy(self, driftBin: int) -> float: ...
    @overload
    def CollisionEnergy(self, minDriftBin: int, maxDriftBin: int) -> IDoubleRange: ...

class IFunction(object):  # Interface
    IsConstant: bool  # readonly

    def Y(self, x: float) -> float: ...

class IGenieFindPeaksParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Interface
    Filter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    Parameters: Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegrator
    TimeRangeRestrictions: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection

class IGenieTimedEvent(System.ICloneable):  # Interface
    Code: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode
    Time: float
    Value: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent: ...

class IGenieTimedEventCollection(
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent],
    Iterable[Any],
    System.ICloneable,
):  # Interface
    Count: int  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent: ...
    def __setitem__(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ) -> None: ...
    @overload
    def Sort(self) -> None: ...
    @overload
    def Sort(
        self,
        comparison: System.Comparison[
            Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
        ],
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection
    ) -> bool: ...
    def Add(
        self, te: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ) -> None: ...
    def Clear(self) -> None: ...
    @overload
    def BinarySearch(
        self, te: Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEvent
    ) -> int: ...
    @overload
    def BinarySearch(
        self,
        code: Agilent.MassSpectrometry.DataAnalysis.GenieTimedEventCode,
        time: float,
    ) -> int: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection: ...
    def RemoveAt(self, index: int) -> None: ...

class IGenieTimedEventCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    Collection: (
        Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection
    )  # readonly

    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollectionParameter: ...

class IGrabHandle(object):  # Interface
    BodyX: float
    BodyY: float
    DecoratorCursor: System.Windows.Forms.Cursor
    Position: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition  # readonly

    def Draw(self, g: System.Drawing.Graphics) -> None: ...
    def IsHit(self, CanvasX: float, CanvasY: float) -> bool: ...

class IGraphics2DRegion(System.ICloneable):  # Interface
    GraphicsPath: System.Drawing.Drawing2D.GraphicsPath
    IsEmpty: bool  # readonly
    XAxisUnits: MidacUnits
    YAxisUnits: MidacUnits

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IGraphics2DRegion
    ) -> bool: ...
    def ToString(self) -> str: ...
    def Clear(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IGraphics2DRegion: ...

class IHeatMapRegionSelection(object):  # Interface
    AcqTimeProjection: IDoubleRange  # readonly
    AcqTimeSpan: IIntRange  # readonly
    DriftProjection: IDoubleRange  # readonly
    DriftSpan: IIntRange  # readonly
    MassProjection: IDoubleRange  # readonly
    MassSpan: IIntRange  # readonly
    SelectionShape: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape  # readonly
    XLineYRanges: Dict[int, System.Collections.Generic.List[IIntRange]]  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IHeatMapRegionSelection
    ) -> bool: ...
    def Validate(self, message: str) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IHeatMapRegionSelection: ...

class IIcpFxArrayStore(
    Agilent.MassSpectrometry.DataAnalysis.IFXArrayStore
):  # Interface
    def GetDetectorModeArray(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode]: ...
    def GetStdDevArray(self) -> List[float]: ...
    def SetData(
        self,
        xarray: List[float],
        yarray: List[float],
        accumTimeArray: List[float],
        stdDevArray: List[float],
        detectorModeArray: List[Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode],
        pointCount: int,
        measuredRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...

class IIcpFxStore(
    Agilent.MassSpectrometry.DataAnalysis.IFXStore,
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    def GetDetectorMode(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode: ...
    def GetStandardDeviation(self, index: int) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIcpFxStore: ...

class IIcpMassSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    ...

class IIcpMsChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Element: str  # readonly

class IIcpMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    AccumulationTime: float
    IonDetectorMode: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode
    RejectionFlag: bool

class IIdentificationResults(
    Agilent.MassSpectrometry.DataAnalysis.ITableDefinition,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
):  # Interface
    ClassLevel: str  # readonly
    HasNextLevel: bool
    ID: int
    LastID: int

class IImpDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
):  # Interface
    ImportTitle: str

class IIms2DSlice(object):  # Interface
    AbundanceHistogram: List[int]  # readonly
    Bookmark: Agilent.MassSpectrometry.DataAnalysis.IIms2DSliceBookmark  # readonly
    FrameNumbers: List[int]  # readonly
    ImsFileInfo: Agilent.MassSpectrometry.DataAnalysis.IImsFileInfo  # readonly
    XArray: List[float]  # readonly
    XArrayHighFrag: List[float]  # readonly
    YArray: List[float]  # readonly
    YArrayHighFrag: List[float]  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSlice: ...

class IIms2DSliceBookmark(object):  # Interface
    AbundanceMeasure: AbundanceMeasure
    DataFilePath: str
    DataFilters: IMidacMsFilters
    FragmentationClass: FragmentationClass
    XDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    XRange: IIntRange
    YDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    YRange: IIntRange
    ZDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    ZRange: IIntRange

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IIms2DSliceBookmark
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSliceBookmark: ...

class IIms3DSlice(object):  # Interface
    AbundanceHistogram: List[int]  # readonly
    AbundanceRange: IDoubleRange  # readonly
    Bookmark: Agilent.MassSpectrometry.DataAnalysis.IIms3DSliceBookmark  # readonly
    FrameCECalculator: (
        Agilent.MassSpectrometry.DataAnalysis.IFrameCECalculator
    )  # readonly
    FrameCycleList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IImsFrameCycleInfo
    ]  # readonly
    ImsFileInfo: Agilent.MassSpectrometry.DataAnalysis.IImsFileInfo  # readonly
    ImsFrameInfo: Agilent.MassSpectrometry.DataAnalysis.IImsFrameInfo  # readonly
    XBinCount: int  # readonly

    def SpecIterator(self, xIdx: int) -> IRlzArrayIterator: ...
    @overload
    def Get2DSlice(
        self,
        resultXDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension,
        selectionRegions: List[Agilent.MassSpectrometry.DataAnalysis.IGraphics2DRegion],
        includeDataInsideRegions: bool,
        abundMeasure: AbundanceMeasure,
        dataFilters: IMidacMsFilters,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSlice: ...
    @overload
    def Get2DSlice(
        self,
        resultXDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension,
        orthoRange: List[IDoubleRange],
        includeDataInsideRegions: bool,
        abundMeasure: AbundanceMeasure,
        dataFilters: IMidacMsFilters,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSlice: ...
    def SpecMetrics(self, xIdx: int) -> RlzArrayMetrics: ...

class IIms3DSliceBookmark(object):  # Interface
    AbundanceMeasure: AbundanceMeasure
    DataFilePath: str
    DataFilters: IMidacMsFilters
    XDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    YDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    ZDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension
    ZRange: IIntRange

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IIms3DSliceBookmark
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIms3DSliceBookmark: ...

class IIms4DSlice(object):  # Interface
    def Get3DSlice(
        self,
        xDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension,
        yDimension: Agilent.MassSpectrometry.DataAnalysis.ImsDimension,
        zRange: IDoubleRange,
        abundMeasure: AbundanceMeasure,
        dataFilters: IMidacMsFilters,
        histogram: List[int],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIms3DSlice: ...
    @overload
    def Get2DSlice(
        self,
        resultXRange: IDoubleRange,
        orthoRange1: IDoubleRange,
        orthoRange2: IDoubleRange,
        abundMeasure: AbundanceMeasure,
        dataFilters: IMidacMsFilters,
        histogram: List[int],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSlice: ...
    @overload
    def Get2DSlice(
        self,
        resultXRange: IDoubleRange,
        orthoRegions: List[Agilent.MassSpectrometry.DataAnalysis.IGraphics2DRegion],
        includeDataInsideRegions: bool,
        abundMeasure: AbundanceMeasure,
        dataFilters: IMidacMsFilters,
        histogram: List[int],
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIms2DSlice: ...

class IImsConvertibleUnitContainer(object):  # Interface
    def ChangeUnits(
        self,
        desiredUnits: Agilent.MassSpectrometry.DataAnalysis.IImsUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter,
    ) -> bool: ...

class IImsFileInfo(IMidacFileInfo):  # Interface
    AcqTimeRange: IDoubleRange  # readonly
    FileUnitConverter: (
        Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter
    )  # readonly
    FrameCycleInfo: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IImsFrameCycleInfo
    ]  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    MaxMassBin: int  # readonly
    MaxNonTfsDriftBins: int  # readonly
    MeasurementType: Agilent.MassSpectrometry.DataAnalysis.MeasurementType  # readonly
    MinMassBin: int  # readonly
    NumCycles: int  # readonly
    SeparationTechnique: (
        Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique
    )  # readonly
    TfsMsDetails: (
        Agilent.MassSpectrometry.DataAnalysis.IExtractDetailsMsSpec
    )  # readonly
    TfsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    TofBinWidth: float  # readonly

    def DefaultTofCalibration(
        self, polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    ) -> ITofCal: ...
    def SampleInfoData(
        self,
        dispNames: System.Collections.Generic.List[str],
        values: System.Collections.Generic.List[str],
        units: System.Collections.Generic.List[str],
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsFileInfo: ...

class IImsFrameCycleInfo(object):  # Interface
    CycleNumber: int
    HighFragFrameNumber: int
    HighFragSpecIdx: int
    LownlyFragFrameNumber: int
    LownlyFragSpecIdx: int

class IImsFrameInfo(IMidacFrameInfo):  # Interface
    FileInfo: Agilent.MassSpectrometry.DataAnalysis.IImsFileInfo  # readonly
    FrameSpecAbundanceLimit: float  # readonly
    FrameUnitConverter: (
        Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter
    )  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    IsolationMzRange: IDoubleRange  # readonly
    SpectrumDetails: (
        Agilent.MassSpectrometry.DataAnalysis.IExtractDetailsMsSpec
    )  # readonly
    TofBinWidth: float  # readonly
    TofCalibration: ITofCal  # readonly
    TofIrmCalibration: ITofCal  # readonly
    TofUserCalibration: ITofCal  # readonly
    TotalFrameCount: int  # readonly

    def FrameCount(self, fragClass: FragmentationClass) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsFrameInfo: ...

class IImsFrameMethod(object):  # Interface
    DefMassCalId: int
    DetectorGainDeltaTo: float
    DetectorGainMode: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode
    DetectorGainRatio: float
    FragEnergy: float
    FragEnergyMode: Agilent.MassSpectrometry.DataAnalysis.FragEnergyMode
    FragEnergySegments: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IFragEnergySegmentEndPoint
    ]
    FragOpMode: FragmentationOpMode
    FrameDtPeriod: float
    FrameIonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    FrameMethId: int
    FrameMsXPeriod: float
    FrameSpecAbundLimit: float
    FrameSpecFmtId: int
    FrameType: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType
    ImsField: float
    ImsGas: str
    ImsGateMode: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode
    ImsGateOpenTime: float
    ImsMuxProcessing: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing
    ImsMuxSequence: str
    ImsTrapMode: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode
    ImsTrapTime: float
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MaxMsBin: int
    MaxMsPerFrame: int
    MinMsBin: int
    NumActuals: int
    NumTransients: int
    TfsPeakFmtId: int
    TfsProfileFmtId: int
    TfsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    Threshold: float

    def AddFragEnergySegment(
        self, driftBin: int, fragmentationEnergy: float
    ) -> None: ...
    def Validate(self, validationMessage: str) -> bool: ...
    def ClearFragEnergySegments(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsFrameMethod: ...

class IImsFrameRecord(object):  # Interface
    ActualsOffset: int
    CycleNumber: int
    FirstNonzeroDriftBin: int
    FragClass: FragmentationClass
    FragEnergy: float
    FrameBaseAbund: float
    FrameBaseDriftBin: int
    FrameBaseMsBin: int
    FrameId: int
    FrameMethod: Agilent.MassSpectrometry.DataAnalysis.IImsFrameMethod
    FrameMethodId: int
    FrameScanTime: float
    FrameSpecAbundLimit: float
    FrameTic: float
    ImsField: float
    ImsPressure: float
    ImsTemperature: float
    ImsTrapTime: float
    IsolationEndMz: float
    IsolationMz: float
    IsolationStartMz: float
    LastNonzeroDriftBin: int
    MassCalOffset: int
    NumTransients: int
    ScanRecordDriftBinList: System.Collections.Generic.List[int]  # readonly
    TimeSegmentId: int

    def AddScanRecordReference(
        self, scanRecord: Agilent.MassSpectrometry.DataAnalysis.IImsScanRecord
    ) -> None: ...
    def ScanRecordByBin(
        self, driftBin: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsScanRecord: ...
    def ScanRecordsByBin(
        self, driftBinList: System.Collections.Generic.List[int]
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IImsScanRecord
    ]: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsFrameRecord: ...

class IImsScanRecord(object):  # Interface
    BaseAbund: int  # readonly
    BaseMsBin: int  # readonly
    DetectorGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain  # readonly
    DriftBin: int  # readonly
    FirstNzMsBin: int  # readonly
    Frame: Agilent.MassSpectrometry.DataAnalysis.IImsFrameRecord  # readonly
    FrameID: int  # readonly
    LastNzMsBin: int  # readonly
    PeakParams: Agilent.MassSpectrometry.DataAnalysis.IMsSpecAccessParams  # readonly
    ProfileParams: Agilent.MassSpectrometry.DataAnalysis.IMsSpecAccessParams  # readonly
    ScanId: int  # readonly
    TfsBaseAbund: float  # readonly
    TfsBaseMz: float  # readonly
    Tic: float  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsScanRecord: ...

class IImsUnitConverter(IMidacUnitConverter):  # Interface
    TofMassCalibration: ITofCal  # readonly

    @overload
    def ConvertX(
        self,
        oldUnits: MidacUnits,
        newUnits: MidacUnits,
        pointCollection: Iterable[Agilent.MassSpectrometry.DataAnalysis.I2DPoint],
    ) -> bool: ...
    @overload
    def ConvertX(
        self,
        oldUnits: MidacUnits,
        newUnits: MidacUnits,
        pointCollection: Iterable[Agilent.MassSpectrometry.DataAnalysis.I3DPoint],
    ) -> bool: ...
    def ConvertY(
        self,
        oldUnits: MidacUnits,
        newUnits: MidacUnits,
        pointCollection: Iterable[Agilent.MassSpectrometry.DataAnalysis.I3DPoint],
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter: ...

class IImsUnits(object):  # Interface
    ChromXUnits: MidacUnits
    DriftSpecXUnits: MidacUnits
    MassSpecXUnits: MidacUnits

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IImsUnits
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IImsUnits: ...

class IIndicatorIcon(object):  # Interface
    ChangeMessage: str  # readonly
    ErrorMessage: str  # readonly
    WarningMessage: str  # readonly

    IndicatorIconChangeEvent: System.EventHandler  # Event

class IIntactProteinModification(object):  # Interface
    MaxLimit: int
    ModName: str

class IIntegrationEventInfo(System.ICloneable):  # Interface
    Event: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    EventValue: Any
    EventValueType: System.Type  # readonly
    IsTimeEvent: bool
    IsUsed: bool
    SupportedValuesForEvent: List[Any]  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo: ...

class IIntegrationEventParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    RestrictValueChoices: bool
    Value: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    ValueChoices: List[Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventParameter: ...

class IInterruptAlgorithm(object):  # Interface
    CancelIndicator: Agilent.MassSpectrometry.DataAnalysis.CancelIndicator

    ProgressEvent: Agilent.MassSpectrometry.DataAnalysis.ProgressEventHandler  # Event

class IIonSpeciesDetails(object):  # Interface
    BaseCount: int
    ElectronCount: int
    ModifierCount: int
    ModifierFormula: str
    NeutralLoss: str
    ShorthandSpeciesFormula: str  # readonly

class IIonSpeciesScores(System.ICloneable):  # Interface
    AbundWtdMsScore: float
    AbundanceScore: float
    MassScore: float
    MsScore: float
    SpacingScore: float
    Species: str

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesScores: ...

class IIsotopeClusterBase(object):  # Interface
    IonSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies  # readonly
    SpectralPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak]  # readonly

    def IsPeakSaturated(self, peakIndex: int) -> bool: ...

class IItemHighlighting(object):  # Interface
    def IsAnyItemHighLighted(self) -> bool: ...
    def SetHighlightOfItems(
        self, itemIDs: System.Collections.Generic.List[int], bHighlighted: bool
    ) -> None: ...
    def HighlightOnlyItems(
        self, itemIDs: System.Collections.Generic.List[int]
    ) -> None: ...
    def DeleteAllHighlightedItems(self) -> bool: ...
    def GetHighLightedItems(self) -> System.Collections.Generic.List[int]: ...
    def SetAllItems(self, bHighLighted: bool) -> None: ...

class ILastOperation(object):  # Interface
    LastError: int  # readonly
    LastErrorMessage: str  # readonly
    MessageList: System.Collections.Generic.List[str]  # readonly

class ILibrary(object):  # Interface
    DataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet  # readonly
    IsAccurateMass: bool  # readonly
    IsDirty: bool  # readonly
    IsOpen: bool  # readonly
    IsReadOnly: bool  # readonly
    LibraryDirectory: str  # readonly
    LibraryID: int  # readonly
    LibraryName: str  # readonly
    LibraryPath: str  # readonly
    NumberOfCompounds: int  # readonly
    NumberOfSpectra: int  # readonly
    StorageFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat  # readonly

    def ExportToXML(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def ImportFromBinary(self, filePath: str) -> None: ...
    def FindCompoundByCASNumber(
        self, casNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def OpenLibrary(self, path: str, readOnly: bool) -> None: ...
    @overload
    def GetSpectra(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def GetSpectra(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    def ExportToBinary(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetSpectrumTitle(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> str: ...
    def CreateSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def FindCompoundByName(
        self, name: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    @overload
    def SelectSpectra(
        self, spectrumFilter: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def SelectSpectra(
        self, compoundFilter: str, spectrumFilter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def GetCompounds(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def CloseLibrary(self) -> None: ...
    def SelectCompounds(
        self, filter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def FindCompoundsByCASNumber(
        self, casNumber: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def SaveLibrary(self) -> None: ...
    def DeleteCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> None: ...
    def DeleteSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> None: ...
    def AddCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...
    def SaveLibraryAs(
        self,
        fileName: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
    ) -> None: ...
    def CreateCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def ImportFromJCAMP(self, filePath: str) -> None: ...
    def AddSpectrum(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    def ExportToCompressed(
        self,
        libPath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetSpectrumById(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def ImportFromXML(self, filePath: str) -> None: ...

    LibraryClosed: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryClosing: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryMoved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryOpen: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibrarySaved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event

class ILibraryManager(object):  # Interface
    def CreateLibrary(
        self, path: str, format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    def GetLibraries(self) -> List[Agilent.MassSpectrometry.DataAnalysis.ILibrary]: ...
    def GetLibrary(
        self, path: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    def CloseLibrary(
        self, library: Agilent.MassSpectrometry.DataAnalysis.ILibrary
    ) -> None: ...
    def GetLibraryByID(
        self, libraryId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    @overload
    def OpenLibrary(
        self, path: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    @overload
    def OpenLibrary(
        self,
        path: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
        readOnly: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...

class ILibrarySearchResults(object):  # Interface
    ...

class ILibrarySearchSettings(object):  # Interface
    AccurateMassSearchSettings: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchLC
    )
    FileInformation: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    LibrarySelection: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection
    MultiLibrarySelection: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySelection
    )
    PeakFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    SearchSettings: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchBase
    UnitMassSearchSettings: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearch

class ILineDefinition(System.ICloneable):  # Interface
    Color: System.Drawing.Color
    Pattern: Agilent.MassSpectrometry.DataAnalysis.LinePattern
    Weight: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinition: ...

class ILineDefinitionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    ColorValue: System.Drawing.Color  # readonly
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PatternValue: Agilent.MassSpectrometry.DataAnalysis.LinePattern  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    WeightValue: float  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter: ...

class ILink(object):  # Interface
    LinkDeltaAvgMass: float
    LinkDeltaMass: float
    LinkGainFormula: str
    LinkLossFormula: str
    LinkName: str
    LinkSpecificity: str
    LinkType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class ILongParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DefaultValue: int
    Limits: Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit  # readonly
    Value: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILongParameter
    ) -> bool: ...
    def IsValueValid(self, value_: int) -> bool: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILongParameter: ...

class ILuDecomposition(object):  # Interface
    Determinant: float  # readonly
    IsNonSingular: bool  # readonly
    LowerTriangularFactor: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly
    PivotPermutationVector: List[float]  # readonly
    UpperTriangularFactor: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly

    def Solve(
        self, rhs: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...

class ILwChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak, System.ICloneable
):  # Interface
    Base1EndX: float
    Base1StartX: float
    Base2EndX: float
    Base2StartX: float
    BaseEndFlag: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags
    BaseEndY: float
    BaseStartFlag: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags
    BaseStartY: float
    EndX: float
    EndY: float
    StartX: float
    StartY: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak: ...

class ILwChromPeakList(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
):  # Interface
    def __getitem__(
        self, idx: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak: ...
    def __setitem__(
        self, idx: int, value_: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ) -> None: ...
    def RemoveOverlappingPeak(
        self, chromPeak: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList: ...

class ILwDsPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak, System.ICloneable
):  # Interface
    EndX: float
    Resolution: float  # readonly
    StartX: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwDsPeak: ...

class ILwDsPeakList(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwDsPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
):  # Interface
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwDsPeakList: ...

class ILwIntegrator(object):  # Interface
    SupportsManualIntegration: bool  # readonly

    def FindChromPeaks(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        chromatogram: Agilent.MassSpectrometry.DataAnalysis.ILwXyData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList: ...
    def ManualPeak(
        self,
        chromatogram: Agilent.MassSpectrometry.DataAnalysis.ILwXyData,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        base1X: float,
        base2X: float,
        base1Y: float,
        base2Y: float,
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak: ...

class ILwMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak, System.ICloneable
):  # Interface
    ClusterId: int
    IonSpecies: str
    Resolution: float  # readonly
    XIsMz: bool
    Z: int

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak: ...

class ILwMsPeakFinder(object):  # Interface
    def FindMsPeaks(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.ILwXyData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...

class ILwMsPeakList(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
):  # Interface
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...

class ILwPeak(System.ICloneable):  # Interface
    ApexY: float
    Area: float
    CenterX: float
    EndIndex: int
    Fwhm: float
    Height: float
    StartIndex: int
    Warning: Agilent.MassSpectrometry.DataAnalysis.LwPeakWarning

    def HasValue(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeak: ...

class ILwPeakList(System.ICloneable):  # Interface
    Count: int  # readonly
    def __getitem__(
        self, idx: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeak: ...
    Peaks: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ILwPeak
    ]  # readonly

    def Sort(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute,
        direction: Agilent.MassSpectrometry.DataAnalysis.SortDirection,
    ) -> None: ...
    def Truncate(self, maxPeaks: int) -> None: ...
    def ClosestPeakIndex(self, center: float) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeakList: ...
    def ClosestPeak(
        self, center: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeak: ...
    def RemoveAt(self, idx: int) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeak: ...

class ILwPeakList(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList, System.ICloneable
):  # Interface
    def __getitem__(self, idx: int) -> T: ...
    def __setitem__(self, idx: int, value_: T) -> None: ...
    Peaks: System.Collections.Generic.List[T]

    def RemoveAt(self, idx: int) -> T: ...
    def Add(self, peak: T) -> None: ...
    def ClosestPeak(self, center: float) -> T: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILwPeakList: ...

class ILwXyData(object):  # Interface
    IsChromatogram: bool  # readonly
    IsMassSpectrum: bool  # readonly
    IsUvSpectrum: bool  # readonly

class IMS2Scan(object):  # Interface
    CollisionEnergy: float  # readonly
    RetentionTime: float  # readonly
    ScanId: int  # readonly

class IMSActualsInfo(System.ICloneable):  # Interface
    AcquisitionTime: float
    DataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    MSActuals: System.Data.DataSet
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    Title: str

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSActualsInfo: ...

class IMSChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DriftTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    FrameRegionShape: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape
    MSDetails: Agilent.MassSpectrometry.DataAnalysis.IMSDetails
    MzRegionsWereExcluded: bool
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange
    TimeSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange

class IMSChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Description: Agilent.MassSpectrometry.DataAnalysis.IMSChromDescription  # readonly
    TimeSegments: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

    def GetBasePeakMass(self, indexPoint: int) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram: ...

class IMSDetails(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency, System.ICloneable
):  # Interface
    AbundanceLimit: float
    ChargeState: int
    CollisionEnergy: float
    CollisionEnergyIsDynamic: bool
    CompensationField: float
    DispersionField: float
    FilteredOnCollisionEnergy: bool
    FilteredOnCompensationField: bool
    FilteredOnDispersionField: bool
    FilteredOnFragmentor: bool
    FilteredOnIonPolarity: bool
    FilteredOnIonizationMode: bool
    FragmentationMode: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    FragmentorIsDynamic: bool
    FragmentorVoltage: float
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IsCollisionEnergyFromAcqMethod: bool
    IsFragmentorVoltageFromAcqMethod: bool
    IsPrimary: bool
    IsotopeWidth: float
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MSStage: int
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    MZOfInterest: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NumScanForExtractSpectrum: int
    ParentScanID: int
    ScanID: int

    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSDetails: ...

class IManualIdHitPlus(System.ICloneable):  # Interface
    Best: bool
    CasId: str
    ChargeState: int
    CompoundName: str
    HmpId: str
    ID: int
    IonSpecies: str
    KeggId: str
    LipidId: str
    MolecularFormula: str
    Notes: str
    Score: float
    Structure: str
    StructurePath: str
    SwissProtId: str

class IManualIdResultPlus(System.ICloneable):  # Interface
    Hits: List[Agilent.MassSpectrometry.DataAnalysis.IManualIdHitPlus]  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    ManualIdPSet: Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult  # readonly

    def GetDataSet(self) -> System.Data.DataSet: ...
    def GetBest(self) -> Agilent.MassSpectrometry.DataAnalysis.IManualIdHitPlus: ...
    def SetAsBest(self, hitId: int) -> None: ...

class IMassCalculatorResults(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Interface
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMassCalculatorResults: ...

class IMassListReader(object):  # Interface
    DefaultMasslistFile: str

    def OpenMassListFile(self, fileFullPath: str) -> bool: ...
    def GetMasses(self, massListName: str) -> List[float]: ...
    def GetMassListNames(self) -> List[str]: ...

class IMassSpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.ISpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DriftTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    FrameRegionShape: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape
    MSDetails: Agilent.MassSpectrometry.DataAnalysis.IMSDetails
    ScanIDs: Agilent.MassSpectrometry.DataAnalysis.ICoreList[int]

class IMassSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Description: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription  # readonly
    IsProfile: bool  # readonly
    MSActualsInfo: Agilent.MassSpectrometry.DataAnalysis.IMSActualsInfo
    SelectionIons: System.Collections.Generic.List[float]
    Threshold: float

    def AssertIsCompatible(
        self, candidate: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
    ) -> None: ...
    def CompatibleSpectrum(
        self, candidates: List[Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...

class IMassSpectrumFactory(object):  # Interface
    AbundanceLimit: float
    BackgroundAcqTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    CalcMzArray: List[float]
    ChargeStateArray: List[int]
    CollisionEnergy: float
    CollisionIsDynamic: bool
    CpdMiningAlgorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    DataSourcePath: str
    DataSourceType: Agilent.MassSpectrometry.DataAnalysis.DataSourceType
    DelayTimeInMinutes: float
    DeviceNumber: int
    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    FragmentorIsDynamic: bool
    FragmentorVoltage: float
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonSpeciesList: System.Collections.Generic.List[str]
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IsValid: bool  # readonly
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MSStage: int
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    MaxMeasuredX: float
    MaxRtInMinutes: float
    MfeRtArray: List[float]
    MfeRtWidthArray: List[float]
    MfeSaturationArray: List[bool]
    MfeVolumeArray: List[float]
    MinMeasuredX: float
    MinRtInMinutes: float
    MsPeakList: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList  # readonly
    MzOfInterest: System.Collections.Generic.List[float]
    NumberOfScans: int
    Results: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IResult
    ]
    ShortTitle: str
    SpecSubType: Agilent.MassSpectrometry.DataAnalysis.SpecSubType
    SpecType: Agilent.MassSpectrometry.DataAnalysis.SpecType
    SpecialFlagsArray: List[bool]
    SpeciesIdxArray: List[int]
    Title: str
    TofCalibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration
    UncertaintyType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType
    XArray: List[float]
    XSamplingPeriod: float
    XSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType
    XUncertainty: float
    XUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    YArray: List[float]
    ZOfInterest: int

    @overload
    def Initialize(
        self, massSpectrum: Agilent.MassSpectrometry.DataAnalysis.IFXData
    ) -> None: ...
    @overload
    def Initialize(
        self, pkList: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList
    ) -> None: ...
    @overload
    def Initialize(
        self,
        pkList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
        defaultPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity,
        subtractAcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...
    def CreateMassSpectrum(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...

class IMatrix(object):  # Interface
    Columns: int  # readonly
    Determinant: float  # readonly
    FrobeniusNorm: float  # readonly
    InfinityNorm: float  # readonly
    Inverse: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly
    IsSquare: bool  # readonly
    IsSymmetric: bool  # readonly
    def __getitem__(self, row: int, col: int) -> float: ...
    def __setitem__(self, row: int, col: int, value_: float) -> None: ...
    Norm1: float  # readonly
    Rows: int  # readonly
    Trace: float  # readonly

    @overload
    def Multiply(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Multiply(self, s: float) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Addition(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, startRow: int, endRow: int, startColumn: int, endColumn: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, r: List[int], c: List[int]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, r: List[int], startColumn: int, endColumn: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Subtraction(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Solve(
        self, rhs: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def GetLuDecomposition(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILuDecomposition: ...
    def Transpose(self) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...

class IMergedIDHitPlus(
    List[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
):  # Interface
    Best: bool
    ContainBioMatchResults: bool  # readonly
    ContainLibSearchResults: bool  # readonly
    ContainMFGResults: bool  # readonly
    ContainMolecularFormula: bool  # readonly
    ContainsManualIDResults: bool  # readonly
    HasMultipleSpeciesFromLibSearch: bool  # readonly
    Highlighted: bool
    ID: int
    IdentificationTechniques: str  # readonly
    IonSpeciesList: List[Agilent.MassSpectrometry.DataAnalysis.ISpecies]  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    LibrarySpectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum  # readonly
    MergedHitIdentificationResults: List[
        Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults
    ]  # readonly
    MergedIDHitOverallScore: float  # readonly
    Structure: str
    SummaryMoleculeFormula: str  # readonly
    TargetSpectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum  # readonly

    def MergeIDHitPlusResult(
        self,
        raInterface: Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
        psetMergeSettings: Agilent.MassSpectrometry.DataAnalysis.IPSetMergeIDSettings,
    ) -> bool: ...
    def FindAndUpdateBestMSMSScore(self) -> None: ...

class IMessageReporter(object):  # Interface
    def ReportException(self, exception: System.Exception) -> None: ...
    def ReportUserMessage(
        self, message: Agilent.MassSpectrometry.DataAnalysis.IUserMessage
    ) -> None: ...

class IMfeEvidenceResults(
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
):  # Interface
    BasePeak: Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMfeEvidenceResults: ...

class IMfeMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    Center2D: float
    CompoundNumber: int
    LowestIsotopeMz: float
    Volume: float
    Width2D: float

class IMinMaxRange(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    Max: float
    Min: float

    def Merge(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange: ...

class IModification(object):  # Interface
    ConsensusSequenceRegularExpression: str
    Migrate: bool  # readonly
    ModificationDeltaAvgMass: float
    ModificationDeltaMass: float
    ModificationGainFormula: str
    ModificationLossFormula: str
    ModificationNGlycoConsensus: bool
    ModificationName: str
    ModificationSpecificity: str
    ModificationType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IModificationCategory(object):  # Interface
    DisplayOrder: int
    ModificationCategoryName: str
    ModificationNames: List[str]

class IModificationProfile(object):  # Interface
    ModificationNames: List[str]
    ModificationProfileID: System.Guid
    ModificationProfileName: str
    ModificationProfileType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IModificationSpecies:  # Class
    BaseCount: int  # readonly
    IsInUndeterminedState: bool  # readonly
    Modifications: Dict[
        Agilent.MassSpectrometry.DataAnalysis.IModificationUnit, int
    ]  # readonly

    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, another: Any) -> bool: ...
    @overload
    def Equals(
        self, another: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies
    ) -> bool: ...

class IModificationUnit:  # Class
    Formula: str  # readonly
    Z: int  # readonly

    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, another: Any) -> bool: ...
    @overload
    def Equals(
        self, another: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit
    ) -> bool: ...

class IMolecularStructure(object):  # Interface
    AtomCount: int  # readonly

    def BondIsOnARing(
        self,
        bond: Agilent.MassSpectrometry.DataAnalysis.IBond,
        atomA: Agilent.MassSpectrometry.DataAnalysis.IAtom,
        atomB: Agilent.MassSpectrometry.DataAnalysis.IAtom,
        connectingAtom: Agilent.MassSpectrometry.DataAnalysis.IAtom,
        neighborAtom: Agilent.MassSpectrometry.DataAnalysis.IAtom,
    ) -> bool: ...
    def GetAtoms(self) -> Sequence[Agilent.MassSpectrometry.DataAnalysis.IAtom]: ...
    def GetBonds(self) -> Sequence[Agilent.MassSpectrometry.DataAnalysis.IBond]: ...

class IMsChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    AccumulationTime: float

class IMsMath2D(object):  # Interface
    def RiDeconvolute(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        pset: Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution,
        fileInfo: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation,
    ) -> None: ...

class IMsMsChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    AccumulationTime: float
    Base1End: float
    Base1Start: float
    Base2End: float
    Base2Start: float
    MaxMergeHeight: float
    MergedPeakCount: int
    MfApexIndex: int
    PeakError: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags
    PeakStatus: Agilent.MassSpectrometry.DataAnalysis.PeakStatus

class IMsMsScanInfo(object):  # Interface
    CollisionEnergy: float  # readonly
    RetentionTime: float  # readonly
    ScanId: int  # readonly

class IMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IPeak, System.ICloneable
):  # Interface
    AbsoluteMzDifference: float  # readonly
    CalculatedMz: float
    CalculatedMzIsAnchor: bool
    ChargeState: int
    CompoundName: str
    FormulaPlusIonSpecies: str  # readonly
    GeneratedFormulaIonSpecies: str
    GeneratedMolecularFormula: str
    IonSpecies: str  # readonly
    IsotopeCluster: int
    NeutralLossFormula: str
    NeutralLossMass: float  # readonly
    NormalizedHeightPct: float
    ObservedIonType: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType
    ProductIonCharge: int
    ProductIonMass: float
    ProductIonName: str
    ReferenceIonSpecies: str
    ReferenceMolecularFormula: str
    RelativeMzDifference: float  # readonly
    SaturationWarning: bool
    SummaryMolecularFormula: str  # readonly
    TargetCpdIonSpecies: str
    TargetMolecularFormula: str

class IMsPeakInfo(System.ICloneable):  # Interface
    Abundance: float
    CalculatedAbundance: float
    CalculatedMz: float
    ChargeState: int
    EndIdx: int
    IonSpecies: str
    MaxY: float
    Mz: float
    Resolution: float
    Saturated: bool
    StartIdx: int
    Width: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo: ...

class IMsPeakList(
    Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Any],
):  # Interface
    MaxArea: float  # readonly

class IMsScanInfo(object):  # Interface
    AbundLimit: float
    AcqTime: float
    ActualsOffset: int
    BaseMsAbund: int
    BaseMsBin: int
    BasePeakAbund: float
    BasePeakMz: float
    ChargeState: int
    ChromScaleFactor: float
    CollisionEnergy: float
    CollisionEnergyIsDynamic: bool
    CompensationField: float
    CycleNumber: int
    DdParentMzOfInterest: float
    DdScanID1: int  # readonly
    DdScanID2: int  # readonly
    DdScanID3: int  # readonly
    DefaultMassCalId: int
    DetectorGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain
    DetectorGainDeltaTo: float
    DetectorGainMode: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode
    DetectorGainRatio: float
    DispersionField: float
    DriftBin: int
    DriftField: float
    DriftGas: str
    DriftPressure: float
    DriftTemperature: float
    DwellTime: int
    FirstNzDriftBin: int
    FirstNzMsBin: int
    FragClass: FragmentationClass
    FragEnergy: float
    FragMode: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    FragOpMode: FragmentationOpMode
    Fragmentor: float
    FragmentorIsDynamic: bool
    FrameBaseAbund: float
    FrameBaseDriftBin: int
    FrameBaseMsBin: int
    FrameDtPeriod: float
    FrameTic: float
    ImsGateMode: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode
    ImsMuxProcessing: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing
    ImsTrapMode: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode
    ImsTrapTime: float
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IsFrameScan: bool  # readonly
    LastNzDriftBin: int
    LastNzMsBin: int
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    MassCalOffset: int
    MaxMsBin: int
    MaxNonTfsMsPerFrame: int
    MeasuredMzMax: float
    MeasuredMzMin: float
    MinMsBin: int
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MsPeakFmtId: int  # readonly
    MsProfFmtId: int  # readonly
    MsScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MsXPeriod: float
    MzIsolationWidth: float
    MzOfInterest: float
    NumActuals: int
    NumTransients: int
    PeakSpectrumAccess: Agilent.MassSpectrometry.DataAnalysis.IMsSpecAccessParams
    ProfileSpectrumAccess: Agilent.MassSpectrometry.DataAnalysis.IMsSpecAccessParams
    ScanId: int  # readonly
    Status: int
    Threshold: float
    Tic: float
    TimeSegId: int  # readonly
    XSpecificByteCount: int
    XSpecificOffset: int

class IMsScanInfoAccess(object):  # Interface
    AcquisitionIsComplete: bool  # readonly
    FileUnitConverter: (
        Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter
    )  # readonly
    HasFixedCycleData: bool  # readonly
    HasImsFrames: bool  # readonly
    ScanInfoCollection: (
        Agilent.MassSpectrometry.DataAnalysis.IMsScanInfoCollection
    )  # readonly

    def ReadFiles(self) -> None: ...
    def FrameTofMassCalInfo(
        self, frameNumber: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ITofMassCalInfo: ...
    def Clear(self) -> None: ...
    def WriteFiles(self, makeBackups: bool) -> None: ...
    @overload
    def FrameUnitConverter(
        self, startFrameNumber: int, endFrameNumber: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter: ...
    @overload
    def FrameUnitConverter(
        self, frameNumberList: System.Collections.Generic.List[int]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter: ...
    @overload
    def FrameUnitConverter(
        self, frameNumberArray: List[int]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IImsUnitConverter: ...

class IMsScanInfoCollection(
    Dict[int, Agilent.MassSpectrometry.DataAnalysis.IMsScanInfo],
    Sequence[
        System.Collections.Generic.KeyValuePair[
            int, Agilent.MassSpectrometry.DataAnalysis.IMsScanInfo
        ]
    ],
    Iterable[
        System.Collections.Generic.KeyValuePair[
            int, Agilent.MassSpectrometry.DataAnalysis.IMsScanInfo
        ]
    ],
    Iterable[Any],
):  # Interface
    ...

class IMsScanSchemaReader(object):  # Interface
    ComplexFieldsInOrder: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ]  # readonly
    Count: int  # readonly
    SchemaVersion: int  # readonly

    def FieldNumber(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> int: ...
    def Name(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> str: ...
    def ReadSchema(self, schemaFileName: str) -> None: ...
    def Field(
        self, fieldNum: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField: ...
    def ContainsKey(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> bool: ...
    def Clear(self) -> None: ...
    def ValidateSchema(self, validationErrorMsg: str) -> bool: ...
    def Close(self) -> None: ...
    def FieldValueType(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType: ...
    def SetHasValues(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField, flag: bool
    ) -> None: ...
    def AddSpecialField(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> None: ...
    def HasValues(
        self, field: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField
    ) -> bool: ...

class IMsSpecAccessParams(object):  # Interface
    ByteCount: int  # readonly
    ByteOffset: int  # readonly
    FullByteCount: int  # readonly
    MaxMz: float  # readonly
    MaxY: float  # readonly
    MeasuredNoise: float  # readonly
    MinMz: float  # readonly
    MinY: float  # readonly
    NzPointCount: int  # readonly
    OneDataRangeDeltaYOffset: int  # readonly
    PointCount: int  # readonly
    SpecFmtId: int  # readonly
    SpecFmtReference: Agilent.MassSpectrometry.DataAnalysis.IMsSpectrumFmt  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMsSpecAccessParams: ...

class IMsSpectrumFmt(object):  # Interface
    CompressionScheme: (
        Agilent.MassSpectrometry.DataAnalysis.CompressionScheme
    )  # readonly
    ID: int  # readonly
    MsStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    NumValuesPerPoint: int  # readonly
    XSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType  # readonly
    XValueFmt: Agilent.MassSpectrometry.DataAnalysis.IMsValueFmt  # readonly
    YValueFmt: Agilent.MassSpectrometry.DataAnalysis.IMsValueFmt  # readonly

    @overload
    def PointValueFmt(
        self, fmtIdx: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsValueFmt: ...
    @overload
    def PointValueFmt(
        self, pointFmtId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsValueFmt: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMsSpectrumFmt: ...

class IMsValueFmt(object):  # Interface
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType  # readonly
    FileValueDataType: (
        Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType
    )  # readonly
    ID: int  # readonly
    Label: str  # readonly
    ScaleFactor: float  # readonly
    StorageScheme: (
        Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme
    )  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMsValueFmt: ...

class IMzAccuracyFunction(object):  # Interface
    def GetMzAccuracy(self, mz: float) -> float: ...
    def GetMassAccuracy(self, mass: float, z: int) -> float: ...

class IMzDataExportParameter(System.ICloneable):  # Interface
    FileName: str
    MsChargeStateParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )
    MsMsChargeStateParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )
    MsMsPeakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    MsPeakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    MzDataExportOptions: Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions
    TofPeakFindParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder
    UseDefaultFileName: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter: ...

class INistLauncher(object):  # Interface
    def SendSpectraToNist(
        self, spectra: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]
    ) -> None: ...
    def IsNistInstalled(self) -> bool: ...

class INistLibrarySearch(object):  # Interface
    Index: Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex  # readonly
    LibraryName: str  # readonly

    def GetSpectrumOverlap(
        self, mzValues: List[float], abundances: List[float]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...
    def GetCompoundReferenceNumber(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Any: ...
    def GetCompoundInfo(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryCompoundInfo: ...
    def GetSpectrum(
        self,
        entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId,
        mzValues: List[float],
        abundances: List[float],
    ) -> None: ...

class INoiseResult(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IResult
):  # Interface
    NoiseMultiplier: float
    NoiseRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NoiseType: Agilent.MassSpectrometry.DataAnalysis.NoiseType
    NoiseValue: float
    SignalType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute

    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.INoiseResult: ...

class INormalizationInfo(System.ICloneable):  # Interface
    NormalizationMode: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes
    ScaleFactor: float
    XNormalizationRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    YMax: float
    YOffset: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo: ...

class INormalizedObject(object):  # Interface
    InputObject: Agilent.MassSpectrometry.DataAnalysis.ICorrelatableObject  # readonly
    Mass: float  # readonly

    def GetTime(self, useCorrectedTime: bool) -> float: ...
    def GetIntensity(self, useNormalizedIntensity: bool) -> float: ...

class IObjectMath2D(object):  # Interface
    def Average(
        self, operand1: List[Agilent.MassSpectrometry.DataAnalysis.IFXData]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    def Multiply(
        self, operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData, scalar: float
    ) -> None: ...
    def Divide(
        self, operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData, scalar: float
    ) -> None: ...
    @overload
    def Add(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        operand2: Agilent.MassSpectrometry.DataAnalysis.IFXData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @overload
    def Add(
        self, operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData, scalar: float
    ) -> None: ...
    @overload
    def Clip(
        self,
        operand: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        clippingRanges: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection,
    ) -> None: ...
    @overload
    def Clip(
        self,
        operand: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        clippingRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...
    def AddBoundingPoints(
        self, dataObject: Agilent.MassSpectrometry.DataAnalysis.IFXData
    ) -> None: ...
    @overload
    def Subtract(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        operand2: Agilent.MassSpectrometry.DataAnalysis.IFXData,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @overload
    def Subtract(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        operand2: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        supressNegativeY: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFXData: ...
    @overload
    def Subtract(
        self, operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData, scalar: float
    ) -> None: ...
    @overload
    def Subtract(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        scalar: float,
        suppressNegativeY: bool,
    ) -> None: ...
    def Trim(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        xmin: float,
        xmax: float,
    ) -> None: ...
    def Threshold(
        self, operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData, threshold: float
    ) -> None: ...
    def Noise(
        self,
        operand: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        noiseRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        typeOfNoise: Agilent.MassSpectrometry.DataAnalysis.NoiseType,
        noiseMultiplier: float,
    ) -> None: ...
    def Smooth(
        self,
        operand1: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing,
    ) -> None: ...

class IPSetAddToLibraryCompoundLC(
    Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryLC,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    FlagDuplicates: bool
    Mass: float
    RetentionTime: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryCompoundLC
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryCompoundLC: ...

class IPSetAddToLibraryLC(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteMassTolerance: float
    RelativeMassTolerance: float
    RetentionTimeTolerance: float
    ShowDetailedLog: bool
    SpectralLibraryPath: str
    SpectrumConflict: Agilent.MassSpectrometry.DataAnalysis.ConflictResolution
    UseAbsoluteMassTolerance: bool

class IPSetAddToLibraryUserSpectraLC(
    Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryLC,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CasId: str
    CompoundName: str
    Description: str
    Formula: str
    Mass: float
    RetentionTime: float

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryUserSpectraLC,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAddToLibraryUserSpectraLC: ...

class IPSetAlignmentInfo(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    MassWindowDa: float
    MassWindowPpm: float
    RTMinutes: float
    RTPercent: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo: ...

class IPSetAnalysisReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ShowChromPeakTables: bool
    ShowCpdChromPeakTables: bool
    ShowCpdChromatograms: bool
    ShowCpdSpectra: bool
    ShowCpdSpectraPeakTables: bool
    ShowDifferenceSpectrum: bool
    ShowLibrarySpectrum: bool
    ShowSignalToNoiseResultTables: bool
    ShowSpecPeakTables: bool
    ShowUserChromatograms: bool
    ShowUserSpectra: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAnalysisReportSettings
    ) -> bool: ...
    def PresetStandardSelections(self) -> None: ...
    def PresetDetailedSelections(self) -> None: ...
    def PresetSimpleSelections(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAnalysisReportSettings: ...

class IPSetAsrExportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    PeakWindow: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAsrExportOptions
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAsrExportOptions: ...

class IPSetAvailableReportTemplates(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CountTemplates: int  # readonly
    Path: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates
    ) -> bool: ...
    def CheckReportTemplate(self, templateName: str) -> bool: ...
    def GetRDLAcqMethodReportTemplate(self) -> System.Collections.Generic.List[str]: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates: ...
    def GetReportTemplate(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition: ...

class IPSetBaselinePeak(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DrawBaseline: bool
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetBaselinePeak
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetBaselinePeak: ...

class IPSetBatchExtSelectAlgorithmType(object):  # Interface
    SelectedAlgorithm: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetBatchExtSelectAlgorithmType,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetBatchExtSelectAlgorithmType: ...

class IPSetChargeStateAssignment(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteTolerance: float
    Deisotope: bool
    IsotopeModel: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType
    LimitMaxChargeState: bool
    MaximumChargeState: int
    MinimumChargeState: int
    RecomputeOnChangedPeakList: bool
    RelativeTolerance: float
    RestrictToC13: bool
    SumDeisotopedAbundances: bool
    TreatUnknownAsSinglyCharged: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment: ...

class IPSetChemStationIntegratorSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    BaselineCorrection: Agilent.MassSpectrometry.DataAnalysis.BaselineCorrectionType
    FrontSkimHeightRatio: float
    PeakToValleyRatio: float
    SkimValleyRatio: float
    SupportedTimedEvents: List[
        Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    ]  # readonly
    TailSkimHeightRatio: float
    TangentSkimMode: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetChemStationIntegratorSettings,
    ) -> bool: ...
    def GetNextEventTime(self) -> float: ...
    def SetTimedEventsTable(
        self, eventTable: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def SetInitialEventsTable(
        self, eventTable: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def GetTimedEventsTable(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChemStationIntegratorSettings: ...
    def AddNewTimedEvent(
        self,
        psetIntegrationEvent: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent,
    ) -> int: ...
    def GetInitialEventsTable(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...

class IPSetChromAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DrawBaseline: bool
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool
    LinePreferenceType: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    PeakFillByStatus: bool
    PeakFillStyle: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle
    PeakHighlightAnnotation: (
        Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations
    )
    ShowNoiseRegionsInBold: bool
    ShowSecondTitle: bool
    TimeSegmentAnnotation: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromAnnotation
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromAnnotation: ...

class IPSetChromDeconvolutionCompound(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteArea: float
    EnableAbsoluteArea: bool
    EnableMinimumAbsoluteHeight: bool
    EnableMinimumPercentHeight: bool
    EnableRelativeArea: bool
    MinimumAbsoluteHeight: float
    MinimumPercentHeight: float
    RelativeArea: float

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromDeconvolutionCompound,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromDeconvolutionCompound: ...

class IPSetChromDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromDefinitions
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def GetPSetExtractChrom(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def SetPSetExtractChrom(
        self,
        orderIndex: int,
        psetExtractChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromDefinitions: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self, extractPSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> str: ...

class IPSetColorByPlots(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChromSpecType: str
    PlotItemType: Agilent.MassSpectrometry.DataAnalysis.ItemType
    PlotLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlots
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlots: ...

class IPSetColorByPlotsCollection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def GetColorForPlots(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def SetColorForPlots(
        self, eventTable: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...

class IPSetCommonReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CpdChromPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    DeconvolutedSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    HideEmptyColumns: bool
    LimitChromPeaks: bool
    LimitIdentificationHits: bool
    LimitSpectrumPeaks: bool
    MaxChromPeaks: int
    MaxIdentificationHits: int
    MaxSpectrumPeaks: int
    MsMsSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    MsSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    Orientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType
    ShowSampleInformation: bool
    UseCpdChromPlotLimits: bool
    UseDeconvolutedSpectrumPlotLimits: bool
    UseMsMsSpectrumPlotLimits: bool
    UseMsSpectrumPlotLimits: bool
    UseUserChromPlotLimits: bool
    UseUvSpectrumPlotLimits: bool
    UserChromPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    UvSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCommonReportSettings
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCommonReportSettings: ...

class IPSetCompoundReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ExcludeUnIdentifiedCompoundsDetails: bool
    LeftZoomPadding: float
    OverlayCpdChroms: bool
    OverlayIsotopePredictions: bool
    RightZoomPadding: float
    ShowCompoundTable: bool
    ShowCpdChroms: bool
    ShowDifferenceSpectrum: bool
    ShowFullMSMSSpectrum: bool
    ShowFullMSSpectrum: bool
    ShowLibrarySpectrum: bool
    ShowMSMSPeakTable: bool
    ShowMSPeakTable: bool
    ShowPredictedIsotopeTable: bool
    ShowUserChromatograms: bool
    ShowZoomedInMSSpectrum: bool
    SortCpdTableBy: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    SortIncreasing: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCompoundReportSettings
    ) -> bool: ...
    def PresetStandardSelections(self) -> None: ...
    def PresetDetailedSelections(self) -> None: ...
    def PresetSimpleSelections(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCompoundReportSettings: ...

class IPSetCpdCorrelation(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteMassAlignWindow: float
    AbsoluteRTAlignWindow: float
    AbsoluteRTTolerance: float
    DoAbundNormalization: bool
    DoRTCorrection: bool
    NormStdMass: float
    NormStdRT: float
    RelativeMassAlignWindow: float
    RelativeRTAlignWindow: float
    RelativeRTTolerance: float
    UseStdsForNormalization: bool
    UseStdsForRTCorrection: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdCorrelation
    ) -> bool: ...
    def GetMassRTs(self) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def SetMassRTs(
        self, rTCorrStdListList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCpdCorrelation: ...

class IPSetCpdDatabase(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DatabasePath: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDatabase: ...

class IPSetCpdDbSearch(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteMassTolerance: float
    LimitNumberOfHits: bool
    MaxHits: int
    MaxPeaksToSearch: int
    RelativeMassTolerance: float
    RetentionTimeTolerance: float
    SearchFields: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields
    SearchSimpleIonMassAsNeutral: bool
    UseAbsoluteMassTolerance: bool
    UseIsotopeRanking: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCpdDbSearch: ...

class IPSetCpdGroupFilters(object):  # Interface
    FrequencyFilterMode: (
        Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode
    )
    FrequencyFilterModeMFE: (
        Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode
    )
    FrequencyGroup: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode
    FrequencyGroupMFE: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode
    FrequencyMin: int
    FrequencyMinMFE: int
    FrequencyMinPct: int
    FrequencyMinPctMFE: int
    HeightAbsolute: int
    HeightAbsoluteEnabled: bool
    HeightRelative: float
    HeightRelativeEnabled: bool
    LimitToLargestN: int
    LimitToLargestNEnabled: bool
    LimitToLargestNEnabledMFE: bool
    LimitToLargestNMFE: int
    MFEScoreMin: float
    MFEScoreMinEnabled: bool
    TgtScoreMin: float
    TgtScoreMinEnabled: bool
    VolumeAbsolute: int
    VolumeAbsoluteEnabled: bool
    VolumeRelative: float
    VolumeRelativeEnabled: bool

class IPSetCpdProcessing(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    BpcMzRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ChromatogramPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    CpdMiningAlgorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm
    DoDbSearch: bool
    DoLibrarySearch: bool
    DoMfg: bool
    ExtractBPC: bool
    ExtractSignal: bool
    ExtractTIC: bool
    ExtractTWC: bool
    MatchSequences: bool
    ShowOnlyIdentifiedCpds: bool
    SignalDeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    SkipMfgForPeaksWithFormulas: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdProcessing
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCpdProcessing: ...

class IPSetDataFileList(object):  # Interface
    RecentOpenedDirectory: str
    SelectedFileName: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDataFileList
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDataFileList: ...

class IPSetDeconvolution(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AverageMass: float
    BaselineCutOffFactor: float
    DeconvolutionAlgorithm: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionAlgorithmType
    )
    ExtractEIC: bool
    IonSpecies: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    IsotopeWidthType: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionIsotopeWidthType
    )
    LimitMzRange: bool
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MassStep: float
    MinimumConsecutiveIonSet: int
    MinimumProteinFitScore: int
    MzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    NumberOfIterations: int
    SingletIsWidth: bool
    SingletResolution: float
    SingletWidth: float
    SnrThreshold: float
    SpecifiedIsotopeWidth: float
    SubtractBaseline: bool
    WidthType: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDeconvolution
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDeconvolution: ...

class IPSetDeviceDelayInfo(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    def CalculateDeviceDelay(self) -> None: ...
    def Add(
        self,
        devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        ordinalNumber: int,
    ) -> bool: ...
    def Remove(
        self,
        devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        ordinalNumber: int,
    ) -> None: ...
    def AddMissingDevices(
        self,
        fileInfoArray: List[Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation],
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo: ...

class IPSetDynamicStrings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDynamicStrings
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDynamicStrings: ...

class IPSetExcludeMass(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    ExcludeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ExcludeMasses: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass: ...

class IPSetExtractChrom(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    ChargeStateLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    Description: str  # readonly
    DesiredMSStorage: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DeviceName: str
    DeviceType: int  # readonly
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    DoCycleSum: bool
    ExtractOneChromatogramPerScanSegment: bool
    FileInformation: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IncludeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    Integrate: bool
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MultipleDevicesPresent: bool  # readonly
    MzOfInterestFilter: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    OrdinalNumber: int
    ReferenceWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange
    SignalDescription: str
    SignalName: str
    SignalWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    SingleChromatogram: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    UseReference: bool
    YValueInCounts: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...

class IPSetExtractChromIcp(
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChromIcp
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChromIcp: ...

class IPSetExtractSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AverageSpectrum: bool
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    DesiredMSStorage: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    ExtractByCycle: bool
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MassUnits: bool
    MzOfInterestFilter: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    OrdinalNumber: int
    ScanIds: System.Collections.Generic.List[int]
    ScanMethodNumber: int
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    SpectrumType: Agilent.MassSpectrometry.DataAnalysis.SpecType
    UVDeviceName: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...

class IPSetExtractSpectrumIcp(
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrumIcp
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrumIcp: ...

class IPSetFileSaveOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    SaveCompleteResults: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFileSaveOptions
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFileSaveOptions: ...

class IPSetFindCpdsAutoMsMs(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbundanceThresholdNegative: float
    AbundanceThresholdPositive: float
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    BackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    BackgroundThresholdMultiplier: float
    EicMzExpansion: float
    ExtractMsMsSpectrumPerCE: bool
    FragmentMass: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    GenerateMsChrom: bool
    GenerateMsMsChrom: bool
    GenerateMsMsSpectra: bool
    GenerateMsSpectra: bool
    IntegrateEic: bool
    LimitCompounds: bool
    MassFilter: Agilent.MassSpectrometry.DataAnalysis.MassFilterType
    MatchAllFragments: bool
    MaxBackgroundCount: int
    MaxCompounds: int
    MinimumEicWidth: float
    MzTolerance: float
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    RetentionTimeWindow: float
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    UseFragmentMass: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsAutoMsMs
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsAutoMsMs: ...

class IPSetFindCpdsFormula(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbsoluteMassTolerance: float
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    AsymmetricRtExpansionHigh: float
    AsymmetricRtExpansionLow: float
    AutoIncrementIsomericMaxMatches: bool
    AverageMsMsSpecForCe: bool
    CefPath: str
    ClipRawSpectrum: bool
    ClipRawSpectrumAsymWidthHigh: float
    ClipRawSpectrumAsymWidthLow: float
    ClipRawSpectrumSingleMzWidth: float
    DeisotopeMsMsSpectrum: bool
    DoSamplePurity: bool
    ExtractCleanedSpectrum: bool
    ExtractEIC: bool
    ExtractMsMsSpectrum: bool
    ExtractRawSpectrum: bool
    ExtractedRtExpansionMode: Agilent.MassSpectrometry.DataAnalysis.RtExpansionMode
    ExtractedSpectrumMzExpansionMode: (
        Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    )
    FormulaSourceToConfirm: Agilent.MassSpectrometry.DataAnalysis.FormulaSource
    IncludeStructure: bool
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    LimitEicExtractionRange: bool
    MaxEicClusterIons: int
    MaxHitsPerTarget: int
    MinEicClusterCoverage: float
    MinRelativeAbundanceForMultipleHits: float
    PrecursorToleranceMz: float
    PrecursorTolerancePpm: float
    PrecursorToleranceUnit: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm
    PreferProfileRawSpectra: bool
    RejectOnLowScore: bool
    RejectOnSingleIon: bool
    RejectScoreThreshold: float
    RejectSingleIonThreshold: float
    RelativeMassTolerance: float
    RetentionTimeExpansionWidth: float
    RetentionTimeTolerance: float
    ReturnAllCpds: bool
    ReturnCpdEic: bool
    ReturnCpdSpectrum: bool
    SearchFields: Agilent.MassSpectrometry.DataAnalysis.CpdDbSearchFields
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    SmoothEics: bool
    SpecifiedFormulas: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    UseAbsoluteMassTolerance: bool
    WarnOnLowScore: bool
    WarnOnSingleIon: bool
    WarnScoreThreshold: float
    WarnSingleIonThreshold: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsFormula
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsFormula: ...

class IPSetFindCpdsTargetedMsMs(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ExtractMsMsChromatogram: bool
    ExtractMsMsSpectrum: bool
    ExtractMsMsSpectrumPerCE: bool
    ExtractMsSpectrum: bool
    GenerateLibrarySpectra: bool
    LimitCompounds: bool
    MaxCompounds: int
    MaximumChromPeakWidth: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsTargetedMsMs
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsTargetedMsMs: ...

class IPSetFormulaCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChargeState: int
    ElementLimits: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]
    FilterOnDBE: bool
    FilterOnMassError: bool
    FilterOnScore: bool
    FormulaGenerationRules: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules
    GroupHitsWithSameFormula: bool
    LimitNumberOfHits: bool
    MaxHits: int
    MaximumDBE: float
    MaximumMass: float
    MaximumMzError: float
    MinimumDBE: float
    MinimumScore: float
    MsAbundancePct: float
    MsMassCoeffMDa: float
    MsMassCoeffPpm: float
    MsMsMassCoeffMDa: float
    MsMsMassCoeffPpm: float
    MzErrorUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    NegativeAssumedChargeCarrier: str
    NegativeAssumedChargeCarrierCollection: (
        Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    )  # readonly
    NegativeSpeciesCollection: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NitrogenRule: Agilent.MassSpectrometry.DataAnalysis.NitrogenRule
    ObservedMz: float
    PositiveAssumedChargeCarrier: str
    PositiveAssumedChargeCarrierCollection: (
        Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    )  # readonly
    PositiveSpeciesCollection: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    TargetFormula: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator: ...

class IPSetFragIonConfirmation(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CoelutionScore: float
    DoFragIonConfirm: bool
    EnergyType: Agilent.MassSpectrometry.DataAnalysis.SearchPrecursionIon
    IsSNRatioDefined: bool
    MolecularIsOptional: bool
    NumOfConfirmedFragments: int
    NumOfIonsFromLibrary: int
    NumOfIonsFromSpectrum: int
    PercentOfConfirmedFragments: float
    RTDifference: float
    SNRatio: float
    bConfirmBasedOnAbsNum: bool
    bLibraryAsIonSource: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFragIonConfirmation
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFragIonConfirmation: ...

class IPSetGenieIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    InitialAreaReject: float
    InitialEnableShoulders: bool
    InitialPeakWidth: float
    InitialThreshold: float
    TimedEvents: (
        Agilent.MassSpectrometry.DataAnalysis.IGenieTimedEventCollection
    )  # readonly
    UseDataScaleFactor: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegrator: ...

class IPSetGenieIntegratorSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AreaReject: float
    PeakWidth: float
    ShoulderDetection: Agilent.MassSpectrometry.DataAnalysis.ShoulderModeType
    Threshold: float
    UseDataScaleFactor: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegratorSettings
    ) -> bool: ...
    def GetIntegrationEvents(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def SetIntegrationEvents(
        self, timedEventsList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegratorSettings: ...

class IPSetIdentityScoring(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbundanceScoreWeight: float
    MassScoreWeight: float
    MsAbundanceErrorPct: float
    MsMassErrorCoeffMDa: float
    MsMassErrorCoeffPpm: float
    MsMsMassErrorCoeffMDa: float
    MsMsMassErrorCoeffPpm: float
    MsMsScoreWeight: float
    RententionTimeError: float
    RetentionTimeScoreWeight: float
    SpacingScoreWeight: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring: ...

class IPSetIntegrationEvent(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    EventValueChoices: List[Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType]
    IntegrationEvent: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    Time: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent: ...

class IPSetIntegratorSelection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    IntegratorAlgorithm: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm
    UseRTEIntegrator: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegratorSelection
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntegratorSelection: ...

class IPSetIntermediateReportData(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    IntermediateDataLocation: str
    KeepIntermediateReportDirectories: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntermediateReportData
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntermediateReportData: ...

class IPSetLabelConfiguration(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    IncludeItemID: bool
    ListCount: int  # readonly
    SelectedLabels: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]
    UseAllAvailableLabels: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> bool: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def ClearList(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration: ...
    def Append(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> None: ...
    def GetResultAttribute(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttribute: ...

class IPSetLastCalibrationInfo(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    LastUsedReferenceMassFilename: str
    LastUsedReferenceMassList: str
    LastUsedToleranceValue: float
    SelectedRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    UseHighlightedPeaks: bool
    UseReferenceMassList: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLastCalibrationInfo
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLastCalibrationInfo: ...

class IPSetLibrarySearch(
    Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchBase,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    EnablePrefiltering: bool
    MaxMZ: float
    MaxRTPenalty: float
    MinMZ: float
    MinMatchScore: float
    MultipleLibSearchType: (
        Agilent.MassSpectrometry.DataAnalysis.MultipleLibrarySearchType
    )
    NISTCompatibility: bool
    PSetMultipleLibrarySearchParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySearchParameters
    )
    RTCalibrationFile: str
    RTMatchPenalty: Agilent.MassSpectrometry.DataAnalysis.RTMatchPenalty
    RTPenalty: Agilent.MassSpectrometry.DataAnalysis.RTPenalty
    RTRange: float
    RTRangeNoPenalty: float
    RatioPercentUncertainty: float
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    StandardDeviation: float
    UseRTMatch: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearch
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearch: ...

class IPSetLibrarySearchBase(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    MaxHitCount: int
    SpectralLibraryPath: str
    UseMaxHitCount: bool

class IPSetLibrarySearchLC(
    Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchBase,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CeTolerance: float
    ExcludePrecursorInReverseScore: bool
    ExcludePrecursorReverseScorePercentage: float
    MinForwardMatchScore: float
    MinReverseMatchScore: float
    PrecursorIonMz: float
    PrecursorIonPpm: float
    ProductIonMz: float
    ProductIonPpm: float
    SearchCriteria: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria
    SearchMethod: Agilent.MassSpectrometry.DataAnalysis.SearchMethod

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchLC
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchLC: ...

class IPSetLibrarySearchParameters(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    EnablePrefiltering: bool
    ExcludePrecursorInReverseScore: bool
    MaxRTPenalty: float
    MinForwardMatchScore: float
    MinReverseMatchScore: float
    NISTCompatibility: bool
    RTCalibrationFile: str
    RTMatchPenalty: Agilent.MassSpectrometry.DataAnalysis.RTMatchPenalty
    RTPenalty: Agilent.MassSpectrometry.DataAnalysis.RTPenalty
    RTRange: float
    RTRangeNoPenalty: float
    SearchMethod: Agilent.MassSpectrometry.DataAnalysis.SearchMethod
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    StandardDeviation: float
    UseRTMatch: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters: ...

class IPSetLibrarySelection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ApplyToSearchDb: bool
    SpectralLibraryPath: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection: ...

class IPSetLineDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AlternateIsotopePatternLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    BackgroundSpectrumLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    BaselineLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    BestIsotopePatternLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    ChromatogramLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    DeconvolutedMsLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    ListCount: int  # readonly
    MsLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    PeakHighlightLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PlotFontSize: float
    PlotFontStyle: System.Drawing.FontStyle
    SelectedPaneBorderLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    ShowPlotGrid: bool
    TimeSegmentAnnotationLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    UvLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    ViewSpectrumLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> bool: ...
    def GetLineDefinition(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinition: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def ClearList(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> str: ...

class IPSetMRMSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ExtractMRMChromatogram: bool
    ExtractMRMSpectrum: bool
    GroupTransitionsByCompoundName: bool
    UsePeakAreaForAbundantPeak: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMRMSettings
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMRMSettings: ...

class IPSetMSAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    LinePreferenceType: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    MsMsSelectedIonSymbolColor: System.Drawing.Color
    MsMsSelectedIonSymbolFill: bool
    MsSelectedIonSymbolColor: System.Drawing.Color
    MsSelectedIonSymbolFill: bool
    ShowStructure: bool
    StructureColor: System.Drawing.Color
    UsePlotColorForStrcture: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMSAnnotation
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMSAnnotation: ...

class IPSetMSMSPeakLabel(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    MSMSPrimaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    MSMSSecondaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    byionB: bool
    byionB2: bool
    byionB3: bool
    byionBH2O: bool
    byionBNH3: bool
    byionImmoniumIon: bool
    byionShowCTermLadder: bool
    byionShowNTermLadder: bool
    byionY: bool
    byionY2: bool
    byionY3: bool
    byionYH2O: bool
    byionYNH3: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMSMSPeakLabel
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMSMSPeakLabel: ...

class IPSetManualIDResult(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CasId: str
    ChargeState: int
    CompoundName: str
    HmpId: str
    IonSpecies: str
    KeggId: str
    LipidId: str
    MolecularFormula: str
    Notes: str
    Structure: str
    SwissProtId: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult: ...

class IPSetManualIntegration(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Baseline1X: float
    Baseline1Y: float
    Baseline2X: float
    Baseline2Y: float
    TestForBadBaselines: bool

class IPSetManualSpectrumExtraction(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    MsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetManualSpectrumExtraction
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetManualSpectrumExtraction: ...

class IPSetMassCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ActivePolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    BaseFormula: str
    ChargeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompareMasses: bool
    ComparisonMz: float
    NegativeSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    PositiveSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassCalculator
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassCalculator: ...

class IPSetMassDefectFilter(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ConstantDefect: bool
    DefectDenominator: float
    DefectIntercept: float
    DefectSlope: float
    EnableFilter: bool
    ExampleFormula: str
    ToleranceDenominator: float
    ToleranceNegative: float
    TolerancePositive: float
    ToleranceSlope: float
    ToleranceType: Agilent.MassSpectrometry.DataAnalysis.MassDefectToleranceType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassDefectFilter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassDefectFilter: ...

class IPSetMassHunterProcessing(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    AssumeUnidentifiedIonsAreRadicals: bool
    AsymWidthHigh: float
    AsymWidthLow: float
    AverageMSMSspecforCE: bool
    BaselineLength: float
    ChromRTPeaKWidth: float
    ChromSmoothingPeakWidthMultiplier: float
    ClipRawSpectrum: bool
    DisplayLargest: bool
    EicRangeMinimumSpan: float
    EicRangeWidthMultiplier: float
    ExrtactMSMSSpectrum: bool
    ExtractECC: bool
    ExtractEIC: bool
    ExtractMFESpectrum: bool
    ExtractRawSpectra: bool
    LimitedAcqTimeRange: bool
    LimitedMzRange: bool
    MSMSDeisotopeSpectrum: bool
    MSMSSingleMzExpansionMode: (
        Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    )
    MaxPeaksPerSpectrum: int
    MaxSpikeWidth: float
    MinPeaKWidth: float
    MzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    NegativeSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NeutralSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NumberOfCompounds: int
    PeakFilterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakHeightAbsThreshold: float
    PeptidicIsotopeDistribution: bool
    PositiveSaltDominated: bool
    PositiveSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    PreferProfileRawSpectra: bool
    RawSpectrumBackground: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    RemoveBaselne: bool
    RemoveSpikes: bool
    RemoveWidePeaks: bool
    RestrictEicRange: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SmoothChromatogram: bool
    SmoothSpectrumPeaks: bool
    SnrThreshold: float
    SpecSmoothingPeakWidthMultiplier: float
    TargetDataType: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType
    ToleranceMz: float
    TolerancePpm: float
    ToleranceUnit: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm
    UseChromRTPeakWidth: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterProcessing
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterProcessing: ...

class IPSetMassHunterResultFilters(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AbundanceFilterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    AcqTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ChargeStates: Agilent.MassSpectrometry.DataAnalysis.IRange
    FilterOptions: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions
    FindNeutralLosses: bool
    LimitedAcqTimeRange: bool
    LimitedChargeStates: bool
    LimitedMassRange: bool
    MassRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    MassSourceIsDatabase: bool
    MassTolerance: float
    MaximumCount: int
    NeutralLossMasses: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    NoIsotopeCpds: Agilent.MassSpectrometry.DataAnalysis.InclusionType
    NoMassCpds: Agilent.MassSpectrometry.DataAnalysis.InclusionType
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    QualityScore: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterResultFilters
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterResultFilters: ...

class IPSetMassListOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AlsoExtractBPC: bool
    AlsoExtractSignal: bool
    AlsoExtractTIC: bool
    AlsoExtractTWC: bool
    BpcMzRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    DoDbSearch: bool
    DoIdentifyUsingIndividualPeaks: bool
    DoIdentifyWholeSpectrum: bool
    DoMfg: bool
    DoMfgIfNoLibrarySearchHit: bool
    DoNoIdentification: bool
    MaxPeaksPerSpectrum: int
    SignalDeviceDisplayName: str
    SignalDeviceName: str  # readonly
    SignalDeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    SignalOrdinalNumber: int  # readonly
    SkipMfgForPeaksWithFormulas: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassListOptions
    ) -> bool: ...
    def GetDeviceInformation(
        self,
        storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType,
        deviceDisplayNames: List[str],
        deviceTypes: List[Agilent.MassSpectrometry.DataAnalysis.DeviceType],
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassListOptions: ...

class IPSetMassRT(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Mass: float
    RT: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassRT
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassRT: ...

class IPSetMergeIDSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AutolockScore: float
    BioconfirmScoreWeight: float
    DBSearchScoreWeight: float
    LibrarySearchScoreWeight: float
    MFGScoreWeight: float
    MaxNumOfHits: int
    MinOverallScore: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMergeIDSettings
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMergeIDSettings: ...

class IPSetMessagePreferences(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DeleteSuppressMessage: bool
    MethodSaveAsNeeded: bool
    MethodSuppressMessage: bool
    ResultsSaveAsNeeded: bool
    ResultsSuppressMessage: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMessagePreferences
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMessagePreferences: ...

class IPSetMsMsIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMsMsIntegrator
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMsMsIntegrator: ...

class IPSetMsPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    EnableAdvancedFilters: bool
    EnableHtCorrections: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMsPeakFilter
    ) -> bool: ...

class IPSetMultipleLibrarySearchParameters(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters: ...
    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySearchParameters,
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def SetPSetLibrarySearchParameters(
        self,
        orderIndex: int,
        psetLibrarySearch: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters,
    ) -> None: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def GetPSetLibrarySearchParameters(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySearchParameters: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self,
        libSearchParamPSet: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySearchParameters,
    ) -> str: ...

class IPSetMultipleLibrarySelection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySelection
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def SetPSetLibrarySelection(
        self,
        orderIndex: int,
        psetLibrarySearch: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection,
    ) -> None: ...
    def GetPSetLibrarySelection(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMultipleLibrarySelection: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self, libSelection: Agilent.MassSpectrometry.DataAnalysis.IPSetLibrarySelection
    ) -> str: ...

class IPSetMzDataExportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ComputeDeisotope: bool
    MSLevelType: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSStorageModeToUse: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions: ...

class IPSetPModChromPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AllowAbsoluteIntensity: bool
    AllowHeight: bool
    AllowPctIntensity: bool
    AllowPeakCount: bool
    MaximumPeakCount: int
    PModPeakWidthOption: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption
    PeakIntensityAbsThreshold: float
    PeakIntensityPctThreshold: float
    PeakSignificance: float
    UncertaintyMultiplier: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPModChromPeakFilter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPModChromPeakFilter: ...

class IPSetPaneCount(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChromResultsPlots: int
    DeconvolutedMsResultPlots: int
    SpecPreviewPlots: int
    SpecResultsPlots: int
    UVResultPlots: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPaneCount
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPaneCount: ...

class IPSetPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AllowAreaFilters: bool
    AllowHeightFilters: bool
    DisplayThreshold: float
    FilterOnHeight: bool
    InterimSumObjectCount: int
    MaximumPeakCount: int
    PeakAreaAbsThreshold: float
    PeakAreaPctThreshold: float
    PeakFilter: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    PerformFormulaAnnotationForNonFragments: bool
    PerformFragmentAnnotation: bool
    SignalToNoiseThreshold: float
    UsedForFragmentFormulaAnnotation: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    ) -> bool: ...
    def FilterTypeIsEnabled(
        self, filterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter: ...

class IPSetPeakFind(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ...

class IPSetPeakID(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    PeakID: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID: ...

class IPSetPeakLabel(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AllowLabelCollisions: bool
    AllowOverlapWithPeak: bool
    LabelTopPlotOnly: bool
    PrimaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    SecondaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    VerticalLabels: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel: ...

class IPSetPeakSpectrumExtraction(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DesignatedMinMaxTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    EvaluateNoBackground: bool
    MsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    MsMsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    NeverReturnEmptySpectrum: bool
    PeakHeightThreshold: float
    TofOptionsApplicable: bool
    TofSaturationMzRangeOption: Agilent.MassSpectrometry.DataAnalysis.MzOperatingRange
    TofSaturationMzRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    TofSaturationThreshold: float
    UVBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    UseApexScan: bool
    UseTofSaturationFilter: bool
    UseTofSaturationMzRange: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction: ...

class IPSetPlotReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    DestinationPath: str
    ResultsToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    SelectedContents: Agilent.MassSpectrometry.DataAnalysis.ReportContents
    SelectedDestination: Agilent.MassSpectrometry.DataAnalysis.ReportDestination
    ShowOnePlotPerPage: bool
    ShowOverlayedSignals: bool
    UseBlockingCall: bool
    VisibleDataItems: List[int]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotReportSettings
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotReportSettings: ...

class IPSetPlotTitleDef(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ExpandedTitle: bool
    TitleElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef: ...

class IPSetPlotTitleDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    EnablePlotTitles: bool
    PSetMSChromPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    PSetMSSpectrumPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    PSetOtherChromPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions: ...

class IPSetPlotWindowReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    IncludeFooter: bool
    IncludeHeader: bool
    ReportOrientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotWindowReportOptions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotWindowReportOptions: ...

class IPSetPrecision(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    XChromMinutesPrecisionDigits: int
    XChromMinutesPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XChromScanNumbersPrecisionDigits: int
    XChromScanNumbersPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XChromSecondsPrecisionDigits: int
    XChromSecondsPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XMsMassPrecisionDigits: int
    XMsMassPrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    XMsMzPrecisionDigits: int
    XMsMzPrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def GetPrecisionInfo(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo: ...
    def ParseKey(
        self,
        usageKey: str,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    def SetPrecisionInfo(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        info: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo,
    ) -> None: ...
    def GetPrecision(
        self,
        vType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        pType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        pDigits: int,
    ) -> bool: ...

class IPSetPrintQualReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ContentToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    OverwriteExistingReport: bool
    PrintPreview: bool
    PrintReport: bool
    PrinterName: str
    ReportType: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType
    SaveReport: bool
    SaveReportInsideDataFile: bool
    SaveReportToPDF: bool
    SeparateReportPerDataFile: bool
    SpecifiedReportDirectory: str
    WorklistSettings: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPrintQualReportOptions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrintQualReportOptions: ...

class IPSetProbableSpecies(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChargeCarriers: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    ChargeStateRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    IncludeDimers: bool
    IncludeTrimers: bool
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    NeutralLosses: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies: ...

class IPSetQualCompareDataFiles(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    OpenedFiles: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    ReferenceFile: str
    SampleFiles: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetQualCompareDataFiles
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetQualCompareDataFiles: ...

class IPSetRTEIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    BaselinePreference: Agilent.MassSpectrometry.DataAnalysis.BaselinePreferenceType
    BaselineReset: int
    BaselineValley: float
    DataPointSampling: int
    DetectionFiltering: Agilent.MassSpectrometry.DataAnalysis.DetectionFilteringType
    PeakLocation: Agilent.MassSpectrometry.DataAnalysis.PeakLocationType
    Smoothing: bool
    StartThreshold: float
    StopThreshold: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator: ...

class IPSetRangeCollection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Ranges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    UseRanges: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection: ...

class IPSetReportCommand(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChromagtogramAnchoredMode: bool
    ColumnNames: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    Counter: int
    DataItemID: int
    Delimiter: str
    DestinationPath: str
    EnableSpectralPeakLimit: bool
    IsFilteredRowRequired: bool
    NestedColumnNames: List[List[str]]
    NestedSortingColumnNames: List[List[str]]
    NestedSortingOrder: List[List[str]]
    OnlyVisibleColumns: bool
    OverwriteExistingData: bool
    ResultsToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    SelectedContents: Agilent.MassSpectrometry.DataAnalysis.ReportContents
    SelectedDestination: Agilent.MassSpectrometry.DataAnalysis.ReportDestination
    SelectedTemplate: str
    ShowOverlayedSignals: bool
    SortingColumnNames: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    SortingOrder: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    SpectralPeakLimit: int
    TableObject: Any
    TableTitle: str
    TopPlotID: int
    UseBlockingCall: bool
    UseDefaultFilename: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand
    ) -> bool: ...

class IPSetReportTemplateDefinition(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ReportTemplate: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType
    TemplateName: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition: ...

class IPSetReportTemplateSelection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AcqMethodReportTemplate: str
    AnalysisReportTemplate: str
    CompoundReportTemplate: str
    DAMethodReportTemplate: str
    MSTuneReportTemplate: str
    PSetAvailableReportTemplates: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates
    )
    PlotWindowReportTemplate: str
    RawDataReportTemplate: str
    ReportTemplateFolderPath: str  # readonly
    TableWindowReportTemplate: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateSelection
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateSelection: ...

class IPSetResultsOption(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ClearOldResults: bool
    HighlightAll: bool
    ResultsAlgorithmType: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType
    UsedForAutomation: bool
    UsedForCompounds: bool
    UsedForMatchSequence: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetResultsOption
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetResultsOption: ...

class IPSetRiDeconvolution(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    NegativeChargeCarrier: str
    PositiveChargeCarrier: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution: ...

class IPSetSamplePurity(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AlgorithmForQualification: (
        Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms
    )
    AlgorithmToUse: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms
    ComputeSamplePurity: bool
    MinimumAcceaptedPurity: int
    RTWindow: float
    UseAvgResults: bool
    UseLargestResult: bool
    UseMinResults: bool
    UsePeakArea: bool
    UseSingleAlgorithm: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSamplePurity
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSamplePurity: ...

class IPSetScriptCollection(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Scripts: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetScriptCollection
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetScriptCollection: ...

class IPSetSearchLibraryOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    PerformUnitMassLibrarySearch: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSearchLibraryOptions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSearchLibraryOptions: ...

class IPSetSendToPCDL(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CdbFilename: str
    ConflictResolution: (
        Agilent.MassSpectrometry.DataAnalysis.SendToPCDLConflictResolution
    )
    FormulaAnnotationPeaks: bool
    MinimumBasePeakAbundance: float
    UseBasePeakAbundanceFilter: bool
    UseCalculatedMzIfPresent: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSendToPCDL
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSendToPCDL: ...

class IPSetSignalToNoise(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AutoNoiseRangeSelection: bool
    DesiredNoiseLengthInMin: float
    EndTimeInMin: float
    MinimumNoiseLengthInMin: float
    NoiseMultiplier: float
    NoiseMultiplierAutoRMS: float  # readonly
    NoiseRegionWidthInMin: float
    NoiseRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NoiseTypeDefinition: Agilent.MassSpectrometry.DataAnalysis.NoiseType
    RunOnIntegration: bool
    SignalType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    StartTimeInMin: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise: ...

class IPSetSmoothing(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    FunctionWidth: int
    GaussianWidth: float
    SmoothingFunction: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing: ...

class IPSetStandaloneFormulaCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    PSetFormulaCalculator: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator
    PSetIdentityScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator: ...

class IPSetStoredDataOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ChromExtractionMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    ExtractionMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetStoredDataOptions
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetStoredDataOptions: ...

class IPSetSystemSuitability(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    ColumnLength: float
    ColumnLengthUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    ColumnVoidTime: float
    EnableSuitabilityCalculation: bool
    PharmacopoeiaType: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability: ...

class IPSetTofCalStep(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CalibrationFormula: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula
    CalibrationTechnique: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique
    CoefficientCount: int  # readonly
    CoefficientUseFlags: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep
    ) -> bool: ...
    def GetCoefficient(self, valueIndex: int) -> float: ...
    def SetCoefficients(self, coefficients: List[float]) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep: ...

class IPSetTofCalibration(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    StepCount: int  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration
    ) -> bool: ...
    def AppendStep(
        self, step: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration: ...

class IPSetTofPeakFinder(
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    BaselineChunkSize: int
    BaselineFractionSkip: float
    BaselineFractionUse: float
    BaselineMinimumChunks: int
    DetectMaximumSpikeWidth: int
    DetectRequiredValley: float
    DoRestrictXRange: bool
    FastBaseline: bool
    RestrictedXRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    Tolerance: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder: ...

class IPSetURLSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CasId: str
    HmpId: str
    KeggId: str
    LipidId: str
    MPPID: str
    NCBIID: str
    SwissProtID: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetURLSettings
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetURLSettings: ...

class IPSetUnits(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    AcqTimeDifferenceUnitType: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    ChromXValueUnitType: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    IonAbundanceUnitType: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    MsXValueUnitType: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    MzDifferenceUnitType: Agilent.MassSpectrometry.DataAnalysis.DataUnit

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits
    ) -> bool: ...
    def GetUnits(
        self, valueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...

class IPSetUserSpecifiedCompoundSettings(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Adduct: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    Algorithm: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType
    ChargeState: float
    Mass: float
    NeutralMass: float
    Notes: str
    RTEnd: float
    RTStart: float
    RetTime: float

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetUserSpecifiedCompoundSettings,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUserSpecifiedCompoundSettings: ...

class IPSetWindowReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    CustomFooterText_Center: str
    CustomFooterText_Left: str
    CustomFooterText_Right: str
    FitToOnePageWide: bool
    FooterOption: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions
    ReportOrientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions: ...

class IParamControl(object):  # Interface
    CurrentParameterSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ErrorMessage: str  # readonly
    OriginalParameterSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ParameterSets: List[Agilent.MassSpectrometry.DataAnalysis.PSetReferences]
    ShowErrorProviderIcons: bool

    def Reset(self) -> None: ...
    def ForceValidation(self) -> None: ...
    def AreParameterSetsEqual(self) -> bool: ...
    def IsCurrentSetValid(self) -> bool: ...
    def Default(self) -> None: ...

    PartialDataChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ParamControlPartialDataEventHandler
    )  # Event

class IParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement, System.ICloneable
):  # Interface
    Applicable: bool
    ConversionSupport: Agilent.MassSpectrometry.DataAnalysis.ConversionSupport
    DefaultValueString: str  # readonly
    DisplayName: str
    ExtendedValueString: str  # readonly
    FeatureConfigTag: int
    IsReportable: bool
    IsValid: bool
    MaximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    MinimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    RecommendedFormat: str
    UsageKey: str
    ValidationMessage: str
    ValueString: str  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def GetUnitString(self, abbreviate: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IParameter: ...
    def SetToDefault(self) -> None: ...

    ValidationSetEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ValidationSetEventHandler
    )  # Event
    ValueChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ValueChangeEventHandler
    )  # Event

class IParameterSet(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    Count: int  # readonly
    def __getitem__(
        self, parameterUsageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameter: ...
    def UpdateForAppFeatureConfigChanges(self) -> bool: ...

    ParameterChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ParameterChangedEventHandler
    )  # Event

class IParameterSetEnumerator(Iterator[Any]):  # Interface
    ParameterSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet  # readonly
    UsageKey: str  # readonly

    def GetEnumerator(self) -> Iterator[Any]: ...

class IPeak(System.ICloneable):  # Interface
    BaselineAtCenterX: float  # readonly
    CenterX: float
    Color: System.Drawing.Color
    EndIndex: int
    Height: float
    HeightPercent: float
    Highlighted: bool
    ID: int  # readonly
    IsSpecial: bool
    Label: str
    MaxY: float
    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    StartIndex: int
    UnitChangeTypes: List[
        Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ]  # readonly
    ValidIndices: bool
    Visible: bool  # readonly

    def UnitsAndPrecision(
        self, dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def HasValue(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def GetPeakUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPeak: ...

class IPeakHiding(object):  # Interface
    DisplayThreshold: float  # readonly
    VisiblePeaks: System.Collections.Generic.List[int]  # readonly

    def FilterPeaks(
        self, filters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    ) -> None: ...
    def HideByIdx(self, firstIdx: int, lastIdx: int) -> None: ...
    def ShowAll(self) -> None: ...
    def HideAllExcept(self, peakIDs: System.Collections.Generic.List[int]) -> None: ...
    def HideByID(self, peakIDs: System.Collections.Generic.List[int]) -> None: ...

class IPeakInternals(object):  # Interface
    ID: int
    PeakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList
    UnitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary
    Visible: bool

class IPeakList(
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Any],
):  # Interface
    DataSet: System.Data.DataSet  # readonly
    IsReportable: bool
    MaxHeight: float  # readonly
    NewPeak: Agilent.MassSpectrometry.DataAnalysis.IPeak  # readonly
    NoiseResults: Agilent.MassSpectrometry.DataAnalysis.IResult
    NormalizationInfo: Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo
    PeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    PeakListAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    Peaks: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IPeak
    ]  # readonly

    def PeakWithMaxAttribute(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        centerXRegion: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> int: ...
    def NearestPeak(
        self,
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        value_: Any,
        flag: Agilent.MassSpectrometry.DataAnalysis.ClosestType,
    ) -> int: ...
    def AssignLabels(
        self,
        labelAttributes: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
    ) -> None: ...
    def MinBaselineAtCenterX(
        self,
        centerXRegion: Agilent.MassSpectrometry.DataAnalysis.IRange,
        minValue: float,
    ) -> bool: ...
    def ClearValues(
        self, peakAttribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def IndexFromID(self, id: int) -> int: ...
    def UnitsAndPrecision(
        self, dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPeakList: ...
    def PeakWithID(self, id: int) -> Agilent.MassSpectrometry.DataAnalysis.IPeak: ...
    def PeaksWithLargestValue(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        numPeaks: int,
    ) -> System.Collections.Generic.List[int]: ...
    def IDFromIndex(self, index: int) -> int: ...
    def PeakWithMinAttribute(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        centerXRegion: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> int: ...
    def ComputeCrossPeakAttributes(self) -> None: ...
    def MostSignificantPeaks(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        significantPeaks: Agilent.MassSpectrometry.DataAnalysis.SignificantPeaks,
        maxNumPeaks: int,
    ) -> System.Collections.Generic.List[int]: ...
    def RemoveOverlappingPeaks(
        self, peak: Agilent.MassSpectrometry.DataAnalysis.IPeak
    ) -> System.Collections.Generic.List[int]: ...

class IPlotItemAnnotation(object):  # Interface
    def SetPlotAnnotations(
        self,
        preferences: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences,
        annotationListKey: str,
        whichItems: Agilent.MassSpectrometry.DataAnalysis.ItemsToAnnotate,
        annotationColor: System.Drawing.Color,
    ) -> None: ...

class IPlotPreferences(
    Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    Anchored: bool
    AnnotationList: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList
    BoldXRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    DrawBaseline: bool
    DrawingMode: Agilent.MassSpectrometry.DataAnalysis.DrawingMode
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool
    LineColor: System.Drawing.Color
    PeakFillStyle: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle
    PeakHighlightAnnotations: (
        Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations
    )
    PeakHighlightColor: System.Drawing.Color
    PlotSymbolKeys: System.Collections.Generic.List[str]  # readonly
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    ShowSecondTitle: bool
    ShowStructure: bool
    StructureColor: System.Drawing.Color
    SuppressNegative: bool
    TimeSegmentAnnotationColor: System.Drawing.Color
    TimeSegmentAnnotations: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations
    UsePlotColorForStrcture: bool
    XAxisLabel: str
    XAxisUnitLabel: str
    XUnitsAndPrecision: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    XZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    YAxisLabel: str
    YAxisUnitLabel: str
    YUnitsAndPrecision: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    YZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange

    def CopyOnlyPlotPreferences(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences
    ) -> None: ...
    def SetPlotSymbolList(
        self,
        key: str,
        list: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol
        ],
    ) -> None: ...
    def GetPlotSymbolList(
        self, key: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol
    ]: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences: ...
    def ChangeNormalization(
        self, normMode: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes
    ) -> bool: ...

class IPlotSymbol(System.ICloneable):  # Interface
    Color: System.Drawing.Color
    Height: float
    KeepVisibleY: bool
    Label: str
    Symbol: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol
    SymbolCentered: bool
    SymbolFillled: bool
    Width: float
    XCoordinate: float
    YCoordinate: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol: ...

class IPrecisionInfo(System.ICloneable):  # Interface
    Digits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo: ...

class IPrecisionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo
    Value: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPrecisionParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPrecisionParameter: ...

class IPrecursor(Agilent.MassSpectrometry.DataAnalysis.IComposition):  # Interface
    FragmentList: List[Agilent.MassSpectrometry.DataAnalysis.IProduct]  # readonly
    OverallScore: float  # readonly
    PercetageProductExplained: float  # readonly
    ProductFittingScore: float  # readonly
    TotalProductAbundance: float  # readonly

class IPrecursorIdResults(
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.ICloneable,
):  # Interface
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPrecursorIdResults: ...

class IPredictedModificationMaxLimit(object):  # Interface
    ProteinDigestMaxLimit: int
    ProteinMaxLimit: int

class IPrintExportOptions(object):  # Interface
    ShowCheckmarkBox: bool
    ShowOnlyHighlightedCheckBox: bool
    ShowOnlyVisibleColumnsCheckBox: bool
    ShowPeakLimitControl: bool
    ShowPrintPreview: bool
    UsingRowData: bool

    DisplaySettingsChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.DisplaySettingsChangedEventHandler
    )  # Event

class IPrintStructure(object):  # Interface
    @overload
    def GenerateBMP(
        self,
        molText: str,
        structureTitle: str,
        destinationPath: str,
        size: System.Drawing.Size,
        includeTitle: bool,
    ) -> None: ...
    @overload
    def GenerateBMP(
        self,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        destinationPath: str,
        size: System.Drawing.Size,
        includeTitle: bool,
        title: str,
    ) -> bool: ...

class IProduct(object):  # Interface
    Abundance: float  # readonly
    ObservedMZ: float  # readonly
    PossibleFormulae: List[str]  # readonly
    Relevant: bool  # readonly
    Z: int  # readonly

class IProfileMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    System.ICloneable,
):  # Interface
    Area: float
    EndX: float
    Resolution: float
    StartX: float
    Width: float

class IPsetStackAndResults(
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
):  # Interface
    def __getitem__(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    MAX_PSET_COUNT: int
    Result: Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPsetStackAndResults
    ) -> bool: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def GetUsageKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def MoveOnTop(self, orderIndex: int) -> None: ...
    def ClearAll(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPsetStackAndResults: ...
    def GetAllUsageKeys(self) -> List[str]: ...
    def AddPset(
        self, paramSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> int: ...

class IQrDecomposition(object):  # Interface
    IsFullRank: bool  # readonly
    OrthogonalFactor: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly
    UpperTriangularFactor: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly

    def Solve(
        self, rhs: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...

class IRMStatus(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    AllIonsMissed: Agilent.MassSpectrometry.DataAnalysis.IRMStatus = (
        ...
    )  # static # readonly
    SomeIonsMissed: Agilent.MassSpectrometry.DataAnalysis.IRMStatus = (
        ...
    )  # static # readonly
    Success: Agilent.MassSpectrometry.DataAnalysis.IRMStatus = ...  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IRMStatus = (
        ...
    )  # static # readonly

class IRNANucleotide(object):  # Interface
    RNANucleotideFormula: str
    RNANucleotideName: str
    RNANucleotideSymbol: str
    RNANucleotideType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
):  # Interface
    End: float  # readonly
    Start: float  # readonly

    def Equals(self, other: Agilent.MassSpectrometry.DataAnalysis.IRange) -> bool: ...
    def IsValueWithinRange(self, valToCheck: float) -> bool: ...
    def ExtendedValueString(self, withUnits: bool, nValues: int) -> str: ...
    def IsEmpty(self) -> bool: ...
    def SetEmpty(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def ValueString(self, withUnits: bool, nValues: int) -> str: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...

class IRangeCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    Limits: (
        Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit
    )  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IRangeCollectionParameter
    ) -> bool: ...
    def IsCollectionValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        checkOrder: bool,
    ) -> bool: ...
    def SetLimits(
        self,
        limits: Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit,
    ) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRangeCollectionParameter: ...
    def ValueString(self, maxValues: int, withUnits: bool) -> str: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange, checkOrder: bool
    ) -> bool: ...

class IRangeParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IRange
    First: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit  # readonly
    Second: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.IRange

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IRangeParameter
    ) -> bool: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange, checkOrder: bool
    ) -> bool: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IRangeParameter: ...

class IReadChromatogram(object):  # Interface
    @overload
    def ReadChromatogram(
        self, extractParamSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IChromatogram]: ...
    @overload
    def ReadChromatogram(
        self,
        extractParamSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
        excludeParamSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IChromatogram]: ...

class IReadOnly(object):  # Interface
    IsReadOnly: bool  # readonly

    def ReadOnly(self) -> Agilent.MassSpectrometry.DataAnalysis.IReadOnly: ...

class IReadOnlyObject(object):  # Interface
    IsReadOnly: bool  # readonly

    def ReadOnly(self) -> Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject: ...

class IReadSpectra(object):  # Interface
    @overload
    def ReadSpectrum(
        self,
        spectrumRequest: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
        specRequest: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        sourceChromatogram: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        backgroundSpectrum: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
        peakNumber: int,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        specType: Agilent.MassSpectrometry.DataAnalysis.SpecType,
        scanIDArray: List[int],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        spectrumRequest: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        backgroundSpecArrayToSubtract: List[
            Agilent.MassSpectrometry.DataAnalysis.ISpectrum
        ],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self, rowIndex: int, bMassUnits: bool
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrum: ...
    @overload
    def ReadSpectrum(
        self,
        specType: Agilent.MassSpectrometry.DataAnalysis.SpecType,
        scanIDArray: List[int],
        desiredStorageMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        rowIndex: int,
        bMassUnits: bool,
        desiredStorageMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrum: ...
    @overload
    def ReadSpectrum(
        self,
        specRequest: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
        peakIDParam: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        specRequest: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
        apseParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
        peakIDParam: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID,
        startEndTimeRanges: Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum]: ...

class IReagent(object):  # Interface
    ReagentCGainFormula: str
    ReagentCLossFormula: str
    ReagentCleavageRule: str
    ReagentNGainFormula: str
    ReagentNLossFormula: str
    ReagentName: str
    ReagentType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class IRecalibrationUI(object):  # Interface
    def Initialize(
        self, spectrum: Agilent.MassSpectrometry.DataAnalysis.ITofSpectrum
    ) -> None: ...
    def Apply(self) -> None: ...

class IRefDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
):  # Interface
    RefShortTitle: str
    RefTitle: str

class IResult(object):  # Interface
    def ClearCompoundResultAttributes(
        self, cpd: Agilent.MassSpectrometry.DataAnalysis.ICompound
    ) -> None: ...
    def ContainIDResult(self) -> bool: ...
    def SynchronizeCompoundResultAttributes(
        self, cpd: Agilent.MassSpectrometry.DataAnalysis.ICompound
    ) -> None: ...

class IResultAttributeDefinitions(System.ICloneable):  # Interface
    NextLevel: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    SupportedAttributes: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]  # readonly

    def Category(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> str: ...
    def Description(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> str: ...
    def ResourceAssembly(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        stringType: Agilent.MassSpectrometry.DataAnalysis.StringType,
    ) -> str: ...
    def SuitableForTable(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def SuitableForObjectLabel(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def DisplayName(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        casing: Agilent.MassSpectrometry.DataAnalysis.StringCasing,
    ) -> str: ...
    def Type(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> System.Type: ...
    def IsSupported(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def AttributeFromDisplayName(
        self, name: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttribute: ...
    def AttributeFromAbbreviatedName(
        self, name: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttribute: ...
    def AbbreviatedName(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> str: ...
    def DataValueType(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataValueType: ...

class IResultAttributeListParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IResultAttributeListParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IResultAttributeListParameter: ...

class IResultAttributes(object):  # Interface
    ValuedAttributes: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]  # readonly

    def ClearAllValues(self) -> None: ...
    def Value(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> Any: ...
    def HasValue(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def ClearValues(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> None: ...
    def RoundedValue(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> Any: ...
    def UnitsAndPrecision(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision: ...
    def ValueString(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> str: ...

class IResultChangeNotify(object):  # Interface
    def ResultChanged(
        self,
        changedResult: Agilent.MassSpectrometry.DataAnalysis.IResult,
        wasAdded: bool,
    ) -> None: ...

class IResultList(
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IResult
    ],
    List[Agilent.MassSpectrometry.DataAnalysis.IResult],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IResult],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IResult],
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
):  # Interface
    NotificationReference: Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify

    def ResultOfType(
        self, theType: System.Type
    ) -> Agilent.MassSpectrometry.DataAnalysis.IResult: ...
    def ItemHasChanged(
        self, item: Agilent.MassSpectrometry.DataAnalysis.IResult
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IResultList: ...

class ISample(object):  # Interface
    def GetSampleValue(self, internalName: str) -> str: ...
    @overload
    def GetSampleData(
        self, category: Agilent.MassSpectrometry.DataAnalysis.SampleCategory
    ) -> System.Data.DataSet: ...
    @overload
    def GetSampleData(self, internalNamePrefix: str) -> System.Data.DataSet: ...

class ISelectAnalysis(object):  # Interface
    AnalysisFiles: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    HighlightFiles: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    SelectedFiles: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]  # readonly

    SelectionChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.SelectionChangeEventHandler
    )  # Event

class ISelectionDecorator(object):  # Interface
    AnnotationID: int

    def Draw(
        self,
        g: System.Drawing.Graphics,
        pane: Pane,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> None: ...
    def IsHit(
        self,
        xcc: int,
        ycc: int,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGrabHandle: ...

class ISettingsEditorItem(object):  # Interface
    AllowInvalidPSetInDialogBoxes: bool  # readonly
    DisplayName: str  # readonly
    DisplayNameResourceKey: str  # readonly
    HelpStrings: List[str]  # readonly
    IsChild: bool  # readonly
    PSetSortedLists: System.Collections.Generic.List[
        System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.PSetReferences
        ]
    ]  # readonly
    PSetUseKeyNameLists: System.Collections.Generic.List[
        System.Collections.Generic.List[str]
    ]  # readonly
    PSetUseKeyNames: List[str]  # readonly
    PSets: List[Agilent.MassSpectrometry.DataAnalysis.PSetReferences]  # readonly
    ParentSettingsEditorKey: str  # readonly
    RunButtonNames: List[str]  # readonly
    RunButtonOperationDefined: bool  # readonly
    SettingsEditorKey: str  # readonly
    ShowButtons: Agilent.MassSpectrometry.DataAnalysis.DialogButtons  # readonly
    ShowInMenus: bool  # readonly
    ShowOnlyInThisMenu: str  # readonly
    TitleName: str  # readonly
    UIParamControlClassDisplayNames: List[str]  # readonly
    UIParamControlClassNames: List[str]  # readonly

class ISignalToNoise(object):  # Interface
    def CalculateNoise(
        self,
        data: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        snrParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
    ) -> None: ...
    @overload
    def CalculateSignalToNoise(
        self,
        data: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        snrParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
    ) -> None: ...
    @overload
    def CalculateSignalToNoise(
        self,
        data: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        snrParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
        peakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
        peakFindParameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
    ) -> None: ...
    @overload
    def CalculateSignalToNoise(
        self,
        signalPeak: Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
        data: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
        snrParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
    ) -> None: ...

class ISortByAttribute(object):  # Interface
    IsSorted: bool  # readonly
    SortAttribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute  # readonly
    SortDirection: Agilent.MassSpectrometry.DataAnalysis.SortDirection  # readonly

    def Reverse(self) -> None: ...
    def Sort(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> None: ...

class ISpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    AcqTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    BackgroundTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    CompoundNumber: int
    GroupID: int
    OverallAcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanMethodNumber: int
    SpecSubType: Agilent.MassSpectrometry.DataAnalysis.SpecSubType
    SpecType: Agilent.MassSpectrometry.DataAnalysis.SpecType

class ISpecialMsPeakResults(
    Agilent.MassSpectrometry.DataAnalysis.IResult, System.ICloneable
):  # Interface
    PeakInfo: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo
    ]

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults: ...

class ISpecies(System.ICloneable):  # Interface
    Abundance: float
    ChargeState: int
    ID: int
    IonSpecies: str
    IsotopeList: List[Agilent.MassSpectrometry.DataAnalysis.ICombineIsotope]  # readonly
    Mz: float

    def ComputeDynamicAttributesOnIsotopes(self, MaxHeight: float) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpecies: ...

class ISpeciesDefinition(
    Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails, System.ICloneable
):  # Interface
    Active: bool
    SpeciesType: Agilent.MassSpectrometry.DataAnalysis.SpeciesType  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ) -> bool: ...
    def IsValid(self) -> bool: ...
    def MolecularFormula(self, baseFormula: str) -> str: ...
    def NeutralMassOfM(self, ionMz: float) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition: ...

class ISpeciesDefinitionListParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinitionListParameter,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinitionListParameter: ...

class ISpectralChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    ReferenceRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    SignalRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

class ISpectralChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Description: (
        Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription
    )  # readonly
    XValuesAreTime: bool

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram: ...

class ISpectralLibrarySearch(object):  # Interface
    def Search(
        self,
        compound: Agilent.MassSpectrometry.DataAnalysis.ICompound,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
        searchSettings: Agilent.MassSpectrometry.DataAnalysis.ILibrarySearchSettings,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralLibrarySearchResult: ...

class ISpectralLibrarySearchHit(System.ICloneable):  # Interface
    Best: bool
    CasId: str
    CollisionEnergy: float
    CompoundName: str
    Formula: str
    ForwardScore: float
    FragmentorVoltage: float
    Highlighted: bool
    HitFlags: str
    HmpId: str
    ID: int
    InstrumentType: str
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonSpecies: str
    KeggId: str
    LibraryPath: str
    LibrarySpectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum  # readonly
    LipidId: str
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MatchFactor: float
    MetlinId: str
    MolecularWeight: float
    MzOfInterest: float
    Notes: str
    RetentionTime: float
    ReverseScore: float
    Structure: str
    TargetSpectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum  # readonly

class ISpectralLibrarySearchResult(System.ICloneable):  # Interface
    Hits: List[
        Agilent.MassSpectrometry.DataAnalysis.ISpectralLibrarySearchHit
    ]  # readonly
    ItemAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    LibrarySearchType: (
        Agilent.MassSpectrometry.DataAnalysis.LibrarySearchType
    )  # readonly

    def GetDataSet(self) -> System.Data.DataSet: ...
    def GetBest(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralLibrarySearchHit: ...
    def GetHighlightedHit(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralLibrarySearchHit: ...
    def ClearBestFlags(self) -> None: ...
    def SetHighlightedHit(self, libraryHitID: int) -> None: ...
    def SuggestBest(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralLibrarySearchHit: ...
    def SetAsBest(self, libraryHitID: int) -> None: ...

class ISpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    BkgrndIndicator: bool
    Description: Agilent.MassSpectrometry.DataAnalysis.ISpecDescription  # readonly
    PeakId: int

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrum: ...

class ISpectrumId(object):  # Interface
    ...

class ISpectrumIndex(object):  # Interface
    def GetCandidates(
        self,
        mzArray: List[int],
        abundanceArray: List[float],
        preSearchParams: Agilent.MassSpectrometry.DataAnalysis.PreSearchParameters,
    ) -> System.Collections.Generic.List[int]: ...
    def GetSpectrumId(
        self, libraryId: int, handle: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrumId: ...

class IStepYLimits(
    Agilent.MassSpectrometry.DataAnalysis.IFXLimits,
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
):  # Interface
    StepMax: int
    StepMin: int

class IStepYStore(
    Agilent.MassSpectrometry.DataAnalysis.IFXStore,
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    Limits: Agilent.MassSpectrometry.DataAnalysis.IStepYLimits  # readonly

    def Step(self, pointIndex: int) -> int: ...
    def PointIndexAtStep(
        self,
        stepIndex: int,
        closeType: Agilent.MassSpectrometry.DataAnalysis.ClosestType,
    ) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IStepYStore: ...

class IStringCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IStringCollectionParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IStringCollectionParameter: ...

class IStringParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: str
    Value: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IStringParameter
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IStringParameter: ...

class ITableDefinition(object):  # Interface
    ColumnDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    KeyAttribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute  # readonly
    NextLevel: Agilent.MassSpectrometry.DataAnalysis.ITableDefinition  # readonly
    RowValues: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributes
    ]  # readonly
    TableName: str  # readonly

class ITargetFormulaTracker(object):  # Interface
    EvaluatedFormulas: int
    FormulaString: str
    FullyScoredFormulas: int
    MessageCount: int  # readonly
    ParsedFormula: Dict[str, int]  # readonly
    PlausibleFormulas: int

    def AppendMessage(self, message: str) -> None: ...
    def GetMessage(self, index: int) -> str: ...

class ITargetSpectrum(object):  # Interface
    Abundances: List[float]  # readonly
    BasePeakMz: float  # readonly
    MZKeys: List[int]  # readonly
    MassAccuracy: (
        Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy
    )  # readonly
    NoiseInUnitsOfBasePeak: float  # readonly
    PeakCount: int  # readonly
    RetentionTime: float  # readonly

    def Contains(self, mzKey: int) -> bool: ...
    def IsFlagged(self, mzKey: int) -> bool: ...
    def GetNormalizedAbundances(
        self, basePeakAbundanceNormalization: float
    ) -> List[float]: ...
    def SetScaledAbundances(self, scaledAbund: List[float]) -> None: ...
    def GetMZByKey(self, mzKey: int) -> float: ...
    def GetScaledAbundance(self, mzKey: int) -> float: ...
    def GetMZKey(self, mz: float) -> int: ...

class ITitleElement(System.ICloneable):  # Interface
    DisplayName: str  # readonly
    ElementType: Agilent.MassSpectrometry.DataAnalysis.TitleElementType  # readonly
    Separator: str
    SubElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITitleElement: ...

class ITitleElementListParameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Interface
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleElementListParameter
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ITitleElementListParameter: ...

class ITitleSubElement(System.ICloneable):  # Interface
    DisplayName: str  # readonly
    IsEnabled: bool
    IsOptional: bool  # readonly
    SubElementType: (
        Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType
    )  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement: ...

class ITofCalibration(object):  # Interface
    @overload
    def TimeToMass(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        time: float,
    ) -> float: ...
    @overload
    def TimeToMass(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        times: List[float],
    ) -> List[float]: ...
    @overload
    def MassToTime(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        mass: float,
    ) -> float: ...
    @overload
    def MassToTime(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        masses: List[float],
    ) -> List[float]: ...

class ITofCalibrator(object):  # Interface
    def Calibrate(self, times: List[float], masses: List[float]) -> None: ...
    def Recalibrate(self, times: List[float], masses: List[float]) -> None: ...

class ITofMassCalInfo(object):  # Interface
    DefaultCalId: int  # readonly
    DefaultTofCal: ITofCal  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly

    def ClearIrmCalibration(self) -> None: ...
    @overload
    def TofCal(self, scanNumber: int) -> ITofCal: ...
    @overload
    def TofCal(self, minScanNumber: int, maxScanNumber: int) -> ITofCal: ...
    @overload
    def TofCal(
        self, scanNumberList: System.Collections.Generic.List[int]
    ) -> ITofCal: ...
    def ClearUserCalibration(self) -> None: ...

class ITofSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration

    def ZeroFill(self) -> None: ...
    def Recalibrate(
        self, newCalibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITofSpectrum: ...

class ITofTimeMassConverter(object):  # Interface
    def TimeToMass(self, mass: float) -> float: ...
    def MassToTime(self, time: float) -> float: ...
    def MassesToTimes(self, masses: List[float]) -> List[float]: ...
    def TimesToMasses(self, times: List[float]) -> List[float]: ...

class IUIBoundTableDisplay(object):  # Interface
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly

    def ShowPeakHeaders(self) -> None: ...

class IUICompareSequenceDisplay(object):  # Interface
    def ContainsAll(
        self, items: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    ) -> bool: ...

class IUICompoundTableNavigation(object):  # Interface
    IsNextCompoundAvailable: bool  # readonly
    IsPreviousCompoundAvailable: bool  # readonly

    def NextCompound(self) -> None: ...
    def PreviousCompound(self) -> None: ...

    FragmentIonChangeHighlight: (
        Agilent.MassSpectrometry.DataAnalysis.UIFragmentIonChangeHighlightEventHandler
    )  # Event

class IUIFormulaResultsDisplay(object):  # Interface
    HighlightedMassData: List[int]  # readonly

    ChangeSelectedFormulaEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventHandler
    )  # Event

class IUIGraphicsDisplay(object):  # Interface
    BoxZoomAutoScaleMode: bool
    TopPlot: int
    VisiblePlots: List[int]  # readonly

    def DisableOverlaidMode(self) -> None: ...
    def ChangeMouseMode(
        self, mouseMode: Agilent.MassSpectrometry.DataAnalysis.MouseTool
    ) -> None: ...
    def TopPlotPrevious(self) -> None: ...
    def TopPlotNext(self) -> None: ...
    def Autoscale(
        self, autoscaleMode: Agilent.MassSpectrometry.DataAnalysis.PlotAutoscaleMode
    ) -> None: ...
    def RetrieveSelectedRanges(
        self, ItemId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def UnzoomStep(self) -> None: ...
    def AdjustPeakThreshold(self, enter: bool, ItemId: int) -> None: ...
    def RetrieveZoomRanges(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.SetXYZoomRangeParam]: ...
    def AdjustDisplayedRanges(
        self,
        adjustedExtraction: Agilent.MassSpectrometry.DataAnalysis.IAdjustedExctrationRanges,
    ) -> None: ...

    AdjustPeakThresholdEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIGraphicsAdjustPeakThresholdEventHandler
    )  # Event
    ChangeMouseModeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIGraphicsMouseModeEventHandler
    )  # Event
    ChangeOverlaidModeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIGraphicsOverlaidModeEventHandler
    )  # Event
    ExtractDefaultEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIGraphicsExtractDefaultEventHandler
    )  # Event
    ManualIntegrationEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIGraphicsManualIntegrationEventHandler
    )  # Event

class IUINestedTableDisplay(object):  # Interface
    NestHorizontally: bool

    def UpdateRows(self) -> None: ...
    def VisibleNestedColumns(self) -> List[List[str]]: ...
    def ExpandRows(self, allRows: bool) -> None: ...
    def ShowLevel(self, level: int) -> None: ...
    def SortedNestedColumns(
        self,
    ) -> List[List[Agilent.MassSpectrometry.DataAnalysis.SortedTableColumns]]: ...
    def CollapseRows(self, allRows: bool) -> None: ...

class IUIParamAnnotationControl(object):  # Interface
    CurrentAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ErrorMessage: str  # readonly
    OriginalAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    XDataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit

    def InitializeControl(self) -> None: ...

class IUIPlotAnnotations(object):  # Interface
    AnyAnnotationsExist: bool  # readonly
    AnyHighlightedAnnotationsExist: bool  # readonly
    CachedDeltaMassCaliper: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    CachedImageAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    CachedTextAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    CaliperMassAssignment: Agilent.MassSpectrometry.DataAnalysis.IsotopicMassAssignment
    CaliperMassTolerance: float
    CaliperMassWindowType: Agilent.MassSpectrometry.DataAnalysis.E_MASSWINDOWTYPE
    PlotCaliperMeasureMode: Agilent.MassSpectrometry.DataAnalysis.CaliperMeasureMode
    PlotCaliperType: Agilent.MassSpectrometry.DataAnalysis.CaliperType

    def CreateAndInit(
        self,
        category: Agilent.MassSpectrometry.DataAnalysis.AnnotationCategory,
        iAnnotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...
    def MergeSelectedAnnotations(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotation: ...
    def GetSelectedAnnotations(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IAnnotation]: ...
    def SelectAllAnnotations(self) -> None: ...
    def DeleteAllAnnotations(self) -> None: ...
    def CancelAddAnnotation(self) -> None: ...
    def DeleteSelectedAnnotations(self) -> None: ...
    def GetUpdatedAnnotationList(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IAnnotationList: ...
    def UpdateSelectedAnnotation(
        self, annotation: Agilent.MassSpectrometry.DataAnalysis.IAnnotation
    ) -> None: ...

    ChangeAnnotationEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateAnnotationEventHandler
    )  # Event

class IUISequenceDisplay(object):  # Interface
    AppendFileName: Agilent.MassSpectrometry.DataAnalysis.DataView
    CompoundList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ]  # readonly
    CurrentChain: int
    CurrentSequence: str
    CurrentSequenceDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    )  # readonly
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    DataItem1: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ]  # readonly
    DefineLinkMode: bool
    DialogSettingsDataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem

    def MatchRules(self) -> bool: ...
    def Modifications(
        self, action: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction
    ) -> bool: ...
    def Links(
        self, action: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction
    ) -> bool: ...
    def MassSubSequence(self) -> bool: ...
    def Copy(self) -> None: ...
    def Chains(
        self, action: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction
    ) -> bool: ...
    def SequenceDescription(self) -> bool: ...
    def SequenceEmpty(self) -> bool: ...
    def Print(
        self, pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> None: ...
    def Digest(
        self, action: Agilent.MassSpectrometry.DataAnalysis.BioAnnotationAction
    ) -> bool: ...
    def Cut(self) -> None: ...
    def Paste(self) -> None: ...
    def FlushUserData(self) -> None: ...

    ChangeSelectedSequenceDefintionEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UISelectedSequenceDefintionChangedEventHandler
    )  # Event
    ShowLinkDialogEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIShowLinkDialogEventHandler
    )  # Event

class IUISequenceTableDisplay(object):  # Interface
    CurrentSequence: str
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly

class IUISettingsDisplay(object):  # Interface
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    RunButtonTooltip: str  # readonly

    def FlushUserData(self) -> None: ...
    def HighlightedData(self) -> List[int]: ...
    def ButtonEnabled(
        self, button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons
    ) -> bool: ...
    def OnButton_Click(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UISettingsButtonPressEventArgs,
    ) -> None: ...

    ButtonPressedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UISettingsButtonPressEventHandler
    )  # Event

class IUIStructureDisplay(object):  # Interface
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    ShowHighlightedHit: bool

    def Copy(self) -> None: ...

class IUITableDisplay(object):  # Interface
    AutoFitHeaders: bool
    AutoShowColumns: bool
    AutoSizeColumns: bool
    ParameterSets: List[Agilent.MassSpectrometry.DataAnalysis.ParameterSet]
    ShowCheckMarkStatusColumn: bool
    ShowHiddenItems: bool
    TableLayout: System.IO.MemoryStream

    def HasEverHadData(self) -> bool: ...
    def HideColumnsByCategory(self, category: str, isVisible: bool) -> None: ...
    def VisibleColumns(self) -> List[str]: ...
    def Export(
        self,
        psetReportCommand: Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    ) -> None: ...
    def ShowAllColumns(self, level: int) -> None: ...
    def ColumnSortAscending(self, level: int, column: str) -> None: ...
    def CopySelectedToClipboard(self) -> None: ...
    def HideEmptyColumns(self) -> None: ...
    def ShowColumns(self, level: int, columns: List[str]) -> None: ...
    def SortedColumns(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.SortedTableColumns]: ...
    def IsFilterApplied(self, level: int) -> bool: ...
    def Print(
        self,
        psetReportOptions: Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions,
        psetReportCommand: Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    ) -> None: ...
    def UnsortAllColumns(self, level: int) -> None: ...
    def CopyColumnsToClipboard(
        self, level: int, columns: List[str], useNewlineSeparator: bool
    ) -> None: ...
    def HideColumns(self, level: int, columns: List[str]) -> None: ...
    def ClearAllFilters(self, level: int) -> None: ...
    def ColumnSortDescending(self, level: int, columns: str) -> None: ...

class IUIToolDisplay(object):  # Interface
    CalcAllowed: bool  # readonly
    ParameterSets: List[Agilent.MassSpectrometry.DataAnalysis.PSetReferences]

    def Calculate(self) -> None: ...
    def Refresh(self) -> None: ...
    def HasData(self) -> bool: ...
    def Reset(self) -> None: ...

    ShowContextMenuEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateContextMenuEventHandler
    )  # Event

class IUIUpdateDisplay(object):  # Interface
    def GetTitle(self) -> str: ...
    def Resume(self) -> None: ...
    def Pause(self) -> None: ...
    def ChangeDisplayState(
        self,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        initiatedHere: bool,
    ) -> None: ...
    def UpdateItem(
        self,
        dataActionItem: Agilent.MassSpectrometry.DataAnalysis.IDataActionItem,
        initiatedHere: bool,
    ) -> None: ...
    def ChangeHighlight(
        self,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        initiatedHere: bool,
    ) -> None: ...
    def Reset(self) -> None: ...
    def Reorder(
        self, items: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    ) -> None: ...
    def DeleteItem(
        self, dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ) -> None: ...
    def HasData(self) -> bool: ...
    def AddItem(
        self,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        initiatedHere: bool,
    ) -> None: ...
    def HasHighlightedData(self) -> bool: ...

    ChangeHighlightEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightEventHandler
    )  # Event
    ChangeHighlightManyEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightManyEventHandler
    )  # Event
    ChangeMarkEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateMarkEventHandler
    )  # Event
    DeleteEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateDeleteEventHandler
    )  # Event
    HighlightPeaksEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightPeaksEventHandler
    )  # Event
    ShowContextMenuEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIUpdateContextMenuEventHandler
    )  # Event

class IUIViewDisplay(object):  # Interface
    AnchoredChromatogramMode: bool
    AnchoredSpectrumMode: bool
    OrganizationMode: Agilent.MassSpectrometry.DataAnalysis.DataView

    def ExpandAllSubnodes(
        self, item: Agilent.MassSpectrometry.DataAnalysis.IDataItem
    ) -> None: ...

    OrganizationChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.UIViewOrganizationChangedEventHandler
    )  # Event

class IUVSpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.ISpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    ...

class IUVSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    Description: Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription  # readonly

    def AssertIsCompatible(
        self, candidate: Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum
    ) -> None: ...
    def CompatibleSpectrum(
        self, candidates: List[Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum: ...

class IUnitDictionary(
    Iterable[
        System.Collections.Generic.KeyValuePair[
            Agilent.MassSpectrometry.DataAnalysis.DataValueType,
            Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        ]
    ],
    Iterable[Any],
):  # Interface
    Count: int  # readonly
    def __getitem__(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataUnit: ...
    def __setitem__(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        value_: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.DataValueType: ...
    def Add(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dvUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    def ContainsKey(
        self, dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    ) -> bool: ...

class IUnitsAndPrecision(object):  # Interface
    DataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType

    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    ) -> bool: ...

class IUnitsConverter(object):  # Interface
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        rangeValue: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...

class IUnitsConverterDelayed(
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter
):  # Interface
    CurrentDelayTime: float

class IUserCalibration(object):  # Interface
    @overload
    def SaveUserCalibration(
        self, psetTofCalib: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration
    ) -> None: ...
    @overload
    def SaveUserCalibration(
        self,
        specArray: List[Agilent.MassSpectrometry.DataAnalysis.ISpectrum],
        psetTofCalib: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
    ) -> None: ...
    def IsUserCalibrationPresent(self) -> bool: ...
    def ClearUserCalibration(self) -> None: ...

class IUserMessage(System.Runtime.Serialization.ISerializable):  # Interface
    Details: str  # readonly
    HelpFile: str  # readonly
    HelpId: int  # readonly
    Message: str  # readonly
    MessageId: System.Enum  # readonly
    MessageOrigin: Agilent.MassSpectrometry.DataAnalysis.ProgramModule  # readonly
    UserMessageType: Agilent.MassSpectrometry.DataAnalysis.UserMessageType  # readonly

class IXYArrayStore(object):  # Interface
    def SetX(self, index: int, x: float) -> None: ...
    def SetY(self, index: int, y: float) -> None: ...
    def RefreshLimits(self) -> None: ...
    @overload
    def SetData(
        self,
        xarray: List[float],
        yarray: List[float],
        accumTimeArray: List[float],
        pointCount: int,
    ) -> None: ...
    @overload
    def SetData(
        self, xarray: List[float], yarray: List[float], pointCount: int
    ) -> None: ...
    def GetXArray(self) -> List[float]: ...
    def GetYArray(self) -> List[float]: ...

class IXYData(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Interface
    AcquisitionMetaData: Agilent.MassSpectrometry.DataAnalysis.IAcqMetaData  # readonly
    Compoundlabel: str
    Count: int  # readonly
    DataUnits: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    DefaultDrawingMode: Agilent.MassSpectrometry.DataAnalysis.DrawingMode
    DefaultSuppressNegativeYValues: bool
    Limits: Agilent.MassSpectrometry.DataAnalysis.IXYLimits  # readonly
    Title: str  # readonly
    XUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly
    XYStore: Agilent.MassSpectrometry.DataAnalysis.IXYStore
    YUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly

    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    def CreatePSetUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...
    def CreatePSetPrecision(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYData: ...
    def WriteFile(self, filePath: str, delimitor: str, appendData: bool) -> None: ...
    def InitializePlotPreferences(
        self, prefs: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences
    ) -> None: ...
    def ConvertToXUnit(
        self,
        valueContainer: Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    ) -> None: ...

class IXYLimits(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency, System.ICloneable
):  # Interface
    Capacity: int
    Count: int
    XMax: float
    XMin: float
    YMax: float
    YMin: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYLimits: ...

class IXYMath(object):  # Interface
    def AddSparseStepped(
        self,
        xArray1: List[float],
        xArray2: List[float],
        yArray1: List[float],
        yArray2: List[float],
        defaultVal1: float,
        defaultVal2: float,
        xSumArray: List[float],
        ySumArray: List[float],
    ) -> None: ...
    def AddIrregular(
        self,
        xArray1: List[float],
        yArray1: List[float],
        xArray2: List[float],
        yArray2: List[float],
        xUncertainty: float,
        uncertaintyType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType,
        xSumArray: List[float],
        ySumArray: List[float],
    ) -> None: ...
    def SubtractY(
        self, yArray1: List[float], yArray2: List[float], yDiffArray: List[float]
    ) -> None: ...
    def AddY(
        self, yArray1: List[float], yArray2: List[float], ySumArray: List[float]
    ) -> None: ...
    def MultiplyByScalar(self, yArray1: List[float], scalar: float) -> None: ...
    def AddBoundingPoints(
        self,
        xArray: List[float],
        yArray: List[float],
        minPointSpacing: float,
        minMeasured: float,
        maxMeasured: float,
    ) -> None: ...
    def Threshold(self, yArray1: List[float], threshold: float) -> None: ...
    def DivideByScalar(self, yArray1: List[float], scalar: float) -> None: ...
    def AddScalar(self, yArray1: List[float], scalar: float) -> None: ...
    def SubtractScalar(self, yArray1: List[float], scalar: float) -> None: ...
    def PeakToPeakNoise(self, yArray: List[float], span: float) -> None: ...
    def RootMeanSquareNoise(
        self, yArray: List[float], standardDeviation: float
    ) -> None: ...
    def NaturalPointSpacing(
        self, xArray: List[float], minSpacingAllowed: float
    ) -> float: ...
    @overload
    def AddInterpolated(
        self,
        xAnchorArray: List[float],
        yAnchorArray: List[float],
        xNonAnchorArray: List[float],
        yNonAnchorArray: List[float],
        minAcqX: float,
        maxAcqX: float,
        useFirstAsAnchor: bool,
        xSumArray: List[float],
        ySumArray: List[float],
    ) -> None: ...
    @overload
    def AddInterpolated(
        self,
        xAnchorArray: List[float],
        yAnchorArray: List[float],
        xNonAnchorArray: List[float],
        yNonAnchorArray: List[float],
        minAcqX: float,
        maxAcqX: float,
        xSumArray: List[float],
        ySumArray: List[float],
    ) -> None: ...
    @overload
    def AddStepped(
        self,
        xStart1: float,
        xStart2: float,
        step: float,
        yArray1: List[float],
        yArray2: List[float],
        defaultVal1: float,
        defaultVal2: float,
        xStartSum: float,
        ySumArray: List[float],
    ) -> None: ...
    @overload
    def AddStepped(
        self,
        xStart1: float,
        xStart2: float,
        step: float,
        tolerance: float,
        yArray1: List[float],
        yArray2: List[float],
        defaultVal1: float,
        defaultVal2: float,
        xStartSum: float,
        ySumArray: List[float],
    ) -> None: ...
    def SubtractSparseStepped(
        self,
        xArray1: List[float],
        xArray2: List[float],
        yArray1: List[float],
        yArray2: List[float],
        defaultVal1: float,
        defaultVal2: float,
        xDiffArray: List[float],
        yDiffArray: List[float],
    ) -> None: ...
    def PeakToPeakDriftNoise(
        self, xArray: List[float], yArray: List[float], driftCorrectedSpan: float
    ) -> None: ...
    def Trim(self, xArray1: List[float], xmin: float, xmax: float) -> None: ...
    def SubtractInterpolated(
        self,
        xAnchorArray: List[float],
        yAnchorArray: List[float],
        xNonAnchorArray: List[float],
        yNonAnchorArray: List[float],
        minAcqX: float,
        maxAcqX: float,
        useFirstAsAnchor: bool,
        xDiffArray: List[float],
        yDiffArray: List[float],
    ) -> None: ...
    def SubtractStepped(
        self,
        xStart1: float,
        xStart2: float,
        yArray1: List[float],
        yArray2: List[float],
        step: float,
        defaultVal1: float,
        defaultVal2: float,
        xStartSubtract: float,
        ySubtractArray: List[float],
    ) -> None: ...
    def MinimumExpectedMsPointSpacing(
        self, devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    ) -> float: ...
    def SubtractIrregular(
        self,
        xArray1: List[float],
        yArray1: List[float],
        xArray2: List[float],
        yArray2: List[float],
        xUncertainty: float,
        uncertaintyType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType,
        xDiffArray: List[float],
        yDiffArray: List[float],
    ) -> None: ...

class IXYProcessingHistory(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    AlgorithmInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo  # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.IDescription  # readonly
    FirstOperandProcessingHistory: (
        Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory
    )  # readonly
    InfoOnly: bool
    OperationTime: System.DateTime  # readonly
    SecondOperandProcessingHistory: (
        Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory
    )  # readonly
    UserName: str  # readonly

    def CopyInfoNode(
        self,
        infoNode: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory,
        destinationNode: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory,
    ) -> None: ...
    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    @overload
    def GetHistorySummary(self, histSummary: str, shortHistSummary: str) -> None: ...
    @overload
    def GetHistorySummary(
        self,
        procTitleElement: Agilent.MassSpectrometry.DataAnalysis.ITitleElement,
        histSummary: str,
        shortHistSummary: str,
    ) -> None: ...

class IXYSmooth(object):  # Interface
    def GaussianSmooth(
        self,
        yarray: List[float],
        windowWidthInPoints: int,
        FWHM: float,
        smoothArray: List[float],
    ) -> None: ...
    def SGSmooth(
        self,
        xarray: List[float],
        yarray: List[float],
        windowWidthInPoints: int,
        polynomialDegree: int,
        orderOfDerivative: int,
        smoothArray: List[float],
    ) -> None: ...

class IXYStore(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Interface
    DataUnits: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    Limits: Agilent.MassSpectrometry.DataAnalysis.IXYLimits  # readonly
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    XSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType
    XUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly
    YUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly

    def GetX(self, index: int) -> float: ...
    def GetY(self, index: int) -> float: ...
    def GetPoint(self, index: int, x: float, y: float) -> None: ...
    def GetAccumulationTime(self, index: int) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYStore: ...
    def IndexOfMaximumY(self, xMin: float, xMax: float) -> int: ...

class IconStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PurityCannotMeasure: Agilent.MassSpectrometry.DataAnalysis.IconStatus = (
        ...
    )  # static # readonly
    PurityFail: Agilent.MassSpectrometry.DataAnalysis.IconStatus = (
        ...
    )  # static # readonly
    PurityPass: Agilent.MassSpectrometry.DataAnalysis.IconStatus = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IconStatus = (
        ...
    )  # static # readonly

class IcpFxArrayStore(
    Agilent.MassSpectrometry.DataAnalysis.IIcpFxArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IFXArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IFXStore,
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IIcpFxStore,
    Agilent.MassSpectrometry.DataAnalysis.FXArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IcpFxArrayStore
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.IcpFxArrayStore,
        asReadOnly: bool,
    ) -> None: ...

class IcpMassSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.MassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IcpMassSpectrum
    ) -> None: ...
    def ClearResults(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIcpMassSpectrum: ...

class IcpMsChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.MSChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IcpMsChromatogram
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IcpMsChromatogram: ...

class IcpMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IIcpMsPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.MsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IcpMsPeak
    ) -> None: ...

    ICPMSPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class IdentificationResultsComparer(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults
    ]
):  # Class
    def __init__(self) -> None: ...
    def Compare(
        self,
        x: Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults,
        y: Agilent.MassSpectrometry.DataAnalysis.IIdentificationResults,
    ) -> int: ...

class ImageAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    Agilent.MassSpectrometry.DataAnalysis.GenericAnnotation,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ImageAnnotation
    ) -> None: ...

    FilePath: str
    LockAspectRatio: bool
    ScaleHeightPercent: float
    ScaleWidthPercent: float

    def Draw(
        self, g: System.Drawing.Graphics, pane: Pane, paneRect: System.Drawing.Rectangle
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def Resize(
        self,
        pane: Pane,
        whichGrabHandle: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition,
        mouseClickXCC: int,
        mouseClickYCC: int,
    ) -> None: ...
    def Equals(self, obj: Any) -> bool: ...

class ImageFileType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    JPEG: Agilent.MassSpectrometry.DataAnalysis.ImageFileType = ...  # static # readonly
    MOL: Agilent.MassSpectrometry.DataAnalysis.ImageFileType = ...  # static # readonly

class ImageSelectionDecorator(
    Agilent.MassSpectrometry.DataAnalysis.ISelectionDecorator
):  # Class
    def __init__(self) -> None: ...

    AnnotationID: int

    def Draw(
        self,
        g: System.Drawing.Graphics,
        pane: Pane,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> None: ...
    def IsHit(
        self,
        xcc: int,
        ycc: int,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGrabHandle: ...

class ImpDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IImpDataSource,
    Agilent.MassSpectrometry.DataAnalysis.DataSource,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ImpDataSource
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ImpDataSource: ...

class ImsCalConstants:  # Class
    DefaultCalElement: str = ...  # static # readonly
    DriftPressureFactor: str = ...  # static # readonly
    OverrideCalElement: str = ...  # static # readonly
    Version: str = ...  # static # readonly

class ImsDimension(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Abundance: Agilent.MassSpectrometry.DataAnalysis.ImsDimension = (
        ...
    )  # static # readonly
    AcqTime: Agilent.MassSpectrometry.DataAnalysis.ImsDimension = (
        ...
    )  # static # readonly
    DriftTime: Agilent.MassSpectrometry.DataAnalysis.ImsDimension = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.ImsDimension = ...  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ImsDimension = (
        ...
    )  # static # readonly

class ImsFileDumpOptions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FrameBinHeader: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    FrameBinRecords: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    FrameMethods: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    GeneralFileInfo: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    MassCalInfo: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    MsScanHeader: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly
    MsScanRecords: Agilent.MassSpectrometry.DataAnalysis.ImsFileDumpOptions = (
        ...
    )  # static # readonly

class ImsFrameCycleInfo(
    Agilent.MassSpectrometry.DataAnalysis.IImsFrameCycleInfo
):  # Class
    def __init__(self) -> None: ...

class ImsFrameField(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ActualsOffset: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    CycleNumber: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FirstNonzeroDriftBin: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FragClass: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FragEnergy: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameBaseAbund: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameBaseDriftBin: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameBaseMsBin: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameId: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameMethodId: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameRecordStart: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameScanTime: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameSpecAbundLimit: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    FrameTic: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    ImsField: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    ImsPressure: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    ImsTemperature: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    ImsTrapTime: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    IsolationEndMz: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    IsolationMz: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    IsolationStartMz: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    LastNonzeroDriftBin: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    MassCalOffset: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    NumTransients: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    TimeSegmentId: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.ImsFrameField = (
        ...
    )  # static # readonly

class ImsFrameMethod(Agilent.MassSpectrometry.DataAnalysis.IImsFrameMethod):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ImsFrameMethod
    ) -> None: ...

class ImsFrameScanRec:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ImsFrameScanRec
    ) -> None: ...

    BaseAbund: int
    BaseMsBin: int
    DetectorGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain
    FirstNonzeroMsBin: int
    FrameId: int
    ImsDriftBin: int
    LastNonzeroMsBin: int
    MsPeakByteCount: int
    MsPeakMaxX: float
    MsPeakMinX: float
    MsPeakOffset: int
    MsPeakPointCount: int
    MsPeakSpecFmtId: int
    MsProfByteCount: int
    MsProfFullByteCount: int
    MsProfNzPointCount: int
    MsProfOffset: int
    MsProfPointCount: int
    MsProfSpecFmtId: int
    ScanId: int
    TfsBasePeakAbund: float
    TfsBasePeakMz: float
    Tic: float

class ImsFrameType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Calibration: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType = ...  # static # readonly
    Prescan: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType = (
        ...
    )  # static # readonly
    Sample: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ImsFrameType = (
        ...
    )  # static # readonly

class ImsGateMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mixed: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode = ...  # static # readonly
    MuxGate: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode = (
        ...
    )  # static # readonly
    SingleGate: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ImsGateMode = (
        ...
    )  # static # readonly

class ImsMuxProcessing(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mixed: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing = (
        ...
    )  # static # readonly
    PostRun: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing = (
        ...
    )  # static # readonly
    RealTime: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ImsMuxProcessing = (
        ...
    )  # static # readonly

class ImsTrapMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DynamicTrap: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = ...  # static # readonly
    MultiTrap: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = (
        ...
    )  # static # readonly
    SingleTrap: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = (
        ...
    )  # static # readonly
    StitchedTrap: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ImsTrapMode = (
        ...
    )  # static # readonly

class ImsUnitSet(Agilent.MassSpectrometry.DataAnalysis.IImsUnits):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ImsUnitSet
    ) -> None: ...

    EncryptionCharDt: str  # static
    EncryptionCharMz: str  # static
    EncryptionCharRt: str  # static
    EncryptionCharSeparator: str  # static

    DefaultDisplayUnits: (
        Agilent.MassSpectrometry.DataAnalysis.IImsUnits
    )  # static # readonly
    InternalUnits: Agilent.MassSpectrometry.DataAnalysis.IImsUnits  # static # readonly

    @staticmethod
    def FormatedUnitString(unit: MidacUnits, abbrevOnly: bool) -> str: ...
    @staticmethod
    def DimensionOfUnits(
        units: MidacUnits,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ImsDimension: ...

class InclusionType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AllButThese: Agilent.MassSpectrometry.DataAnalysis.InclusionType = (
        ...
    )  # static # readonly
    Exclude: Agilent.MassSpectrometry.DataAnalysis.InclusionType = (
        ...
    )  # static # readonly
    Include: Agilent.MassSpectrometry.DataAnalysis.InclusionType = (
        ...
    )  # static # readonly
    OnlyThese: Agilent.MassSpectrometry.DataAnalysis.InclusionType = (
        ...
    )  # static # readonly

class IntactProteinModification(
    Agilent.MassSpectrometry.DataAnalysis.IIntactProteinModification
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, modName: str, maxLimit: int) -> None: ...

    MaxLimit: int
    ModName: str

class IntegerRange:  # Class
    def __init__(self, min: int, max: int) -> None: ...

    Length: int  # readonly
    Max: int  # readonly
    Min: int  # readonly

    @overload
    def Overlaps(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IntegerRange
    ) -> bool: ...
    @overload
    def Overlaps(self, min: float, max: float) -> bool: ...
    def Contains(self, value_: int) -> bool: ...

class IntegrationEventInfo(
    Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo, System.ICloneable
):  # Class
    @overload
    def __init__(
        self, eventType: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    ) -> None: ...

    Event: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    EventValue: Any
    EventValueType: System.Type  # readonly
    IsTimeEvent: bool
    IsUsed: bool
    SupportedValuesForEvent: List[Any]  # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    ) -> bool: ...
    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventInfo
    ) -> bool: ...
    def ValidationMessage(self) -> str: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo: ...
    def ValueString(self) -> str: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def ToString(self) -> str: ...

    ValueChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ValueChangeEventHandler
    )  # Event

class IntegrationEventParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        eventType: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType,
        isTimedEvent: bool,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    DefaultValueString: str  # readonly
    RestrictValueChoices: bool
    Value: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    ValueChoices: List[Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType]
    ValueString: str  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...

class IntegrationEventType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AreaReject: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    AreaSum: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    AreaSumSlice: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    AutoPeakWidth: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BLPickFromRange: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BLSetLowOfRange: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BLSetOfRange: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BaselineAtValleys: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BaselineBackwards: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BaselineHold: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BaselineNextValley: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    BaselineNow: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    DetectShoulders: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    FixedPeakWidth: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    HeightReject: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    Integration: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    MaximumArea: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    MaximumHeight: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    NegativePeak: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    PeakWidth: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    ShouldersMode: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    SlopeSensitivity: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    SolventPeak: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    SplitPeak: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    TailTangentSkim: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    TangentSkimMode: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    Threshold: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly
    UnassignedPeaks: Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType = (
        ...
    )  # static # readonly

class IntegratorAlgorithm(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Agile: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    Agile2: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    ChemStation: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    Claire: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    FlatGcMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    FlatLcMsMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    GcMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    Genie: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    LcMsMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    OriginalMsMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    PlaygroundMsMs: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    Rte: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm = (
        ...
    )  # static # readonly

class InvalidXYDataException(
    System.ApplicationException,
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, auxMessage: str) -> None: ...
    @overload
    def __init__(self, auxMessage: str, inner: System.Exception) -> None: ...

class IonDetectorGain(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HighGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain = (
        ...
    )  # static # readonly
    LowGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain = (
        ...
    )  # static # readonly
    StitchedGain: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IonDetectorGain = (
        ...
    )  # static # readonly

class IonDetectorMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Analog: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode = (
        ...
    )  # static # readonly
    Error: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode = (
        ...
    )  # static # readonly
    PulseCounting: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode = (
        ...
    )  # static # readonly

class IonPeak:  # Class
    def __init__(
        self,
        chromRegion: Agilent.MassSpectrometry.DataAnalysis.ChromRegion,
        id: int,
        mz: float,
        startX: float,
        endX: float,
        height: float,
        area: float,
        rt: float,
        snr: float,
        symmetry: float,
        width: float,
        shape: Agilent.MassSpectrometry.DataAnalysis.PeakShape,
    ) -> None: ...

    Area: float  # readonly
    ChromRegion: Agilent.MassSpectrometry.DataAnalysis.ChromRegion  # readonly
    End: float  # readonly
    ErrorFlags: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags  # readonly
    FeatureID: int  # readonly
    FullWidthAtHalfMaximum: float  # readonly
    Height: float  # readonly
    InterpolatedHeight: float  # readonly
    InterpolatedRT: float  # readonly
    LeftSharpness: float  # readonly
    LowShapeOverlap: bool
    MZ: float  # readonly
    MzOfInterest: float  # readonly
    PeakShape: Agilent.MassSpectrometry.DataAnalysis.PeakShape  # readonly
    Polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    RetentionTime: float  # readonly
    RightSharpness: float  # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    Sharpness: float  # readonly
    SignalToNoise: float  # readonly
    Start: float  # readonly
    Status: Agilent.MassSpectrometry.DataAnalysis.PeakStatus  # readonly
    Symmetry: float  # readonly

    # Nested Types

    class ApexScanIndexComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

    class HeightComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

    class MZComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

    class RTComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

    class ReverseHeightComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

    class SharpnessComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            x: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
            y: Agilent.MassSpectrometry.DataAnalysis.IonPeak,
        ) -> int: ...

class IonPolarity(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mixed: Agilent.MassSpectrometry.DataAnalysis.IonPolarity = ...  # static # readonly
    Negative: Agilent.MassSpectrometry.DataAnalysis.IonPolarity = (
        ...
    )  # static # readonly
    Positive: Agilent.MassSpectrometry.DataAnalysis.IonPolarity = (
        ...
    )  # static # readonly
    Unassigned: Agilent.MassSpectrometry.DataAnalysis.IonPolarity = (
        ...
    )  # static # readonly

class IonSearchSpecies:  # Class
    def __init__(self) -> None: ...

    AbsMzToleranceMultiplier: float
    BaseMz: float
    LowestMz: float
    PredictedPeaks: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.SpectralPeak
    ]
    SpeciesString: str
    Z: int

    @overload
    @staticmethod
    def FormSearchSpeciesList(
        formula: str,
        psetSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonSearchSpecies
    ]: ...
    @overload
    @staticmethod
    def FormSearchSpeciesList(
        neutralMass: float,
        psetSpecies: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonSearchSpecies
    ]: ...
    @overload
    @staticmethod
    def FormSearchSpeciesList(
        msPeaks: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonSearchSpecies
    ]: ...

class IonSpeciesDetails(
    Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        baseCount: int,
        electronCount: int,
        modifierCount: int,
        modifierFormula: str,
        active: bool,
    ) -> None: ...
    @overload
    def __init__(
        self, iSrc: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails
    ) -> None: ...
    @staticmethod
    def Parse(
        speciesFormula: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IonSpeciesDetails: ...

class IonSpeciesScores(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesScores
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesScores
    ) -> None: ...

class IonSpeciesSource(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CpdDatabaseSearch: Agilent.MassSpectrometry.DataAnalysis.IonSpeciesSource = (
        ...
    )  # static # readonly
    MolecularFeatureAnalysis: Agilent.MassSpectrometry.DataAnalysis.IonSpeciesSource = (
        ...
    )  # static # readonly
    TargetSpecies: Agilent.MassSpectrometry.DataAnalysis.IonSpeciesSource = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IonSpeciesSource = (
        ...
    )  # static # readonly
    UserInput: Agilent.MassSpectrometry.DataAnalysis.IonSpeciesSource = (
        ...
    )  # static # readonly

class IonizationMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Apci: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    Appi: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    CI: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = ...  # static # readonly
    EI: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = ...  # static # readonly
    Esi: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = ...  # static # readonly
    ICP: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = ...  # static # readonly
    JetStream: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    Maldi: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    MsChip: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    NanoEsi: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IonizationMode = (
        ...
    )  # static # readonly

class IsolationWindow(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Middium: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow = (
        ...
    )  # static # readonly
    Narrow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow = (
        ...
    )  # static # readonly
    Wide: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow = (
        ...
    )  # static # readonly

class IsolationWindowType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AllIsotopes: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType = (
        ...
    )  # static # readonly
    LowestIsotopeOnly: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType = (
        ...
    )  # static # readonly
    SomeIsotopes: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType = (
        ...
    )  # static # readonly

class IsotopeMatcher:  # Class
    @overload
    def __init__(
        self, massAccuracyCoeffients: List[float], relativeIntensityAccuracy: float
    ) -> None: ...
    @overload
    def __init__(
        self,
        massAccuracyCoefficients: List[float],
        relativeIntensityAccuracy: float,
        scoreSinglePeak: bool,
        useProductScoring: bool,
        avgMzAbundPower: int,
    ) -> None: ...
    @overload
    def CalculateMatchingScore(
        self,
        synPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        obsPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        chargeCount: int,
        intensityScore: float,
        spacingScore: float,
    ) -> float: ...
    @overload
    def CalculateMatchingScore(
        self,
        synPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        obsPeaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        chargeCount: int,
        useNewSpacingScoring: bool,
        intensityScore: float,
        spacingScore: float,
    ) -> float: ...

class IsotopeModelType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Biological: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly
    CommonOrganicMolecules: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly
    Glycan: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly
    Peptides: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly
    Unbaised: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType = (
        ...
    )  # static # readonly

class IsotopePattern:  # Class
    def __init__(self, engine: IsotopePatternCalculator.IIsotopePattern) -> None: ...

    MZAtClusterMaxHeight: float
    MZOfClusterCentroid: float
    Peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak]

    ProfileSpectrumData: List[float]  # readonly
    ProfileSpectrumDeltaMZ: float  # readonly
    ProfileSpectrumStartingMZ: float  # readonly

class IsotopeUptakeAnalyzerEngine:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def FindCompositions(
        peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        parameters: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerator.UserParameters,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.IComposition]: ...
    @staticmethod
    def GetDistribution(
        par: Agilent.MassSpectrometry.DataAnalysis.IsotopeUptakeAnalyzerEngine.Userparameters,
        peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        intactFormula: str,
        uptakeSiteCount: int,
        incorporationRate: float,
        qualified: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.IsotopeUptakeAnalyzerEngine.Distribution
    ]: ...
    @staticmethod
    def GetMaxUptakeSiteCount(
        intactFormula: str,
        parameters: Agilent.MassSpectrometry.DataAnalysis.IsotopeUptakeAnalyzerEngine.Userparameters,
    ) -> int: ...

    # Nested Types

    class Distribution:  # Struct
        RelativeAbundance: float
        Species: str

    class Userparameters:  # Class
        def __init__(self) -> None: ...

        MzToleranceCoefficients: List[float]
        UptakeIsotope: str

        @staticmethod
        def IsValidUptakeIsotope(uptakeIsotope: str) -> bool: ...

class IsotopicMassAssignment(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Average: Agilent.MassSpectrometry.DataAnalysis.IsotopicMassAssignment = (
        ...
    )  # static # readonly
    Monoisotopic: Agilent.MassSpectrometry.DataAnalysis.IsotopicMassAssignment = (
        ...
    )  # static # readonly

class ItemGroup(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Analyses: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = ...  # static # readonly
    ApplicationSettings: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    BackgroundSpectrum: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    Compounds: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    DifferentialAnalysis: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    DifferentialResult: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    MethodSettings: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    ReferenceCpdResults: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    ResultSequences: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    SampleCpdResults: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    SpectrumMirrorPlot: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    Temporary: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    UserChromatogram: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    UserSpectrum: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly
    WizardSettings: Agilent.MassSpectrometry.DataAnalysis.ItemGroup = (
        ...
    )  # static # readonly

class ItemOrder(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    After: Agilent.MassSpectrometry.DataAnalysis.ItemOrder = ...  # static # readonly
    Before: Agilent.MassSpectrometry.DataAnalysis.ItemOrder = ...  # static # readonly
    Same: Agilent.MassSpectrometry.DataAnalysis.ItemOrder = ...  # static # readonly

class ItemStateChange:  # Struct
    itemId: int
    newState: bool

class ItemType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Analysis: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    Category: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    Chromatogram: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    Compound: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    DifferentialAnalysis: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    DifferentialCompound: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    MirrorPlot: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    MirrorPlotBottom: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    MirrorPlotDifference: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    MirrorPlotTop: Agilent.MassSpectrometry.DataAnalysis.ItemType = (
        ...
    )  # static # readonly
    Sequence: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    Setting: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    Spectrum: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly
    Wizard: Agilent.MassSpectrometry.DataAnalysis.ItemType = ...  # static # readonly

class ItemsToAnnotate(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.ItemsToAnnotate = (
        ...
    )  # static # readonly
    Best: Agilent.MassSpectrometry.DataAnalysis.ItemsToAnnotate = (
        ...
    )  # static # readonly
    Highlighted: Agilent.MassSpectrometry.DataAnalysis.ItemsToAnnotate = (
        ...
    )  # static # readonly
    HighlightedElseBest: Agilent.MassSpectrometry.DataAnalysis.ItemsToAnnotate = (
        ...
    )  # static # readonly

class LcMsMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class LcMsMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class LibEntry:  # Class
    def __init__(
        self, header: Agilent.MassSpectrometry.DataAnalysis.LibEntryHeader
    ) -> None: ...

class LibEntryHeader:  # Class
    def __init__(self) -> None: ...

    CID_STRLEN: int = ...  # static # readonly
    MINUTES_PER_MILLISECOND: float = ...  # static # readonly
    MINUTES_PER_SECOND: float = ...  # static # readonly
    WRITE_RECORD_BUF_LEN: int = ...  # static # readonly

    BoilPt: float
    CASNumber: int
    CIDNumber: str
    Deleted: int
    Formula: str
    IRIndex: int
    MSIndexC: int
    MSIndexF: int
    MeltPt: float
    Misc: str
    Name: str
    RLIndex: int
    RetIndex: float
    RetentionIndex: float  # readonly
    RetentionIndexDisplayValue: float  # readonly
    RetentionTimeRTL: float  # readonly
    SIIndex: int
    UnusedStr: str
    Weight: float

class LibEntryHeaderWriteRecord:  # Class
    def __init__(
        self, header: Agilent.MassSpectrometry.DataAnalysis.LibEntryHeader
    ) -> None: ...

    EDITABLE_PBM_DATABASE_CIDSTRING_LEN: int = ...  # static # readonly
    EDITABLE_PBM_DATABASE_FORMULA_LEN: int = ...  # static # readonly
    EDITABLE_PBM_DATABASE_MISC_LEN: int = ...  # static # readonly
    EDITABLE_PBM_DATABASE_NAME_LEN: int = ...  # static # readonly
    WRITE_RECORD_BEGIN_NAME: int = ...  # static # readonly
    WRITE_RECORD_BUF_LEN: int = ...  # static # readonly

    def Write(self, bw: System.IO.BinaryWriter) -> None: ...
    def PutCASnumber(self, dwCasNumber: int) -> None: ...
    def PutIRindex(self, dwIRindex: int) -> None: ...
    def PutName(self, name: str) -> None: ...
    def PutCIDNumber(self, companyID: str) -> None: ...
    def PutFlags(self, dwFlags: int) -> None: ...
    def PutRetIndex(self, dRetIndex: float) -> None: ...
    def PutSIindex(self, dwSIindex: int) -> None: ...
    def PutMolecularFormula(self, formula: str) -> None: ...
    def PutMisc(self, misc: str) -> None: ...
    def PutBoilPt(self, dBoilPt: float) -> None: ...
    def PutRLIndex(self, dwRLIndex: int) -> None: ...
    def GetMSindexC(self) -> int: ...
    def PutMeltPt(self, dMeltPt: float) -> None: ...
    def GetFlags(self) -> int: ...
    def PutMSindexC(self, dwMSindexC: int) -> None: ...
    def PutSize(self, wSize: int) -> None: ...
    def PutWeight(self, dWeight: float) -> None: ...
    def PutMSindexF(self, dwMSindexF: int) -> None: ...

class LibEntryId(Agilent.MassSpectrometry.DataAnalysis.ISpectrumId):  # Class
    def __init__(self, id: int) -> None: ...

    Value: int  # readonly

    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class LibSpectrumInfo:  # Class
    def __init__(self) -> None: ...

    CE: float
    CpdId: int
    IonSpecies: str
    PrecursorIon: float
    SpecPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    SpectrumId: int
    XValues: List[float]
    YValues: List[float]

    def Clear(self) -> None: ...

class LibraryCompoundInfo:  # Class
    @overload
    def __init__(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...
    @overload
    def __init__(
        self, header: Agilent.MassSpectrometry.DataAnalysis.LibEntryHeader
    ) -> None: ...
    @overload
    def __init__(
        self,
        name: str,
        formula: str,
        refNumber: str,
        weight: float,
        meltPt: float,
        boilPt: float,
        retIndex: float,
        rt: float,
    ) -> None: ...

    BoilPt: float  # readonly
    CompoundName: str  # readonly
    Formula: str  # readonly
    MeltPt: float  # readonly
    MolecularWeight: float  # readonly
    ReferenceNumber: str  # readonly
    RetentionIndex: float  # readonly
    RetentionTimeRTL: float  # readonly
    UniqueKey: str  # readonly

class LibraryDataSet(
    System.IDisposable,
    System.ComponentModel.ISupportInitializeNotification,
    System.IServiceProvider,
    System.Data.DataSet,
    System.Xml.Serialization.IXmlSerializable,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
    System.ComponentModel.ISupportInitialize,
    System.ComponentModel.IComponent,
):  # Class
    def __init__(self) -> None: ...

    SCHEMA_VERSION: int = ...  # static # readonly

    Compound: (
        Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundDataTable
    )  # readonly
    IsEmpty: bool  # readonly
    Library: (
        Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryDataTable
    )  # readonly
    Relations: System.Data.DataRelationCollection  # readonly
    SchemaSerializationMode: System.Data.SchemaSerializationMode
    Spectrum: (
        Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumDataTable
    )  # readonly
    Tables: System.Data.DataTableCollection  # readonly

    def FindLibrary(
        self, libraryId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow: ...
    def GetNewCompoundId(self, libraryID: int) -> int: ...
    @staticmethod
    def GetTypedDataSetSchema(
        xs: System.Xml.Schema.XmlSchemaSet,
    ) -> System.Xml.Schema.XmlSchemaComplexType: ...
    def Clone(self) -> System.Data.DataSet: ...
    def GetNewLibraryId(self) -> int: ...
    def GetNewSpectrumId(self, libraryID: int, compoundID: int) -> int: ...

    # Nested Types

    class CompoundDataTable(
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        Iterable[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow],
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        AlternateNamesColumn: System.Data.DataColumn  # readonly
        BoilingPointColumn: System.Data.DataColumn  # readonly
        CASNumberColumn: System.Data.DataColumn  # readonly
        CompoundIDColumn: System.Data.DataColumn  # readonly
        CompoundNameColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        DescriptionColumn: System.Data.DataColumn  # readonly
        FormulaColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
        LastEditDateTimeColumn: System.Data.DataColumn  # readonly
        LibraryIDColumn: System.Data.DataColumn  # readonly
        MeltingPointColumn: System.Data.DataColumn  # readonly
        MolFileColumn: System.Data.DataColumn  # readonly
        MolecularWeightColumn: System.Data.DataColumn  # readonly
        MonoisotopicMassColumn: System.Data.DataColumn  # readonly
        RetentionIndexColumn: System.Data.DataColumn  # readonly
        RetentionTimeRTLColumn: System.Data.DataColumn  # readonly
        UserDefinedColumn: System.Data.DataColumn  # readonly

        def FindByLibraryIDCompoundID(
            self, LibraryID: int, CompoundID: int
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddCompoundRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow
        ) -> None: ...
        @overload
        def AddCompoundRow(
            self,
            parentLibraryRowByFK_Library_Compound: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow,
            CompoundID: int,
            AlternateNames: str,
            BoilingPoint: float,
            CASNumber: str,
            CompoundName: str,
            Description: str,
            Formula: str,
            LastEditDateTime: System.DateTime,
            MeltingPoint: float,
            MolecularWeight: float,
            MolFile: str,
            MonoisotopicMass: float,
            RetentionIndex: float,
            RetentionTimeRTL: float,
            UserDefined: str,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
        def NewCompoundRow(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
        def RemoveCompoundRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow
        ) -> None: ...
        def Clone(self) -> System.Data.DataTable: ...

        CompoundRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEventHandler
        )  # Event

    class CompoundRow(System.Data.DataRow):  # Class
        AlternateNames: str
        BoilingPoint: float
        CASNumber: str
        CompoundID: int
        CompoundName: str
        Description: str
        Formula: str
        LastEditDateTime: System.DateTime
        LibraryID: int
        LibraryRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow
        MeltingPoint: float
        MolFile: str
        MolecularWeight: float
        MonoisotopicMass: float
        RetentionIndex: float
        RetentionTimeRTL: float
        UserDefined: str

        def IsRetentionTimeRTLNull(self) -> bool: ...
        def SetMonoisotopicMassNull(self) -> None: ...
        def IsRetentionIndexNull(self) -> bool: ...
        def IsMeltingPointNull(self) -> bool: ...
        def SetUserDefinedNull(self) -> None: ...
        def IsLastEditDateTimeNull(self) -> bool: ...
        def IsAlternateNamesNull(self) -> bool: ...
        def SetLastEditDateTimeNull(self) -> None: ...
        def SetFormulaNull(self) -> None: ...
        def SetMeltingPointNull(self) -> None: ...
        def IsFormulaNull(self) -> bool: ...
        def SetMolecularWeightNull(self) -> None: ...
        def SetMolFileNull(self) -> None: ...
        def IsDescriptionNull(self) -> bool: ...
        def IsMonoisotopicMassNull(self) -> bool: ...
        def SetRetentionIndexNull(self) -> None: ...
        def SetBoilingPointNull(self) -> None: ...
        def SetAlternateNamesNull(self) -> None: ...
        def IsMolFileNull(self) -> bool: ...
        def IsBoilingPointNull(self) -> bool: ...
        def SetDescriptionNull(self) -> None: ...
        def SetRetentionTimeRTLNull(self) -> None: ...
        def IsCompoundNameNull(self) -> bool: ...
        def IsCASNumberNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetCompoundNameNull(self) -> None: ...
        def GetSpectrumRows(
            self,
        ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
        def SetCASNumberNull(self) -> None: ...
        def IsMolecularWeightNull(self) -> bool: ...

    class CompoundRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow
        )  # readonly

    class CompoundRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRowChangeEvent,
        ) -> None: ...

    class LibraryDataTable(
        System.ComponentModel.IListSource,
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow],
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow
        ],
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        AccurateMassColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        CreationDateTimeColumn: System.Data.DataColumn  # readonly
        DescriptionColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow: ...
        LastEditDateTimeColumn: System.Data.DataColumn  # readonly
        LibraryIDColumn: System.Data.DataColumn  # readonly
        LibraryNameColumn: System.Data.DataColumn  # readonly
        LibrarySourceColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def NewLibraryRow(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow: ...
        @overload
        def AddLibraryRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow
        ) -> None: ...
        @overload
        def AddLibraryRow(
            self,
            LibraryID: int,
            AccurateMass: bool,
            CreationDateTime: System.DateTime,
            Description: str,
            LastEditDateTime: System.DateTime,
            LibraryName: str,
            LibrarySource: str,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow: ...
        def Clone(self) -> System.Data.DataTable: ...
        def RemoveLibraryRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow
        ) -> None: ...

        LibraryRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEventHandler
        )  # Event
        LibraryRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEventHandler
        )  # Event
        LibraryRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEventHandler
        )  # Event
        LibraryRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEventHandler
        )  # Event

    class LibraryRow(System.Data.DataRow):  # Class
        AccurateMass: bool
        CreationDateTime: System.DateTime
        Description: str
        LastEditDateTime: System.DateTime
        LibraryID: int
        LibraryName: str
        LibrarySource: str

        def SetCreationDateTimeNull(self) -> None: ...
        def SetDescriptionNull(self) -> None: ...
        def IsAccurateMassNull(self) -> bool: ...
        def IsLibraryNameNull(self) -> bool: ...
        def GetSpectrumRows(
            self,
        ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
        def SetLibrarySourceNull(self) -> None: ...
        def GetCompoundRows(
            self,
        ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
        def SetLastEditDateTimeNull(self) -> None: ...
        def IsCreationDateTimeNull(self) -> bool: ...
        def IsDescriptionNull(self) -> bool: ...
        def IsLastEditDateTimeNull(self) -> bool: ...
        def IsLibrarySourceNull(self) -> bool: ...
        def SetAccurateMassNull(self) -> None: ...
        def SetLibraryNameNull(self) -> None: ...

    class LibraryRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow  # readonly

    class LibraryRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRowChangeEvent,
        ) -> None: ...

    class SpectrumDataTable(
        System.ComponentModel.IListSource,
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow],
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        AbundanceValuesColumn: System.Data.DataColumn  # readonly
        AcqRetentionTimeColumn: System.Data.DataColumn  # readonly
        BasePeakAbundanceColumn: System.Data.DataColumn  # readonly
        BasePeakMZColumn: System.Data.DataColumn  # readonly
        CollisionEnergyColumn: System.Data.DataColumn  # readonly
        CompoundIDColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        HighestMzColumn: System.Data.DataColumn  # readonly
        InstrumentTypeColumn: System.Data.DataColumn  # readonly
        IonPolarityColumn: System.Data.DataColumn  # readonly
        IonizationEnergyColumn: System.Data.DataColumn  # readonly
        IonizationTypeColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
        LastEditDateTimeColumn: System.Data.DataColumn  # readonly
        LibraryIDColumn: System.Data.DataColumn  # readonly
        LowestMzColumn: System.Data.DataColumn  # readonly
        MzSignatureBinWidthColumn: System.Data.DataColumn  # readonly
        MzSignatureColumn: System.Data.DataColumn  # readonly
        MzValuesColumn: System.Data.DataColumn  # readonly
        NumberOfPeaksColumn: System.Data.DataColumn  # readonly
        OriginColumn: System.Data.DataColumn  # readonly
        OwnerColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        ScanTypeColumn: System.Data.DataColumn  # readonly
        SelectedMZColumn: System.Data.DataColumn  # readonly
        SeparationTypeColumn: System.Data.DataColumn  # readonly
        SpeciesColumn: System.Data.DataColumn  # readonly
        SpectrumIDColumn: System.Data.DataColumn  # readonly
        UPlusAValuesColumn: System.Data.DataColumn  # readonly
        UserDefinedColumn: System.Data.DataColumn  # readonly

        def FindByLibraryIDCompoundIDSpectrumID(
            self, LibraryID: int, CompoundID: int, SpectrumID: int
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddSpectrumRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ) -> None: ...
        @overload
        def AddSpectrumRow(
            self,
            parentLibraryRowByFK_Library_Spectrum: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow,
            CompoundID: int,
            SpectrumID: int,
            AbundanceValues: str,
            AcqRetentionTime: float,
            BasePeakAbundance: float,
            BasePeakMZ: float,
            CollisionEnergy: float,
            HighestMz: float,
            IonizationEnergy: float,
            IonizationType: str,
            IonPolarity: str,
            InstrumentType: str,
            LastEditDateTime: System.DateTime,
            LowestMz: float,
            MzSignature: str,
            MzSignatureBinWidth: float,
            MzValues: str,
            NumberOfPeaks: int,
            Origin: str,
            Owner: str,
            SampleID: str,
            ScanType: str,
            SelectedMZ: float,
            SeparationType: str,
            Species: str,
            UPlusAValues: str,
            UserDefined: str,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
        def NewSpectrumRow(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
        def RemoveSpectrumRow(
            self, row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ) -> None: ...
        def Clone(self) -> System.Data.DataTable: ...

        SpectrumRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEventHandler
        )  # Event
        SpectrumRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEventHandler
        )  # Event
        SpectrumRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEventHandler
        )  # Event
        SpectrumRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEventHandler
        )  # Event

    class SpectrumRow(System.Data.DataRow):  # Class
        AbundanceValues: str
        AcqRetentionTime: float
        BasePeakAbundance: float
        BasePeakMZ: float
        CollisionEnergy: float
        CompoundID: int
        CompoundRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow
        )
        HighestMz: float
        InstrumentType: str
        IonPolarity: str
        IonizationEnergy: float
        IonizationType: str
        LastEditDateTime: System.DateTime
        LibraryID: int
        LibraryRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.LibraryRow
        LowestMz: float
        MzSignature: str
        MzSignatureBinWidth: float
        MzValues: str
        NumberOfPeaks: int
        Origin: str
        Owner: str
        SampleID: str
        ScanType: str
        SelectedMZ: float
        SeparationType: str
        Species: str
        SpectrumID: int
        UPlusAValues: str
        UserDefined: str

        def SetLowestMzNull(self) -> None: ...
        def IsAbundanceValuesNull(self) -> bool: ...
        def IsIonizationTypeNull(self) -> bool: ...
        def SetSpeciesNull(self) -> None: ...
        def SetUserDefinedNull(self) -> None: ...
        def IsLastEditDateTimeNull(self) -> bool: ...
        def IsScanTypeNull(self) -> bool: ...
        def SetUPlusAValuesNull(self) -> None: ...
        def IsAcqRetentionTimeNull(self) -> bool: ...
        def SetLastEditDateTimeNull(self) -> None: ...
        def SetSampleIDNull(self) -> None: ...
        def SetIonizationEnergyNull(self) -> None: ...
        def SetIonPolarityNull(self) -> None: ...
        def SetAbundanceValuesNull(self) -> None: ...
        def IsMzValuesNull(self) -> bool: ...
        def IsLowestMzNull(self) -> bool: ...
        def SetBasePeakMZNull(self) -> None: ...
        def IsSeparationTypeNull(self) -> bool: ...
        def IsSampleIDNull(self) -> bool: ...
        def SetMzSignatureNull(self) -> None: ...
        def SetAcqRetentionTimeNull(self) -> None: ...
        def IsIonPolarityNull(self) -> bool: ...
        def IsOwnerNull(self) -> bool: ...
        def SetBasePeakAbundanceNull(self) -> None: ...
        def IsBasePeakAbundanceNull(self) -> bool: ...
        def SetMzSignatureBinWidthNull(self) -> None: ...
        def IsSelectedMZNull(self) -> bool: ...
        def IsCollisionEnergyNull(self) -> bool: ...
        def SetSeparationTypeNull(self) -> None: ...
        def SetHighestMzNull(self) -> None: ...
        def IsInstrumentTypeNull(self) -> bool: ...
        def IsBasePeakMZNull(self) -> bool: ...
        def SetInstrumentTypeNull(self) -> None: ...
        def IsMzSignatureNull(self) -> bool: ...
        def SetScanTypeNull(self) -> None: ...
        def SetMzValuesNull(self) -> None: ...
        def IsOriginNull(self) -> bool: ...
        def IsHighestMzNull(self) -> bool: ...
        def GetMZs(self) -> List[float]: ...
        def IsIonizationEnergyNull(self) -> bool: ...
        def IsNumberOfPeaksNull(self) -> bool: ...
        def IsUPlusAValuesNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetCollisionEnergyNull(self) -> None: ...
        def IsMzSignatureBinWidthNull(self) -> bool: ...
        def GetAbundances(self) -> List[float]: ...
        def SetNumberOfPeaksNull(self) -> None: ...
        def SetOwnerNull(self) -> None: ...
        def SetOriginNull(self) -> None: ...
        def IsSpeciesNull(self) -> bool: ...
        def SetSelectedMZNull(self) -> None: ...
        def SetIonizationTypeNull(self) -> None: ...

    class SpectrumRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        )  # readonly

    class SpectrumRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRowChangeEvent,
        ) -> None: ...

class LibraryDataSetJCAMPReader:  # Class
    def __init__(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet,
        libraryID: int,
    ) -> None: ...
    def ReadJCAMP(self, stream: System.IO.FileStream) -> None: ...

class LibraryDataSetJCAMPWriter:  # Class
    @overload
    def __init__(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    @overload
    def __init__(
        self,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def WriteJCAMP(self, stream: System.IO.FileStream) -> None: ...

class LibraryDataSetReader:  # Class
    def __init__(
        self, dataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet
    ) -> None: ...
    def ReadXML(self, stream: System.IO.Stream) -> None: ...
    def ReadBinary(self, stream: System.IO.Stream) -> None: ...

class LibraryDataSetWriter:  # Class
    @overload
    def __init__(
        self, dataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet
    ) -> None: ...
    @overload
    def __init__(
        self,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def WriteBinary(self, filePath: str) -> None: ...
    @staticmethod
    def ExportToXML(
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def WriteXML(self, filePath: str) -> None: ...
    @staticmethod
    def ExportToBinary(
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...

class LibraryEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class LibraryManager(Agilent.MassSpectrometry.DataAnalysis.ILibraryManager):  # Class
    def CreateLibrary(
        self, path: str, format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    def GetLibraries(self) -> List[Agilent.MassSpectrometry.DataAnalysis.ILibrary]: ...
    @staticmethod
    def InferLibraryFormat(
        libraryName: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat: ...
    def GetLibrary(
        self, path: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    def CloseLibrary(
        self, library: Agilent.MassSpectrometry.DataAnalysis.ILibrary
    ) -> None: ...
    @staticmethod
    def GetInstance() -> Agilent.MassSpectrometry.DataAnalysis.ILibraryManager: ...
    def GetLibraryByID(
        self, libraryId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    @overload
    def OpenLibrary(
        self, path: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...
    @overload
    def OpenLibrary(
        self,
        path: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
        readOnly: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILibrary: ...

class LibraryRTInfoConversion:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def NeedToConvert(
        library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary,
    ) -> bool: ...
    @overload
    @staticmethod
    def NeedToConvert(
        library: Agilent.MassSpectrometry.DataAnalysis.MassSpecLibrary,
    ) -> bool: ...
    @overload
    @staticmethod
    def ConvertRTLLibrary(
        library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary,
    ) -> None: ...
    @overload
    @staticmethod
    def ConvertRTLLibrary(
        library: Agilent.MassSpectrometry.DataAnalysis.MassSpecLibrary,
    ) -> None: ...
    @staticmethod
    def GuessIsRTValue(retIndexOrRtInSeconds: float) -> bool: ...
    @staticmethod
    def InferLibraryRTInfoType(
        library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary,
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryRTInfoType: ...
    @overload
    @staticmethod
    def ConvertRILibrary(
        library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary,
    ) -> None: ...
    @overload
    @staticmethod
    def ConvertRILibrary(
        library: Agilent.MassSpectrometry.DataAnalysis.MassSpecLibrary,
    ) -> None: ...

class LibraryRTInfoPresence:  # Class
    LegacyRetIndexPresent: bool  # readonly
    RetentionIndexPresent: bool  # readonly
    RetentionTimePresent: bool  # readonly

    @staticmethod
    def CheckRTFields(
        library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary,
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryRTInfoPresence: ...

class LibraryRTInfoType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    RI: Agilent.MassSpectrometry.DataAnalysis.LibraryRTInfoType = (
        ...
    )  # static # readonly
    RTL: Agilent.MassSpectrometry.DataAnalysis.LibraryRTInfoType = (
        ...
    )  # static # readonly
    RTL_and_RI: Agilent.MassSpectrometry.DataAnalysis.LibraryRTInfoType = (
        ...
    )  # static # readonly

class LibrarySchemaUpgrade:  # Class
    @staticmethod
    def IncompatibleSchemaVersion(fromVersion: int, toVersion: int) -> bool: ...
    @staticmethod
    def ConvertDataSet(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet,
        fromVersion: int,
        toVersion: int,
    ) -> None: ...

class LibrarySearchMassAccuracy(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AccurateMass: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy = (
        ...
    )  # static # readonly
    UnitMass: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy = (
        ...
    )  # static # readonly

class LibrarySearchParams:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, xmlFileName: str) -> None: ...

    ACCURATE_MASS_PPM_TOLERANCE: float = ...  # static # readonly
    CONFIG_XML_FILE: str = ...  # static # readonly
    DEFAULT_CONFIG_XML_FILE: str = ...  # static # readonly
    MAX_HIT_COUNT: int = ...  # static # readonly
    MAX_RT_PENALTY: float = ...  # static # readonly
    MIN_LIB_ENTRIES_FOR_SCREENING: int = ...  # static # readonly
    MIN_MATCH_SCORE: float = ...  # static # readonly
    MIN_MZ: float = ...  # static # readonly
    MIN_SCREEN_COUNT: int = ...  # static # readonly
    NIST_COMPATIBILITY: bool = ...  # static # readonly
    NO_PENALTY_FOR_LOW_PEAK_COUNT: bool = ...  # static # readonly
    PURE_WEIGHT_FACTOR: float = ...  # static # readonly
    RATIO_PERCENT_UNCERTAINTY: float = ...  # static # readonly
    REMOVE_DUPLICATE_HITS: bool = ...  # static # readonly
    RT_MATCH_FACTOR_TYPE: Agilent.MassSpectrometry.DataAnalysis.RTMatchFactorType = (
        ...
    )  # static # readonly
    RT_PENALTY_TYPE: Agilent.MassSpectrometry.DataAnalysis.RTPenaltyType = (
        ...
    )  # static # readonly
    RT_RANGE_MINUTES: float = ...  # static # readonly
    RT_RANGE_NO_PENALTY_MINUTES: float = ...  # static # readonly
    SCREENING_ENABLED: bool = ...  # static # readonly
    SCREENING_TYPE: Agilent.MassSpectrometry.DataAnalysis.ScreeningType = (
        ...
    )  # static # readonly
    SPECTRUM_THRESHOLD: float = ...  # static # readonly

    AccurateMassPpmTolerance: float
    MaxHitCount: int
    MaxRTPenalty: float
    MinLibEntriesForScreening: int
    MinMatchScore: float
    MinMz: float
    MinScreenCount: int
    NISTCompatibility: bool
    NoPenaltyForLowPeakCount: bool
    PureWeightFactor: float
    RTCalibrationFile: str
    RTMatchFactorType: Agilent.MassSpectrometry.DataAnalysis.RTMatchFactorType
    RTPenaltyType: Agilent.MassSpectrometry.DataAnalysis.RTPenaltyType
    RTRange: float
    RTRangeNoPenalty: float
    RatioPercentUncertainty: float
    RemoveDuplicateHits: bool
    ScreeningEnabled: bool
    ScreeningType: Agilent.MassSpectrometry.DataAnalysis.ScreeningType
    SpectrumThreshold: float

    @overload
    def Write(self) -> None: ...
    @overload
    def Write(self, fileName: str) -> None: ...

class LibrarySearchType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AccurateMass: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchType = (
        ...
    )  # static # readonly
    Both: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchType = (
        ...
    )  # static # readonly
    UnitMass: Agilent.MassSpectrometry.DataAnalysis.LibrarySearchType = (
        ...
    )  # static # readonly

class LibraryUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetSpectrumTitle(
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> str: ...
    @staticmethod
    def AddSQLStringEscapes(str: str) -> str: ...

class LimitProgressMonitor(
    Agilent.MassSpectrometry.DataAnalysis.ProgressMonitor
):  # Class
    def __init__(
        self,
        notifyProcessDel: Agilent.MassSpectrometry.DataAnalysis.NotifyProgressDelegate,
        upperLevelLimit: Agilent.MassSpectrometry.DataAnalysis.LimitProgressMonitor,
        startLimitPercent: int,
        endLimitPercent: int,
    ) -> None: ...
    @staticmethod
    def GetStageWithinLimits(
        startLimit: int,
        endLimit: int,
        stageToLimit: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ProgressStage: ...
    def GetEndPercentWithinLimits(self) -> int: ...
    @staticmethod
    def GetPercentWithinLimits(
        startLimitPercent: int, endLimitPercent: int, percentToLimit: int
    ) -> int: ...
    def GetStartPercentWithinLimits(self) -> int: ...
    def ReportProgress(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        percentComplete: int,
        message: Agilent.MassSpectrometry.DataAnalysis.IUserMessage,
    ) -> None: ...

class LimitType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Exclusive: Agilent.MassSpectrometry.DataAnalysis.LimitType = (
        ...
    )  # static # readonly
    Inclusive: Agilent.MassSpectrometry.DataAnalysis.LimitType = (
        ...
    )  # static # readonly
    NoLimit: Agilent.MassSpectrometry.DataAnalysis.LimitType = ...  # static # readonly

class LineCycle:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, lineSet: Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions
    ) -> None: ...

    PSetLineDefinitions: Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions

    def ResetCycle(self, cycleKey: str) -> None: ...
    def NextLine(
        self, cycleKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinition: ...
    def RemoveCycle(self, cycleKey: str) -> None: ...
    def ResetAllCycles(self) -> None: ...

class LineDefinition(
    Agilent.MassSpectrometry.DataAnalysis.ILineDefinition, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        color: System.Drawing.Color,
        pattern: Agilent.MassSpectrometry.DataAnalysis.LinePattern,
        weight: float,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> None: ...

    Color: System.Drawing.Color
    Pattern: Agilent.MassSpectrometry.DataAnalysis.LinePattern
    Weight: float

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.LineDefinition: ...
    def ToString(self) -> str: ...

class LineDefinitionParameter(
    Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        color: System.Drawing.Color,
        pattern: Agilent.MassSpectrometry.DataAnalysis.LinePattern,
        lineWidth: float,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter
    ) -> None: ...

    ColorValue: System.Drawing.Color  # readonly
    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PatternValue: Agilent.MassSpectrometry.DataAnalysis.LinePattern  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    WeightValue: float  # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinitionParameter: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> bool: ...

class LinePattern(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Dash: Agilent.MassSpectrometry.DataAnalysis.LinePattern = ...  # static # readonly
    DashDot: Agilent.MassSpectrometry.DataAnalysis.LinePattern = (
        ...
    )  # static # readonly
    DashDotDot: Agilent.MassSpectrometry.DataAnalysis.LinePattern = (
        ...
    )  # static # readonly
    Dot: Agilent.MassSpectrometry.DataAnalysis.LinePattern = ...  # static # readonly
    Solid: Agilent.MassSpectrometry.DataAnalysis.LinePattern = ...  # static # readonly

class LinePreference(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Color: Agilent.MassSpectrometry.DataAnalysis.LinePreference = (
        ...
    )  # static # readonly
    ColorPatternWeight: Agilent.MassSpectrometry.DataAnalysis.LinePreference = (
        ...
    )  # static # readonly
    Pattern: Agilent.MassSpectrometry.DataAnalysis.LinePreference = (
        ...
    )  # static # readonly
    PatternWeight: Agilent.MassSpectrometry.DataAnalysis.LinePreference = (
        ...
    )  # static # readonly
    Weight: Agilent.MassSpectrometry.DataAnalysis.LinePreference = (
        ...
    )  # static # readonly

class Link(Agilent.MassSpectrometry.DataAnalysis.ILink):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szLossFormula: str,
        szGainFormula: str,
        szSepcificity: str,
        dDeltaMass: float,
        dDeltaAvgMass: float,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    LinkDeltaAvgMass: float
    LinkDeltaMass: float
    LinkGainFormula: str
    LinkLossFormula: str
    LinkName: str
    LinkSpecificity: str
    LinkType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class LongParameter(
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.ILongParameter,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialValue: int, defaultValue: int) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: int,
        defaultValue: int,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        digits: int,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.LongParameter
    ) -> None: ...

    DefaultValue: int
    DefaultValueString: str  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit  # readonly
    RestrictValueToChoices: bool
    Value: int
    ValueChoices: List[int]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ILongParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def GetUnitString(self, abbreviate: bool) -> str: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ILongParameter: ...
    def SetToDefault(self) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ToString(self) -> str: ...
    def IsValueValid(self, value_: int) -> bool: ...

class LongParameterLimit(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        minimum: int,
        maximum: int,
        minimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
        maximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
    ) -> None: ...

    Maximum: int
    MaximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    Minimum: int
    MinimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def WriteXml(self, id: str, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.LongParameterLimit: ...

class LwChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.LwPeak,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.LwChromPeak
    ) -> None: ...

class LwChromPeakList(
    Agilent.MassSpectrometry.DataAnalysis.LwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList,
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwChromPeak
    ],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList
    ) -> None: ...

class LwDsPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.LwPeak,
    Agilent.MassSpectrometry.DataAnalysis.ILwDsPeak,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, src: Agilent.MassSpectrometry.DataAnalysis.LwDsPeak) -> None: ...

class LwDsPeakList(
    Agilent.MassSpectrometry.DataAnalysis.LwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwDsPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwDsPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwDsPeakList,
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ILwDsPeakList
    ) -> None: ...

class LwGcMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.LwMsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator,
):  # Class
    def __init__(self) -> None: ...
    def FilterAndPostProcessPeakList(
        self,
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList,
        peakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    ) -> None: ...

class LwGcMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.LwMsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator,
):  # Class
    def __init__(self) -> None: ...

class LwGenieFindPeaks(Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator):  # Class
    def __init__(self) -> None: ...

class LwIntegratorGeneral(Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ConvertToHwChromPeakList(
        lwList: Agilent.MassSpectrometry.DataAnalysis.ILwChromPeakList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IChromPeakList: ...

class LwIsotopeGrouper:  # Class
    def __init__(self) -> None: ...
    def SetParameters(self, parameters: IIonGroupingParameters) -> None: ...
    def AssignChargeStates(
        self,
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
        minZ: int,
        maxZ: int,
        deisotope: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...

class LwIsotopeGrouperParamWrapper:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.LwIsotopeGrouperParamWrapper
    ) -> None: ...

    AccuracyC0: float
    AccuracyC1: float
    DoDeisotope: bool
    IsotopeModel: IsotopeModel
    MaxZ: int
    MinZ: int
    SumDeisotopeAbundances: bool
    TreatUnknownsAsOne: bool

    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.LwIsotopeGrouperParamWrapper: ...

class LwLcMsMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.LwMsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator,
):  # Class
    def __init__(self) -> None: ...

class LwLcMsMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.LwMsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator,
):  # Class
    def __init__(self) -> None: ...

class LwMsIsotopeGrouper:  # Class
    def __init__(self) -> None: ...
    def SetParameters(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.LwIsotopeGrouperParamWrapper,
    ) -> None: ...
    def AssignChargeStates(
        self, peakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...

class LwMsMsIntBase(Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator):  # Class
    def __init__(self) -> None: ...

class LwMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.ILwPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.LwPeak,
    Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, src: Agilent.MassSpectrometry.DataAnalysis.LwMsPeak) -> None: ...

class LwMsPeakFinder(Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakFinder):  # Class
    def __init__(self) -> None: ...

class LwMsPeakFinderParameters(
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.LwMsPeakFinderParameters
    ) -> None: ...

    Baseline: BaselineParamWrapper
    ComputeArea: bool
    ComputeWidth: bool
    DoIsotopeGrouping: bool
    EnableHtCorrections: bool
    EnableLbFilters: bool
    EnablePsFilters: bool
    IsotopeGrouping: Agilent.MassSpectrometry.DataAnalysis.LwIsotopeGrouperParamWrapper
    LimitPeakXRange: bool
    MaxPeakX: float
    MinPeakX: float
    PeakFilters: PeakFilterParamWrapper
    PeakLocate: PeakLocateParamWrapper
    Spectrum: SpectrumParamWrapper

    @staticmethod
    def LwTofPfParameters(
        iPsetTofPf: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
        iPsetPkFilter: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
        iPsetChargeState: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.LwMsPeakFinderParameters: ...

class LwMsPeakList(
    Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak
    ],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.LwPeakList[
        Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak
    ],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList
    ) -> None: ...

class LwMsUtilities:  # Class
    @overload
    def __init__(
        self,
        tofPeakFinderParameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
    ) -> None: ...
    @overload
    def __init__(
        self,
        tofPeakFinderParameters: Agilent.MassSpectrometry.DataAnalysis.IFindPeaksParameters,
        msMsGroupingParameters: Agilent.MassSpectrometry.DataAnalysis.LwIsotopeGrouperParamWrapper,
    ) -> None: ...
    @overload
    @staticmethod
    def ClosestExistingPeak(
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
        mzOfInterest: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak: ...
    @overload
    @staticmethod
    def ClosestExistingPeak(
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
        targetPeak: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak: ...
    def GetClusterForMass(
        self,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        peakMz: float,
        peakHeight: float,
        speciesString: str,
        assumedCpdMass: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...
    def GetClusterForFormula(
        self,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IBDASpecData,
        peakMz: float,
        peakHeight: float,
        speciesString: str,
        assumedCpdFormula: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...
    @staticmethod
    def ConvertLwPeakList(
        lwPeakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsPeakList: ...
    @staticmethod
    def ClosestExistingPeakIdx(
        peakList: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList,
        targetPeak: Agilent.MassSpectrometry.DataAnalysis.ILwMsPeak,
    ) -> int: ...

class LwOriginalMsMsInt(
    Agilent.MassSpectrometry.DataAnalysis.LwMsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.ILwIntegrator,
):  # Class
    def __init__(self) -> None: ...

class LwPeak(Agilent.MassSpectrometry.DataAnalysis.ILwPeak, System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, src: Agilent.MassSpectrometry.DataAnalysis.LwPeak) -> None: ...

class LwPeakAttribute(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ApexY: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Area: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Base1EndX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Base1StartX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Base2EndX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Base2StartX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    BaseEndFlag: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    BaseEndY: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    BaseStartFlag: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    BaseStartY: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    CenterX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    ClusterId: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    EndIndex: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    EndX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    EndY: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Fwhm: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Height: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    IonSpecies: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Resolution: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    StartIndex: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    StartX: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    StartY: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    WarningFlag: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = (
        ...
    )  # static # readonly
    Z: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute = ...  # static # readonly

class LwPeakComparerFactory(Generic[T]):  # Class
    @staticmethod
    def Comparer(
        attribute: Agilent.MassSpectrometry.DataAnalysis.LwPeakAttribute,
    ) -> System.Collections.Generic.IComparer[T]: ...

class LwPeakEndFlags(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Baseline: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    ForcedPeak: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    Horizontal: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    ManualPeak: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    NoFlags: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    Penetration: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly
    Valley: Agilent.MassSpectrometry.DataAnalysis.LwPeakEndFlags = (
        ...
    )  # static # readonly

class LwPeakList(
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList,
    Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[T],
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.DataAnalysis.ILwPeakList[T]
    ) -> None: ...

class LwPeakWarning(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Manual: Agilent.MassSpectrometry.DataAnalysis.LwPeakWarning = (
        ...
    )  # static # readonly
    NoFlags: Agilent.MassSpectrometry.DataAnalysis.LwPeakWarning = (
        ...
    )  # static # readonly
    Saturated: Agilent.MassSpectrometry.DataAnalysis.LwPeakWarning = (
        ...
    )  # static # readonly

class MFEMode(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    NORMAL: Agilent.MassSpectrometry.DataAnalysis.MFEMode = ...  # static # readonly
    RECURSIVE_STAGE_1: Agilent.MassSpectrometry.DataAnalysis.MFEMode = (
        ...
    )  # static # readonly
    RECURSIVE_STAGE_2: Agilent.MassSpectrometry.DataAnalysis.MFEMode = (
        ...
    )  # static # readonly

class MFGMatchingRul(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Isotope: Agilent.MassSpectrometry.DataAnalysis.MFGMatchingRul = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.MFGMatchingRul = (
        ...
    )  # static # readonly
    unspecified: Agilent.MassSpectrometry.DataAnalysis.MFGMatchingRul = (
        ...
    )  # static # readonly

class MS2IsotopeGrouper:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Run(
        peaks: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        precursorZ: int,
        precursorMz: float,
        massAccuracyCoeffients: List[float],
        isotopeCharacteristics: IsotopeCharacteristics,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindowType,
        hasIsotopeData: bool,
    ) -> List[IIsotopeCluster]: ...

class MSActualDef:  # Class
    def __init__(self) -> None: ...

    ActualId: int
    ActualType: Agilent.MassSpectrometry.DataAnalysis.ActualType
    Category: str
    DataType: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType
    DisplayDigits: int
    DisplayEffects: Agilent.MassSpectrometry.DataAnalysis.DisplayEffectType
    DisplayFormat: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    DisplayName: str
    Unit: str

class MSActualInfo:  # Class
    def __init__(self) -> None: ...

    ActualId: int
    ActualValue: List[int]
    Time: float

class MSActualsInfo(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IMSActualsInfo
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MSActualsInfo
    ) -> None: ...

    AcquisitionTime: float
    DataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    MSActuals: System.Data.DataSet
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    Title: str

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSActualsInfo: ...

class MSCalculator:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def CalculateDoubleBondEquivalent(formula: str) -> float: ...
    def IsFormulaValid(self, formula: str) -> bool: ...
    @overload
    @staticmethod
    def CalculateIsotopePattern(
        neutralMoleculeFormula: str,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
        peakWidthModel: Agilent.MassSpectrometry.DataAnalysis.IFunction,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IsotopePattern: ...
    @overload
    @staticmethod
    def CalculateIsotopePattern(
        neutralMoleculeFormula: str,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        peakWidthModel: Agilent.MassSpectrometry.DataAnalysis.IFunction,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IsotopePattern: ...
    @staticmethod
    def CalculateLowestIsotopeMass(formula: str) -> float: ...
    @overload
    @staticmethod
    def CalculateLowestIsotopeMZ(
        neutralMoleculeFormula: str,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> float: ...
    @overload
    @staticmethod
    def CalculateLowestIsotopeMZ(
        neutralMoleculeMass: float,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> float: ...
    @staticmethod
    def CalculateMonoisotopicNominalMass(formula: str) -> int: ...
    @staticmethod
    def IonSpeciesIsCompatible(
        neutralMoleculeFormula: str,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> bool: ...
    @staticmethod
    def FormulaIsValid(formula: str) -> bool: ...
    @staticmethod
    def GetIonMolecule(
        neutralMoleculeFormula: str,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...
    @staticmethod
    def CalculateLowestIsotopeNominalMass(formula: str) -> int: ...
    @staticmethod
    def CalculateMonoisotopicMass(formula: str) -> float: ...
    @staticmethod
    def FormulasAreCompositionallySame(formula1: str, formula2: str) -> bool: ...
    @overload
    @staticmethod
    def CalculateMonoisotopicMZ(
        neutralMoleculeFormula: str,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> float: ...
    @overload
    @staticmethod
    def CalculateMonoisotopicMZ(
        neutralMoleculeMass: float,
        ionSpeciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> float: ...
    @staticmethod
    def SymbolIsElement(symbol: str) -> bool: ...

class MSCalibConstants:  # Class
    CalibrationFormula: str = ...  # static # readonly
    CalibrationTechnique: str = ...  # static # readonly
    DefaultCalibration: str = ...  # static # readonly
    DefaultCalibrationId: str = ...  # static # readonly
    ExternalReference: str = ...  # static # readonly
    InternalReference: str = ...  # static # readonly
    Number: str = ...  # static # readonly
    NumberOfCoefficients: str = ...  # static # readonly
    Polynomial: str = ...  # static # readonly
    Step: str = ...  # static # readonly
    Traditional: str = ...  # static # readonly
    Value: str = ...  # static # readonly
    ValueUseFlags: str = ...  # static # readonly
    Values: str = ...  # static # readonly
    Version: str = ...  # static # readonly
    Weighting: str = ...  # static # readonly

class MSChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.SpectralChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IMSChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IMSChromDescription
    ) -> None: ...

    DriftTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    FrameRegionShape: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape
    MSDetails: Agilent.MassSpectrometry.DataAnalysis.IMSDetails
    MzRegionsWereExcluded: bool
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange
    TimeSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange

    def UpdatePrecision(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSChromDescription: ...

class MSChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.SpectralChromatogram,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MSChromatogram
    ) -> None: ...

    Description: Agilent.MassSpectrometry.DataAnalysis.IMSChromDescription  # readonly
    TimeSegments: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

    def UpdatePrecision(self) -> bool: ...
    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    def GetBasePeakMass(self, indexPoint: int) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSChromatogram: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...

class MSDAApplicationException(
    System.ApplicationException,
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(
        self, message: Agilent.MassSpectrometry.DataAnalysis.IUserMessage
    ) -> None: ...
    @overload
    def __init__(
        self,
        message: Agilent.MassSpectrometry.DataAnalysis.IUserMessage,
        innerException: System.Exception,
    ) -> None: ...
    @overload
    def __init__(
        self, messages: List[Agilent.MassSpectrometry.DataAnalysis.IUserMessage]
    ) -> None: ...

    UserMessages: List[Agilent.MassSpectrometry.DataAnalysis.IUserMessage]  # readonly

    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class MSDetails(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IMSDetails,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IMSDetails
    ) -> None: ...

    AbundanceLimit: float
    ChargeState: int
    CollisionEnergy: float
    CollisionEnergyIsDynamic: bool
    CompensationField: float
    DispersionField: float
    ExclusionListWasUsed: bool
    FilteredOnCollisionEnergy: bool
    FilteredOnCompensationField: bool
    FilteredOnDispersionField: bool
    FilteredOnFragmentor: bool
    FilteredOnIonPolarity: bool
    FilteredOnIonizationMode: bool
    FragmentationMode: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    FragmentorIsDynamic: bool
    FragmentorVoltage: float
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IsCollisionEnergyFromAcqMethod: bool
    IsFragmentorVoltageFromAcqMethod: bool
    IsPrimary: bool
    IsotopeWidth: float
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MSStage: int
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    MZOfInterest: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NumScanForExtractSpectrum: int
    ParentScanID: int
    ScanID: int

    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMSDetails: ...

class MSFullSpectrumFileHeader:  # Class
    ...

class MSFullSpectrumIO:  # Class
    def __init__(self) -> None: ...

    FULL_SPECTRUM_FILE: str = ...  # static # readonly

    def OpenRead(self, libraryName: str, readOnly: bool) -> bool: ...
    @staticmethod
    def PackAbundance(unpacked: int) -> int: ...
    def Close(self) -> None: ...
    @overload
    def GetSpectrumByIndex1Based(self, iSpectrumNumber1Based: int) -> List[float]: ...
    @overload
    def GetSpectrumByIndex1Based(
        self, iSpectrumNumber1Based: int, mzArray: List[float], abundArray: List[float]
    ) -> None: ...
    @staticmethod
    def IsFullSpectrumFilePresent(libraryName: str) -> bool: ...

class MSINT_PARAMS:  # Class
    def __init__(self) -> None: ...

    area_threshold: float
    baseline_pref: int
    bline_reset: int
    bunch: int
    digital_filter: int
    max_peaks: int
    peak_location: int
    percent_thresh: str
    scale_factor: float
    start_dthresh: float
    stop_dthresh: float
    valley: float

class MSINT_PARAMS:  # Class
    def __init__(self) -> None: ...

    area_threshold: float
    baseline_pref: int
    bline_reset: int
    bunch: int
    digital_filter: int
    max_peaks: int
    peak_location: int
    percent_thresh: str
    scale_factor: float
    start_dthresh: float
    stop_dthresh: float
    valley: float

class MSLevel(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.MSLevel = ...  # static # readonly
    MS: Agilent.MassSpectrometry.DataAnalysis.MSLevel = ...  # static # readonly
    MSMS: Agilent.MassSpectrometry.DataAnalysis.MSLevel = ...  # static # readonly

class MSLibrary(
    Agilent.MassSpectrometry.DataAnalysis.ILibrary,
    Agilent.MassSpectrometry.DataAnalysis.INistLibrarySearch,
):  # Class
    DataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet  # readonly
    Index: Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex  # readonly
    IsAccurateMass: bool  # readonly
    IsDirty: bool  # readonly
    IsOpen: bool  # readonly
    IsReadOnly: bool  # readonly
    LibraryDirectory: str  # readonly
    LibraryID: int  # readonly
    LibraryName: str  # readonly
    LibraryPath: str  # readonly
    NumberOfCompounds: int  # readonly
    NumberOfSpectra: int  # readonly
    ReadOnly: bool  # readonly
    StorageFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat  # readonly

    def ExportToXML(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def ImportFromBinary(self, filePath: str) -> None: ...
    def FindCompoundByCASNumber(
        self, casNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def GetCondensedSpectrumByGroup(
        self, group: int, entryInGroup: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.CondensedSpectrum: ...
    def OpenLibrary(self, path: str, readOnly: bool) -> None: ...
    @overload
    def GetCondensedSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float], ua: List[float]
    ) -> None: ...
    @overload
    def GetCondensedSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float]
    ) -> None: ...
    @overload
    def GetCondensedSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float]
    ) -> None: ...
    @overload
    def GetCondensedSpectrumByEntry(
        self,
        entry: int,
        mz: List[float],
        intensity: List[float],
        ua: List[float],
        headerIndex: int,
        molecularIonIndex: int,
        lowMass: int,
        kvMax: int,
        numOfIons: int,
    ) -> None: ...
    @overload
    def GetSpectra(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def GetSpectra(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    def ExportToBinary(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetLibEntryCount(self) -> int: ...
    def GetSpectrumOverlap(
        self, mzValues: List[float], abundances: List[float]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...
    def GetSpectrumTitle(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> str: ...
    def CreateSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def FindCompoundByName(
        self, name: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    @overload
    def SelectSpectra(
        self, spectrumFilter: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def SelectSpectra(
        self, compoundFilter: str, spectrumFilter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def GetNumberOfSpectraInGroup(self, nGroup: int) -> int: ...
    def GetCompounds(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    @overload
    @staticmethod
    def FormatCASNumber(casNumber: int) -> str: ...
    @overload
    @staticmethod
    def FormatCASNumber(casNumberString: str) -> int: ...
    def CloseLibrary(self) -> None: ...
    def SelectCompounds(
        self, filter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def FindCompoundsByCASNumber(
        self, casNumber: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def SaveLibrary(self) -> None: ...
    def Close(self) -> None: ...
    def DeleteCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> None: ...
    def GetCompoundInfo(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryCompoundInfo: ...
    def DeleteSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> None: ...
    def AddCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...
    def SaveLibraryAs(
        self,
        fileName: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
    ) -> None: ...
    @overload
    def GetFullSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float]
    ) -> None: ...
    @overload
    def GetFullSpectrumByEntry(
        self, entry: int, mz: List[float], abundance: List[float]
    ) -> None: ...
    def CreateCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetLibEntryHeader(
        self, entryNum: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibEntryHeader: ...
    def GetLibEntry(
        self, entryNum: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibEntry: ...
    def GetCompoundReferenceNumber(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Any: ...
    def GetSpectrum(
        self,
        entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId,
        mzValues: List[float],
        abundances: List[float],
    ) -> None: ...
    def AddSpectrum(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    def GetSpectrumById(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def ExportToCompressed(
        self,
        libPath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def ImportFromJCAMP(self, filePath: str) -> None: ...
    def ImportFromXML(self, filePath: str) -> None: ...

    LibraryClosed: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryClosing: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryMoved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryOpen: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibrarySaved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event

class MSLibraryFormat(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Binary: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat = (
        ...
    )  # static # readonly
    Compressed: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat = (
        ...
    )  # static # readonly
    PCDL: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat = (
        ...
    )  # static # readonly
    XML: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat = (
        ...
    )  # static # readonly

class MSLibraryIO(System.IDisposable):  # Class
    def __init__(self) -> None: ...

    BASE_PEAK_NORMALIZATION: int = ...  # static # readonly
    BLOCK_SIZE: int = ...  # static # readonly
    BUFFER_SIZE_IN_512: int = ...  # static # readonly
    CONDENSED_FILE: str = ...  # static # readonly
    CONDENSED_INDEX_ARRAY_SIZE: int = ...  # static # readonly
    CONDENSED_INDEX_FILE: str = ...  # static # readonly
    HEADER_FILE: str = ...  # static # readonly
    HEADER_INDEX_FILE: str = ...  # static # readonly
    ROOT_FILE: str = ...  # static # readonly

    IsOpen: bool  # readonly
    Name: str  # readonly
    RootFileSize: int  # readonly

    def Create(self, libraryName: str) -> bool: ...
    def Open(self, libraryName: str, readOnly: bool, useCondBuf: bool) -> None: ...
    def GetLibEntry(
        self, entryNum: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibEntry: ...
    def GetLibEntryCount(self) -> int: ...
    def GetLibEntryHeader(
        self, entryNum: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibEntryHeader: ...
    def GetNumberOfSpectraInGroup(self, nGroup: int) -> int: ...
    def UpdateEntry(
        self,
        headerWriteRecord: Agilent.MassSpectrometry.DataAnalysis.LibEntryHeaderWriteRecord,
        entryForEdit: int,
    ) -> None: ...
    def Close(self) -> None: ...
    def GetEntryHeaderSize(self, lEntryNum1Based: int) -> int: ...
    def GetSpectrumByGroup(
        self, group: int, entryInGroup: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.CondensedSpectrum: ...
    def Delete(self, libName: str) -> bool: ...
    def Dispose(self) -> None: ...
    @overload
    def GetSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float], ua: List[float]
    ) -> None: ...
    @overload
    def GetSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float]
    ) -> None: ...
    @overload
    def GetSpectrumByEntry(
        self, entry: int, mz: List[float], intensity: List[float]
    ) -> None: ...
    @overload
    def GetSpectrumByEntry(
        self,
        entry: int,
        mz: List[float],
        intensity: List[float],
        ua: List[float],
        headerIndex: int,
        molecularIonIndex: int,
        lowMass: int,
        kvMax: int,
        numOfIons: int,
    ) -> None: ...
    def AddEntry(
        self,
        headerWriteRecord: Agilent.MassSpectrometry.DataAnalysis.LibEntryHeaderWriteRecord,
        condensedSpectrum: Agilent.MassSpectrometry.DataAnalysis.CondensedSpectrum,
        maxUA: int,
        mzValues: List[float],
        intensityValues: List[float],
        retentionTimeMinutes: float,
        deferSort: bool,
    ) -> None: ...

class MSLibraryIndex(
    Agilent.MassSpectrometry.DataAnalysis.SpectrumIndex,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex,
):  # Class
    def __init__(
        self, library: Agilent.MassSpectrometry.DataAnalysis.MSLibrary
    ) -> None: ...
    def GetSpectrumId(
        self, libraryId: int, handle: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrumId: ...

class MSOverallScanRecordInfo(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo
    ) -> None: ...

    AbundanceLimit: float  # readonly
    CalibrationID: int  # readonly
    ChargeState: int  # readonly
    ChromScaleFactor: List[float]  # readonly
    CollisionEnergy: float  # readonly
    CompensationField: float  # readonly
    CycleNumber: int  # readonly
    DispersionField: float  # readonly
    FragmentationMode: (
        Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    )  # readonly
    FragmentorVoltage: float  # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode  # readonly
    IsCEAssignedFromAcqMethod: bool  # readonly
    IsCollisionEnergyDynamic: bool  # readonly
    IsFVAssignedFromAcqMethod: bool  # readonly
    IsFragmentorDynamic: bool  # readonly
    IsPrimaryMrm: bool  # readonly
    MSLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType  # readonly
    MSStorageModeInfo: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode  # readonly
    MeasuredNoise: float  # readonly
    MethodNumber: int  # readonly
    MzOfInterestRanges: (
        Agilent.MassSpectrometry.DataAnalysis.BDARangeCollection
    )  # readonly
    ParentIntensity: float  # readonly
    ParentScanID: int  # readonly
    ParentScanMzOfInterest: float  # readonly
    SamplingPeriod: float  # readonly
    ScanID: int  # readonly
    ScanTime: float  # readonly
    Threshold: float  # readonly
    TimeSegmentID: int  # readonly

    def GetFilteredOnDetails(
        self,
        isFilterOnIonPolarity: bool,
        isFilterOnIonizationMode: bool,
        isFilterOnFragmentor: bool,
        isFilterOnCollisionEnergy: bool,
        isFilterOnCompensationField: bool,
        isFilterOnDispersionField: bool,
    ) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MSOverallScanRecordInfo: ...

class MSScanConstants:  # Class
    AbundanceLimit: str = ...  # static # readonly
    ActualsOffset: str = ...  # static # readonly
    BaseAbund: str = ...  # static # readonly
    BaseMsBin: str = ...  # static # readonly
    BasePeakMz: str = ...  # static # readonly
    BasePeakValue: str = ...  # static # readonly
    ByteCount: str = ...  # static # readonly
    CalibrationID: str = ...  # static # readonly
    ChargeState: str = ...  # static # readonly
    ChromScaleFactor: str = ...  # static # readonly
    CollisionEnergy: str = ...  # static # readonly
    CompensationField: str = ...  # static # readonly
    CycleNumber: str = ...  # static # readonly
    DDMzOfInterest: str = ...  # static # readonly
    DDScanId: str = ...  # static # readonly
    DDScanParamType: str = ...  # static # readonly
    DdScanId2: str = ...  # static # readonly
    DdScanId3: str = ...  # static # readonly
    DetectorGain: str = ...  # static # readonly
    DispersionField: str = ...  # static # readonly
    DriftBin: str = ...  # static # readonly
    DwellTime: str = ...  # static # readonly
    FirstNonzeroMsBin: str = ...  # static # readonly
    FragmentationMode: str = ...  # static # readonly
    Fragmentor: str = ...  # static # readonly
    FrameId: str = ...  # static # readonly
    IonMode: str = ...  # static # readonly
    IonPolarity: str = ...  # static # readonly
    IsCollisionEnergyDynamic: str = ...  # static # readonly
    IsFragmentorDynamic: str = ...  # static # readonly
    LastNonzeroMsBin: str = ...  # static # readonly
    MSLevel: str = ...  # static # readonly
    MassCalOffset: str = ...  # static # readonly
    MaxX: str = ...  # static # readonly
    MaxY: str = ...  # static # readonly
    MeasuredMassRangeMax: str = ...  # static # readonly
    MeasuredMassRangeMin: str = ...  # static # readonly
    MeasuredNoise: str = ...  # static # readonly
    MinX: str = ...  # static # readonly
    MinY: str = ...  # static # readonly
    MsPeakByteCount: str = ...  # static # readonly
    MsPeakMaxX: str = ...  # static # readonly
    MsPeakMinX: str = ...  # static # readonly
    MsPeakOffset: str = ...  # static # readonly
    MsPeakPointCount: str = ...  # static # readonly
    MsPeakSpecFmtId: str = ...  # static # readonly
    MsProfByteCount: str = ...  # static # readonly
    MsProfFullByteCount: str = ...  # static # readonly
    MsProfNzPointCount: str = ...  # static # readonly
    MsProfOffset: str = ...  # static # readonly
    MsProfPointCount: str = ...  # static # readonly
    MsProfSpecFmtId: str = ...  # static # readonly
    MzIsolationWidth: str = ...  # static # readonly
    MzOfInterest: str = ...  # static # readonly
    MzOfInterest_Org: str = ...  # static # readonly
    NumOfActualsPerScan: str = ...  # static # readonly
    OneDataRangeDeltaYOffset: str = ...  # static # readonly
    Padbytes: str = ...  # static # readonly
    Padding: str = ...  # static # readonly
    PointCount: str = ...  # static # readonly
    SamplingPeriod: str = ...  # static # readonly
    ScanId: str = ...  # static # readonly
    ScanMethodNumber: str = ...  # static # readonly
    ScanRecordType: str = ...  # static # readonly
    ScanTime: str = ...  # static # readonly
    ScanType: str = ...  # static # readonly
    SpectraFormatId: str = ...  # static # readonly
    SpectrumOffset: str = ...  # static # readonly
    SpectrumParamsType: str = ...  # static # readonly
    Status: str = ...  # static # readonly
    TIC: str = ...  # static # readonly
    TfsBasePeakAbund: str = ...  # static # readonly
    TfsBasePeakAbund_Pre: str = ...  # static # readonly
    TfsBasePeakMz: str = ...  # static # readonly
    TfsBasePeakMz_Pre: str = ...  # static # readonly
    Threshold: str = ...  # static # readonly
    TimeSegmentMethodId: str = ...  # static # readonly
    TotalYValue: str = ...  # static # readonly
    UncompressedByteCount: str = ...  # static # readonly
    XSpecific_ByteCount: str = ...  # static # readonly
    XSpecific_Offset: str = ...  # static # readonly
    XSpecific_ParamType: str = ...  # static # readonly

class MSScanType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.MSScanType = ...  # static # readonly
    AllMS: Agilent.MassSpectrometry.DataAnalysis.MSScanType = ...  # static # readonly
    AllMSN: Agilent.MassSpectrometry.DataAnalysis.MSScanType = ...  # static # readonly
    HighResolutionScan: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    MultipleReaction: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    NeutralGain: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    PrecursorIon: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    ProductIon: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    Scan: Agilent.MassSpectrometry.DataAnalysis.MSScanType = ...  # static # readonly
    SelectedIon: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    TotalIon: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.MSScanType = (
        ...
    )  # static # readonly

class MSScan_XSpecific:  # Class
    def __init__(self) -> None: ...

    AccumulationTime: float
    IonDetectorMode: Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode
    XValue: float

class MSScan_XSpecificConstants:  # Class
    AccumulationTime: str = ...  # static # readonly
    IonDetectorMode: str = ...  # static # readonly

class MSStorageMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mixed: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode = (
        ...
    )  # static # readonly
    PeakDetectedSpectrum: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode = (
        ...
    )  # static # readonly
    ProfileSpectrum: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode = (
        ...
    )  # static # readonly

class MSTS_XSpecific:  # Class
    def __init__(self) -> None: ...

    ExpandXValues: bool
    HighXExpandLimit: float
    LowXExpandLimit: float
    Masses: List[Agilent.MassSpectrometry.DataAnalysis.MSTS_XSpecific_Masses]
    TimeSegmentID: int

class MSTS_XSpecific_Masses:  # Class
    def __init__(self) -> None: ...

    AccumulationTime: float
    Name: str
    XValue: float

class MSTimeSegments:  # Class
    def __init__(self) -> None: ...

    StatusForIRM: Agilent.MassSpectrometry.DataAnalysis.IRMStatus
    TimeSegments: List[Agilent.MassSpectrometry.DataAnalysis.Timesegment]

class MassCalculator:  # Class
    def __init__(self) -> None: ...
    def Calculate(
        self, pset: Agilent.MassSpectrometry.DataAnalysis.PSetMassCalculator
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults: ...

class MassCalculatorResults(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass
    ],
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass
    ],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    List[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IMassCalculatorResults,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.ICalculatedMass],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MassCalculatorResults
    ) -> None: ...

class MassDefectModel:  # Class
    def __init__(
        self,
        targetDefectIntercept: float,
        targetDefectSlope: float,
        toleranceInterceptForPositiveDeviation: float,
        toleranceSlopeForPositiveDeviation: float,
        toleranceInterceptForNegativeDeviation: float,
        toleranceSlopeForNegativeDeviation: float,
    ) -> None: ...
    @staticmethod
    def CreatePermissiveModel(
        coverBoronHydrogenCompounds: bool,
        massAccuracyIntercept: float,
        massAccuracySlope: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MassDefectModel: ...
    @staticmethod
    def CreateCommonOrganicModel(
        A2isLow: bool, massAccuracyIntercept: float, massAccuracySlope: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.MassDefectModel: ...
    def AllowsMass(self, mass: float, defectDeviationFromTarget: float) -> bool: ...

class MassDefectToleranceType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ConstantAsymmetric: (
        Agilent.MassSpectrometry.DataAnalysis.MassDefectToleranceType
    ) = ...  # static # readonly
    ConstantSymmetric: Agilent.MassSpectrometry.DataAnalysis.MassDefectToleranceType = (
        ...
    )  # static # readonly
    Variable: Agilent.MassSpectrometry.DataAnalysis.MassDefectToleranceType = (
        ...
    )  # static # readonly

class MassFilterType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FragmentMass: Agilent.MassSpectrometry.DataAnalysis.MassFilterType = (
        ...
    )  # static # readonly
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.MassFilterType = (
        ...
    )  # static # readonly

class MassHunterMassFilterOptions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Exclude: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions = (
        ...
    )  # static # readonly
    Include: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions = (
        ...
    )  # static # readonly
    IncludeForce: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions = (
        ...
    )  # static # readonly

class MassHunterTargetDataType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Infusion: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType = (
        ...
    )  # static # readonly
    Proteins: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType = (
        ...
    )  # static # readonly
    SmallMolecules: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType = (
        ...
    )  # static # readonly

class MassIsotopeChoice(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    LowestIsotope: Agilent.MassSpectrometry.DataAnalysis.MassIsotopeChoice = (
        ...
    )  # static # readonly
    Monoisotopic: Agilent.MassSpectrometry.DataAnalysis.MassIsotopeChoice = (
        ...
    )  # static # readonly

class MassListReader(Agilent.MassSpectrometry.DataAnalysis.IMassListReader):  # Class
    def __init__(self) -> None: ...

    DefaultMasslistFile: str

    def OpenMassListFile(self, fileFullPath: str) -> bool: ...
    def GetMasses(self, masslistname: str) -> List[float]: ...
    def GetMassListNames(self) -> List[str]: ...

class MassSpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.SpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.ISpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription
    ) -> None: ...

    DriftTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    FrameRegionShape: Agilent.MassSpectrometry.DataAnalysis.FrameRegionShape
    MSDetails: Agilent.MassSpectrometry.DataAnalysis.IMSDetails
    ScanIDs: Agilent.MassSpectrometry.DataAnalysis.ICoreList[int]

    def UpdatePrecision(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription: ...

class MassSpecLibrary(
    Agilent.MassSpectrometry.DataAnalysis.ILibrary,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.INistLibrarySearch,
):  # Class
    XML_LIBRARY_FILE_EXTENSION: str = ...  # static # readonly

    DataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet  # readonly
    Index: Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex  # readonly
    IsAccurateMass: bool  # readonly
    IsDirty: bool  # readonly
    IsOpen: bool  # readonly
    IsReadOnly: bool  # readonly
    LibraryDirectory: str  # readonly
    LibraryID: int  # readonly
    LibraryName: str  # readonly
    LibraryPath: str  # readonly
    NumberOfCompounds: int  # readonly
    NumberOfSpectra: int  # readonly
    StorageFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat  # readonly

    def ExportToXML(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def ImportFromBinary(self, filePath: str) -> None: ...
    def FindCompoundByCASNumber(
        self, casNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def OpenLibrary(self, path: str, readOnly: bool) -> None: ...
    @overload
    def GetSpectra(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def GetSpectra(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    def ExportToBinary(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetSpectrumOverlap(
        self, mzValues: List[float], abundances: List[float]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...
    def GetSpectrumTitle(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> str: ...
    def CreateSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def FindCompoundByName(
        self, name: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    @overload
    def SelectSpectra(
        self, spectrumFilter: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def SelectSpectra(
        self, compoundFilter: str, spectrumFilter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def GetCompounds(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def CloseLibrary(self) -> None: ...
    def GetMZValues(
        self, maxMZsToGetPerSpectrum: int, mzToleranceInPpm: float
    ) -> System.Collections.Generic.List[float]: ...
    def SelectCompounds(
        self, filter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def FindCompoundsByCASNumber(
        self, casNumber: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def SaveLibrary(self) -> None: ...
    def DeleteCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> None: ...
    def GetCompoundInfo(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryCompoundInfo: ...
    def DeleteSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> None: ...
    def AddCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...
    def SaveLibraryAs(
        self,
        fileName: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
    ) -> None: ...
    def CreateCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundReferenceNumber(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Any: ...
    def GetSpectrum(
        self,
        entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId,
        mzValues: List[float],
        abundances: List[float],
    ) -> None: ...
    def AddSpectrum(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    def GetSpectrumById(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def ExportToCompressed(
        self,
        libPath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def ImportFromJCAMP(self, filePath: str) -> None: ...
    def ImportFromXML(self, filePath: str) -> None: ...

    LibraryClosed: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryClosing: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryMoved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryOpen: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibrarySaved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event

class MassSpecLibraryIndex(
    Agilent.MassSpectrometry.DataAnalysis.SpectrumIndex,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex,
):  # Class
    def __init__(
        self, library: Agilent.MassSpectrometry.DataAnalysis.ILibrary
    ) -> None: ...
    def GetSpectrumId(
        self, libraryId: int, handle: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrumId: ...
    @staticmethod
    def GetSpectrumHandle(
        spectrum: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> int: ...

class MassSpectraXUnitType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FlightTime: Agilent.MassSpectrometry.DataAnalysis.MassSpectraXUnitType = (
        ...
    )  # static # readonly
    MbyZ: Agilent.MassSpectrometry.DataAnalysis.MassSpectraXUnitType = (
        ...
    )  # static # readonly

class MassSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.Spectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MassSpectrum
    ) -> None: ...

    Description: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription  # readonly
    IsProfile: bool  # readonly
    MSActualsInfo: Agilent.MassSpectrometry.DataAnalysis.IMSActualsInfo
    SelectionIons: System.Collections.Generic.List[float]
    ShowDetailedHistoryInPlotTitles: bool  # static # readonly
    Threshold: float
    XYStore: Agilent.MassSpectrometry.DataAnalysis.IFXStore

    def UpdatePrecision(self) -> bool: ...
    def CreatePSetUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...
    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def ConstructIncludesScans(
        iTitleElement: Agilent.MassSpectrometry.DataAnalysis.ITitleElement,
        longTitleUse: bool,
        forProcessingHistory: bool,
        bgRangeIsInFgDescription: bool,
        doNotAppendNumScans: bool,
        description: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription,
    ) -> str: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    def ClearResults(self) -> bool: ...
    @overload
    @staticmethod
    def Compare(
        ms1: Agilent.MassSpectrometry.DataAnalysis.MassSpectrum,
        ms2: Agilent.MassSpectrometry.DataAnalysis.MassSpectrum,
        compoundSpectra: bool,
    ) -> int: ...
    @overload
    @staticmethod
    def Compare(
        description1: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription,
        description2: Agilent.MassSpectrometry.DataAnalysis.IMassSpecDescription,
        compoundSpectra: bool,
    ) -> int: ...
    def MatchPeaksAndGeneratedFragmentFormulas(
        self,
        pkList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
        calcResults: Agilent.MassSpectrometry.DataAnalysis.IFragmentFormulaCalculatorResults,
        colorFragIonGreen: bool,
    ) -> bool: ...
    @staticmethod
    def ReplaceXyDataWithPeakList(
        spec: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...
    def CompatibleSpectrum(
        self, candidates: List[Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...
    def CreateLongTitleWithoutCpdId(self) -> str: ...
    def FindYMaxInXRange(self, mass: float, halfRange: float) -> float: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    def CreatePSetPrecision(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum: ...
    def AssertIsCompatible(
        self, candidate: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
    ) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    @staticmethod
    def GetIonSpeciesForSpectrumTitle(
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    ) -> str: ...
    def InitializePlotPreferences(
        self, prefs: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences
    ) -> None: ...

class MassSpectrumFactory(
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrumFactory
):  # Class
    def __init__(self) -> None: ...
    def InitFromMsPeakList(
        self, pkList: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList
    ) -> None: ...
    @staticmethod
    def MakeLwMsPeakList(
        factory: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrumFactory,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILwMsPeakList: ...

class Matrix(Agilent.MassSpectrometry.DataAnalysis.IMatrix):  # Class
    @overload
    def __init__(self, rows: int, columns: int) -> None: ...
    @overload
    def __init__(self, rows: int, columns: int, value_: float) -> None: ...
    @overload
    def __init__(self, data: List[List[float]]) -> None: ...

    Columns: int  # readonly
    Determinant: float  # readonly
    FrobeniusNorm: float  # readonly
    InfinityNorm: float  # readonly
    Inverse: Agilent.MassSpectrometry.DataAnalysis.IMatrix  # readonly
    IsSquare: bool  # readonly
    IsSymmetric: bool  # readonly
    def __getitem__(self, i: int, j: int) -> float: ...
    def __setitem__(self, i: int, j: int, value_: float) -> None: ...
    Norm1: float  # readonly
    Rows: int  # readonly
    Trace: float  # readonly

    @overload
    def Multiply(self, s: float) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Multiply(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Addition(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, i0: int, i1: int, j0: int, j1: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, r: List[int], c: List[int]
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @overload
    def Submatrix(
        self, r: List[int], j0: int, j1: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Subtraction(
        self, B: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def Solve(
        self, rhs: Agilent.MassSpectrometry.DataAnalysis.IMatrix
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def UnaryMinus(self) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    @staticmethod
    def Diagonal(
        rows: int, columns: int, value_: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def GetLuDecomposition(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILuDecomposition: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def GetQrDecomposition(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IQrDecomposition: ...
    def Transpose(self) -> Agilent.MassSpectrometry.DataAnalysis.IMatrix: ...
    def ToString(self) -> str: ...

class MatrixUtil:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Inverse(a: List[List[float]]) -> List[List[float]]: ...
    @staticmethod
    def DotProduct(a: List[float], b: List[float]) -> float: ...
    @staticmethod
    def GaussJordan(a: List[List[float]], b: List[List[float]]) -> None: ...
    @staticmethod
    def ComputeEigenvalue(
        c: List[List[float]], v: List[float], nRows: int, nColumns: int
    ) -> float: ...
    @overload
    @staticmethod
    def OrthogonalProjection(a: List[float], v: List[float]) -> None: ...
    @overload
    @staticmethod
    def OrthogonalProjection(
        a: List[List[float]], v: List[float], nRows: int, nColumns: int
    ) -> None: ...

class MeasurementType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Chromatographic: Agilent.MassSpectrometry.DataAnalysis.MeasurementType = (
        ...
    )  # static # readonly
    Infusion: Agilent.MassSpectrometry.DataAnalysis.MeasurementType = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.MeasurementType = (
        ...
    )  # static # readonly

class MessageTypeAttribute(
    System.Runtime.InteropServices._Attribute, System.Attribute
):  # Class
    def __init__(
        self, type: Agilent.MassSpectrometry.DataAnalysis.UserMessageType
    ) -> None: ...

    UserMessageType: Agilent.MassSpectrometry.DataAnalysis.UserMessageType  # readonly

class MethodInfo:  # Class
    def __init__(self) -> None: ...

    RequiresMFCColumn: bool
    RequiresProteinColumn: bool
    SupportsWorkListAutomation: bool

    def WriteMethodInfo(self, infoDirPath: str) -> None: ...

class MfeBaseMessage(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NoQualifiedEicFoundInPeakWidthEstimate: (
        Agilent.MassSpectrometry.DataAnalysis.MfeBaseMessage
    ) = ...  # static # readonly
    NoQualifiedPeakFoundInPeakWidthEstimate: (
        Agilent.MassSpectrometry.DataAnalysis.MfeBaseMessage
    ) = ...  # static # readonly
    NotEnoughAtomsToSubtract: Agilent.MassSpectrometry.DataAnalysis.MfeBaseMessage = (
        ...
    )  # static # readonly
    UserInternalStandardNotFound: (
        Agilent.MassSpectrometry.DataAnalysis.MfeBaseMessage
    ) = ...  # static # readonly

class MfeEvidenceResults(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.SpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IMfeEvidenceResults,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MfeEvidenceResults
    ) -> None: ...
    @overload
    def __init__(
        self, msPeaks: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList
    ) -> None: ...

class MfeMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IMfeMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.MsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MfeMsPeak
    ) -> None: ...

    MfeMsPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    Width2dInMinutes: float

class MinMaxRange(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.RangeBase,
    Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, min: float, max: float) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MinMaxRange
    ) -> None: ...

    End: float  # readonly
    Max: float
    Min: float
    Start: float  # readonly

    def Merge(
        self, range: Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange: ...
    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def ExtendedValueString(self, withUnits: bool, nValues: int) -> str: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMinMaxRange: ...
    def ValueString(self, withUnits: bool, nValues: int) -> str: ...

class MissingAttributeException(
    System.ApplicationException,
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, whichObj: str, whichAttribute: str) -> None: ...

class Modification(Agilent.MassSpectrometry.DataAnalysis.IModification):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szLossFormula: str,
        szGainFormula: str,
        szSepcificity: str,
        dDeltaMass: float,
        dDeltaAvgMass: float,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
        bNGlycoConsensus: bool,
        consenusSequenceRegularExpression: str,
    ) -> None: ...

    ConsensusSequenceRegularExpression: str
    Migrate: bool  # readonly
    ModificationDeltaAvgMass: float
    ModificationDeltaMass: float
    ModificationGainFormula: str
    ModificationLossFormula: str
    ModificationNGlycoConsensus: bool
    ModificationName: str
    ModificationSpecificity: str
    ModificationType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.Modification: ...

class ModificationCaliper(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICaliper,
    Agilent.MassSpectrometry.DataAnalysis.AminoAcidCaliper,
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ModificationCaliper
    ) -> None: ...

class ModificationCategory(
    Agilent.MassSpectrometry.DataAnalysis.IModificationCategory
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, name: str, displayOrder: int, modificationNames: List[str]
    ) -> None: ...

    DisplayOrder: int
    ModificationCategoryName: str
    ModificationNames: List[str]

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ModificationCategory: ...

class ModificationCollection(
    Iterable[Any], Sequence[Any], System.Collections.CollectionBase, List[Any]
):  # Class
    def __init__(self) -> None: ...
    def __getitem__(
        self, Index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Modification: ...
    def __setitem__(
        self, Index: int, value_: Agilent.MassSpectrometry.DataAnalysis.Modification
    ) -> None: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ModificationCollection
    ) -> bool: ...
    def Contains(
        self, objSeqModification: Agilent.MassSpectrometry.DataAnalysis.Modification
    ) -> bool: ...
    def Add(
        self, objSeqModification: Agilent.MassSpectrometry.DataAnalysis.Modification
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def IndexOf(
        self, objSeqModification: Agilent.MassSpectrometry.DataAnalysis.Modification
    ) -> int: ...
    @overload
    def Remove(self, index: int) -> None: ...
    @overload
    def Remove(
        self, objModification: Agilent.MassSpectrometry.DataAnalysis.Modification
    ) -> None: ...
    def RemoveAtIndex(self, index: int) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ModificationCollection: ...
    def Insert(
        self,
        index: int,
        objModification: Agilent.MassSpectrometry.DataAnalysis.Modification,
    ) -> None: ...

class ModificationProfile(
    Agilent.MassSpectrometry.DataAnalysis.IModificationProfile
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        id: System.Guid,
        name: str,
        modificationNames: List[str],
        type: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    ModificationNames: List[str]
    ModificationProfileID: System.Guid
    ModificationProfileName: str
    ModificationProfileType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ModificationProfile: ...

class ModificationUnit(
    Agilent.MassSpectrometry.DataAnalysis.IModificationUnit
):  # Class
    def __init__(self, formula: str, z: int) -> None: ...

    AmmoniaAdduct: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    ElectronGain: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    ElectronLoss: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    KAdduct: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    NaAdduct: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    ProtonGain: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static
    ProtonLoss: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit  # static

    Formula: str  # readonly
    Z: int  # readonly

    @staticmethod
    def GetAdductDeductStatus(
        unit: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit,
    ) -> Agilent.MassSpectrometry.DataAnalysis.AdductDeductStatus: ...
    @staticmethod
    def GetShorthandFormula(
        unit: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit,
    ) -> str: ...
    @staticmethod
    def IsSalt(
        unit: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit,
    ) -> bool: ...

class ModificationUtils:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ModificationIsPossible(
        baseMolecule: str,
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> bool: ...
    @staticmethod
    def GetNetAtomGainsAndLosses(
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        netGains: Dict[str, int],
        netLosses: Dict[str, int],
    ) -> None: ...
    @staticmethod
    def GetModifiedMolecule(
        baseMolecule: Agilent.MassSpectrometry.DataAnalysis.Molecule,
        modificationSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...
    @staticmethod
    def GetNetZ(
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> int: ...
    @overload
    @staticmethod
    def GetIonMz(
        baseMolecule: str,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> float: ...
    @overload
    @staticmethod
    def GetIonMz(
        baseMolecule: Agilent.MassSpectrometry.DataAnalysis.Molecule,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> float: ...
    @overload
    @staticmethod
    def GetIonMz(
        baseMoleculeMass: float,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> float: ...
    @staticmethod
    def ChangesIsotopePatternSignificantly(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> bool: ...
    @staticmethod
    def FormulasAreEquivalent(f1: str, f2: str) -> bool: ...
    @staticmethod
    def ModificationsAreProtonsOnly(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> bool: ...
    @staticmethod
    def GetBaseMoleculeMass(
        ionMz: float,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> float: ...
    @staticmethod
    def GetIonMass(
        baseMoleculeMass: float,
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> float: ...
    @staticmethod
    def IsValidModificationUnit(formula: str) -> bool: ...
    @staticmethod
    def ModificationsAreElectronsOnly(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> bool: ...
    @staticmethod
    def ParseModificationUnit(
        formula: str,
        gain: Agilent.MassSpectrometry.DataAnalysis.Molecule,
        loss: Agilent.MassSpectrometry.DataAnalysis.Molecule,
    ) -> bool: ...
    @overload
    @staticmethod
    def GetModificationFormula(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> str: ...
    @overload
    @staticmethod
    def GetModificationFormula(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
        charged: str,
        neutral: str,
    ) -> None: ...
    @staticmethod
    def GetNeutralModifications(
        ionSpecies: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> Sequence[Agilent.MassSpectrometry.DataAnalysis.IModificationUnit]: ...
    @staticmethod
    def GetUnitMass(
        unit: Agilent.MassSpectrometry.DataAnalysis.IModificationUnit,
    ) -> float: ...
    @staticmethod
    def GetShorthandIonFormula(
        species: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> str: ...

class MolecularFormulaSource(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CpdDatabaseSearch: Agilent.MassSpectrometry.DataAnalysis.MolecularFormulaSource = (
        ...
    )  # static # readonly
    MolecularFormulaGeneration: (
        Agilent.MassSpectrometry.DataAnalysis.MolecularFormulaSource
    ) = ...  # static # readonly
    TargetFormula: Agilent.MassSpectrometry.DataAnalysis.MolecularFormulaSource = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.MolecularFormulaSource = (
        ...
    )  # static # readonly

class Molecule:  # Class
    def __init__(self) -> None: ...

    AtomCount: int  # readonly
    CentroidMass: float  # readonly
    DoubleBondEquivalent: float  # readonly
    ElectronCount: int  # readonly
    Elememts: List[str]  # readonly
    Formula: str  # readonly
    HillFormula: str  # readonly
    LowestIsotopeMass: float  # readonly
    LowestIsotopeNominalMass: int  # readonly
    MassOfArtificialIstopes: float  # readonly
    MonoisotopicMass: float  # readonly
    MonoisotopicNominalMass: int  # readonly
    NominalMassOfArtificialIstopes: int  # readonly
    RelativeDoubleBondEquivalent: float  # readonly

    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self, another: Agilent.MassSpectrometry.DataAnalysis.Molecule
    ) -> bool: ...
    @staticmethod
    def SpacedFormula(formula: str) -> str: ...
    def Add(
        self, another: Agilent.MassSpectrometry.DataAnalysis.Molecule, amount: int
    ) -> None: ...
    @staticmethod
    def CompactFormula(formattedFormula: str) -> str: ...
    def GetIsotopeCharacter(self) -> IsotopeCharacteristics: ...
    @staticmethod
    def ParseComplex(
        formula: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...
    def GetAtomCountOf(self, element: str) -> int: ...
    def IsSubsetOf(
        self, potentialParent: Agilent.MassSpectrometry.DataAnalysis.Molecule
    ) -> bool: ...
    def AddElements(self, symbol: str, amount: int) -> None: ...
    def ContainsArtificalElements(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def Parse(formula: str) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...
    def GetChemicallyEquivalentNaturalMolecule(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Molecule: ...

class MouseTool(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Annotation: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    DeltaMassCaliper: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    ManualIntegration: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    ManualPeakChange: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    PeakSelection: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    RangeSelection: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly
    WalkSpectrum: Agilent.MassSpectrometry.DataAnalysis.MouseTool = (
        ...
    )  # static # readonly

class MrmTransitionInfo:  # Class
    def __init__(self) -> None: ...

    CollisionEnergy: float  # readonly
    CompoundName: str  # readonly
    DeltaEmv: float  # readonly
    Dwell: float  # readonly
    FragmentorVoltage: float  # readonly
    IsPrimary: bool  # readonly
    PrecursorMz: float  # readonly
    ProductMz: float  # readonly
    ScanSegment: int  # readonly
    TimeSegment: int  # readonly

class MsChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.ChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IMsChromPeak,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ChromPeak
    ) -> None: ...

    MSChromPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly

class MsExImAdapter:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IFXData
    ) -> None: ...

    MassSpectrumFactory: (
        Agilent.MassSpectrometry.DataAnalysis.IMassSpectrumFactory
    )  # readonly

    def ItemsInXmlFile(self, xmlFilePath: str) -> int: ...
    @overload
    def WriteToXml(self, xmlFilePath: str) -> None: ...
    @overload
    def WriteToXml(self, writer: System.Xml.XmlWriter) -> None: ...
    @overload
    @staticmethod
    def XmlExportMsPeakList(
        W: System.Xml.XmlWriter,
        pkList: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList,
    ) -> None: ...
    @overload
    @staticmethod
    def XmlExportMsPeakList(
        W: System.Xml.XmlWriter,
        pkList: Agilent.MassSpectrometry.DataAnalysis.IMsPeakList,
        miningAlgo: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm,
    ) -> None: ...
    @overload
    def ReadFromXml(self, xmlFilePath: str, spectrumIndex: int) -> None: ...
    @overload
    def ReadFromXml(self, specNode: System.Xml.XmlNode) -> None: ...

class MsFileActions:  # Class
    @staticmethod
    def TestReadinessForAction(
        dataFilePath: str,
        action: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationActions,
        message: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MsFileModificationReadiness: ...
    @staticmethod
    def MoveIrmMassCalToBackup(
        dataFilePath: str,
        logWriter: Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter,
    ) -> bool: ...
    @staticmethod
    def RemoveProfileSpectra(
        dataFilePath: str,
        logWriter: Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter,
    ) -> bool: ...
    @staticmethod
    def GetNewAcqDataTempFilePath(dataFilePath: str, fileName: str) -> str: ...
    @staticmethod
    def RemoveBackupFiles(
        dataFilePath: str,
        logWriter: Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter,
    ) -> bool: ...
    @staticmethod
    def RestoreOriginalFiles(
        dataFilePath: str,
        logWriter: Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter,
    ) -> bool: ...
    @staticmethod
    def MoveUserMassCalToBackup(
        dataFilePath: str,
        logWriter: Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter,
    ) -> bool: ...
    @staticmethod
    def GetLogWriter(
        dataFilePath: str, logFileName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IFileActionLogWriter: ...

class MsFileModificationActions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    RemoveBackups: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationActions = (
        ...
    )  # static # readonly
    RemoveProfile: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationActions = (
        ...
    )  # static # readonly
    RestoreOriginal: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationActions = (
        ...
    )  # static # readonly

class MsFileModificationReadiness(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NoActionNeeded: (
        Agilent.MassSpectrometry.DataAnalysis.MsFileModificationReadiness
    ) = ...  # static # readonly
    NotPrepared: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationReadiness = (
        ...
    )  # static # readonly
    ReadyForAction: (
        Agilent.MassSpectrometry.DataAnalysis.MsFileModificationReadiness
    ) = ...  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.MsFileModificationReadiness = (
        ...
    )  # static # readonly

class MsMSIntBanned:  # Struct
    banend: int
    banstart: int

class MsMath2D(Agilent.MassSpectrometry.DataAnalysis.IMsMath2D):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def SetToRiDeconvolutionDefaults(
        pset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
        msLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel,
    ) -> None: ...

class MsMsChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.ChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
    Agilent.MassSpectrometry.DataAnalysis.IMsMsChromPeak,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MsMsChromPeak
    ) -> None: ...

    MSMSChromPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class MsMsClairvoyance:  # Struct
    filter_width: int
    hi_bl_at_apex: float
    hi_correctedht: float
    hi_endingtime: float
    hi_front_ht_pct: float
    hi_front_sigma: float
    hi_interpolated_width_at_half_height: float
    hi_mi_end: float
    hi_mi_start: float
    hi_rear_ht_pct: float
    hi_rear_sigma: float
    hi_startingtime: float
    lo_bl_at_apex: float
    lo_correctedht: float
    lo_endingtime: float
    lo_front_ht_pct: float
    lo_front_sigma: float
    lo_interpolated_width_at_half_height: float
    lo_mi_end: float
    lo_mi_start: float
    lo_rear_ht_pct: float
    lo_rear_sigma: float
    lo_startingtime: float

class MsMsExtractUtils:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ExtractMsMsSpectrum(
        averageAcrossCe: bool,
        z: int,
        mz: float,
        scanInfoArray: List[Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo],
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        storageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        partialAlgoInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo,
        msMsSpectrumList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
        ],
    ) -> None: ...
    @staticmethod
    def AssignIonSpeciesToProductIonSpectra(
        msMsSpectrumList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
        ],
        msPeakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    ) -> None: ...
    @staticmethod
    def GetDdeMsMsScanInfoArrays(
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        ddeScanRecordCollection: Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection,
        startRT: float,
        endRT: float,
        precursorMzList: List[float],
        tolUnit: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm,
        tolPpm: float,
        tolMz: float,
    ) -> List[List[Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo]]: ...
    @staticmethod
    def ExtractMsMsSpectra(
        averageAcrossCe: bool,
        zArray: List[int],
        mzArray: List[float],
        scanInfoArrays: List[List[Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo]],
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        storageType: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType,
        partialAlgoInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo,
        msMsSpectrumList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
        ],
    ) -> None: ...
    @staticmethod
    def DeisotopeSpectra(
        spectrumList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum
        ],
        peakFinder: Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
        pfParms: Agilent.MassSpectrometry.DataAnalysis.FindPeaksMSParameters,
    ) -> None: ...
    @staticmethod
    def GetAllMsMsScanInfoArrays(
        dataAccess: Agilent.MassSpectrometry.DataAnalysis.IDataAccess,
        prodIonScanRecordCollection: Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecordCollection,
        startRT: float,
        endRT: float,
        precursorMzList: List[float],
        tolUnit: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm,
        tolPpm: float,
        tolMz: float,
    ) -> List[List[Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo]]: ...

class MsMsIntBase(
    Agilent.MassSpectrometry.DataAnalysis.FindPeaksChromBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class MsMsIntJudgement(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    customized_inspect: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement = (
        ...
    )  # static # readonly
    customized_kept: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement = (
        ...
    )  # static # readonly
    discarded: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement = (
        ...
    )  # static # readonly
    inspect: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement = (
        ...
    )  # static # readonly
    kept: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement = (
        ...
    )  # static # readonly

class MsMsIntPeak:  # Struct
    afterh2: int
    backarea: float
    base1end: int
    base1start: int
    base2end: int
    base2start: int
    baseline_estimate: float
    beforeh2: int
    bl_quality: int
    correctedht: float
    earliestht: float
    earliestloc: int
    earliestsliceoffset: float
    endingtime: float
    fitintercept: float
    fitslope: float
    fitxsquared: float
    front_term: str
    frontarea: float
    interpolated_width_at_half_height: float
    judgement: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement
    latestht: float
    latestloc: int
    latestsliceoffset: float
    maxht: float
    maxloc: int
    meas_error: float
    merged: int
    mergehtpct: float
    negarea: float
    nextpk: int
    posarea: float
    previouspk: int
    qualitybits: int
    rear_term: str
    retentiontime: float
    rt_offset: float
    signal_offset: float
    soiled: bool
    spikehtpct: float
    spiky: bool
    startingtime: float
    totalpts: int

class MsMsIntPlayground(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class MsMsIntQqQuantitation:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Miniloc(A: List[int]) -> int: ...
    @staticmethod
    def Minival(A: List[int]) -> int: ...
    def MsMsBase(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    @staticmethod
    def Maxival(A: List[int]) -> int: ...
    def InitClaireData(self, CommaDelimitedString: str) -> None: ...
    def ClaireDataString(self, CommaDelimitedString: str) -> None: ...
    @staticmethod
    def Minval(A: List[float]) -> float: ...
    def Fit_Chrom(
        self,
        cregion: List[
            Agilent.MassSpectrometry.DataAnalysis.MsMsIntQqQuantitation.Statistics
        ],
        avg_baseline: float,
        bl_total_count: int,
        bl_reg_index: int,
        sd_from_baseline: float,
        maxAmp: float,
        hist_offset: int,
    ) -> None: ...
    @staticmethod
    def Maxval(A: List[float]) -> float: ...
    @staticmethod
    def Minloc(A: List[float]) -> int: ...
    def MsMsOneStop(
        self,
        Q3AData: System.Array[float],
        Q3BData: System.Array[float],
        Q3ALimits: List[float],
        Q3BLimits: List[float],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3AFileName: str,
        Q3BFileName: str,
        Q3Z: Agilent.MassSpectrometry.DataAnalysis.MsMsClairvoyance,
    ) -> None: ...
    def Playland(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        tmSolventVentStart: float,
        tmSolventVentEnd: float,
        bSim: bool,
        bScan: bool,
    ) -> None: ...
    def MsMsClaire(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        Q3X: Agilent.MassSpectrometry.DataAnalysis.MsMsClairvoyance,
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    @staticmethod
    def Maxloc(A: List[float]) -> int: ...
    def MsMsInt(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    def Fit_Hist(
        self,
        sorted: List[float],
        b_QQQ_const_bl: bool,
        linear_start: float,
        linear_end: float,
        linear_range: float,
        avg_baseline: float,
        bl_total_count: int,
        bl_reg_index: int,
        sd_from_baseline: float,
        maxAmp: float,
        hist_offset: int,
    ) -> None: ...
    def GCMsBase(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        tmSolventVentStart: float,
        tmSolventVentEnd: float,
        bSim: bool,
        bScan: bool,
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    def GcMsInt(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        tmSolventVentStart: float,
        tmSolventVentEnd: float,
        bSim: bool,
        bScan: bool,
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    @staticmethod
    def Maxiloc(A: List[int]) -> int: ...
    def NewInitClaireData(
        self,
        CommaDelimitedString: str,
        ClaireParameters: Agilent.MassSpectrometry.DataAnalysis.MsMsClairvoyance,
    ) -> None: ...
    def DiscreditedVestigialInt(
        self,
        Q3Data: System.Array[float],
        Q3peaklist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntPeak],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3FileName: str,
        Q3Spikelist: List[Agilent.MassSpectrometry.DataAnalysis.MsMsIntSpike],
        error_return: Agilent.MassSpectrometry.DataAnalysis.SordidError,
    ) -> None: ...
    def NewMsMsOneStop(
        self,
        Q3AData: System.Array[float],
        Q3BData: System.Array[float],
        Q3ALimits: List[float],
        Q3BLimits: List[float],
        Q3summary: Agilent.MassSpectrometry.DataAnalysis.MsMsIntSummary,
        Q3AFileName: str,
        Q3BFileName: str,
        Q3Z: Agilent.MassSpectrometry.DataAnalysis.MsMsClairvoyance,
        wrongness: int,
    ) -> None: ...

    # Nested Types

    class FitEquation:  # Struct
        const_coef: float
        end_index: int
        rsquared: float
        start_index: int
        x_coef: float
        xsquared_coef: float

    class Mergedpkstruct:  # Struct
        mapexht: float
        mapexloc: int
        mpeaknumber: int
        mtermht: float
        mtermloc: int
        mvalht: float
        mvaloc: int

    class ParablSeg:  # Struct
        adjacent_peaks: int
        endamp: float
        endloc: int
        front_bl_index: int
        maxamp: float
        maxloc: int
        minamp: float
        minloc: int
        near_front_bl: int
        near_rear_bl: int
        rear_bl_index: int
        startamp: float
        startloc: int

    class Statistics:  # Struct
        count: int
        curt: float
        fitstd: float
        intercept: float
        maximum: float
        maxloc: int
        mean: float
        minimum: float
        minloc: int
        numberofvalues: int
        pctflat: float
        pctpeak: float
        pctsd: float
        rr: float
        segBegin: int
        segEnd: int
        skew: float
        slope: float
        stddev: float

    class ValleyStruct:  # Struct
        amp: float
        loc: int
        peak1: int
        peak2: int
        rt: float

    class contigbl:  # Struct
        end_rgn: int
        length: int
        start: int
        start_rgn: int

class MsMsIntSpike:  # Struct
    corrht: float
    maxht: float
    maxloc: int

class MsMsIntSummary:  # Struct
    bl: float
    discarded: int
    filterwidth: int
    inspect: int
    kept: int
    merges: int
    messages: List[str]
    passes: int
    peakcount: int
    sd: float
    seglength: int
    spike_excess_height: float
    spikes: int

class MsMsIntTemplate:  # Struct
    afterh2: int
    backarea: float
    base1end: int
    base1start: int
    base2end: int
    base2start: int
    baseline_estimate: float
    beforeh2: int
    bl_quality: int
    claireintercept: float
    claireslope: float
    correctedht: float
    earliestht: float
    earliestloc: int
    earliestsliceoffset: float
    endingtime: float
    filter_width: int
    fitintercept: float
    fitslope: float
    front_ht_pct: float
    front_sigma: float
    front_term: str
    frontarea: float
    interpolated_width_at_half_height: float
    judgement: Agilent.MassSpectrometry.DataAnalysis.MsMsIntJudgement
    latestht: float
    latestloc: int
    latestsliceoffset: float
    maxht: float
    maxloc: int
    meas_error: float
    merged: int
    mergehtpct: float
    negarea: float
    nextpk: int
    posarea: float
    previouspk: int
    qualitybits: int
    qualityfactor_baseline: int
    qualityfactor_shape: int
    qualityfactor_size: int
    rear_hr_pct: float
    rear_sigma: float
    rear_term: str
    retentiontime: float
    rt_offset: float
    signal_offset: float
    soiled: bool
    spikehtpct: float
    spiky: bool
    startingtime: float
    totalpts: int

class MsMsScanInfo(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IMsMsScanInfo,
):  # Class
    @overload
    def __init__(self, id: int, ce: float, rt: float) -> None: ...
    @overload
    def __init__(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class MsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.PeakBase,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MsPeak
    ) -> None: ...

    MSPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly

class MsPeakInfo(
    Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IMsPeakInfo
    ) -> None: ...

class MsPeakList(
    System.Runtime.Serialization.ISerializable,
    Generic[T],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.PeakListBase[T],
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IItemHighlighting,
    Iterable[Any],
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.ISortByAttribute,
    Agilent.MassSpectrometry.DataAnalysis.IPeakHiding,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeakList,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.ICloneable,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.MsPeakList
    ) -> None: ...

    DisplayThreshold: float  # readonly

    def VComputeCrossPeakAttributes(self) -> None: ...

class MsScanHdrField(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AbundanceLimit: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ActualsOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    BaseAbund: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    BaseMsBin: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    BasePeakMz: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    BasePeakValue: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ChargeState: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ChromScaleFactor: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    CycleNumber: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DDMzOfInterest: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DdParamsStart: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DdScanId1: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DdScanId2: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DdScanId3: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DefaultCalId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DetectorGain: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DriftBin: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    DwellTime: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    FirstNonzeroMsBin: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    FragmentationMode: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Fragmentor: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    FrameId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    IonMode: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    IsCollisionEnergyDynamic: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    IsFragmentorDynamic: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    LastNonzeroMsBin: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MassCalOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MaxX: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MaxY: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MeasuredMassRangeMax: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MeasuredMassRangeMin: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MeasuredNoise: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MinX: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MinY: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakMaxX: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakMinX: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakPointCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsPeakSpecFmtId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfFullByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfNzPointCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfPointCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MsProfSpecFmtId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MzIsolationWidth: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    MzOfInterest: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    NumActualsPerScan: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    OneDataRangeDeltaYOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Padding: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    PointCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ScanId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ScanMethodNumber: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ScanRecordStart: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ScanTime: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    SpectrumFormatID: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    SpectrumOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    SpectrumParamsStart: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Status: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    TfsBasePeakAbund: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    TfsBasePeakMz: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Threshold: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Tic: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = ...  # static # readonly
    TimeSegmentId: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    UncompressedByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    XSamplingPeriod: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    XSpecificByteCount: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    XSpecificOffset: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly
    XSpecificStart: Agilent.MassSpectrometry.DataAnalysis.MsScanHdrField = (
        ...
    )  # static # readonly

class MsScanSchemaReader(
    Agilent.MassSpectrometry.DataAnalysis.IMsScanSchemaReader,
    Agilent.MassSpectrometry.DataAnalysis.SchemaReaderBase,
    System.IDisposable,
):  # Class
    def __init__(self) -> None: ...

class MsUtilities:  # Class
    @overload
    def __init__(
        self,
        psetChargeStateMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
    ) -> None: ...
    @overload
    def __init__(
        self,
        psetChargeStateMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetChargeStateMsMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
        psetTofPeakFinder: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
    ) -> None: ...

    PsetChargeStateMs: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    PsetChargeStateMsMs: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )

    def SpecialElementLimitFormula(
        self, elementLimits: List[Agilent.MassSpectrometry.DataAnalysis.IElementLimit]
    ) -> str: ...
    def ClosestExistingPeak(
        self,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
        mzOfInterest: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsPeak: ...
    def MzMatchTolerance(
        self,
        mzOfInterest: float,
        algorithm: Agilent.MassSpectrometry.DataAnalysis.CpdMiningAlgorithm,
    ) -> float: ...
    def GetClusterForMass(
        self,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        peakMz: float,
        peakHeight: float,
        speciesString: str,
        assumedCpdMass: float,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeak
    ]: ...
    def PeakListToSpectralPeakList(
        self,
        pkList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMsPeak
        ],
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak]: ...
    def ClosestExistingOrNewPeak(
        self,
        mzOfInterest: float,
        ms: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        toleranceDa: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IMsPeak: ...
    def GetClusterForFormula(
        self,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        peakMz: float,
        peakHeight: float,
        speciesString: str,
        assumedCpdFormula: str,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeak
    ]: ...
    def GetClusterPeaks(
        self,
        spectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
        peakMz: float,
        peakHeight: float,
        peakChargeState: int,
        specialElementFormula: str,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeak
    ]: ...
    @staticmethod
    def GCEI_MFGOptions(
        msSpectrum: Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    ) -> bool: ...
    @staticmethod
    def FormulaHasSpecialElements(formula: str) -> bool: ...
    @staticmethod
    def GetSupportedIonizationMode(
        ionMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IonizationMode: ...
    @staticmethod
    def MassMatchProbability(
        measured: float,
        reference: float,
        msLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel,
        psetIdScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
    ) -> float: ...

class MsUtils:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ComputeColecutionScore(
        parentXValues: List[float],
        parentYValues: List[float],
        childXValues: List[float],
        childYValues: List[float],
        cpdStartTime: float,
        cpdEndTime: float,
    ) -> float: ...
    @staticmethod
    def GetInterpolatedYvalues(
        parentXValues: List[float],
        parentYValues: List[float],
        childXValues: List[float],
        childYValues: List[float],
        cpdStartTime: float,
        cpdEndTime: float,
        iFirstPoint: int,
        iLastPoint: int,
        outYValues: List[float],
    ) -> None: ...
    @staticmethod
    def CalculateSimularityCurve(
        parentXValues: List[float],
        parentYValues: List[float],
        childXValues: List[float],
        childYValues: List[float],
        cpdStartTime: float,
        cpdEndTime: float,
        threshold: float,
        simCurveXValues: List[float],
        simCurveYValues: List[float],
    ) -> None: ...

class MultipleLibrarySearchType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.MultipleLibrarySearchType = (
        ...
    )  # static # readonly
    StopWhenFound: Agilent.MassSpectrometry.DataAnalysis.MultipleLibrarySearchType = (
        ...
    )  # static # readonly

class MzAccuracyFunction(
    Agilent.MassSpectrometry.DataAnalysis.IMzAccuracyFunction
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        normalCoefficients: List[float],
        minMzOfWellCalibratedRegion: float,
        accuracyAt0: float,
    ) -> None: ...
    def BinaryWrite(self, writer: System.IO.BinaryWriter) -> None: ...
    def GetMassAccuracy(self, mass: float, z: int) -> float: ...
    def GetMzAccuracy(self, mz: float) -> float: ...
    def BinaryRead(self, reader: System.IO.BinaryReader) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.MzAccuracyFunction: ...

class MzDataExportParameter(
    Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter
    ) -> None: ...

    FileName: str
    MsChargeStateParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )
    MsMsChargeStateParameters: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    )
    MsMsPeakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    MsPeakFilters: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    MzDataExportOptions: Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions
    TofPeakFindParameters: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder
    UseDefaultFileName: bool

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IMzDataExportParameter: ...

class MzDeltaUnits(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AMU: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits = ...  # static # readonly
    PPM: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits = ...  # static # readonly
    Percent: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits = (
        ...
    )  # static # readonly

class MzExpansionMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AsymmetricMz: Agilent.MassSpectrometry.DataAnalysis.MzExpansionMode = (
        ...
    )  # static # readonly
    SymmetricMz: Agilent.MassSpectrometry.DataAnalysis.MzExpansionMode = (
        ...
    )  # static # readonly
    SymmetricPpm: Agilent.MassSpectrometry.DataAnalysis.MzExpansionMode = (
        ...
    )  # static # readonly

class MzOperatingRange(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ChromatogramRange: Agilent.MassSpectrometry.DataAnalysis.MzOperatingRange = (
        ...
    )  # static # readonly
    SpecificRange: Agilent.MassSpectrometry.DataAnalysis.MzOperatingRange = (
        ...
    )  # static # readonly

class NitrogenRule(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EvenElectron: Agilent.MassSpectrometry.DataAnalysis.NitrogenRule = (
        ...
    )  # static # readonly
    OddElectron: Agilent.MassSpectrometry.DataAnalysis.NitrogenRule = (
        ...
    )  # static # readonly

class NoiseResult(
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.INoiseResult,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.NoiseResult
    ) -> None: ...

    NoiseMultiplier: float
    NoiseRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NoiseType: Agilent.MassSpectrometry.DataAnalysis.NoiseType
    NoiseValue: float
    SignalType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute

    def ToString(self) -> str: ...
    def WriteXML(self, xmlWriter: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.INoiseResult: ...

class NoiseType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    ASTM: Agilent.MassSpectrometry.DataAnalysis.NoiseType = ...  # static # readonly
    AutoRMS: Agilent.MassSpectrometry.DataAnalysis.NoiseType = ...  # static # readonly
    PeakToPeak: Agilent.MassSpectrometry.DataAnalysis.NoiseType = (
        ...
    )  # static # readonly
    PeakToPeakDrift: Agilent.MassSpectrometry.DataAnalysis.NoiseType = (
        ...
    )  # static # readonly
    RMS: Agilent.MassSpectrometry.DataAnalysis.NoiseType = ...  # static # readonly

class NormalizationInfo(
    Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, Info: Agilent.MassSpectrometry.DataAnalysis.NormalizationInfo
    ) -> None: ...

    NormalizationMode: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes
    ScaleFactor: float
    XNormalizationRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    YMax: float
    YOffset: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.INormalizationInfo: ...

class NormalizationModes(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes = (
        ...
    )  # static # readonly
    Each: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes = (
        ...
    )  # static # readonly

class NotifyProgressDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        percentComplete: int,
        message: str,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        percentComplete: int,
        message: str,
    ) -> None: ...

class ObjMath2D(Agilent.MassSpectrometry.DataAnalysis.IObjectMath2D):  # Class
    def __init__(self) -> None: ...
    def FillMissingDataPoints(
        self, dataObject: Agilent.MassSpectrometry.DataAnalysis.IFXData
    ) -> None: ...

class ObservedIonType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ConfirmedFragIon_AllIons: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType = (
        ...
    )  # static # readonly
    FragmentIon: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType = (
        ...
    )  # static # readonly
    MolecularIon: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType = (
        ...
    )  # static # readonly
    TargetedFragIon_AllIons: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.ObservedIonType = (
        ...
    )  # static # readonly

class Orientation(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Rotate: Agilent.MassSpectrometry.DataAnalysis.Orientation = ...  # static # readonly
    Rotate_90: Agilent.MassSpectrometry.DataAnalysis.Orientation = (
        ...
    )  # static # readonly
    Rotate_90N: Agilent.MassSpectrometry.DataAnalysis.Orientation = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.Orientation = (
        ...
    )  # static # readonly

class OriginalMsMsInt(
    Agilent.MassSpectrometry.DataAnalysis.MsMsIntBase,
    Agilent.MassSpectrometry.DataAnalysis.IFindPeaks,
):  # Class
    def __init__(self) -> None: ...

class PCDLibrary(
    Agilent.MassSpectrometry.DataAnalysis.ILibrary,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.INistLibrarySearch,
):  # Class
    Connection: System.Data.Common.DbConnection  # readonly
    DataSet: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet  # readonly
    Index: Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex  # readonly
    IsAccurateMass: bool  # readonly
    IsDirty: bool  # readonly
    IsOpen: bool  # readonly
    IsReadOnly: bool  # readonly
    LibraryDirectory: str  # readonly
    LibraryID: int  # readonly
    LibraryName: str  # readonly
    LibraryPath: str  # readonly
    NumberOfCompounds: int  # readonly
    NumberOfSpectra: int  # readonly
    StorageFormat: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat  # readonly

    def ExportToXML(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def ImportFromBinary(self, filePath: str) -> None: ...
    def GetSpectrumProperty(
        self, compoundId: int, spectrumId: int, columnName: str
    ) -> Any: ...
    def FindCompoundByCASNumber(
        self, casNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    def OpenLibrary(self, path: str, readOnly: bool) -> None: ...
    @overload
    def GetSpectra(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def GetSpectra(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    def ExportToBinary(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetSpectrumOverlap(
        self, mzValues: List[float], abundances: List[float]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...
    def GetLibraryProperty(self, columnName: str) -> Any: ...
    def GetSpectrumIds(self, compoundId: int) -> List[int]: ...
    def GetSpectrumTitle(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> str: ...
    def GetCompoundIdFromIndex(self, index: int) -> int: ...
    def CreateSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def FindCompoundByName(
        self, name: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    @overload
    def SelectSpectra(
        self, spectrumFilter: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow]: ...
    @overload
    def SelectSpectra(
        self, compoundFilter: str, spectrumFilter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def GetCompounds(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def CloseLibrary(self) -> None: ...
    def SelectCompounds(
        self, filter: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet: ...
    def DoesColumnExist(self, tableName: str, columnName: str) -> bool: ...
    def FindCompoundsByCASNumber(
        self, casNumber: str
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow]: ...
    def SaveLibrary(self) -> None: ...
    def DeleteCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> None: ...
    def GetCompoundInfo(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryCompoundInfo: ...
    def DeleteSpectrum(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.SpectrumRowId
    ) -> None: ...
    def AddCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow,
    ) -> None: ...
    def GetCompoundProperty(self, compoundId: int, columnName: str) -> Any: ...
    def SaveLibraryAs(
        self,
        fileName: str,
        format: Agilent.MassSpectrometry.DataAnalysis.MSLibraryFormat,
    ) -> None: ...
    def CreateCompound(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.CompoundRowId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.CompoundRow: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    @overload
    def ExportToJCAMP(
        self,
        filePath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def GetCompoundReferenceNumber(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Any: ...
    def GetSpectrum(
        self,
        entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId,
        mzValues: List[float],
        abundances: List[float],
    ) -> None: ...
    def AddSpectrum(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...
    def GetSpectrumById(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow: ...
    def ExportToCompressed(
        self,
        libPath: str,
        spectrumRows: List[
            Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow
        ],
    ) -> None: ...
    def ImportFromJCAMP(self, filePath: str) -> None: ...
    def ImportFromXML(self, filePath: str) -> None: ...

    LibraryClosed: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryClosing: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryMoved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibraryOpen: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event
    LibrarySaved: Agilent.MassSpectrometry.DataAnalysis.LibraryEventHandler  # Event

class PDFPrintUtils:  # Class
    AdobeReaderExeName: str  # static

    @staticmethod
    def KillAdobe() -> None: ...
    @staticmethod
    def IsAdobeReaderInstalled() -> bool: ...
    @staticmethod
    def SendReportToPrinter(pdfFileName: str, printerName: str) -> None: ...

class PSetAlignmentInfo(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetAlignmentInfo
    ) -> None: ...

    KeyMassWindowDa: str  # static # readonly
    KeyMassWindowPpm: str  # static # readonly
    KeyRTMinutes: str  # static # readonly
    KeyRTPercent: str  # static # readonly

    MassWindowDa: float
    MassWindowPpm: float
    RTMinutes: float
    RTPercent: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAlignmentInfo: ...

class PSetAnalysisReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetAnalysisReportSettings,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetAnalysisReportSettings
    ) -> None: ...

    KeyShowChromPeakTables: str  # static # readonly
    KeyShowCpdChromPeakTables: str  # static # readonly
    KeyShowCpdChromatograms: str  # static # readonly
    KeyShowCpdSpectra: str  # static # readonly
    KeyShowCpdSpectraPeakTables: str  # static # readonly
    KeyShowDifferenceSpectrum: str  # static # readonly
    KeyShowLibrarySpectrum: str  # static # readonly
    KeyShowSignalToNoiseResultTables: str  # static # readonly
    KeyShowSpecPeakTables: str  # static # readonly
    KeyShowUserChromatograms: str  # static # readonly
    KeyShowUserSpectra: str  # static # readonly

    ShowChromPeakTables: bool
    ShowCpdChromPeakTables: bool
    ShowCpdChromatograms: bool
    ShowCpdSpectra: bool
    ShowCpdSpectraPeakTables: bool
    ShowDifferenceSpectrum: bool
    ShowLibrarySpectrum: bool
    ShowSignalToNoiseResultTables: bool
    ShowSpecPeakTables: bool
    ShowUserChromatograms: bool
    ShowUserSpectra: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAnalysisReportSettings
    ) -> bool: ...
    def PresetStandardSelections(self) -> None: ...
    def PresetDetailedSelections(self) -> None: ...
    def PresetSimpleSelections(self) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAnalysisReportSettings: ...

class PSetAvailableReportTemplates(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetAvailableReportTemplates
    ) -> None: ...

    KeyPath: str  # static # readonly

    CountTemplates: int  # readonly
    Path: str

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> bool: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates
    ) -> bool: ...
    def CheckReportTemplate(self, templateName: str) -> bool: ...
    def DoesFolderContainTemplates(self, folderPath: str) -> bool: ...
    def GetRDLAcqMethodReportTemplate(self) -> System.Collections.Generic.List[str]: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetReportTemplate(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition: ...

class PSetBaselinePeak(
    Agilent.MassSpectrometry.DataAnalysis.IPSetBaselinePeak,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetBaselinePeak
    ) -> None: ...

    KeyDrawBaseline: str  # static # readonly
    KeyFillPeaks: str  # static # readonly
    KeyIdentifyBaselineCalc: str  # static # readonly
    KeyIdentifyPeakStartEnd: str  # static # readonly

    DrawBaseline: bool
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetBaselinePeak
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetBaselinePeak: ...

class PSetBatchExtSelectAlgorithmType(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetBatchExtSelectAlgorithmType,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetBatchExtSelectAlgorithmType,
    ) -> None: ...

    KeyBatchExtSelectAlgorithmType: str  # static # readonly

    SelectedAlgorithm: Agilent.MassSpectrometry.DataAnalysis.BatchExtAlgorithmType

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetBatchExtSelectAlgorithmType,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetBatchExtSelectAlgorithmType: ...

class PSetChargeStateAssignment(
    Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChargeStateAssignment
    ) -> None: ...

    KeyAbsoluteTolerance: str  # static # readonly
    KeyDeisotope: str  # static # readonly
    KeyIsotopeModel: str  # static # readonly
    KeyLimitMaxChargeState: str  # static # readonly
    KeyMaximumChargeState: str  # static # readonly
    KeyMinimumChargeState: str  # static # readonly
    KeyRecomputeOnChangedPeakList: str  # static # readonly
    KeyRelativeTolerance: str  # static # readonly
    KeySumAbundances: str  # static # readonly
    KeyTreatUnknownAsSinglyCharged: str  # static # readonly

    AbsoluteTolerance: float
    Deisotope: bool
    IsotopeModel: Agilent.MassSpectrometry.DataAnalysis.IsotopeModelType
    LimitMaxChargeState: bool
    MaximumChargeState: int
    MinimumChargeState: int
    RecomputeOnChangedPeakList: bool
    RelativeTolerance: float
    RestrictToC13: bool
    SumDeisotopedAbundances: bool
    TreatUnknownAsSinglyCharged: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChargeStateAssignment: ...

class PSetChemStationIntegratorSettings(
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetChemStationIntegratorSettings,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetChemStationIntegratorSettings,
    ) -> None: ...

    KeyBaselineCorrection: str  # static # readonly
    KeyFrontSkimHeightRatio: str  # static # readonly
    KeyInitialEventsTable: str  # static # readonly
    KeyPeakToValleyRatio: str  # static # readonly
    KeySkimValleyRatio: str  # static # readonly
    KeyTailSkimHeightRatio: str  # static # readonly
    KeyTangentSkimMode: str  # static # readonly
    KeyTimedEventsTable: str  # static # readonly

    BaselineCorrection: Agilent.MassSpectrometry.DataAnalysis.BaselineCorrectionType
    FrontSkimHeightRatio: float
    PeakToValleyRatio: float
    SkimValleyRatio: float
    SupportedTimedEvents: List[
        Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    ]  # readonly
    TailSkimHeightRatio: float
    TangentSkimMode: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetChemStationIntegratorSettings,
    ) -> bool: ...
    def GetNextEventTime(self) -> float: ...
    def SetTimedEventsTable(
        self, eventTable: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def SetInitialEventsTable(
        self, eventTable: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def GetTimedEventsTable(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChemStationIntegratorSettings: ...
    def AddNewTimedEvent(
        self,
        psetIntegrationEvent: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent,
    ) -> int: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetInitialEventsTable(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...

class PSetChromAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetChromAnnotation,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChromAnnotation
    ) -> None: ...

    KeyDrawBaseline: str  # static # readonly
    KeyFillPeaks: str  # static # readonly
    KeyIdentifyBaselineCalc: str  # static # readonly
    KeyIdentifyPeakStartEnd: str  # static # readonly
    KeyLinePreference: str  # static # readonly
    KeyPeakFillStatus: str  # static # readonly
    KeyPeakFillStyle: str  # static # readonly
    KeyPeakHighlightAnnotation: str  # static # readonly
    KeyShowNoiseRegionsInBold: str  # static # readonly
    KeyShowSecondTitle: str  # static # readonly
    KeyTimeSegmentAnnotation: str  # static # readonly

    DrawBaseline: bool
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool
    LinePreferenceType: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    PeakFillByStatus: bool
    PeakFillStyle: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle
    PeakHighlightAnnotation: (
        Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations
    )
    ShowNoiseRegionsInBold: bool
    ShowSecondTitle: bool
    TimeSegmentAnnotation: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromAnnotation
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromAnnotation: ...

class PSetChromDeconvolutionCompound(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetChromDeconvolutionCompound,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetChromDeconvolutionCompound,
    ) -> None: ...

    KeyAbsoluteArea: str  # static # readonly
    KeyEnableAbsoluteArea: str  # static # readonly
    KeyEnableMinimumAbsoluteHeight: str  # static # readonly
    KeyEnableMinimumPercentHeight: str  # static # readonly
    KeyEnableRelativeArea: str  # static # readonly
    KeyMinimumAbsoluteHeight: str  # static # readonly
    KeyMinimumPercentHeight: str  # static # readonly
    KeyRelativeArea: str  # static # readonly

    AbsoluteArea: float
    EnableAbsoluteArea: bool
    EnableMinimumAbsoluteHeight: bool
    EnableMinimumPercentHeight: bool
    EnableRelativeArea: bool
    MinimumAbsoluteHeight: float
    MinimumPercentHeight: float
    RelativeArea: float

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromDeconvolutionCompound,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromDeconvolutionCompound: ...

class PSetChromDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetChromDefinitions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChromDefinitions
    ) -> None: ...
    def __getitem__(
        self, usageKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetChromDefinitions
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def GetPSetExtractChrom(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def SetPSetExtractChrom(
        self,
        orderIndex: int,
        psetExtractChrom: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetChromDefinitions: ...
    def SetToDefault(self) -> None: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self, extractPSet: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> str: ...

class PSetChromPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChromPeakFilter
    ) -> None: ...

    KeyDisplayThreshold: str  # static # readonly
    KeyInterimSumObjectCount: str  # static # readonly
    KeyMaximumPeakCount: str  # static # readonly
    KeyPeakAreaAbsThreshold: str  # static # readonly
    KeyPeakAreaPctThreshold: str  # static # readonly
    KeyPeakFilter: str  # static # readonly
    KeyPeakHeightAbsThreshold: str  # static # readonly
    KeyPeakHeightPctThreshold: str  # static # readonly
    KeyPerformFormulaAnnotationForNonFrags: str  # static # readonly
    KeyPerformFragmentAnnotation: str  # static # readonly
    KeySnrThreshold: str  # static # readonly
    KeyfilterOnHeight: str  # static # readonly

    AllowAreaFilters: bool
    AllowHeightFilters: bool
    DisplayThreshold: float
    FilterOnHeight: bool
    InterimSumObjectCount: int
    MaximumPeakCount: int
    PeakAreaAbsThreshold: float
    PeakAreaPctThreshold: float
    PeakFilter: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    PerformFormulaAnnotationForNonFragments: bool
    PerformFragmentAnnotation: bool
    SignalToNoiseThreshold: float
    UsedForFragmentFormulaAnnotation: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    ) -> bool: ...
    def FilterTypeIsEnabled(
        self, filterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter: ...
    def SetToDefault(self) -> None: ...

class PSetChromPeakFilter2(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChromPeakFilter2
    ) -> None: ...

    KeyDisplayThreshold: str  # static # readonly
    KeyInterimSumObjectCount: str  # static # readonly
    KeyIsPeakFilterHeight: str  # static # readonly
    KeyMaximumPeakCount: str  # static # readonly
    KeyPeakAreaAbsThreshold: str  # static # readonly
    KeyPeakAreaPctThreshold: str  # static # readonly
    KeyPeakFilter: str  # static # readonly
    KeyPeakHeightAbsThreshold: str  # static # readonly
    KeyPeakHeightPctThreshold: str  # static # readonly
    KeyPerformFormulaAnnotationForNonFrags: str  # static # readonly
    KeyPerformFragmentAnnotation: str  # static # readonly
    KeySnrThreshold: str  # static # readonly
    KeyfilterOnHeight: str  # static # readonly

    AllowAreaFilters: bool
    AllowHeightFilters: bool
    DisplayThreshold: float
    FilterOnHeight: bool
    InterimSumObjectCount: int
    LastPeakFilter: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    MaximumPeakCount: int
    PeakAreaAbsThreshold: float
    PeakAreaPctThreshold: float
    PeakFilter: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakFilterHeight: bool
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    PerformFormulaAnnotationForNonFragments: bool
    PerformFragmentAnnotation: bool
    SignalToNoiseThreshold: float
    UsedForFragmentFormulaAnnotation: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    ) -> bool: ...
    def FilterTypeIsEnabled(
        self, filterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter: ...
    def SetToDefault(self) -> None: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class PSetChromPeakLabel(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetChromPeakLabel
    ) -> None: ...

    KeyAllowLabelCollisions: str  # static # readonly
    KeyAllowOverlapWithPeak: str  # static # readonly
    KeyLabelTopPlotOnly: str  # static # readonly
    KeyPrimaryPeakLabel: str  # static # readonly
    KeySecondaryPeakLabel: str  # static # readonly
    KeyVerticalLabels: str  # static # readonly

    AllowLabelCollisions: bool
    AllowOverlapWithPeak: bool
    LabelTopPlotOnly: bool
    PrimaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    SecondaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    VerticalLabels: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel: ...

class PSetColorByPlots(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlots,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetColorByPlots
    ) -> None: ...

    KeyChromSpecType: str  # static # readonly
    KeyPlotItemType: str  # static # readonly
    KeyPlotLineDefinition: str  # static # readonly

    ChromSpecType: str
    PlotItemType: Agilent.MassSpectrometry.DataAnalysis.ItemType
    PlotLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlots
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlots: ...

class PSetColorByPlotsCollection(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlotsCollection,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetColorByPlotsCollection
    ) -> None: ...

    KeyPlotsColorCollection: str  # static # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlotsCollection
    ) -> bool: ...
    def SetColorForPlots(
        self, plotColorCollection: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def GetColorForPlots(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...
    def GetNextColor(self) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinition: ...
    def GetItemColor(
        self,
        itemType: str,
        lineDef: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition,
    ) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetColorByPlotsCollection: ...
    def RemovePlotColor(
        self,
        typeToRemove: str,
        itemType: Agilent.MassSpectrometry.DataAnalysis.ItemType,
    ) -> bool: ...
    def AddNewPlotColor(
        self, psetNewPlotColor: Agilent.MassSpectrometry.DataAnalysis.PSetColorByPlots
    ) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class PSetCommonReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetCommonReportSettings,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetCommonReportSettings
    ) -> None: ...

    KeyCpdChromPlotLimits: str  # static # readonly
    KeyDeconvolutedSpectrumPlotLimits: str  # static # readonly
    KeyHideEmptyColumns: str  # static # readonly
    KeyLimitChromPeaks: str  # static # readonly
    KeyLimitIdentificationHits: str  # static # readonly
    KeyLimitSpectrumPeaks: str  # static # readonly
    KeyMaxChromPeaks: str  # static # readonly
    KeyMaxIdentificationHits: str  # static # readonly
    KeyMaxSpectrumPeaks: str  # static # readonly
    KeyMsMsSpectrumPlotLimits: str  # static # readonly
    KeyMsSpectrumPlotLimits: str  # static # readonly
    KeyOrientation: str  # static # readonly
    KeyShowSampleInformation: str  # static # readonly
    KeyUseCpdChromPlotLimits: str  # static # readonly
    KeyUseDeconvolutedSpectrumPlotLimits: str  # static # readonly
    KeyUseMsMsSpectrumPlotLimits: str  # static # readonly
    KeyUseMsSpectrumPlotLimits: str  # static # readonly
    KeyUseUserChromPlotLimits: str  # static # readonly
    KeyUseUvSpectrumPlotLimits: str  # static # readonly
    KeyUserChromPlotLimits: str  # static # readonly
    KeyUvSpectrumPlotLimits: str  # static # readonly

    CpdChromPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    DeconvolutedSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    HideEmptyColumns: bool
    LimitChromPeaks: bool
    LimitIdentificationHits: bool
    LimitSpectrumPeaks: bool
    MaxChromPeaks: int
    MaxIdentificationHits: int
    MaxSpectrumPeaks: int
    MsMsSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    MsSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    Orientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType
    ShowSampleInformation: bool
    UseCpdChromPlotLimits: bool
    UseDeconvolutedSpectrumPlotLimits: bool
    UseMsMsSpectrumPlotLimits: bool
    UseMsSpectrumPlotLimits: bool
    UseUserChromPlotLimits: bool
    UseUvSpectrumPlotLimits: bool
    UserChromPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    UvSpectrumPlotLimits: Agilent.MassSpectrometry.DataAnalysis.IRange

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCommonReportSettings
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCommonReportSettings: ...

class PSetCompoundReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetCompoundReportSettings,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetCompoundReportSettings
    ) -> None: ...

    KeyExcludeUnIdentifiedCompoundsDetails: str  # static # readonly
    KeyLeftZoomPadding: str  # static # readonly
    KeyOverlayCpdChroms: str  # static # readonly
    KeyOverlayIsotopePredictions: str  # static # readonly
    KeyRightZoomPadding: str  # static # readonly
    KeyShowCompoundTable: str  # static # readonly
    KeyShowCpdChroms: str  # static # readonly
    KeyShowDifferenceSpectrum: str  # static # readonly
    KeyShowFullMSMSSpectrum: str  # static # readonly
    KeyShowFullMSSpectrum: str  # static # readonly
    KeyShowLibrarySpectrum: str  # static # readonly
    KeyShowMSMSPeakTable: str  # static # readonly
    KeyShowMSPeakTable: str  # static # readonly
    KeyShowPredictedIsotopeTable: str  # static # readonly
    KeyShowUserChromatograms: str  # static # readonly
    KeyShowZoomedInMSSpectrum: str  # static # readonly
    KeySortCpdTableBy: str  # static # readonly
    KeySortIncreasing: str  # static # readonly

    ExcludeUnIdentifiedCompoundsDetails: bool
    LeftZoomPadding: float
    OverlayCpdChroms: bool
    OverlayIsotopePredictions: bool
    RightZoomPadding: float
    ShowCompoundTable: bool
    ShowCpdChroms: bool
    ShowDifferenceSpectrum: bool
    ShowFullMSMSSpectrum: bool
    ShowFullMSSpectrum: bool
    ShowLibrarySpectrum: bool
    ShowMSMSPeakTable: bool
    ShowMSPeakTable: bool
    ShowPredictedIsotopeTable: bool
    ShowUserChromatograms: bool
    ShowZoomedInMSSpectrum: bool
    SortCpdTableBy: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    SortIncreasing: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCompoundReportSettings
    ) -> bool: ...
    def PresetStandardSelections(self) -> None: ...
    def PresetDetailedSelections(self) -> None: ...
    def PresetSimpleSelections(self) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCompoundReportSettings: ...

class PSetCpdCorrelation(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetCpdCorrelation,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetCpdCorrelation
    ) -> None: ...

    KeyAbsoluteMassAlignWindow: str  # static # readonly
    KeyAbsoluteRTAlignWindow: str  # static # readonly
    KeyAbsoluteRTTolerance: str  # static # readonly
    KeyDoAbundNormalization: str  # static # readonly
    KeyDoRTCorrection: str  # static # readonly
    KeyNormStdMass: str  # static # readonly
    KeyNormStdRT: str  # static # readonly
    KeyRTCorrStdList: str  # static # readonly
    KeyRelativeMassAlignWindow: str  # static # readonly
    KeyRelativeRTAlignWindow: str  # static # readonly
    KeyRelativeRTTolerance: str  # static # readonly
    KeyUseStdsForNormalization: str  # static # readonly
    KeyUseStdsForRTCorrection: str  # static # readonly

    AbsoluteMassAlignWindow: float
    AbsoluteRTAlignWindow: float
    AbsoluteRTTolerance: float
    DoAbundNormalization: bool
    DoRTCorrection: bool
    NormStdMass: float
    NormStdRT: float
    RelativeMassAlignWindow: float
    RelativeRTAlignWindow: float
    RelativeRTTolerance: float
    UseStdsForNormalization: bool
    UseStdsForRTCorrection: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetCpdCorrelation
    ) -> bool: ...
    def SetMassRTs(
        self, rTCorrStdListList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def Validate(self) -> bool: ...
    def AddNewMassRT(
        self, psetIE: Agilent.MassSpectrometry.DataAnalysis.PSetMassRT
    ) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetCpdCorrelation: ...
    def GetMassRTs(self) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...

class PSetCpdGroupFilters(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetCpdGroupFilters,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetCpdGroupFilters
    ) -> None: ...

    KeyFrequencyFilterMode: str  # static # readonly
    KeyFrequencyFilterModeMFE: str  # static # readonly
    KeyFrequencyGroup: str  # static # readonly
    KeyFrequencyGroupMFE: str  # static # readonly
    KeyFrequencyMin: str  # static # readonly
    KeyFrequencyMinMFE: str  # static # readonly
    KeyFrequencyMinPct: str  # static # readonly
    KeyFrequencyMinPctMFE: str  # static # readonly
    KeyHeightAbsolute: str  # static # readonly
    KeyHeightAbsoluteEnabled: str  # static # readonly
    KeyHeightRelative: str  # static # readonly
    KeyHeightRelativeEnabled: str  # static # readonly
    KeyLimitToLargestN: str  # static # readonly
    KeyLimitToLargestNEnabled: str  # static # readonly
    KeyLimitToLargestNEnabledMFE: str  # static # readonly
    KeyLimitToLargestNMFE: str  # static # readonly
    KeyMFEScoreMin: str  # static # readonly
    KeyMFEScoreMinEnabled: str  # static # readonly
    KeyNumFilesLoaded: str  # static # readonly
    KeyTgtScoreMin: str  # static # readonly
    KeyTgtScoreMinEnabled: str  # static # readonly
    KeyVolumeAbsolute: str  # static # readonly
    KeyVolumeAbsoluteEnabled: str  # static # readonly
    KeyVolumeRelative: str  # static # readonly
    KeyVolumeRelativeEnabled: str  # static # readonly

    FrequencyFilterMode: (
        Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode
    )
    FrequencyFilterModeMFE: (
        Agilent.MassSpectrometry.DataAnalysis.CpdGroupFrequencyFilterMode
    )
    FrequencyGroup: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode
    FrequencyGroupMFE: Agilent.MassSpectrometry.DataAnalysis.CpdGroupFilterMode
    FrequencyMin: int
    FrequencyMinMFE: int
    FrequencyMinPct: int
    FrequencyMinPctMFE: int
    HeightAbsolute: int
    HeightAbsoluteEnabled: bool
    HeightRelative: float
    HeightRelativeEnabled: bool
    LimitToLargestN: int
    LimitToLargestNEnabled: bool
    LimitToLargestNEnabledMFE: bool
    LimitToLargestNMFE: int
    MFEScoreMin: float
    MFEScoreMinEnabled: bool
    NumFilesLoaded: int
    TgtScoreMin: float
    TgtScoreMinEnabled: bool
    VolumeAbsolute: int
    VolumeAbsoluteEnabled: bool
    VolumeRelative: float
    VolumeRelativeEnabled: bool

    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.PSetCpdGroupFilters: ...

class PSetDataFileList(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetDataFileList,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, dg: Agilent.MassSpectrometry.DataAnalysis.PSetDataFileList
    ) -> None: ...

    KeyBatchExtractorFileName: str  # static # readonly
    KeyRecentOpenedDirectory: str  # static # readonly

    RecentOpenedDirectory: str
    SelectedFileName: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IBatchExtractorFileSelect
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDataFileList
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDataFileList: ...

class PSetDeconvolution(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetDeconvolution,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetDeconvolution
    ) -> None: ...

    KeyAverageMass: str  # static # readonly
    KeyBaselineCutOffFactor: str  # static # readonly
    KeyChromatogramType: str  # static # readonly
    KeyDeconvolutionAlgorithm: str  # static # readonly
    KeyExtractEIC: str  # static # readonly
    KeyIonSpecies: str  # static # readonly
    KeyIsotopeWidthType: str  # static # readonly
    KeyLimitMzRange: str  # static # readonly
    KeyMassRange: str  # static # readonly
    KeyMassStep: str  # static # readonly
    KeyMinConsecutiveIonSet: str  # static # readonly
    KeyMinProteinFitScore: str  # static # readonly
    KeyMzRange: str  # static # readonly
    KeyNumberOfIterations: str  # static # readonly
    KeySingletIsWidth: str  # static # readonly
    KeySingletResolution: str  # static # readonly
    KeySingletWidth: str  # static # readonly
    KeySnrThreshold: str  # static # readonly
    KeySpecifiedIsotopeWidth: str  # static # readonly
    KeySubtractBaseline: str  # static # readonly
    KeyWidthType: str  # static # readonly

    AverageMass: float
    BaselineCutOffFactor: float
    ChromTypes: Agilent.MassSpectrometry.DataAnalysis.ChromType
    DeconvolutionAlgorithm: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionAlgorithmType
    )
    ExtractEIC: bool
    IonSpecies: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    IsotopeWidthType: (
        Agilent.MassSpectrometry.DataAnalysis.DeconvolutionIsotopeWidthType
    )
    LimitMzRange: bool
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MassStep: float
    MinimumConsecutiveIonSet: int
    MinimumProteinFitScore: int
    MzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    NumberOfIterations: int
    SingletIsWidth: bool
    SingletResolution: float
    SingletWidth: float
    SnrThreshold: float
    SpecifiedIsotopeWidth: float
    SubtractBaseline: bool
    WidthType: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDeconvolution
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDeconvolution: ...

class PSetDeviceDelayInfo(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        devType: Agilent.MassSpectrometry.DataAnalysis.DeviceType,
        ordinalNumber: int,
        delayTime: float,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> None: ...

class PSetDynamicStrings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetDynamicStrings,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetDynamicStrings
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetDynamicStrings
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetDynamicStrings: ...

class PSetExcludeMass(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExcludeMass
    ) -> None: ...

    KeyAsymmetricMzWidthHigh: str  # static # readonly
    KeyAsymmetricMzWidthLow: str  # static # readonly
    KeyExcludeMassRange: str  # static # readonly
    KeyExcludeMasses: str  # static # readonly
    KeySingleMzExpansionMode: str  # static # readonly
    KeySingleMzWidth: str  # static # readonly
    KeySinglePpmWidth: str  # static # readonly

    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    ExcludeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ExcludeMasses: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExcludeMass: ...

class PSetExtractChrom(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, doEnumValueChoiceValidation: bool) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractChrom
    ) -> None: ...

    ChromExtractionFormat: (
        Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    )  # static
    KeyAsymmetricMzWidthHigh: str  # static # readonly
    KeyAsymmetricMzWidthLow: str  # static # readonly
    KeyChargeStateLimit: str  # static # readonly
    KeyChromatogramType: str  # static # readonly
    KeyCollisionEnergy: str  # static # readonly
    KeyCompensationField: str  # static # readonly
    KeyDesiredMSStorageType: str  # static # readonly
    KeyDeviceName: str  # static # readonly
    KeyDispersionField: str  # static # readonly
    KeyDoCycleSum: str  # static # readonly
    KeyExtractOneChromPerScanSeg: str  # static # readonly
    KeyFragmentorVoltage: str  # static # readonly
    KeyIncludeMassRange: str  # static # readonly
    KeyIntegrate: str  # static # readonly
    KeyIonPolarity: str  # static # readonly
    KeyIonizationMode: str  # static # readonly
    KeyMSLevelFilter: str  # static # readonly
    KeyMSScanType: str  # static # readonly
    KeyMzOfInterestFilter: str  # static # readonly
    KeyOrdinalNumber: str  # static # readonly
    KeyReferenceWavelength: str  # static # readonly
    KeyScanRange: str  # static # readonly
    KeyScanSegmentNumber: str  # static # readonly
    KeySignalDescription: str  # static # readonly
    KeySignalName: str  # static # readonly
    KeySignalWavelength: str  # static # readonly
    KeySingleChromatogram: str  # static # readonly
    KeySingleMzExpansionMode: str  # static # readonly
    KeySingleMzWidth: str  # static # readonly
    KeySinglePpmWidth: str  # static # readonly
    KeyUseReference: str  # static # readonly
    KeyYValueInCounts: str  # static # readonly

    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    ChargeStateLimits: Agilent.MassSpectrometry.DataAnalysis.IRange
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    Description: str  # readonly
    DesiredMSStorage: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DeviceName: str
    DeviceType: int  # readonly
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    DoCycleSum: bool
    ExtractOneChromatogramPerScanSegment: bool
    FileInformation: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IncludeMassRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    Integrate: bool
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MultipleDevicesPresent: bool  # readonly
    MzOfInterestFilter: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    OrdinalNumber: int
    ReferenceWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanSegmentNumber: Agilent.MassSpectrometry.DataAnalysis.IRange
    SignalDescription: str
    SignalName: str
    SignalWavelength: Agilent.MassSpectrometry.DataAnalysis.IRange
    SingleChromatogram: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    UseReference: bool
    YValueInCounts: bool

    def GetDeviceDisplayStrings(
        self, storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ) -> List[str]: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetCompensationFieldValues(self) -> List[float]: ...
    def GetFragmentorVolages(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]: ...
    def GetMultipleDevicesPresent(self, devicenameordinalnum: str) -> bool: ...
    def UpdateIncludeMassRanges(self) -> None: ...
    def GetSignalDescription(
        self, storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ) -> List[str]: ...
    def GetActualLimitString(self, flag: bool) -> str: ...
    def GetSignalNameDescription(
        self, storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ) -> List[str]: ...
    def Validate(self) -> bool: ...
    def GetDispersionFieldValues(self) -> List[float]: ...
    def GetSimIons(self) -> List[float]: ...
    def SetIncludeMassRanges(
        self, mzValues: System.Collections.Generic.List[float]
    ) -> None: ...
    def GetTransitions(self) -> List[Agilent.MassSpectrometry.DataAnalysis.IRange]: ...
    def UpdateDeviceNameOrdinalNumber(
        self, device: str, ordinalNumber: int
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> bool: ...
    def GetCollisionEnergies(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def GetMzOfInterestSuggestions(self) -> List[float]: ...
    def GetSignalName(
        self, storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType
    ) -> List[str]: ...
    def ClearCachedDataTables(self) -> None: ...

class PSetExtractChromIcp(
    Agilent.MassSpectrometry.DataAnalysis.PSetExtractChrom,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChromIcp,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractChromIcp
    ) -> None: ...

    KeyYDataValueType: str  # static # readonly

    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChromIcp
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChromIcp: ...

class PSetExtractChromLw(
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, chromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractChromLw
    ) -> None: ...

    BDAChromFilter: Agilent.MassSpectrometry.DataAnalysis.IBDAChromFilter  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom
    ) -> bool: ...
    def MzRangeCollection(
        self, mzRangeArray: List[Agilent.MassSpectrometry.DataAnalysis.IRange]
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def CorePSet(
        self,
        optionalFileInformation: Agilent.MassSpectrometry.DataAnalysis.IBDAFileInformation,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractChrom: ...

class PSetExtractSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractSpectrum
    ) -> None: ...

    KeyAverageSpectrum: str  # static # readonly
    KeyCollisionEnergy: str  # static # readonly
    KeyCompensationField: str  # static # readonly
    KeyConvertedToStdUnits: str  # static # readonly
    KeyDesiredMSStorageType: str  # static # readonly
    KeyDispersionField: str  # static # readonly
    KeyExtractByCycle: str  # static # readonly
    KeyFragmentorVoltage: str  # static # readonly
    KeyIonPolarityFilter: str  # static # readonly
    KeyIonizationMode: str  # static # readonly
    KeyMSLevelFilter: str  # static # readonly
    KeyMSScanTypeFilter: str  # static # readonly
    KeyMassRange: str  # static # readonly
    KeyMassUnits: str  # static # readonly
    KeyMzOfInterestFilter: str  # static # readonly
    KeyOrdinalNumber: str  # static # readonly
    KeyScanRange: str  # static # readonly
    KeySpectrumType: str  # static # readonly
    KeyUVDeviceName: str  # static # readonly

    AverageSpectrum: bool
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompensationField: Agilent.MassSpectrometry.DataAnalysis.IRange
    ConvertedToStdUnits: bool
    DesiredMSStorage: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    DispersionField: Agilent.MassSpectrometry.DataAnalysis.IRange
    ExtractByCycle: bool
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.IRange
    IonPolarityFilter: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    MSLevelFilter: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanTypeFilter: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MassRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MassUnits: bool
    MzOfInterestFilter: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    OrdinalNumber: int
    ScanIds: System.Collections.Generic.List[int]
    ScanMethodNumber: int
    ScanRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    SpectrumType: Agilent.MassSpectrometry.DataAnalysis.SpecType
    UVDeviceName: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...

class PSetExtractSpectrumIcp(
    Agilent.MassSpectrometry.DataAnalysis.PSetExtractSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrumIcp,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractSpectrumIcp
    ) -> None: ...

    KeyYDataValueType: str  # static # readonly

    YDataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrumIcp
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrumIcp: ...

class PSetExtractSpectrumLw(
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, specFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetExtractSpectrumLw
    ) -> None: ...

    BDASpecFilter: Agilent.MassSpectrometry.DataAnalysis.IBDASpecFilter  # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.PSetExtractSpectrumLw
    ) -> bool: ...
    def CorePSet(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetExtractSpectrum: ...

class PSetFileSaveOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetFileSaveOptions,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetFileSaveOptions
    ) -> None: ...

    KeySaveCompleteResults: str  # static # readonly

    SaveCompleteResults: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFileSaveOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFileSaveOptions: ...

class PSetFindCpdsAutoMsMs(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsAutoMsMs,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetFindCpdsAutoMsMs
    ) -> None: ...

    KeyAbundanceThresholdNegative: str  # static # readonly
    KeyAbundanceThresholdPositive: str  # static # readonly
    KeyAsymmetricMzWidthHigh: str  # static # readonly
    KeyAsymmetricMzWidthLow: str  # static # readonly
    KeyBackgroundSource: str  # static # readonly
    KeyBackgroundThresholdMult: str  # static # readonly
    KeyEicMzExpansion: str  # static # readonly
    KeyExtractMsMsSpectrumPerCE: str  # static # readonly
    KeyFragmentMass: str  # static # readonly
    KeyGenerateMsChrom: str  # static # readonly
    KeyGenerateMsMsChrom: str  # static # readonly
    KeyGenerateMsMsSpectra: str  # static # readonly
    KeyGenerateMsSpectra: str  # static # readonly
    KeyIntegrateEic: str  # static # readonly
    KeyLimitCompounds: str  # static # readonly
    KeyMassFilter: str  # static # readonly
    KeyMatchAllFragments: str  # static # readonly
    KeyMaxBackgroundCnt: str  # static # readonly
    KeyMaxCompounds: str  # static # readonly
    KeyMinimumEicWidth: str  # static # readonly
    KeyMzTolerance: str  # static # readonly
    KeyNeutralLoss: str  # static # readonly
    KeyRetentionTimeWindow: str  # static # readonly
    KeySingleMzExpansionMode: str  # static # readonly
    KeySingleMzWidth: str  # static # readonly
    KeySinglePpmWidth: str  # static # readonly
    KeyUseFragmentMass: str  # static # readonly

    AbundanceThresholdNegative: float
    AbundanceThresholdPositive: float
    AsymmetricMzWidthHigh: float
    AsymmetricMzWidthLow: float
    BackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    BackgroundThresholdMultiplier: float
    EicMzExpansion: float
    ExtractMsMsSpectrumPerCE: bool
    FragmentMass: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    GenerateMsChrom: bool
    GenerateMsMsChrom: bool
    GenerateMsMsSpectra: bool
    GenerateMsSpectra: bool
    IntegrateEic: bool
    LimitCompounds: bool
    MassFilter: Agilent.MassSpectrometry.DataAnalysis.MassFilterType
    MatchAllFragments: bool
    MaxBackgroundCount: int
    MaxCompounds: int
    MinimumEicWidth: float
    MzTolerance: float
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    RetentionTimeWindow: float
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SinglePpmWidth: float
    UseFragmentMass: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsAutoMsMs
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsAutoMsMs: ...

class PSetFindCpdsTargetedMsMs(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsTargetedMsMs,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetFindCpdsTargetedMsMs
    ) -> None: ...

    KeyExtractMSSpec: str  # static # readonly
    KeyExtractMsMsChrom: str  # static # readonly
    KeyExtractMsMsSpec: str  # static # readonly
    KeyExtractMsMsSpectrumPerCE: str  # static # readonly
    KeyGenerateLibrarySpectra: str  # static # readonly
    KeyLimitCompounds: str  # static # readonly
    KeyMaxCompounds: str  # static # readonly
    KeyMaximumChromPeakWidth: str  # static # readonly

    ExtractMsMsChromatogram: bool
    ExtractMsMsSpectrum: bool
    ExtractMsMsSpectrumPerCE: bool
    ExtractMsSpectrum: bool
    GenerateLibrarySpectra: bool
    LimitCompounds: bool
    MaxCompounds: int
    MaximumChromPeakWidth: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsTargetedMsMs
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFindCpdsTargetedMsMs: ...

class PSetFormulaCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetFormulaCalculator
    ) -> None: ...

    KeyChargeState: str  # static # readonly
    KeyElementLimits: str  # static # readonly
    KeyFilterOnDBE: str  # static # readonly
    KeyFilterOnMassError: str  # static # readonly
    KeyFilterOnScore: str  # static # readonly
    KeyFormulaGenerationRules: str  # static # readonly
    KeyGroupHitsWithSameFormula: str  # static # readonly
    KeyLimitNumberOfHits: str  # static # readonly
    KeyMaxHits: str  # static # readonly
    KeyMaximumDBE: str  # static # readonly
    KeyMaximumMass: str  # static # readonly
    KeyMaximumMzError: str  # static # readonly
    KeyMinimumDBE: str  # static # readonly
    KeyMinimumScore: str  # static # readonly
    KeyMsAbundancePct: str  # static # readonly
    KeyMsMassCoeffMDa: str  # static # readonly
    KeyMsMassCoeffPpm: str  # static # readonly
    KeyMsMsMassCoeffMDa: str  # static # readonly
    KeyMsMsMassCoeffPpm: str  # static # readonly
    KeyMzErrorUnits: str  # static # readonly
    KeyNegChargeCarrier: str  # static # readonly
    KeyNegativeChargeCarrier: str  # static # readonly
    KeyNitrogenRule: str  # static # readonly
    KeyObservedMz: str  # static # readonly
    KeyPosChargeCarrier: str  # static # readonly
    KeyPositiveChargeCarrier: str  # static # readonly
    KeyTargetFormula: str  # static # readonly
    KeyTargetFormulaInResults: str  # static # readonly

    ChargeState: int
    ElementLimits: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IElementLimit
    ]
    FilterOnDBE: bool
    FilterOnMassError: bool
    FilterOnScore: bool
    FormulaGenerationRules: Agilent.MassSpectrometry.DataAnalysis.FormulaGenerationRules
    GroupHitsWithSameFormula: bool
    IncludeTargetFormulaInResults: bool
    LimitNumberOfHits: bool
    MaxHits: int
    MaximumDBE: float
    MaximumMass: float
    MaximumMzError: float
    MinimumDBE: float
    MinimumScore: float
    MsAbundancePct: float
    MsMassCoeffMDa: float
    MsMassCoeffPpm: float
    MsMsMassCoeffMDa: float
    MsMsMassCoeffPpm: float
    MzErrorUnits: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    NegativeAssumedChargeCarrier: str
    NegativeAssumedChargeCarrierCollection: (
        Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    )  # readonly
    NegativeSpeciesCollection: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NitrogenRule: Agilent.MassSpectrometry.DataAnalysis.NitrogenRule
    ObservedMz: float
    PositiveAssumedChargeCarrier: str
    PositiveAssumedChargeCarrierCollection: (
        Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    )  # readonly
    PositiveSpeciesCollection: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    TargetFormula: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator: ...

class PSetFragIonConfirmation(
    Agilent.MassSpectrometry.DataAnalysis.IPSetFragIonConfirmation,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetFragIonConfirmation
    ) -> None: ...

    KeyCoelutionScore: str  # static # readonly
    KeyDoFragIonConfirm: str  # static # readonly
    KeyEnergyType: str  # static # readonly
    KeyIsSNRatioDefined: str  # static # readonly
    KeyMolecularIsOptional: str  # static # readonly
    KeyNumOfConfirmedFragments: str  # static # readonly
    KeyNumOfIonsFromLibrary: str  # static # readonly
    KeyNumOfIonsFromSpectrum: str  # static # readonly
    KeyPercentOfConfirmedFragments: str  # static # readonly
    KeyRTDifference: str  # static # readonly
    KeySNRatio: str  # static # readonly
    KeybConfirmBasedOnAbsNum: str  # static # readonly
    KeybLibraryAsIonSource: str  # static # readonly

    CoelutionScore: float
    DoFragIonConfirm: bool
    EnergyType: Agilent.MassSpectrometry.DataAnalysis.SearchPrecursionIon
    IsSNRatioDefined: bool
    MolecularIsOptional: bool
    NumOfConfirmedFragments: int
    NumOfIonsFromLibrary: int
    NumOfIonsFromSpectrum: int
    PercentOfConfirmedFragments: float
    RTDifference: float
    SNRatio: float
    bConfirmBasedOnAbsNum: bool
    bLibraryAsIonSource: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetFragIonConfirmation
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetFragIonConfirmation: ...

class PSetGenieIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, pset: Agilent.MassSpectrometry.DataAnalysis.PSetGenieIntegrator
    ) -> None: ...

class PSetGenieIntegratorSettings(
    Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegratorSettings,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetGenieIntegratorSettings
    ) -> None: ...

    KeyAreaReject: str  # static # readonly
    KeyPeakWidth: str  # static # readonly
    KeyShoulderDetection: str  # static # readonly
    KeyThreshold: str  # static # readonly
    KeyTimedEvents: str  # static # readonly
    KeyUseDataScaleFactor: str  # static # readonly

    AreaReject: float
    PeakWidth: float
    ShoulderDetection: Agilent.MassSpectrometry.DataAnalysis.ShoulderModeType
    SupportedTimedEvents: List[
        Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType
    ]  # readonly
    Threshold: float
    UseDataScaleFactor: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegratorSettings
    ) -> bool: ...
    def SetIntegrationEvents(
        self, timedEventsList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]
    ) -> None: ...
    def GetNextEventTime(self) -> float: ...
    def Validate(self) -> bool: ...
    def AddNewIntegrationEvent(
        self, psetIE: Agilent.MassSpectrometry.DataAnalysis.PSetIntegrationEvent
    ) -> int: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetGenieIntegratorSettings: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetIntegrationEvents(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ICoreList[T]: ...

class PSetIdentityScoring(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetIdentityScoring
    ) -> None: ...

    KeyIsoAbundWt: str  # static # readonly
    KeyIsoSpacingWt: str  # static # readonly
    KeyMassWt: str  # static # readonly
    KeyMsAbundSigmaPct: str  # static # readonly
    KeyMsMassCoeffMDa: str  # static # readonly
    KeyMsMassCoeffPpm: str  # static # readonly
    KeyMsMsMassCoeffMDa: str  # static # readonly
    KeyMsMsMassCoeffPpm: str  # static # readonly
    KeyMsMsWt: str  # static # readonly
    KeyRententionTimeError: str  # static # readonly
    KeyRtSigmaMin: str  # static # readonly
    KeyRtWt: str  # static # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring: ...

class PSetIntegrationEvent(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetIntegrationEvent
    ) -> None: ...

    KeyIntegrationEvent: str  # static # readonly
    KeyTime: str  # static # readonly

    EventValueChoices: List[Agilent.MassSpectrometry.DataAnalysis.IntegrationEventType]
    IntegrationEvent: Agilent.MassSpectrometry.DataAnalysis.IIntegrationEventInfo
    Time: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntegrationEvent: ...

class PSetIntegratorSelection(
    Agilent.MassSpectrometry.DataAnalysis.IPSetIntegratorSelection,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetIntegratorSelection
    ) -> None: ...

    KeyIntegratorAlgorithm: str  # static # readonly

    IntegratorAlgorithm: Agilent.MassSpectrometry.DataAnalysis.IntegratorAlgorithm
    UseRTEIntegrator: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntegratorSelection
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntegratorSelection: ...

class PSetIntermediateReportData(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetIntermediateReportData,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetIntermediateReportData
    ) -> None: ...

    KeyIntermediateDataLocation: str  # static # readonly
    KeyKeepIntermediateReportDirectories: str  # static # readonly

    IntermediateDataLocation: str
    KeepIntermediateReportDirectories: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetIntermediateReportData
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetIntermediateReportData: ...

class PSetLabelConfiguration(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetLabelConfiguration
    ) -> None: ...

    KeyIncludeItemID: str  # static # readonly
    KeySelectedLabels: str  # static # readonly
    KeyUseAllAvailableLabels: str  # static # readonly

    IncludeItemID: bool
    ListCount: int  # readonly
    SelectedLabels: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]
    UseAllAvailableLabels: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> bool: ...
    def FormatLabel(
        self, attributeObject: Agilent.MassSpectrometry.DataAnalysis.IResultAttributes
    ) -> str: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def Validate(self) -> bool: ...
    def ClearList(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLabelConfiguration: ...
    def Append(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> None: ...
    def GetResultAttribute(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttribute: ...

class PSetLastCalibrationInfo(
    Agilent.MassSpectrometry.DataAnalysis.IPSetLastCalibrationInfo,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetLastCalibrationInfo
    ) -> None: ...

    KeyLastUsedReferenceMassFilename: str  # static # readonly
    KeyLastUsedReferenceMassList: str  # static # readonly
    KeyLastUsedToleranceValue: str  # static # readonly
    KeySelectedRanges: str  # static # readonly
    KeyUseHighlightedPeaks: str  # static # readonly
    KeyUseReferenceMassList: str  # static # readonly

    LastUsedReferenceMassFilename: str
    LastUsedReferenceMassList: str
    LastUsedToleranceValue: float
    SelectedRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    UseHighlightedPeaks: bool
    UseReferenceMassList: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLastCalibrationInfo
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLastCalibrationInfo: ...

class PSetLineDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialSize: int) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetLineDefinitions
    ) -> None: ...

    KeyAlternateIsotopePatternLineDefinition: str  # static # readonly
    KeyBackgroundSpectrumLineDefinition: str  # static # readonly
    KeyBaselineLineDefinition: str  # static # readonly
    KeyBestIsotopePatternLineDefinition: str  # static # readonly
    KeyChromatogramLinePreference: str  # static # readonly
    KeyDeconvolutedMsLinePreference: str  # static # readonly
    KeyMsLinePreference: str  # static # readonly
    KeyPeakHighlightLineDefinition: str  # static # readonly
    KeyPlotFontSize: str  # static # readonly
    KeyPlotFontStyle: str  # static # readonly
    KeySelectedPaneBorderLineDefinition: str  # static # readonly
    KeyShowPlotGrid: str  # static # readonly
    KeyTimeSegmentAnnotationLineDefinition: str  # static # readonly
    KeyUvLinePreference: str  # static # readonly
    KeyViewSpectrumLineDefinition: str  # static # readonly

    AlternateIsotopePatternLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    BackgroundSpectrumLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    BaselineLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    BestIsotopePatternLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    ChromatogramLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    DeconvolutedMsLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    ListCount: int  # readonly
    MsLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    PeakHighlightLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    PlotFontSize: float
    PlotFontStyle: System.Drawing.FontStyle
    SelectedPaneBorderLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    ShowPlotGrid: bool
    TimeSegmentAnnotationLineDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    )
    UvLinePreference: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    ViewSpectrumLineDefinition: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions
    ) -> bool: ...
    def MoveDown(self, orderIndex: int) -> None: ...
    def RemoveByIndex(self, orderIndex: int) -> bool: ...
    def GetLineDefinition(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ILineDefinition: ...
    def MoveUp(self, orderIndex: int) -> None: ...
    def ClearList(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions: ...
    def SetToDefault(self) -> None: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def GetKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def Append(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.ILineDefinition
    ) -> str: ...

class PSetMRMSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMRMSettings,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMRMSettings
    ) -> None: ...

    KeyExtractMRMChromatogram: str  # static # readonly
    KeyExtractMRMSpectrum: str  # static # readonly
    KeyGroupTransitionsByCompoundName: str  # static # readonly
    KeyUsePeakAreaForAbundantPeak: str  # static # readonly

    ExtractMRMChromatogram: bool
    ExtractMRMSpectrum: bool
    GroupTransitionsByCompoundName: bool
    UsePeakAreaForAbundantPeak: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMRMSettings
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMRMSettings: ...

class PSetMSAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMSAnnotation,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMSAnnotation
    ) -> None: ...

    KeyLinePreference: str  # static # readonly
    KeyMsMsSelectedIonSymbolColor: str  # static # readonly
    KeyMsMsSelectedIonSymbolFill: str  # static # readonly
    KeyMsSelectedIonSymbolColor: str  # static # readonly
    KeyMsSelectedIonSymbolFill: str  # static # readonly
    KeyShowStructure: str  # static # readonly
    KeyStructureColor: str  # static # readonly
    KeyUsePlotColorForStrcture: str  # static # readonly

    LinePreferenceType: Agilent.MassSpectrometry.DataAnalysis.LinePreference
    MsMsSelectedIonSymbolColor: System.Drawing.Color
    MsMsSelectedIonSymbolFill: bool
    MsSelectedIonSymbolColor: System.Drawing.Color
    MsSelectedIonSymbolFill: bool
    ShowStructure: bool
    StructureColor: System.Drawing.Color
    UsePlotColorForStrcture: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMSAnnotation
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMSAnnotation: ...

class PSetMSChromPlotTitleDef(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMSChromPlotTitleDef
    ) -> None: ...

    KeyElementList: str  # static # readonly
    KeyUseExpandedTitle: str  # static # readonly

    ExpandedTitle: bool
    TitleElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    ) -> bool: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ITitleElement
        ],
        errMsg: str,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef: ...

class PSetMSMSPeakLabel(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMSMSPeakLabel,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMSMSPeakLabel
    ) -> None: ...

    KeyMSMSPrimaryPeakLabel: str  # static # readonly
    KeyMSMSSecondaryPeakLabel: str  # static # readonly
    KeybyionB: str  # static # readonly
    KeybyionB2: str  # static # readonly
    KeybyionB3: str  # static # readonly
    KeybyionBH2O: str  # static # readonly
    KeybyionBNH3: str  # static # readonly
    KeybyionImmoniumIon: str  # static # readonly
    KeybyionShowCTermLadder: str  # static # readonly
    KeybyionShowNTermLadder: str  # static # readonly
    KeybyionY: str  # static # readonly
    KeybyionY2: str  # static # readonly
    KeybyionY3: str  # static # readonly
    KeybyionYH2O: str  # static # readonly
    KeybyionYNH3: str  # static # readonly

    MSMSPrimaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    MSMSSecondaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    byionB: bool
    byionB2: bool
    byionB3: bool
    byionBH2O: bool
    byionBNH3: bool
    byionImmoniumIon: bool
    byionShowCTermLadder: bool
    byionShowNTermLadder: bool
    byionY: bool
    byionY2: bool
    byionY3: bool
    byionYH2O: bool
    byionYNH3: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMSMSPeakLabel
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMSMSPeakLabel: ...

class PSetMSPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IPSetMsPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMSPeakFilter
    ) -> None: ...

    KeyDisplayThreshold: str  # static # readonly
    KeyEnableAdvancedFilters: str  # static # readonly
    KeyEnableHtCorrections: str  # static # readonly
    KeyInterimSumObjectCount: str  # static # readonly
    KeyMaximumPeakCount: str  # static # readonly
    KeyPeakAreaAbsThreshold: str  # static # readonly
    KeyPeakAreaPctThreshold: str  # static # readonly
    KeyPeakFilter: str  # static # readonly
    KeyPeakHeightAbsThreshold: str  # static # readonly
    KeyPeakHeightPctThreshold: str  # static # readonly
    KeyPerformFormulaAnnotationForNonFrags: str  # static # readonly
    KeyPerformFragmentAnnotation: str  # static # readonly
    KeySnrThreshold: str  # static # readonly
    KeyfilterOnHeight: str  # static # readonly

    AllowAreaFilters: bool
    AllowHeightFilters: bool
    DisplayThreshold: float
    EnableAdvancedFilters: bool
    EnableHtCorrections: bool
    FilterOnHeight: bool
    InterimSumObjectCount: int
    MaximumPeakCount: int
    PeakAreaAbsThreshold: float
    PeakAreaPctThreshold: float
    PeakFilter: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    PerformFormulaAnnotationForNonFragments: bool
    PerformFragmentAnnotation: bool
    SignalToNoiseThreshold: float
    UsedForFragmentFormulaAnnotation: bool

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMsPeakFilter
    ) -> bool: ...
    def FilterTypeIsEnabled(
        self, filterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFilter: ...
    def SetToDefault(self) -> None: ...

class PSetMSSpectrumPlotTitleDef(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMSSpectrumPlotTitleDef
    ) -> None: ...

    KeyElementList: str  # static # readonly
    KeyUseExpandedTitle: str  # static # readonly

    ExpandedTitle: bool
    TitleElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    ) -> bool: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ITitleElement
        ],
        errMsg: str,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef: ...

class PSetManualIDResult(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetManualIDResult
    ) -> None: ...

    KeyCasId: str  # static # readonly
    KeyChargeState: str  # static # readonly
    KeyCompoundName: str  # static # readonly
    KeyHmpId: str  # static # readonly
    KeyIonSpecies: str  # static # readonly
    KeyKeggId: str  # static # readonly
    KeyLipidId: str  # static # readonly
    KeyMolecularFormula: str  # static # readonly
    KeyNotes: str  # static # readonly
    KeyStructure: str  # static # readonly
    KeySwissProtId: str  # static # readonly

    CasId: str
    ChargeState: int
    CompoundName: str
    HmpId: str
    InEditMode: bool
    IonSpecies: str
    KeggId: str
    LipidId: str
    MolecularFormula: str
    Notes: str
    Structure: str
    SwissProtId: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetManualIDResult: ...

class PSetManualIntegration(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetManualIntegration,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetManualIntegration
    ) -> None: ...

    KeyBaseline1X: str  # static # readonly
    KeyBaseline1Y: str  # static # readonly
    KeyBaseline2X: str  # static # readonly
    KeyBaseline2Y: str  # static # readonly
    KeyTestForBadBaselines: str  # static # readonly

class PSetManualSpectrumExtraction(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetManualSpectrumExtraction,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetManualSpectrumExtraction
    ) -> None: ...

    KeyMsBackgroundSource: str  # static # readonly

    MsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetManualSpectrumExtraction
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetManualSpectrumExtraction: ...

class PSetMassCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassCalculator,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassCalculator
    ) -> None: ...

    KeyActivePolarity: str  # static # readonly
    KeyBaseFormula: str  # static # readonly
    KeyChargeRange: str  # static # readonly
    KeyCompareMasses: str  # static # readonly
    KeyComparisonMz: str  # static # readonly
    KeyNegSpeciesDef: str  # static # readonly
    KeyPosSpeciesDef: str  # static # readonly

    ActivePolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    BaseFormula: str
    ChargeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    CompareMasses: bool
    ComparisonMz: float
    NegativeSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    PositiveSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassCalculator
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassCalculator: ...

class PSetMassDefectFilter(
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassDefectFilter,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassDefectFilter
    ) -> None: ...

    KeyConstantDefect: str  # static # readonly
    KeyDefectDenominator: str  # static # readonly
    KeyDefectIntercept: str  # static # readonly
    KeyDefectSlope: str  # static # readonly
    KeyEnableFilter: str  # static # readonly
    KeyExampleFormula: str  # static # readonly
    KeyToleranceDenominator: str  # static # readonly
    KeyToleranceNegative: str  # static # readonly
    KeyTolerancePositive: str  # static # readonly
    KeyToleranceSlope: str  # static # readonly
    KeyToleranceType: str  # static # readonly

    ConstantDefect: bool
    DefectDenominator: float
    DefectIntercept: float
    DefectSlope: float
    EnableFilter: bool
    ExampleFormula: str
    ExpectedMassDefect: bool
    MassDefectFiltering: bool
    MassDefectTolerance: bool
    ToleranceDenominator: float
    ToleranceNegative: float
    TolerancePositive: float
    ToleranceSlope: float
    ToleranceType: Agilent.MassSpectrometry.DataAnalysis.MassDefectToleranceType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassDefectFilter
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassDefectFilter: ...
    def SetToDefault(self) -> None: ...
    @staticmethod
    def CalculateFromFormula(formula: str) -> float: ...

class PSetMassHunterProcessing(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterProcessing,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassHunterProcessing
    ) -> None: ...

    KeyAcqTimeRange: str  # static # readonly
    KeyAssumeUnidentifiedIonsAreRadicals: str  # static # readonly
    KeyAsymWidthHigh: str  # static # readonly
    KeyAsymWidthLow: str  # static # readonly
    KeyAverageMSMSspecforCE: str  # static # readonly
    KeyBaselineLength: str  # static # readonly
    KeyChromRTPeaKWidth: str  # static # readonly
    KeyChromSmoothingPeakWidthMultiplier: str  # static # readonly
    KeyClipRawSpectrum: str  # static # readonly
    KeyDisplayLargest: str  # static # readonly
    KeyEicRangeMinimumSpan: str  # static # readonly
    KeyEicRangeWidthMultipler: str  # static # readonly
    KeyExrtactMSMSSpectrum: str  # static # readonly
    KeyExtractECC: str  # static # readonly
    KeyExtractEIC: str  # static # readonly
    KeyExtractMFESpectrum: str  # static # readonly
    KeyExtractRawSpectra: str  # static # readonly
    KeyLimitedAcqTimeRange: str  # static # readonly
    KeyLimitedMzRange: str  # static # readonly
    KeyMSMSDeisotopeSpectrum: str  # static # readonly
    KeyMSMSSingleMzExpansionMode: str  # static # readonly
    KeyMaxPeaksPerSpectrum: str  # static # readonly
    KeyMaxSpikeWidth: str  # static # readonly
    KeyMaximumZ: str  # static # readonly
    KeyMinPeaKWidth: str  # static # readonly
    KeyMzRange: str  # static # readonly
    KeyNegativeSpeciesDefinitions: str  # static # readonly
    KeyNeutralSpeciesDefinitions: str  # static # readonly
    KeyNumberOfCompounds: str  # static # readonly
    KeyPeakFilterType: str  # static # readonly
    KeyPeakHeightAbsThreshold: str  # static # readonly
    KeyPeptidicIsotopeDistribution: str  # static # readonly
    KeyPositiveSaltDominated: str  # static # readonly
    KeyPositiveSpeciesDefinitions: str  # static # readonly
    KeyPreferProfileRawSpectra: str  # static # readonly
    KeyRawSpectrumBgrnd: str  # static # readonly
    KeyRemoveBaselne: str  # static # readonly
    KeyRemoveSpikes: str  # static # readonly
    KeyRemoveWidePeaks: str  # static # readonly
    KeyRestrictEicRange: str  # static # readonly
    KeySingleMzExpansionMode: str  # static # readonly
    KeySingleMzWidth: str  # static # readonly
    KeySmoothChromatogram: str  # static # readonly
    KeySmoothSpectrumPeaks: str  # static # readonly
    KeySnrThreshold: str  # static # readonly
    KeySpecSmoothingPeakWidthMultiplier: str  # static # readonly
    KeyTargetDataType: str  # static # readonly
    KeyToleranceMz: str  # static # readonly
    KeyTolerancePpm: str  # static # readonly
    KeyToleranceUnit: str  # static # readonly
    KeyUseChromRTPeakWidth: str  # static # readonly

    AcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    AssumeUnidentifiedIonsAreRadicals: bool
    AsymWidthHigh: float
    AsymWidthLow: float
    AverageMSMSspecforCE: bool
    BaselineLength: float
    ChromRTPeaKWidth: float
    ChromSmoothingPeakWidthMultiplier: float
    ClipRawSpectrum: bool
    DisplayLargest: bool
    EicRangeMinimumSpan: float
    EicRangeWidthMultiplier: float
    ExrtactMSMSSpectrum: bool
    ExtractECC: bool
    ExtractEIC: bool
    ExtractMFESpectrum: bool
    ExtractRawSpectra: bool
    LimitedAcqTimeRange: bool
    LimitedMzRange: bool
    MSMSDeisotopeSpectrum: bool
    MSMSSingleMzExpansionMode: (
        Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    )
    MaxPeaksPerSpectrum: int
    MaxSpikeWidth: float
    MinPeaKWidth: float
    MzRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    NegativeSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NeutralSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    NumberOfCompounds: int
    PeakFilterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    PeakHeightAbsThreshold: float
    PeptidicIsotopeDistribution: bool
    PositiveSaltDominated: bool
    PositiveSpeciesDefinitions: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    PreferProfileRawSpectra: bool
    RawSpectrumBackground: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    RemoveBaselne: bool
    RemoveSpikes: bool
    RemoveWidePeaks: bool
    RestrictEicRange: bool
    SingleMzExpansionMode: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode
    SingleMzWidth: float
    SmoothChromatogram: bool
    SmoothSpectrumPeaks: bool
    SnrThreshold: float
    SpecSmoothingPeakWidthMultiplier: float
    TargetDataType: Agilent.MassSpectrometry.DataAnalysis.MassHunterTargetDataType
    ToleranceMz: float
    TolerancePpm: float
    ToleranceUnit: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm
    UseChromRTPeakWidth: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterProcessing
    ) -> bool: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterProcessing: ...

class PSetMassHunterResultFilters(
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterResultFilters,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassHunterResultFilters
    ) -> None: ...

    KeyAbundanceFilterType: str  # static # readonly
    KeyAcqTimeRanges: str  # static # readonly
    KeyChargeStates: str  # static # readonly
    KeyFilterOptions: str  # static # readonly
    KeyFindNeutralLosses: str  # static # readonly
    KeyLimitedAcqTimeRange: str  # static # readonly
    KeyLimitedChargeStates: str  # static # readonly
    KeyLimitedMassRange: str  # static # readonly
    KeyMassRange: str  # static # readonly
    KeyMassRangeCollection: str  # static # readonly
    KeyMassSourceIsDatabase: str  # static # readonly
    KeyMassTolerance: str  # static # readonly
    KeyMaximumCount: str  # static # readonly
    KeyNeutralLossMasses: str  # static # readonly
    KeyNoIsotopeCpds: str  # static # readonly
    KeyNoMassCpds: str  # static # readonly
    KeyPeakHeightAbsThreshold: str  # static # readonly
    KeyPeakHeightPctThreshold: str  # static # readonly
    KeyQualityScore: str  # static # readonly

    AbundanceFilterType: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType
    AcqTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ChargeStates: Agilent.MassSpectrometry.DataAnalysis.IRange
    FilterOptions: Agilent.MassSpectrometry.DataAnalysis.MassHunterMassFilterOptions
    FindNeutralLosses: bool
    LimitedAcqTimeRange: bool
    LimitedChargeStates: bool
    LimitedMassRange: bool
    MassRange: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    MassSourceIsDatabase: bool
    MassTolerance: float
    MaximumCount: int
    NeutralLossMasses: Agilent.MassSpectrometry.DataAnalysis.ICoreList[float]
    NoIsotopeCpds: Agilent.MassSpectrometry.DataAnalysis.InclusionType
    NoMassCpds: Agilent.MassSpectrometry.DataAnalysis.InclusionType
    PeakHeightAbsThreshold: float
    PeakHeightPctThreshold: float
    QualityScore: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterResultFilters
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassHunterResultFilters: ...

class PSetMassListOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassListOptions,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassListOptions
    ) -> None: ...

    KeyAlsoExtractBPC: str  # static # readonly
    KeyAlsoExtractSignal: str  # static # readonly
    KeyAlsoExtractTIC: str  # static # readonly
    KeyAlsoExtractTWC: str  # static # readonly
    KeyBpcMzRanges: str  # static # readonly
    KeyChromatogramType: str  # static # readonly
    KeyDoDbSearch: str  # static # readonly
    KeyDoMfg: str  # static # readonly
    KeyDoMfgIfNoLibrarySearchHit: str  # static # readonly
    KeyIdentifyUsingIndividualPeaksInSpectrum: str  # static # readonly
    KeyIdentifyUsingWholeSpectrum: str  # static # readonly
    KeyMaxPeaksPerSpectrum: str  # static # readonly
    KeyNoIdentification: str  # static # readonly
    KeySignalDeviceDisplayName: str  # static # readonly
    KeySignalDeviceName: str  # static # readonly
    KeySignalDeviceType: str  # static # readonly
    KeySignalOrdinalNumber: str  # static # readonly
    KeySkipMfgForPeaksWithFormulas: str  # static # readonly

    AlsoExtractBPC: bool
    AlsoExtractSignal: bool
    AlsoExtractTIC: bool
    AlsoExtractTWC: bool
    BpcMzRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ChromatogramType: Agilent.MassSpectrometry.DataAnalysis.ChromType
    DoDbSearch: bool
    DoIdentifyUsingIndividualPeaks: bool
    DoIdentifyWholeSpectrum: bool
    DoMfg: bool
    DoMfgIfNoLibrarySearchHit: bool
    DoNoIdentification: bool
    MaxPeaksPerSpectrum: int
    SignalDeviceDisplayName: str
    SignalDeviceName: str
    SignalDeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    SignalOrdinalNumber: int
    SkipMfgForPeaksWithFormulas: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassListOptions
    ) -> bool: ...
    def GetDeviceInformation(
        self,
        storedDataType: Agilent.MassSpectrometry.DataAnalysis.StoredDataType,
        displayNames: List[str],
        deviceTypes: List[Agilent.MassSpectrometry.DataAnalysis.DeviceType],
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassListOptions: ...

class PSetMassRT(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetMassRT,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMassRT
    ) -> None: ...

    KeyMass: str  # static # readonly
    KeyRT: str  # static # readonly

    Mass: float
    RT: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMassRT
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMassRT: ...

class PSetMessagePreferences(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetMessagePreferences,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMessagePreferences
    ) -> None: ...

    KeyDeleteSuppress: str  # static # readonly
    KeyMethodSaveAsNeeded: str  # static # readonly
    KeyMethodSuppress: str  # static # readonly
    KeyResultsSaveAsNeeded: str  # static # readonly
    KeyResultsSuppress: str  # static # readonly

    DeleteSuppressMessage: bool
    MethodSaveAsNeeded: bool
    MethodSuppressMessage: bool
    ResultsSaveAsNeeded: bool
    ResultsSuppressMessage: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMessagePreferences
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMessagePreferences: ...

class PSetMsMsFragmentLineDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetLineDefinitions,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetLineDefinitions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetMsMsFragmentLineDefinitions,
    ) -> None: ...

class PSetMsMsIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.IPSetMsMsIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMsMsIntegrator
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMsMsIntegrator
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMsMsIntegrator: ...

class PSetMsPeakLabel(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMsPeakLabel
    ) -> None: ...

    KeyAllowLabelCollisions: str  # static # readonly
    KeyAllowOverlapWithPeak: str  # static # readonly
    KeyLabelTopPlotOnly: str  # static # readonly
    KeyPrimaryPeakLabel: str  # static # readonly
    KeySecondaryPeakLabel: str  # static # readonly
    KeyVerticalLabels: str  # static # readonly

    AllowLabelCollisions: bool
    AllowOverlapWithPeak: bool
    LabelTopPlotOnly: bool
    PrimaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    SecondaryPeakLabel: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    VerticalLabels: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakLabel: ...

class PSetMzDataExportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMzDataExportOptions
    ) -> None: ...

    KeyComputeDeisotope: str  # static # readonly
    KeyMSLevelType: str  # static # readonly
    KeyMSStorageModeToUse: str  # static # readonly

    ComputeDeisotope: bool
    MSLevelType: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSStorageModeToUse: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetMzDataExportOptions: ...

class PSetMzRangeCollection(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetMzRangeCollection
    ) -> None: ...

    KeyRanges: str  # static # readonly
    KeyUseRanges: str  # static # readonly

    def Validate(self) -> bool: ...

class PSetOtherChromPlotTitleDef(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetOtherChromPlotTitleDef
    ) -> None: ...

    KeyElementList: str  # static # readonly

    ExpandedTitle: bool
    TitleElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    ) -> bool: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ITitleElement
        ],
        errMsg: str,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef: ...

class PSetPModChromPeakFilter(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPModChromPeakFilter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPModChromPeakFilter
    ) -> None: ...

    KeyAllowAbsoluteIntensity: str  # static # readonly
    KeyAllowHeight: str  # static # readonly
    KeyAllowPctIntensity: str  # static # readonly
    KeyAllowPeakCount: str  # static # readonly
    KeyMaximumPeakCount: str  # static # readonly
    KeyPModPeakWidthOption: str  # static # readonly
    KeyPeakIntensityAbsThreshold: str  # static # readonly
    KeyPeakIntensityPctThreshold: str  # static # readonly
    KeyPeakSignificance: str  # static # readonly
    KeyUncertaintyMultiplier: str  # static # readonly

    AllowAbsoluteIntensity: bool
    AllowHeight: bool
    AllowPctIntensity: bool
    AllowPeakCount: bool
    MaximumPeakCount: int
    PModPeakWidthOption: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption
    PeakIntensityAbsThreshold: float
    PeakIntensityPctThreshold: float
    PeakSignificance: float
    UncertaintyMultiplier: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPModChromPeakFilter
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPModChromPeakFilter: ...

class PSetPaneCount(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPaneCount,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPaneCount
    ) -> None: ...

    KeyChromResultsPlots: str  # static # readonly
    KeyDeconvolutedMsResultPlots: str  # static # readonly
    KeySpecPreviewPlots: str  # static # readonly
    KeySpecResultsPlots: str  # static # readonly
    KeyUVResultPlots: str  # static # readonly

    ChromResultsPlots: int
    DeconvolutedMsResultPlots: int
    SpecPreviewPlots: int
    SpecResultsPlots: int
    UVResultPlots: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPaneCount
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPaneCount: ...

class PSetPeakID(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPeakID
    ) -> None: ...

    KeyPeakID: str  # static # readonly

    PeakID: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakID: ...

class PSetPeakSpectrumExtraction(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPeakSpectrumExtraction
    ) -> None: ...
    @overload
    def __init__(
        self, detectorType: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetPeakSpectrumExtraction,
        detectorType: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType,
    ) -> None: ...

    KeyDesignatedMinMaxTimeRange: str  # static # readonly
    KeyDesignatedTimeRange: str  # static # readonly
    KeyEvaluateNoBackground: str  # static # readonly
    KeyMsBackgroundSource: str  # static # readonly
    KeyMsMsBackgroundSource: str  # static # readonly
    KeyNeverReturnEmptySpectrum: str  # static # readonly
    KeyPeakHeightThreshold: str  # static # readonly
    KeyTofOptionsApplicable: str  # static # readonly
    KeyTofSaturationMzRange: str  # static # readonly
    KeyTofSaturationMzRangeOption: str  # static # readonly
    KeyTofSaturationThreshold: str  # static # readonly
    KeyUVBackgroundSource: str  # static # readonly
    KeyUseApexScan: str  # static # readonly
    KeyUseTofSaturationFilter: str  # static # readonly
    KeyUseTofSaturationMzRange: str  # static # readonly

    DesignatedMinMaxTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    EvaluateNoBackground: bool
    MsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    MsMsBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    NeverReturnEmptySpectrum: bool
    PeakHeightThreshold: float
    PeakSpectrumType: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType
    TofOptionsApplicable: bool
    TofSaturationMzRangeOption: Agilent.MassSpectrometry.DataAnalysis.MzOperatingRange
    TofSaturationMzRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    TofSaturationThreshold: float
    UVBackgroundSource: Agilent.MassSpectrometry.DataAnalysis.BackgroundSourceType
    UseApexScan: bool
    UseTofSaturationFilter: bool
    UseTofSaturationMzRange: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPeakSpectrumExtraction: ...

class PSetPlotReportSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotReportSettings,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPlotReportSettings
    ) -> None: ...

    KeyDestinationPath: str  # static # readonly
    KeyReportContents: str  # static # readonly
    KeyReportDestination: str  # static # readonly
    KeyResultsToInclude: str  # static # readonly
    KeyShowOverlayedSignals: str  # static # readonly
    KeyShowPlotsPerPage: str  # static # readonly
    KeyUseBlockingCall: str  # static # readonly

    DestinationPath: str
    ResultsToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    SelectedContents: Agilent.MassSpectrometry.DataAnalysis.ReportContents
    SelectedDestination: Agilent.MassSpectrometry.DataAnalysis.ReportDestination
    ShowOnePlotPerPage: bool
    ShowOverlayedSignals: bool
    UseBlockingCall: bool
    VisibleDataItems: List[int]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotReportSettings
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotReportSettings: ...

class PSetPlotTitleDefinitions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions
    ) -> None: ...

    KeyEnablePlotTitles: str  # static # readonly
    KeyMSChromPlotDef: str  # static # readonly
    KeyMSSpectrumPlotDef: str  # static # readonly
    KeyOtherChromPlotDef: str  # static # readonly

    EnablePlotTitles: bool
    PSetMSChromPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    PSetMSSpectrumPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef
    PSetOtherChromPlotTitleDef: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDef

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions: ...

class PSetPlotWindowReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPlotWindowReportOptions,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPlotWindowReportOptions
    ) -> None: ...

    KeyIncludeFooter: str  # static # readonly
    KeyIncludeHeader: str  # static # readonly
    KeyOrientation: str  # static # readonly
    KeyXPages: str  # static # readonly
    KeyYPages: str  # static # readonly

    IncludeFooter: bool
    IncludeHeader: bool
    ReportOrientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotWindowReportOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPlotWindowReportOptions: ...

class PSetPolynomialTofCalStep(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPolynomialTofCalStep
    ) -> None: ...

    KeyCalibrationFormula: str  # static # readonly
    KeyCalibrationTechnique: str  # static # readonly
    KeyCoefficientUseFlags: str  # static # readonly
    StepChanged: (
        Agilent.MassSpectrometry.DataAnalysis.PSetPolynomialTofCalStep.StepChangedDelegate
    )

    CalibrationFormula: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula
    CalibrationTechnique: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique
    CoefficientCount: int  # readonly
    CoefficientUseFlags: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep
    ) -> bool: ...
    def GetCoefficient(self, valueIndex: int) -> float: ...
    def SetCoefficients(self, coefficients: List[float]) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep: ...

    # Nested Types

    class StepChangedDelegate(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self, callback: System.AsyncCallback, object: Any
        ) -> System.IAsyncResult: ...
        def Invoke(self) -> None: ...

class PSetPrecision(
    Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPrecision
    ) -> None: ...

    KeyXChromMinutes: str  # static # readonly
    KeyXChromMinutesDigits: str  # static # readonly
    KeyXChromScanNumber: str  # static # readonly
    KeyXChromScanNumberDigits: str  # static # readonly
    KeyXChromSeconds: str  # static # readonly
    KeyXChromSecondsDigits: str  # static # readonly
    KeyXMsMass: str  # static # readonly
    KeyXMsMassDigits: str  # static # readonly
    KeyXMsMz: str  # static # readonly
    KeyXMsMzDigits: str  # static # readonly

    XChromMinutesPrecisionDigits: int
    XChromMinutesPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XChromScanNumbersPrecisionDigits: int
    XChromScanNumbersPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XChromSecondsPrecisionDigits: int
    XChromSecondsPrecisionType: (
        Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    )
    XMsMassPrecisionDigits: int
    XMsMassPrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    XMsMzPrecisionDigits: int
    XMsMzPrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision
    ) -> bool: ...
    @staticmethod
    def Key(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        unit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> str: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...

class PSetPrintQualReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetPrintQualReportOptions,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetPrintQualReportOptions
    ) -> None: ...

    KeyContentToInclude: str  # static # readonly
    KeyOverwriteExistingReport: str  # static # readonly
    KeyPrintPreview: str  # static # readonly
    KeyPrintReport: str  # static # readonly
    KeyPrinterName: str  # static # readonly
    KeySaveReport: str  # static # readonly
    KeySaveReportInsideDataFile: str  # static # readonly
    KeySaveReportToPDF: str  # static # readonly
    KeySeparateReportPerDataFile: str  # static # readonly
    KeySpecifiedReportDirectory: str  # static # readonly

    ContentToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    OverwriteExistingReport: bool
    PrintPreview: bool
    PrintReport: bool
    PrinterName: str
    ReportType: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType
    SaveReport: bool
    SaveReportInsideDataFile: bool
    SaveReportToPDF: bool
    SeparateReportPerDataFile: bool
    SpecifiedReportDirectory: str
    WorklistSettings: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetPrintQualReportOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrintQualReportOptions: ...

class PSetProbableNegSpecies(
    Agilent.MassSpectrometry.DataAnalysis.PSetProbableSpecies,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetProbableNegSpecies
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetProbablePosSpecies(
    Agilent.MassSpectrometry.DataAnalysis.PSetProbableSpecies,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetProbablePosSpecies
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetProbableSpecies(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetProbableSpecies
    ) -> None: ...

    KeyChargeCarriers: str  # static # readonly
    KeyChargeStateRange: str  # static # readonly
    KeyDimers: str  # static # readonly
    KeyNeutralLosses: str  # static # readonly
    KeyTrimers: str  # static # readonly

    ChargeCarriers: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    ChargeStateRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    IncludeDimers: bool
    IncludeTrimers: bool
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity  # readonly
    NeutralLosses: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetProbableSpecies: ...

class PSetQualCompareDataFiles(
    Agilent.MassSpectrometry.DataAnalysis.IPSetQualCompareDataFiles,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetQualCompareDataFiles
    ) -> None: ...

    KeyOpenedFiles: str  # static # readonly
    KeyReferenceFile: str  # static # readonly
    KeySampleFiles: str  # static # readonly

    FilesToBeOpened: System.Collections.Generic.List[str]
    OpenedFiles: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    OpenedFilesAnalysisIds: System.Collections.Generic.List[int]
    OpenedFilesResultStatus: Dict[str, bool]
    ReferenceFile: str
    SampleFiles: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetQualCompareDataFiles
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetQualCompareDataFiles: ...

class PSetRTEIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetRTEIntegrator
    ) -> None: ...

    KeyBaselinePreference: str  # static # readonly
    KeyBaselineReset: str  # static # readonly
    KeyBaselineValley: str  # static # readonly
    KeyDataPointSampling: str  # static # readonly
    KeyDetectionFiltering: str  # static # readonly
    KeyPeakLocation: str  # static # readonly
    KeySmoothing: str  # static # readonly
    KeyStartThreshold: str  # static # readonly
    KeyStopThreshold: str  # static # readonly

    BaselinePreference: Agilent.MassSpectrometry.DataAnalysis.BaselinePreferenceType
    BaselineReset: int
    BaselineValley: float
    DataPointSampling: int
    DetectionFiltering: Agilent.MassSpectrometry.DataAnalysis.DetectionFilteringType
    PeakLocation: Agilent.MassSpectrometry.DataAnalysis.PeakLocationType
    Smoothing: bool
    StartThreshold: float
    StopThreshold: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetRTEIntegrator: ...

class PSetReferenceUtilities:  # Class
    @overload
    @staticmethod
    def OriginalPSet(ctl: Agilent.MassSpectrometry.DataAnalysis.IParamControl) -> T: ...
    @overload
    @staticmethod
    def OriginalPSet(
        pSetReferences: List[Agilent.MassSpectrometry.DataAnalysis.PSetReferences],
    ) -> T: ...
    @overload
    @staticmethod
    def CurrentPSet(ctl: Agilent.MassSpectrometry.DataAnalysis.IParamControl) -> T: ...
    @overload
    @staticmethod
    def CurrentPSet(
        pSetReferences: List[Agilent.MassSpectrometry.DataAnalysis.PSetReferences],
    ) -> T: ...

class PSetReferences:  # Struct
    CurrentPSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    OriginalPSet: Agilent.MassSpectrometry.DataAnalysis.IParameterSet

class PSetReportCommand(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommand
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetReportCommandAcqMethod(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandAcqMethod
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetReportCommandBase(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase
    ) -> None: ...

    KeyChromagtogramAnchoredMode: str  # static # readonly
    KeyColumnNames: str  # static # readonly
    KeyCounter: str  # static # readonly
    KeyDataItemID: str  # static # readonly
    KeyDelimiter: str  # static # readonly
    KeyDestinationPath: str  # static # readonly
    KeyEnableSpectralPeakLimit: str  # static # readonly
    KeyOnlyVisibleColumns: str  # static # readonly
    KeyOverwriteExistingData: str  # static # readonly
    KeyReportContents: str  # static # readonly
    KeyReportDestination: str  # static # readonly
    KeyResultsToInclude: str  # static # readonly
    KeySelectedTemplate: str  # static # readonly
    KeyShowOverlayedSignals: str  # static # readonly
    KeySortingColumnNames: str  # static # readonly
    KeySortingOrder: str  # static # readonly
    KeySpectralPeakLimit: str  # static # readonly
    KeyTopPlotID: str  # static # readonly
    KeyUseBlockingCall: str  # static # readonly
    KeyUseDefaultFilename: str  # static # readonly

    ChromagtogramAnchoredMode: bool
    ColumnNames: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    Counter: int
    DataItemID: int
    Delimiter: str
    DestinationPath: str
    EnableSpectralPeakLimit: bool
    IsFilteredRowRequired: bool
    NestedColumnNames: List[List[str]]
    NestedSortingColumnNames: List[List[str]]
    NestedSortingOrder: List[List[str]]
    OnlyVisibleColumns: bool
    OverwriteExistingData: bool
    ResultsToInclude: Agilent.MassSpectrometry.DataAnalysis.ContentToInclude
    SelectedContents: Agilent.MassSpectrometry.DataAnalysis.ReportContents
    SelectedDestination: Agilent.MassSpectrometry.DataAnalysis.ReportDestination
    SelectedTemplate: str
    ShowOverlayedSignals: bool
    SortingColumnNames: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    SortingOrder: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    SpectralPeakLimit: int
    TableObject: Any
    TableTitle: str
    TopPlotID: int
    UseBlockingCall: bool
    UseDefaultFilename: bool

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand: ...

class PSetReportCommandDAMethod(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandDAMethod
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetReportCommandExport(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandExport
    ) -> None: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...

class PSetReportCommandPlotExport(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandPlotExport
    ) -> None: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...

class PSetReportCommandTableExport(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandTableExport
    ) -> None: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...

class PSetReportCommandTune(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandTune
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetReportCommandWindowPrint(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportCommand,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandBase,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportCommandWindowPrint
    ) -> None: ...
    def Validate(self) -> bool: ...

class PSetReportTemplateDefinition(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportTemplateDefinition
    ) -> None: ...

    KeyReportTemplateType: str  # static # readonly
    KeyTemplateName: str  # static # readonly

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateDefinition: ...

class PSetReportTemplateSelection(
    Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateSelection,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetReportTemplateSelection
    ) -> None: ...

    KeyAcqMethodReportTemplate: str  # static # readonly
    KeyAnalysisReportTemplate: str  # static # readonly
    KeyCompoundReportTemplate: str  # static # readonly
    KeyDAMethodReportTemplate: str  # static # readonly
    KeyMSTuneReportTemplate: str  # static # readonly
    KeyPSetAvailableReportTemplates: str  # static # readonly
    KeyPlotWindowReportTemplate: str  # static # readonly
    KeyRawDataReportTemplate: str  # static # readonly
    KeyTableWindowReportTemplate: str  # static # readonly

    AcqMethodReportTemplate: str
    AnalysisReportTemplate: str
    CompoundReportTemplate: str
    DAMethodReportTemplate: str
    MSTuneReportTemplate: str
    PSetAvailableReportTemplates: (
        Agilent.MassSpectrometry.DataAnalysis.IPSetAvailableReportTemplates
    )
    PlotWindowReportTemplate: str
    RawDataReportTemplate: str
    ReportTemplateFolderPath: str  # readonly
    TableWindowReportTemplate: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateSelection
    ) -> bool: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetReportTemplateSelection: ...

class PSetResultsOption(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetResultsOption,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetResultsOption
    ) -> None: ...

    KeyAlgorithmType: str  # static # readonly
    KeyClearOldResults: str  # static # readonly
    KeyHighlightAll: str  # static # readonly
    KeyUsedForAutomation: str  # static # readonly
    KeyUsedForCompounds: str  # static # readonly
    KeyUsedForMatchSequence: str  # static # readonly

    ClearOldResults: bool
    HighlightAll: bool
    ResultsAlgorithmType: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType
    UsedForAutomation: bool
    UsedForCompounds: bool
    UsedForMatchSequence: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetResultsOption
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetResultsOption: ...

class PSetRiDeconvolution(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetRiDeconvolution
    ) -> None: ...

    KeyNegativeChargeCarrier: str  # static # readonly
    KeyPositiveChargeCarrier: str  # static # readonly

    NegativeChargeCarrier: str
    PositiveChargeCarrier: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution
    ) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetRiDeconvolution: ...

class PSetSamplePurity(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetSamplePurity,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetSamplePurity
    ) -> None: ...

    KeyAlgorithmForQualification: str  # static # readonly
    KeyAlgorithmToUse: str  # static # readonly
    KeyComputeSamplePurity: str  # static # readonly
    KeyMinimumAcceptedPurity: str  # static # readonly
    KeyRTWindow: str  # static # readonly
    KeyUseAvgResult: str  # static # readonly
    KeyUseLargestResult: str  # static # readonly
    KeyUseMinResult: str  # static # readonly
    KeyUsePeakArea: str  # static # readonly
    KeyUseSingleAlgorithm: str  # static # readonly

    AlgorithmForQualification: (
        Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms
    )
    AlgorithmToUse: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms
    ComputeSamplePurity: bool
    MinimumAcceaptedPurity: int
    RTWindow: float
    UseAvgResults: bool
    UseLargestResult: bool
    UseMinResults: bool
    UsePeakArea: bool
    UseSingleAlgorithm: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSamplePurity
    ) -> bool: ...
    def UpdateValueChoicesQualAlgo(self) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSamplePurity: ...
    def updateIndex(
        self,
        enumVal: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms,
        val: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms,
        m_ArrAlgoType: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms
        ],
    ) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class PSetSendToPCDL(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetSendToPCDL,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetSendToPCDL
    ) -> None: ...

    DefaultMinimumBasePeakAbundance: float = ...  # static # readonly
    DefaultUseBasePeakAbundanceFilter: bool = ...  # static # readonly
    KeyCdbFileName: str  # static # readonly
    KeyConflictResolution: str  # static # readonly
    KeyFormulaAnnotationPeaks: str  # static # readonly
    KeyMinimumBasePeakAbundance: str = ...  # static # readonly
    KeyUseBasePeakAbundanceFilter: str = ...  # static # readonly
    KeyUseCalculatedMzIfPresent: str  # static # readonly

    CdbFilename: str
    ConflictResolution: (
        Agilent.MassSpectrometry.DataAnalysis.SendToPCDLConflictResolution
    )
    FormulaAnnotationPeaks: bool
    MinimumBasePeakAbundance: float
    UseBasePeakAbundanceFilter: bool
    UseCalculatedMzIfPresent: bool

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSendToPCDL
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSendToPCDL: ...

class PSetSignalToNoise(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetSignalToNoise
    ) -> None: ...

    KeyAutoNoiseRangeSelection: str  # static # readonly
    KeyDesiredNoiseLengthInMin: str  # static # readonly
    KeyEndTimeInMin: str  # static # readonly
    KeyMinimumNoiseLengthInMin: str  # static # readonly
    KeyNoiseMultiplier: str  # static # readonly
    KeyNoiseRegionWidthInMin: str  # static # readonly
    KeyNoiseRegions: str  # static # readonly
    KeyNoiseType: str  # static # readonly
    KeyRunOnIntegration: str  # static # readonly
    KeySignalType: str  # static # readonly
    KeyStartTimeInMin: str  # static # readonly

    AutoNoiseRangeSelection: bool
    DesiredNoiseLengthInMin: float
    EndTimeInMin: float
    MinimumNoiseLengthInMin: float
    NoiseMultiplier: float
    NoiseMultiplierAutoRMS: float  # readonly
    NoiseRegionWidthInMin: float
    NoiseRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    NoiseTypeDefinition: Agilent.MassSpectrometry.DataAnalysis.NoiseType
    RunOnIntegration: bool
    SignalType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    StartTimeInMin: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSignalToNoise: ...

class PSetSmoothing(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetSmoothing
    ) -> None: ...

    KeyFunctionWidth: str  # static # readonly
    KeyGaussianWidth: str  # static # readonly
    KeySmoothFunction: str  # static # readonly

    FunctionWidth: int
    GaussianWidth: float
    SmoothingFunction: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSmoothing: ...

class PSetStandaloneFormulaCalculator(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator,
    ) -> None: ...

    KeyFormulaCalculator: str  # static # readonly
    KeyIdentityScoring: str  # static # readonly

    PSetFormulaCalculator: Agilent.MassSpectrometry.DataAnalysis.IPSetFormulaCalculator
    PSetIdentityScoring: Agilent.MassSpectrometry.DataAnalysis.IPSetIdentityScoring

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetStandaloneFormulaCalculator: ...

class PSetStoredDataOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetStoredDataOptions,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetStoredDataOptions
    ) -> None: ...

    KeyChromExtractionMode: str  # static # readonly
    KeyExtractionMode: str  # static # readonly

    ChromExtractionMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType
    ExtractionMode: Agilent.MassSpectrometry.DataAnalysis.DesiredMSStorageType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetStoredDataOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetStoredDataOptions: ...

class PSetSystemSuitability(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetSystemSuitability
    ) -> None: ...

    KeyColumnLength: str  # static # readonly
    KeyColumnLengthUnit: str  # static # readonly
    KeyColumnVoidTime: str  # static # readonly
    KeyEnableSuitabilityCalculation: str  # static # readonly
    KeyPharmacopoeiaType: str  # static # readonly

    ColumnLength: float
    ColumnLengthUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    ColumnVoidTime: float
    EnableSuitabilityCalculation: bool
    PharmacopoeiaType: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability: ...

class PSetTimeRangeCollection(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetRangeCollection,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetTimeRangeCollection
    ) -> None: ...

    KeyRanges: str  # static # readonly
    KeyUseRanges: str  # static # readonly

    def Validate(self) -> bool: ...

class PSetTofCalibration(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ITofTimeMassConverter,
    Agilent.MassSpectrometry.DataAnalysis.ITofCalibrator,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetTofCalibration
    ) -> None: ...
    @overload
    def __init__(self, source: WtcCalibration) -> None: ...

    KeyIonPolarity: str  # static # readonly

    InnerCalibration: WtcCalibration  # readonly

class PSetTofPeakFinder(
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder,
    Agilent.MassSpectrometry.DataAnalysis.IPSetPeakFind,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetTofPeakFinder
    ) -> None: ...

    KeyBaselineChunkSize: str  # static # readonly
    KeyBaselineFractionSkip: str  # static # readonly
    KeyBaselineFractionUse: str  # static # readonly
    KeyBaselineMinimumChunks: str  # static # readonly
    KeyDetectMaximumSpikeWidth: str  # static # readonly
    KeyDetectRequiredValley: str  # static # readonly
    KeyDoRestrictXRange: str  # static # readonly
    KeyFastBaseline: str  # static # readonly
    KeyRestrictedXRange: str  # static # readonly
    KeyTolerance: str  # static # readonly

    BaselineChunkSize: int
    BaselineFractionSkip: float
    BaselineFractionUse: float
    BaselineMinimumChunks: int
    DetectMaximumSpikeWidth: int
    DetectRequiredValley: float
    DoRestrictXRange: bool
    FastBaseline: bool
    RestrictedXRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    Tolerance: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofPeakFinder: ...

class PSetTraditionalTofCalStep(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetTraditionalTofCalStep
    ) -> None: ...

    KeyACoefficient: str  # static # readonly
    KeyCalibrationFormula: str  # static # readonly
    KeyCalibrationTechnique: str  # static # readonly
    KeyToCoefficient: str  # static # readonly
    StepChanged: (
        Agilent.MassSpectrometry.DataAnalysis.PSetTraditionalTofCalStep.StepChangedDelegate
    )

    CalibrationFormula: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula
    CalibrationTechnique: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique
    CoefficientCount: int  # readonly
    CoefficientUseFlags: int

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep
    ) -> bool: ...
    def GetCoefficient(self, valueIndex: int) -> float: ...
    @overload
    def SetCoefficients(self, a: float, to: float) -> None: ...
    @overload
    def SetCoefficients(self, coefficients: List[float]) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalStep: ...

    # Nested Types

    class StepChangedDelegate(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self, callback: System.AsyncCallback, object: Any
        ) -> System.IAsyncResult: ...
        def Invoke(self) -> None: ...

class PSetURLSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetURLSettings,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetURLSettings
    ) -> None: ...

    KeyCasId: str  # static # readonly
    KeyHmpId: str  # static # readonly
    KeyKeggId: str  # static # readonly
    KeyLipidId: str  # static # readonly
    KeyMPPID: str  # static # readonly
    KeyNCBIID: str  # static # readonly
    KeySwissProtID: str  # static # readonly

    CasId: str
    HmpId: str
    KeggId: str
    LipidId: str
    MPPID: str
    NCBIID: str
    SwissProtID: str

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetURLSettings
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetURLSettings: ...

class PSetUnits(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetUnits
    ) -> None: ...

    KeyAcqTimeDifferenceUnits: str  # static # readonly
    KeyChromXUnits: str  # static # readonly
    KeyIonAbundanceUnits: str  # static # readonly
    KeyMsXUnits: str  # static # readonly
    KeyMzDifferenceUnits: str  # static # readonly

    def Validate(self) -> bool: ...

class PSetUserSpecifiedCompoundSettings(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetUserSpecifiedCompoundSettings,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.PSetUserSpecifiedCompoundSettings,
    ) -> None: ...

    KeyAdduct: str  # static # readonly
    KeyAlgorithm: str  # static # readonly
    KeyChargeState: str  # static # readonly
    KeyMass: str  # static # readonly
    KeyNeutralMass: str  # static # readonly
    KeyNotes: str  # static # readonly
    KeyRTEnd: str  # static # readonly
    KeyRTStart: str  # static # readonly
    KeyRetTime: str  # static # readonly

    Adduct: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    Algorithm: Agilent.MassSpectrometry.DataAnalysis.AlgorithmType
    ChargeState: float
    Mass: float
    NeutralMass: float
    Notes: str
    RTEnd: float
    RTStart: float
    RetTime: float

    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.IPSetUserSpecifiedCompoundSettings,
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUserSpecifiedCompoundSettings: ...

class PSetWindowReportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PSetWindowReportOptions
    ) -> None: ...

    KeyCenterText_CustomFooter: str  # static # readonly
    KeyFitToOnePageWide: str  # static # readonly
    KeyFooterOption: str  # static # readonly
    KeyLeftText_CustomFooter: str  # static # readonly
    KeyOrientation: str  # static # readonly
    KeyRightText_CustomFooter: str  # static # readonly

    CustomFooterText_Center: str
    CustomFooterText_Left: str
    CustomFooterText_Right: str
    FitToOnePageWide: bool
    FooterOption: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions
    ReportOrientation: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetWindowReportOptions: ...

class ParallelSetting:  # Class
    def __init__(self) -> None: ...

    GlobalOptions: System.Threading.Tasks.ParallelOptions  # static

class ParamControlButtonPressEventArgs(System.EventArgs):  # Class
    def __init__(
        self, button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons
    ) -> None: ...

    button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons  # readonly

class ParamControlButtonPressEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtonPressEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtonPressEventArgs,
    ) -> None: ...

class ParamControlButtons(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Copy: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Cut: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Default: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Edit: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Export: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Highlight: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Import: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    New: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Paste: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Reset: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Run: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Save: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly
    Update: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons = (
        ...
    )  # static # readonly

class ParamControlPartialDataEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, e: System.EventArgs) -> None: ...

class Parameter(
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    System.ICloneable,
):  # Class
    Applicable: bool
    ConversionSupport: Agilent.MassSpectrometry.DataAnalysis.ConversionSupport
    DefaultValueString: str  # readonly
    DisplayName: str
    ExtendedValueString: str  # readonly
    FeatureConfigTag: int
    IsReportable: bool
    IsValid: bool
    MaximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    MinimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType
    RecommendedFormat: str
    UsageKey: str
    ValidationMessage: str
    ValueString: str  # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def GetUnitString(self, abbreviate: bool) -> str: ...
    def Validate(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IParameter: ...
    def SetToDefault(self) -> None: ...
    def OnDeserializing(
        self, context: System.Runtime.Serialization.StreamingContext
    ) -> None: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

    ValidationSetEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ValidationSetEventHandler
    )  # Event
    ValueChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ValueChangeEventHandler
    )  # Event

class ParameterChangedEventArgs(System.EventArgs):  # Class
    @overload
    def __init__(self, changedParameterUsageKeys: List[str]) -> None: ...
    @overload
    def __init__(self, changedParameterUsageKey: str) -> None: ...

    ChangedParameterUsageKeys: List[str]  # readonly

class ParameterChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ParameterChangedEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ParameterChangedEventArgs,
    ) -> None: ...

class ParameterSet(
    Iterable[Any],
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    Count: int  # readonly
    def __getitem__(
        self, key: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameter: ...
    def GetEnumerator(self) -> Iterator[Any]: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def InstantiateParameterSet(
        psClass: str, psAssembly: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    def UpdateForAppFeatureConfigChanges(self) -> bool: ...
    def AddParameter(
        self, key: str, value_: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    @staticmethod
    def CreateParameterSet(
        reader: System.Xml.XmlReader,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    def SetToDefault(self) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def GetParameter(
        self, internalKey: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameter: ...
    def ToString(self) -> str: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...

    ParameterChangedEvent: (
        Agilent.MassSpectrometry.DataAnalysis.ParameterChangedEventHandler
    )  # Event

    # Nested Types

    class ParameterSetIterator(Iterator[Any]):  # Class
        def __init__(
            self, parameterSet: Agilent.MassSpectrometry.DataAnalysis.ParameterSet
        ) -> None: ...

        Current: Agilent.MassSpectrometry.DataAnalysis.IParameter  # readonly

        def MoveNext(self) -> bool: ...
        def Reset(self) -> None: ...

class PeakBase(
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
):  # Class
    PeakBaseAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    PeakHighlighted: bool
    PeakLabel: str
    ResultAttributeValueDictionary: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttributeValueDictionary
    )  # readonly

    def ConvertPeakUnitValues(
        self,
        newUnits: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    @staticmethod
    def ConvertUnitsForWidth(
        oldWidth: float,
        originalWidthInMinutes: float,
        peakCenterX: float,
        dvUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> float: ...

class PeakClusterMFGResults:  # Class
    def __init__(self) -> None: ...

    bestResults: bool
    clusPkList: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IMsPeak
    ]
    formulaResultList: Agilent.MassSpectrometry.DataAnalysis.IFormulaList
    matchType: Agilent.MassSpectrometry.DataAnalysis.MFGMatchingRul
    maxChargeState: int
    score: float

class PeakErrorFlags(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AreaProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    HeightProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    InterferenceProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    MergeProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    NoProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    SeriousProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    Spiky: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    SymmetryProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    ThresholdedDataProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly
    WidthProblem: Agilent.MassSpectrometry.DataAnalysis.PeakErrorFlags = (
        ...
    )  # static # readonly

class PeakFillStyle(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Solid: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle = (
        ...
    )  # static # readonly
    Translucent: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle = (
        ...
    )  # static # readonly

class PeakFilterType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DisplayThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    MaximumCount: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    PeakAreaAbsThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    PeakAreaPctThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    PeakHeightAbsThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    PeakHeightPctThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    SignalToNoiseThreshold: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PeakFilterType = (
        ...
    )  # static # readonly

class PeakFinderAlgorithmName(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PeakExtractor: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName = (
        ...
    )  # static # readonly
    ReadFromFile: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName = (
        ...
    )  # static # readonly
    TofPF: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName = (
        ...
    )  # static # readonly

class PeakFlags(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Anomaly: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    AreaSum: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    Manual: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    Negative: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    NoFlags: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    Normal: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    Solvent: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = ...  # static # readonly
    TangentSkim: Agilent.MassSpectrometry.DataAnalysis.PeakFlags = (
        ...
    )  # static # readonly

class PeakHighlightAnnotations(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Arrow: Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations = (
        ...
    )  # static # readonly
    Bold: Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations = (
        ...
    )  # static # readonly
    Lines: Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations = (
        ...
    )  # static # readonly

class PeakListBase(
    Generic[T],
    Agilent.MassSpectrometry.DataAnalysis.IPeakHiding,
    System.ICloneable,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Agilent.MassSpectrometry.DataAnalysis.ISortByAttribute,
    List[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IPeak],
    Iterable[Any],
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IPeakList,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IItemHighlighting,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PeakListBase
    ) -> None: ...

    LabelAttributes: System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]  # readonly
    PeakListBaseAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly
    ResultAttributeValueDictionary: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttributeValueDictionary
    )  # readonly

    def VInvalidateCrossPeakAttributes(self) -> None: ...
    def HasValue(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def Add(self, peak: Agilent.MassSpectrometry.DataAnalysis.IPeak) -> None: ...
    def VComputeCrossPeakAttributes(self) -> None: ...

    # Nested Types

    class PeakListIterator(
        Generic[T, U], Iterator[Any], System.IDisposable, Iterator[U]
    ):  # Class
        def __init__(
            self, list: Agilent.MassSpectrometry.DataAnalysis.IPeakList
        ) -> None: ...

class PeakListXmlContents(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Header: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Key: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    PeakTable: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Peaks: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Schema: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Spikes: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PeakListXmlContents = (
        ...
    )  # static # readonly

class PeakLocationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Centroid: Agilent.MassSpectrometry.DataAnalysis.PeakLocationType = (
        ...
    )  # static # readonly
    Top: Agilent.MassSpectrometry.DataAnalysis.PeakLocationType = (
        ...
    )  # static # readonly

class PeakShape:  # Class
    @overload
    def __init__(
        self,
        peak: Agilent.MassSpectrometry.DataAnalysis.IChromPeak,
        chrom: Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    ) -> None: ...
    @overload
    def __init__(
        self, other: Agilent.MassSpectrometry.DataAnalysis.PeakShape
    ) -> None: ...
    @overload
    def __init__(self, x: List[float], polynomialPower: int) -> None: ...
    @overload
    def __init__(
        self,
        startIndex: int,
        apexIndex: int,
        endIndex: int,
        xArray: List[float],
        yArray: System.Array,
        yLeftBaseline: float,
        yRightBaseline: float,
        interpolatedX: float,
        interpolatedY: float,
        sharpness: float,
        saturated: bool,
    ) -> None: ...

    ApexIndex: int  # readonly
    ApexScanIndex: int  # readonly
    ChromOffset: int  # readonly
    InterpolatedHeight: float  # readonly
    InterpolatedRT: float  # readonly
    IsSaturated: bool  # readonly
    LastScanIndex: int  # readonly
    LeftInnerTangentIndex: int  # readonly
    LeftSharpness: float  # readonly
    MaxY: float  # readonly
    PointCount: int  # readonly
    RightInnerTangentIndex: int  # readonly
    RightSharpness: float  # readonly
    Sharpness: float  # readonly
    XArray: List[float]  # readonly
    XEnd: float  # readonly
    XStart: float  # readonly
    YArray: List[float]  # readonly
    YBaselineEnd: float  # readonly
    YBaselineStart: float  # readonly

    def GetYValueAt(self, xpt: float) -> float: ...
    @overload
    def ComputeArea(self) -> float: ...
    @overload
    def ComputeArea(self, rtMin: float, rtMax: float) -> float: ...
    def GetPeakRangeOverlap(self, rtStart: float, rtEnd: float) -> bool: ...
    def GetXValueByIndex(self, index: int) -> float: ...
    def IsRangeOverlappedWith(self, rtMin: float, rtMax: float) -> bool: ...
    def GetYValueByIndex(self, index: int) -> float: ...
    def Rescale(self, yScaleFactor: float) -> None: ...

class PeakShapeFilter:  # Class
    @overload
    def __init__(
        self,
        component: Agilent.MassSpectrometry.DataAnalysis.Component,
        cpParams: Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams,
    ) -> None: ...
    @overload
    def __init__(
        self, other: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilter
    ) -> None: ...

    ComponentPerceptionParams: (
        Agilent.MassSpectrometry.DataAnalysis.ComponentPerceptionParams
    )  # readonly
    PeakShapeCorrelationStats: (
        Agilent.MassSpectrometry.DataAnalysis.PeakShapeStats
    )  # readonly
    PeakShapeDifferenceStats: (
        Agilent.MassSpectrometry.DataAnalysis.PeakShapeStats
    )  # readonly
    RemovedPeakCount: int  # readonly
    Threshold: float  # readonly

    def RemovePeakShapeOutliers(
        self,
        peaks: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IonPeak
        ],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ]: ...
    def IsRemoved(
        self, ionPeak: Agilent.MassSpectrometry.DataAnalysis.IonPeak
    ) -> bool: ...

class PeakShapeFilterEnum(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Off: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum = (
        ...
    )  # static # readonly
    UseCorrelation: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum = (
        ...
    )  # static # readonly
    UseCorrelationFixedThreshold: (
        Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum
    ) = ...  # static # readonly
    UseDiffs: Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum = (
        ...
    )  # static # readonly
    UseDiffsFixedThreshold: (
        Agilent.MassSpectrometry.DataAnalysis.PeakShapeFilterEnum
    ) = ...  # static # readonly

class PeakShapeStats:  # Class
    @overload
    def __init__(self, x: System.Collections.Generic.List[float]) -> None: ...
    @overload
    def __init__(
        self, other: Agilent.MassSpectrometry.DataAnalysis.PeakShapeStats
    ) -> None: ...

    FirstQuartile: float  # readonly
    InterQuartileRange: float  # readonly
    Max: float  # readonly
    Median: float  # readonly
    Min: float  # readonly

    @staticmethod
    def GetStats(
        x: System.Collections.Generic.List[float],
        min: float,
        max: float,
        median: float,
        q1: float,
        iqr: float,
    ) -> None: ...

class PeakSpectrumDataType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    MS: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType = (
        ...
    )  # static # readonly
    MSMS: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType = (
        ...
    )  # static # readonly
    UV: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PeakSpectrumDataType = (
        ...
    )  # static # readonly

class PeakStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Accepted: Agilent.MassSpectrometry.DataAnalysis.PeakStatus = (
        ...
    )  # static # readonly
    All: Agilent.MassSpectrometry.DataAnalysis.PeakStatus = ...  # static # readonly
    Inspect: Agilent.MassSpectrometry.DataAnalysis.PeakStatus = ...  # static # readonly
    Rejected: Agilent.MassSpectrometry.DataAnalysis.PeakStatus = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PeakStatus = (
        ...
    )  # static # readonly

class PeakUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetXYValueArrays(
        xyPoints: List[Agilent.MassSpectrometry.DataAnalysis.XYPoint],
        xArray: List[float],
        yArray: List[float],
    ) -> None: ...
    @staticmethod
    def GetTangentWidth(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData, peakID: int
    ) -> float: ...
    @staticmethod
    def CalculateSystemSuitability(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakList: Agilent.MassSpectrometry.DataAnalysis.IPeakList,
        psetSystemSuitability: Agilent.MassSpectrometry.DataAnalysis.IPSetSystemSuitability,
    ) -> None: ...
    @staticmethod
    def GetSlope(x1: float, y1: float, x2: float, y2: float) -> float: ...
    @staticmethod
    def CalculateTailingFactor(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        pharmacopoeia: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia,
    ) -> float: ...
    @staticmethod
    def GetSigma(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData, peakID: int
    ) -> float: ...
    @staticmethod
    def CalculatePlateNumber(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        pharmacopoeia: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia,
    ) -> int: ...
    @staticmethod
    def GetDerivative(xArray: List[float], yArray: List[float]) -> List[float]: ...
    @overload
    @staticmethod
    def GetPeakWidthsAtPctHeight(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        heightPct: int,
    ) -> float: ...
    @overload
    @staticmethod
    def GetPeakWidthsAtPctHeight(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        heightPct: int,
        frontWidth: float,
        tailWidth: float,
    ) -> float: ...
    @staticmethod
    def GetXYValuesForPeak(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData, peakID: int
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.XYPoint]: ...
    @staticmethod
    def GetWidthBetweenInflectionPoints(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData, peakID: int
    ) -> float: ...
    @staticmethod
    def CalculatePeakResolution(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        pharmacopoeia: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia,
    ) -> float: ...
    @staticmethod
    def CalculateCapacityfactor(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData, peakID: int, T0: float
    ) -> float: ...
    @staticmethod
    def CalculatePlatesPerMeter(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        pharmacopoeia: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia,
        columnLengthInCentimeters: float,
    ) -> float: ...
    @staticmethod
    def CalculateSymmetry(
        fxData: Agilent.MassSpectrometry.DataAnalysis.IFXData,
        peakID: int,
        pharmacopoeia: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia,
    ) -> float: ...

class PeakWidthOption(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HalfTheoreticalWidth: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption = (
        ...
    )  # static # readonly
    TheoreticalWidth: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption = (
        ...
    )  # static # readonly
    Uncertainty: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PeakWidthOption = (
        ...
    )  # static # readonly

class PeriodicTable:  # Class
    def __init__(self) -> None: ...

    ElementCount: int  # static # readonly

    @overload
    @staticmethod
    def GetA2_A0Ratio(symbol: str) -> float: ...
    @overload
    @staticmethod
    def GetA2_A0Ratio(atomicNumber: int) -> float: ...
    @staticmethod
    def Contains(symbol: str) -> bool: ...
    @staticmethod
    def GetSymbol(atomicNumber: int) -> str: ...
    @staticmethod
    def IsMonoisotopicIsotope(symbol: str) -> bool: ...
    @staticmethod
    def GetHeavestMass(atomicNumber: int) -> float: ...
    @staticmethod
    def GetIsotopeDistribution(
        atomicNumber: int, mass: List[float], abundance: List[float]
    ) -> None: ...
    @staticmethod
    def HasSimpleIsotopes(symbol: str) -> bool: ...
    @overload
    @staticmethod
    def GetMonoisotopicMass(atomicNumber: int) -> float: ...
    @overload
    @staticmethod
    def GetMonoisotopicMass(symbol: str) -> float: ...
    @overload
    @staticmethod
    def GetIsotopeID(nucleonNumber: int, atomicNumber: int) -> int: ...
    @overload
    @staticmethod
    def GetIsotopeID(nucleonNumber: int, symbol: str) -> int: ...
    @overload
    @staticmethod
    def GetIsotopeCount(symbol: str) -> int: ...
    @overload
    @staticmethod
    def GetIsotopeCount(atomicNumber: int) -> int: ...
    @staticmethod
    def GetIsotopeMassDistributionSD(atomicNumber: int) -> float: ...
    @overload
    @staticmethod
    def GetMass(symbol: str, isotopeID: int) -> float: ...
    @overload
    @staticmethod
    def GetMass(atomicNumber: int, isotopeID: int) -> float: ...
    @overload
    @staticmethod
    def GetMass(nucleonNumber: int, symbol: str) -> float: ...
    @staticmethod
    def GetAtomicNumber(symbol: str) -> int: ...
    @staticmethod
    def GetMostAbundantIsotopeInex(atomicNumber: int) -> int: ...
    @staticmethod
    def GetCentroidMass(atomicNumber: int) -> float: ...
    @overload
    @staticmethod
    def GetNucleonNumber(symbol: str, isotopeID: int) -> int: ...
    @overload
    @staticmethod
    def GetNucleonNumber(atomicNumber: int, isotopeID: int) -> int: ...
    @overload
    @staticmethod
    def GetA1_A0Ratio(symbol: str) -> float: ...
    @overload
    @staticmethod
    def GetA1_A0Ratio(atomicNumber: int) -> float: ...

class Pharmacopoeia(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BP: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = ...  # static # readonly
    DAB: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = ...  # static # readonly
    EP: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = ...  # static # readonly
    JP: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = ...  # static # readonly
    USP: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = ...  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.Pharmacopoeia = (
        ...
    )  # static # readonly

class PlotAutoscaleMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    X: Agilent.MassSpectrometry.DataAnalysis.PlotAutoscaleMode = (
        ...
    )  # static # readonly
    XY: Agilent.MassSpectrometry.DataAnalysis.PlotAutoscaleMode = (
        ...
    )  # static # readonly
    Y: Agilent.MassSpectrometry.DataAnalysis.PlotAutoscaleMode = (
        ...
    )  # static # readonly

class PlotPreferences(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences,
    Agilent.MassSpectrometry.DataAnalysis.IDataViewDependent,
    Agilent.MassSpectrometry.DataAnalysis.DisplayPreferences,
    Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PlotPreferences
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IDisplayPreferences
    ) -> None: ...

    KeyPlotSymbol_IsotopeAbundance: str  # static # readonly
    KeyPlotSymbol_Precursors: str  # static # readonly

    Anchored: bool
    AnnotationList: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList
    BoldXRegions: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    DrawBaseline: bool
    DrawingMode: Agilent.MassSpectrometry.DataAnalysis.DrawingMode
    FillPeaks: bool
    IdentifyBaselineCalcPoints: bool
    IdentifyPeakStartEnd: bool
    LineColor: System.Drawing.Color
    PeakFillStyle: Agilent.MassSpectrometry.DataAnalysis.PeakFillStyle
    PeakHighlightAnnotations: (
        Agilent.MassSpectrometry.DataAnalysis.PeakHighlightAnnotations
    )
    PeakHighlightColor: System.Drawing.Color
    PlotSymbolKeys: System.Collections.Generic.List[str]  # readonly
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    ShowSecondTitle: bool
    ShowStructure: bool
    StructureColor: System.Drawing.Color
    SuppressNegative: bool
    TimeSegmentAnnotationColor: System.Drawing.Color
    TimeSegmentAnnotations: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations
    UsePlotColorForStrcture: bool
    XAxisLabel: str
    XAxisUnitLabel: str
    XUnitsAndPrecision: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    XZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    YAxisLabel: str
    YAxisUnitLabel: str
    YUnitsAndPrecision: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    YZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange

    def UpdatePrecision(self) -> bool: ...
    def CopyOnlyPlotPreferences(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences
    ) -> None: ...
    def SetPlotSymbolList(
        self,
        key: str,
        list: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol
        ],
    ) -> None: ...
    def GetPlotSymbolList(
        self, key: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol
    ]: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ChangeNormalization(
        self, normMode: Agilent.MassSpectrometry.DataAnalysis.NormalizationModes
    ) -> bool: ...

class PlotSymbol(
    System.ICloneable, Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PlotSymbol
    ) -> None: ...

    Color: System.Drawing.Color
    Height: float
    KeepVisibleY: bool
    Label: str
    Symbol: Agilent.MassSpectrometry.DataAnalysis.AnnotationSymbol
    SymbolCentered: bool
    SymbolFillled: bool
    Width: float
    XCoordinate: float
    YCoordinate: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPlotSymbol: ...

class PlotTitlePolicy:  # Class
    def __init__(self) -> None: ...

    LastModificationTime: System.DateTime  # static # readonly
    TitlePSet: Agilent.MassSpectrometry.DataAnalysis.IPSetPlotTitleDefinitions  # static

class PointValueFormat(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PointValueFormat
    ) -> None: ...

    DataType: Agilent.MassSpectrometry.DataAnalysis.DataFileValueDataType
    PointValueID: int
    ScaleFactor: float
    StorageScheme: Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme
    Type: Agilent.MassSpectrometry.DataAnalysis.DataValueType

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.PointValueFormat: ...

class PointValueStorageScheme(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mixed: Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme = (
        ...
    )  # static # readonly
    Series: Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme = (
        ...
    )  # static # readonly
    StartAndDelta: Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PointValueStorageScheme = (
        ...
    )  # static # readonly

class PointerHeadGrabHandle(
    Agilent.MassSpectrometry.DataAnalysis.IGrabHandle,
    Agilent.MassSpectrometry.DataAnalysis.GrabHandle,
):  # Class
    def __init__(self) -> None: ...
    def Draw(self, g: System.Drawing.Graphics) -> None: ...
    def IsHit(self, xcc: float, ycc: float) -> bool: ...

class PointerTip(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Arrow: Agilent.MassSpectrometry.DataAnalysis.PointerTip = ...  # static # readonly
    FilledTriangle: Agilent.MassSpectrometry.DataAnalysis.PointerTip = (
        ...
    )  # static # readonly
    NonFillTriangle: Agilent.MassSpectrometry.DataAnalysis.PointerTip = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.PointerTip = (
        ...
    )  # static # readonly

class PolynomialWeighting(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    InverseMass: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    InverseMassSquared: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    InverseTime: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    InverseTimeSquared: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    NoWeighting: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly
    Time: Agilent.MassSpectrometry.DataAnalysis.PolynomialWeighting = (
        ...
    )  # static # readonly

class PreSearchParameters:  # Class
    def __init__(self) -> None: ...

    IsAccurateMassSpectrum: bool
    MinCandidateCount: int
    PercentUncertainty: float
    PreSearchType: Agilent.MassSpectrometry.DataAnalysis.ScreeningType

class PrecisionInfo(
    Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        pType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        pDigits: int,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.PrecisionInfo
    ) -> bool: ...

class PrecisionLibrary:  # Class
    def __init__(self) -> None: ...

    LastChangeOfAny: System.DateTime  # static # readonly

    @overload
    @staticmethod
    def Format(
        dValue: float,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> str: ...
    @overload
    @staticmethod
    def Format(
        lValue: int,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> str: ...
    @staticmethod
    def GetPrecisionDigits(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> int: ...
    @staticmethod
    def LastChange(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> System.DateTime: ...
    @staticmethod
    def UpdatePrecisions(
        pset: Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision,
    ) -> None: ...
    @overload
    @staticmethod
    def SetPrecision(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        info: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo,
    ) -> None: ...
    @overload
    @staticmethod
    def SetPrecision(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        digits: int,
    ) -> None: ...
    @staticmethod
    def GetPrecision(
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        units: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo: ...

class PrecisionParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IPrecisionParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        digits: int,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PrecisionParameter
    ) -> None: ...
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...
    def IsValueValid(
        self, info: Agilent.MassSpectrometry.DataAnalysis.IPrecisionInfo
    ) -> bool: ...

class PrecursorIdResults(
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.SpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IPrecursorIdResults,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IPrecursorIdResults
    ) -> None: ...
    @overload
    def __init__(
        self,
        msPeaks: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IMsPeak
        ],
        chargeState: int,
    ) -> None: ...

class PredictedModificationMaxLimit(
    Agilent.MassSpectrometry.DataAnalysis.IPredictedModificationMaxLimit
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, proteinMaxLimit: int, proteinDigestMaxLimit: int) -> None: ...

    ProteinDigestMaxLimit: int
    ProteinMaxLimit: int

class ProfileMsPeak(
    Agilent.MassSpectrometry.DataAnalysis.IProfileMsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IMsPeak,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.MsPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeak,
    Agilent.MassSpectrometry.DataAnalysis.IPeakInternals,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        upList: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ProfileMsPeak
    ) -> None: ...

    PeakAttributeDefs: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # static # readonly
    ProfileMsPeakAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    )  # static # readonly

class ProgramModule(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Application: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    BaseCommon: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    BaseDataAccess: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    BaseDataWriter: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    BaseExport: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    BaseMsUtils: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    ChemstationTranslator: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CompositionCalculatorEngine: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CompoundCorrelationEngine: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreDbSearch: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreDeconvolute: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreFacades: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreScda: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreSpectralLibrarySearch: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreTypes: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    CoreUI: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    MassSpecDataReader: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    MfeBase: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    MfeEngine: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    Reports: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    Translators: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly
    WiffTranslator: Agilent.MassSpectrometry.DataAnalysis.ProgramModule = (
        ...
    )  # static # readonly

class ProgressEventArgs(System.EventArgs):  # Class
    @overload
    def __init__(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        stageMessage: str,
        percentComplete: int,
        canCancelTask: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        stageMessage: str,
        percentComplete: int,
    ) -> None: ...

    CanCancelTask: bool  # readonly
    PercentComplete: int  # readonly
    ProgressStage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage  # readonly
    StageMessage: str  # readonly

class ProgressEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ProgressEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self, sender: Any, args: Agilent.MassSpectrometry.DataAnalysis.ProgressEventArgs
    ) -> None: ...

class ProgressMonitor:  # Class
    def __init__(
        self,
        notifyProgressDel: Agilent.MassSpectrometry.DataAnalysis.NotifyProgressDelegate,
    ) -> None: ...

    LastProgressReportTime: System.DateTime
    PercentComplete: int

    def ReportProgress(
        self,
        stage: Agilent.MassSpectrometry.DataAnalysis.ProgressStage,
        percentComplete: int,
        message: Agilent.MassSpectrometry.DataAnalysis.IUserMessage,
    ) -> None: ...

class ProgressStage(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Finished: Agilent.MassSpectrometry.DataAnalysis.ProgressStage = (
        ...
    )  # static # readonly
    Progressing: Agilent.MassSpectrometry.DataAnalysis.ProgressStage = (
        ...
    )  # static # readonly
    Starting: Agilent.MassSpectrometry.DataAnalysis.ProgressStage = (
        ...
    )  # static # readonly

class PsetAsrExportOptions(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IPSetAsrExportOptions,
    System.ICloneable,
    Iterable[Any],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PsetAsrExportOptions
    ) -> None: ...

    KeyPeakWindow: str  # static # readonly

    PeakWindow: float

    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPSetAsrExportOptions
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetAsrExportOptions: ...

class PsetStackAndResults(
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Generic[P, R],
    Agilent.MassSpectrometry.DataAnalysis.ParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.IParameterSet,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IPsetStackAndResults,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.PsetStackAndResults
    ) -> None: ...

    DisplayName: str
    def __getitem__(
        self, orderIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IParameterSet: ...
    MAX_PSET_COUNT: int
    Result: Agilent.MassSpectrometry.DataAnalysis.ICalculatorResults

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IPsetStackAndResults
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def RemoveByIndex(self, orderIndex: int) -> None: ...
    def GetUsageKeyForOrderIndex(self, orderIndex: int) -> str: ...
    def UpdatePrecision(self) -> bool: ...
    def MoveOnTop(self, orderIndex: int) -> None: ...
    def Validate(self) -> bool: ...
    def ClearAll(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IPsetStackAndResults: ...
    def GetAllUsageKeys(self) -> List[str]: ...
    def SetToDefault(self) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...
    def AddPset(
        self, sourcePset: Agilent.MassSpectrometry.DataAnalysis.IParameterSet
    ) -> int: ...

class QqqAcqMethodReader(
    System.IDisposable, Agilent.MassSpectrometry.DataAnalysis.DisposableBase
):  # Class
    def __init__(self) -> None: ...

    IsFragmentorVoltagePresent: bool  # readonly
    IsTriggeredMrmFile: bool  # readonly

    def SearchForMatches(
        self,
        ts: int,
        ss: int,
        precursor: float,
        product: float,
        ce: float,
        fv: float,
        mrm: Agilent.MassSpectrometry.DataAnalysis.MrmTransitionInfo,
    ) -> bool: ...
    def Close(self) -> None: ...
    def Init(self, acqDataPath: str) -> None: ...
    @staticmethod
    def QQQAcqMethodExists(dataFileName: str) -> bool: ...

class QuantParms:  # Struct
    qp_bl: float
    qp_bl_seg_length: int
    qp_evalpts: int
    qp_filter_width: int
    qp_kept_area: float
    qp_kept_width_base: float
    qp_merged_peaks: int
    qp_peak_kept: int
    qp_peak_suspect: int
    qp_peak_tossed: int
    qp_peakcount: int
    qp_sd: float
    qp_slope: float
    qp_spikecount: int
    qp_suspect_area: float
    qp_tossed_area: float

class RNANucleotide(Agilent.MassSpectrometry.DataAnalysis.IRNANucleotide):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szSymbol: str,
        szFormula: str,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    RNANucleotideFormula: str
    RNANucleotideName: str
    RNANucleotideSymbol: str
    RNANucleotideType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class RTCalibrationPoint:  # Class
    def __init__(
        self, compoundName: str, refNumber: str, rIndex: float, rTime: float
    ) -> None: ...

    CompoundName: str  # readonly
    RefNumber: str  # readonly
    RetentionIndex: float  # readonly
    RetentionTime: float  # readonly

    # Nested Types

    class RIComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            p1: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint,
            p2: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint,
        ) -> int: ...

    class RTComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            p1: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint,
            p2: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint,
        ) -> int: ...

class RTCalibrationTable:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        dataPoints: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
        ],
    ) -> None: ...

    MIN_POINTS: int = ...  # static # readonly

    DataPoints: List[
        Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
    ]  # readonly
    FileName: str  # readonly
    NumPoints: int  # readonly

    def WriteToFile(self, fileName: str) -> None: ...
    def LookUpRetentionTime(self, retentionIndex: float) -> float: ...
    def AddDataPoint(
        self, dataPt: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
    ) -> None: ...
    def RemoveDataPoint(
        self, dataPt: Agilent.MassSpectrometry.DataAnalysis.RTCalibrationPoint
    ) -> None: ...
    def ReadFromFile(self, fileName: str) -> None: ...
    def LookUpRetentionIndex(self, rt: float) -> float: ...

class RTEIntAlgorithm:  # Class
    def __init__(self) -> None: ...

    IDS_MSINT_BUF_OVERFLOW: int = ...  # static # readonly
    IDS_MSINT_TOO_MANY_PEAKS: int = ...  # static # readonly
    IDS_MSINT_ZERODIV: int = ...  # static # readonly
    MINUS1: int = ...  # static # readonly
    MINUS2: int = ...  # static # readonly
    MINUS3: int = ...  # static # readonly
    MINUS4: int = ...  # static # readonly
    MSINT_5POINT: int = ...  # static # readonly
    MSINT_7POINT: int = ...  # static # readonly
    MSINT_9POINT: int = ...  # static # readonly
    MSINT_CENTROID: int = ...  # static # readonly
    MSINT_DFILTER_OFF: int = ...  # static # readonly
    MSINT_MAX_SMOOTH: int = ...  # static # readonly
    MSINT_REKEYVAL: int = ...  # static # readonly
    MSINT_RSLT_SIZE: int = ...  # static # readonly
    MSINT_TANSKIM: int = ...  # static # readonly
    NO_ERROR: int = ...  # static # readonly
    NUMAHEAD: int = ...  # static # readonly
    PLUS1: int = ...  # static # readonly
    PLUS2: int = ...  # static # readonly
    PLUS3: int = ...  # static # readonly
    PLUS4: int = ...  # static # readonly
    PLUS5: int = ...  # static # readonly
    ZERO: int = ...  # static # readonly
    coeff5pt: List[float]
    coeff7pt: List[float]
    coeff9pt: List[float]
    where: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer]

    def CompareByRT(
        self,
        a: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        b: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
    ) -> bool: ...
    def ClearPkBuf(self, j: int) -> None: ...
    def Truncate(self, x: float) -> int: ...
    def CompareByCorrArea(
        self,
        a: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        b: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
    ) -> bool: ...
    def slpin_8(
        self, x1: int, y1: float, x2: int, y2: float, slope: float, interc: float
    ) -> None: ...
    def msint_Rbase(
        self, j: int, max: int, bl_scan: int, right_s: int, right_a: float
    ) -> None: ...
    def Deriv(
        self, m: int, dArr: List[float], iStartOffset: int, result: float
    ) -> None: ...
    def MSINT_FITLN_8(self, x: float, slope: float, interc: float) -> float: ...
    def Round(self, x: float) -> int: ...
    def sift(
        self,
        pSortBuf: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer],
        pSortTempRec: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        ulLeft: int,
        ulRight: int,
        iSortCompareFunction: int,
    ) -> None: ...
    def sort_HeapSort(
        self,
        pSortBuf: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer],
        pSortTempRec: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        ulNumElements: int,
        iCompareFunction: int,
    ) -> None: ...
    def msint_Lbase(self, j: int, bl_scan: int, left_s: int, left_a: float) -> None: ...
    def FindMaxArea(self, usCount: int, pMaxIndex: int) -> float: ...

class RTEIntAlgorithm:  # Class
    def __init__(self) -> None: ...

    IDS_MSINT_BUF_OVERFLOW: int = ...  # static # readonly
    IDS_MSINT_TOO_MANY_PEAKS: int = ...  # static # readonly
    IDS_MSINT_ZERODIV: int = ...  # static # readonly
    MINUS1: int = ...  # static # readonly
    MINUS2: int = ...  # static # readonly
    MINUS3: int = ...  # static # readonly
    MINUS4: int = ...  # static # readonly
    MSINT_5POINT: int = ...  # static # readonly
    MSINT_7POINT: int = ...  # static # readonly
    MSINT_9POINT: int = ...  # static # readonly
    MSINT_CENTROID: int = ...  # static # readonly
    MSINT_DFILTER_OFF: int = ...  # static # readonly
    MSINT_MAX_SMOOTH: int = ...  # static # readonly
    MSINT_REKEYVAL: int = ...  # static # readonly
    MSINT_RSLT_SIZE: int = ...  # static # readonly
    MSINT_TANSKIM: int = ...  # static # readonly
    NO_ERROR: int = ...  # static # readonly
    NUMAHEAD: int = ...  # static # readonly
    PLUS1: int = ...  # static # readonly
    PLUS2: int = ...  # static # readonly
    PLUS3: int = ...  # static # readonly
    PLUS4: int = ...  # static # readonly
    PLUS5: int = ...  # static # readonly
    ZERO: int = ...  # static # readonly
    coeff5pt: List[float]
    coeff7pt: List[float]
    coeff9pt: List[float]
    where: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer]

    def CompareByRT(
        self,
        a: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        b: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
    ) -> bool: ...
    def ClearPkBuf(self, j: int) -> None: ...
    def Truncate(self, x: float) -> int: ...
    def CompareByCorrArea(
        self,
        a: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        b: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
    ) -> bool: ...
    def slpin_8(
        self, x1: int, y1: float, x2: int, y2: float, slope: float, interc: float
    ) -> None: ...
    def msint_Rbase(
        self, j: int, max: int, bl_scan: int, right_s: int, right_a: float
    ) -> None: ...
    def Deriv(
        self, m: int, dArr: List[float], iStartOffset: int, result: float
    ) -> None: ...
    def MSINT_FITLN_8(self, x: float, slope: float, interc: float) -> float: ...
    def Round(self, x: float) -> int: ...
    def sift(
        self,
        pSortBuf: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer],
        pSortTempRec: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        ulLeft: int,
        ulRight: int,
        iSortCompareFunction: int,
    ) -> None: ...
    def sort_HeapSort(
        self,
        pSortBuf: List[Agilent.MassSpectrometry.DataAnalysis.WhereBuffer],
        pSortTempRec: Agilent.MassSpectrometry.DataAnalysis.WhereBuffer,
        ulNumElements: int,
        iCompareFunction: int,
    ) -> None: ...
    def msint_Lbase(self, j: int, bl_scan: int, left_s: int, left_a: float) -> None: ...
    def FindMaxArea(self, usCount: int, pMaxIndex: int) -> float: ...

class RTEIntegrableData:  # Class
    def __init__(self, nSize: int) -> None: ...

    m_nSize: int
    myData: List[float]

    def GetData(self, i: int) -> float: ...
    def XDATA(self, a: int) -> int: ...
    def YDATA(self, a: int) -> int: ...
    def PokeData(self, iIndex: int, d: float) -> None: ...
    def GetSize(self) -> int: ...

class RTEIntegrableData:  # Class
    def __init__(self, nSize: int) -> None: ...

    m_nSize: int
    myData: List[float]

    def GetData(self, i: int) -> float: ...
    def XDATA(self, a: int) -> int: ...
    def YDATA(self, a: int) -> int: ...
    def PokeData(self, iIndex: int, d: float) -> None: ...
    def GetSize(self) -> int: ...

class RTMatchFactorType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Gaussian: Agilent.MassSpectrometry.DataAnalysis.RTMatchFactorType = (
        ...
    )  # static # readonly
    Trapezoidal: Agilent.MassSpectrometry.DataAnalysis.RTMatchFactorType = (
        ...
    )  # static # readonly

class RTMatchPenalty(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Gaussian: Agilent.MassSpectrometry.DataAnalysis.RTMatchPenalty = (
        ...
    )  # static # readonly
    Trapezoidal: Agilent.MassSpectrometry.DataAnalysis.RTMatchPenalty = (
        ...
    )  # static # readonly

class RTPenalty(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Additive: Agilent.MassSpectrometry.DataAnalysis.RTPenalty = ...  # static # readonly
    Multiplicative: Agilent.MassSpectrometry.DataAnalysis.RTPenalty = (
        ...
    )  # static # readonly

class RTPenaltyType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Additive: Agilent.MassSpectrometry.DataAnalysis.RTPenaltyType = (
        ...
    )  # static # readonly
    Multiplicative: Agilent.MassSpectrometry.DataAnalysis.RTPenaltyType = (
        ...
    )  # static # readonly

class RadicalCationOrAnion(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    No: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion = (
        ...
    )  # static # readonly
    Yes: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion = (
        ...
    )  # static # readonly

class RadicalSearchMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    IncludeAnions: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode = (
        ...
    )  # static # readonly
    IncludeCations: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode = (
        ...
    )  # static # readonly
    IncludeEverything: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode = (
        ...
    )  # static # readonly
    IncludeNeutrals: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode = (
        ...
    )  # static # readonly
    NotSpecified: Agilent.MassSpectrometry.DataAnalysis.RadicalSearchMode = (
        ...
    )  # static # readonly

class RangeBase(
    Agilent.MassSpectrometry.DataAnalysis.IRange,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnlyObject,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
):  # Class
    CheckingSuspended: bool
    End: float  # readonly
    HasChanged: bool  # readonly
    Start: float  # readonly

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(self, other: Agilent.MassSpectrometry.DataAnalysis.IRange) -> bool: ...
    def IsValueWithinRange(self, valToCheck: float) -> bool: ...
    def WriteXmlValues(self, writer: System.Xml.XmlWriter) -> None: ...
    def ExtendedValueString(self, withUnits: bool, nValues: int) -> str: ...
    def GetHashCode(self) -> int: ...
    def IsEmpty(self) -> bool: ...
    def SetEmpty(self) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def ValueString(self, withUnits: bool, nValues: int) -> str: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def MakeConsistent(self) -> None: ...

class RangeCollection(
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    List[Any],
    System.Collections.CollectionBase,
    Sequence[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    def __init__(self) -> None: ...

    CheckingSuspended: bool
    DataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    FlattenedRangeCollection: (
        Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    )  # readonly
    HasChanged: bool  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRange: ...
    def __setitem__(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> None: ...
    OverallRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    UnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly

    def Sort(
        self, direction: Agilent.MassSpectrometry.DataAnalysis.SortDirection
    ) -> None: ...
    def Contains(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> bool: ...
    def CopyTo(
        self, array: List[Agilent.MassSpectrometry.DataAnalysis.IRange], index: int
    ) -> None: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def Add(self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange) -> int: ...
    def Reverse(self) -> None: ...
    def ExtendedValueString(self, maxValues: int, withUnits: bool) -> str: ...
    def GetHashCode(self) -> int: ...
    def IndexOf(self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange) -> int: ...
    def InitializeUnitsAndPrecision(
        self,
        dUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        precisionDigits: int,
    ) -> None: ...
    def IsEmpty(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def Remove(self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange) -> None: ...
    def Insert(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.IRange
    ) -> None: ...
    def SetEmpty(self) -> None: ...
    def ValueString(self, maxValues: int, withUnits: bool) -> str: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def MakeConsistent(self) -> None: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...

class RangeCollectionCollection(
    List[Any],
    System.Collections.CollectionBase,
    Iterable[Any],
    Sequence[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    def __init__(self) -> None: ...

    CheckingSuspended: bool
    HasChanged: bool  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollection: ...
    def __setitem__(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> None: ...
    def Contains(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> bool: ...
    def CopyTo(
        self,
        array: List[Agilent.MassSpectrometry.DataAnalysis.RangeCollection],
        index: int,
    ) -> None: ...
    def Add(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> int: ...
    def IndexOf(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> int: ...
    def Remove(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> None: ...
    def Insert(
        self, index: int, value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    ) -> None: ...
    def MakeConsistent(self) -> None: ...

class RangeCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IRangeCollectionParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    Limits: (
        Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit
    )  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IRangeCollectionParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def IsCollectionValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        checkOrder: bool,
    ) -> bool: ...
    def LimitString(self, withType: bool) -> str: ...
    def SetLimits(
        self,
        limits: Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit,
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IRangeCollectionParameter: ...
    def SetToDefault(self) -> None: ...
    def ValueString(self, maxValues: int, withUnits: bool) -> str: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ToString(self) -> str: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange, checkOrder: bool
    ) -> bool: ...

class RangeCollectionParameterLimit(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        first: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit,
        second: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit,
    ) -> None: ...

    Overall: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    Width: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def WriteXml(self, id: str, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.RangeCollectionParameterLimit: ...

class RangeParameter(
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.IRangeParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.IRange,
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.RangeParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.IRange
    ExtendedValueString: str  # readonly
    First: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit  # readonly
    Second: Agilent.MassSpectrometry.DataAnalysis.IDoubleParameter  # readonly
    Value: Agilent.MassSpectrometry.DataAnalysis.IRange

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IRangeParameter
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def SetLimits(
        self, limits: Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IRangeParameter: ...
    def SetToDefault(self) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def ToString(self) -> str: ...
    def IsValueValid(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.IRange, checkOrder: bool
    ) -> bool: ...

class RangeParameterLimit(System.ICloneable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        minimum: float,
        maximum: float,
        minimumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
        maximumLimitType: Agilent.MassSpectrometry.DataAnalysis.LimitType,
    ) -> None: ...
    @overload
    def __init__(
        self,
        first: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit,
        second: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit,
    ) -> None: ...

    First: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit
    Second: Agilent.MassSpectrometry.DataAnalysis.DoubleParameterLimit

    @overload
    def Equals(self, other: Any) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit
    ) -> bool: ...
    def GetHashCode(self) -> int: ...
    def WriteXml(self, id: str, writer: System.Xml.XmlWriter) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.RangeParameterLimit: ...

class RapidFireDataWriter(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.IBaseDataWriter,
    Agilent.MassSpectrometry.DataAnalysis.IBaseNonMSDataWriter,
    Agilent.MassSpectrometry.DataAnalysis.BaseDataWriter,
):  # Class
    def __init__(self) -> None: ...

class Reagent(Agilent.MassSpectrometry.DataAnalysis.IReagent):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        szName: str,
        szCleavageRule: str,
        szNGainFormula: str,
        szCGainFormula: str,
        szNLossFormula: str,
        szCLossFormula: str,
        eType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE,
    ) -> None: ...

    ReagentCGainFormula: str
    ReagentCLossFormula: str
    ReagentCleavageRule: str
    ReagentNGainFormula: str
    ReagentNLossFormula: str
    ReagentName: str
    ReagentType: Agilent.MassSpectrometry.DataAnalysis.E_ITEMTYPE

class RefDataSource(
    Agilent.MassSpectrometry.DataAnalysis.IRefDataSource,
    Agilent.MassSpectrometry.DataAnalysis.IDataSource,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.DataSource,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.RefDataSource
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.RefDataSource: ...

class RejectionFlagTabConstants:  # Class
    NominalMass: str = ...  # static # readonly
    RejectionFlag: str = ...  # static # readonly
    ScanID: str = ...  # static # readonly
    ScanTime: str = ...  # static # readonly

class ReportContents(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AcqMethod: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    AllDataItems: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    ChromatogramGraphics: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    CompoundTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    DAMethod: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    DeconvolutedSpectrumGraphics: (
        Agilent.MassSpectrometry.DataAnalysis.ReportContents
    ) = ...  # static # readonly
    DeconvolutionMirrorPlot: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    FormulaCalculatorResultsTable: (
        Agilent.MassSpectrometry.DataAnalysis.ReportContents
    ) = ...  # static # readonly
    FormulaMSMSDetailsTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    FormulaTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    IntegrationTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    MSActuals: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    MSTune: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    MassCalculatorResultsTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    MsDataObject: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    PeakTable: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    SampleInfo: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    SpectrumGraphics: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    UVSpectrumGraphics: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly
    UserSpectrumGraphics: Agilent.MassSpectrometry.DataAnalysis.ReportContents = (
        ...
    )  # static # readonly

class ReportDestination(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BMPFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    CSVFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    EMFFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    HTMLFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    MzDataFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    PDFFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    Print: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    PrintPreview: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    XLSFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    XLSXFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly
    XMLFile: Agilent.MassSpectrometry.DataAnalysis.ReportDestination = (
        ...
    )  # static # readonly

class ReportFooterOptions(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CustomText: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions = (
        ...
    )  # static # readonly
    NoFooter: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions = (
        ...
    )  # static # readonly
    PageNumber: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.ReportFooterOptions = (
        ...
    )  # static # readonly

class ReportOrientationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Landscape: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType = (
        ...
    )  # static # readonly
    Portrait: Agilent.MassSpectrometry.DataAnalysis.ReportOrientationType = (
        ...
    )  # static # readonly

class ReportStyleType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AcqMethod: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    AnalysisReport: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    CompoundReport: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    DAMethod: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    Graphic: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    MSTune: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    PlotReport: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    Quant: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    Table: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly
    User: Agilent.MassSpectrometry.DataAnalysis.ReportStyleType = (
        ...
    )  # static # readonly

class ResultAttribute(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AAonCTerm: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AAonNTerm: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AbsoluteValue: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Abundance: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AbundanceRatio: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AccumulationTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AcqMethodMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AcqMethodPrecursor: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AcqMethodProduct: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AgilentId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AlgorithmName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AnalysisPass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AnchorFlag: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Area: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaMax: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaMedian: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaMin: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaPercent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaSum: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AreaSumPercent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AverageMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AverageRetentionTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    AvgColeutionScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BIonCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Base1End: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Base1Start: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Base2End: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Base2Start: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BasePeakMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BaselineOffset: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BaselinePoints: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BaselineStdDev: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BaselineType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Best: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioCombinedScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioConfirmMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioHitBestMSMSScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioMSMSScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioMatchDeltaMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioMatchDeltaPPM: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    BioMatchHitCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CalculatedHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CalculatedHeightPercent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CalculatedHeightSumPercent: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    CalculatedMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CalculatedMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CapacityFactor: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CasId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Center2D: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CenterX: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Chain: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ChainID: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Charge: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ChargeState: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CoelutionScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Color: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CommonHitCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CompoundId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CompoundList: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CompoundName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CompoundNumber: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Coverage: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CpdsInGroup: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    CrossScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DataFileName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DatabaseName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DatabaseVersion: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DbMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DeconvolutedMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DeconvolutionUncertainty: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Deviation: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Difference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DigestEnzyme: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DigestLocationName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    DoubleBondEquivalent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    EndBaselineY: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    EndIndex: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    EndTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    EndX: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    EndY: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FilterWidth: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FoldChangeDirection: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FormulaDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FormulaPlusIonSpecies: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ForwardScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Found: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragIonParentCpdName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragIonSource: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentIonConfirmationFlag: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    FragmentIonsConfirmed: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentIonsConfirmedPercent: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    FragmentIonsNotes: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentIonsSource: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentIonsSpecified: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FrequencyFound: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FrequencyMissed: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    FullWidthAtHalfMaximum: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    GeneratedFormulaIonSpecies: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    GeneratedFormulaMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    GeneratedMassDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    GeneratedMolecularFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    GroupNumber: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Height: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HeightMax: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HeightMedian: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HeightMin: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HeightPercent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HeightSumPercent: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HighlightFlag: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HitCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HitFlags: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    HmpId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ID: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = ...  # static # readonly
    IdentificationSource: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IdentificationSourceAll: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IdentificationSourceBest: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonCountMax: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonCountMin: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonDetectorMode: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IonSpecies: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IsotopeAbundanceMatchProbability: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    IsotopeCluster: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    IsotopeSpacingMatchProbability: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    KeggId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Label: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    LibMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    LibraryPath: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Links: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    LipidId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Location: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    LowestIsotopeMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    LowestIsotopicMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MPPID: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ManualIDScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ManuallyEditFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ManuallyEditIonSpecies: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ManuallyEditIonType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MassDefect: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MassDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MassMatchProbability: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MassPpmRSD: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MassStdDev: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MatchedIonScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaxArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaxHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaxMergeHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaxY: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaxZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MaximumEntropyPeakHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MedianMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MedianRT: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MergedIDOverallMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MergedPeakCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MetlinId: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MfApexIndex: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MfgMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MinZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MissedCleavages: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Modifications: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ModifiedByUser: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MonoisotopicMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    MonoisotopicMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Mz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = ...  # static # readonly
    NCBIID: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NeutralLossMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NormalizedHeightPct: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NormalizedScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Notes: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NumMSMSSpectra: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NumSpecPeaks: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    NumSpectra: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ObservedIonType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    OverallMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PeakError: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PeakNumber: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PeakStatus: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PeakType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Plates: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PlatesPerMeter: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PrecursorMZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PrecursorTargetedMZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PrecursorZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PredictedModifications: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PrimaryBase: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PrimaryNote: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ProductIonMZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ProductIonName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ProductIonSequence: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ProductIonTargetedMZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ProductIonZ: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByADCPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByADCPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByEICTICPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByEICTICPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByTICPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByTICPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByTWCPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByTWCPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVAPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVAPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVBPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVBPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVCPctArea: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityByUVCPctHeight: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityComments: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityResult: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    PurityValue: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    QScorePctRSD: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    QualityScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RTSpan: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceIonSpecies: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceMassDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceMolecularFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceRetentionTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReferenceRetentionTimeAvailable: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    RejectionFlag: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RelativeDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RelativeDifferenceUnits: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RelativeGeneratedMassDifference: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    RelativeReferenceMassDifference: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    RelativeVolumePct: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Resolution: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RetentionTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RetentionTimeDifference: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ReverseScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    RtMatchProbability: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SPI: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SaturationWarning: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Sequence: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SequenceEndPosition: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SequenceName: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SequenceStartPosition: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SequenceType: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SignalToNoise: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Significance: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SignificantIonMz: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SingleIonFeatures: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SpecialFlag: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SpikeCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SpikeList: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    StartBaselineY: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    StartIndex: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    StartTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    StartX: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    StartY: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Structure: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SummaryMolecularFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    SwissProtID: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Symmetry: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TailingFactor: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TargetCpdIonSpecies: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TargetFormulaMass: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TargetMassToMatch: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TargetMolecularFormula: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtFlagSeverity: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtFlagSeverityString: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtFlagString: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtMatchScore: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtMfgHit: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtMfgScoreChange: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtRetentionTime: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    TgtRetentionTimeDifference: (
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) = ...  # static # readonly
    TgtScorePctRSD: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    UniqueHitCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    VisibleFlag: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Volume: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    VolumeMax: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    VolumeMedian: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    VolumeMin: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Width: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Width2D: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    Width2dInMinutes: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    YIonCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly
    ZCount: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute = (
        ...
    )  # static # readonly

class ResultAttributeBoolDictionary(
    Iterable[Any], System.Runtime.Serialization.ISerializable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Dict[Agilent.MassSpectrometry.DataAnalysis.ResultAttribute, bool]
    ) -> None: ...

    Count: int  # readonly
    def __getitem__(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def __setitem__(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        value_: bool,
    ) -> None: ...
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttribute: ...
    SupportedAttributes: List[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]  # readonly

    def Add(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        flag: bool,
    ) -> None: ...
    def ContainsKey(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...

    # Nested Types

    class RABIterator(Iterator[Any], System.IDisposable):  # Class
        def __init__(
            self,
            dictionary: Agilent.MassSpectrometry.DataAnalysis.ResultAttributeBoolDictionary,
        ) -> None: ...

class ResultAttributeComparer(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributes
    ]
):  # Class
    def __init__(
        self,
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        sortDir: Agilent.MassSpectrometry.DataAnalysis.SortDirection,
    ) -> None: ...

class ResultAttributeInfo(
    System.Runtime.Serialization.ISerializable, System.ICloneable
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ResultAttributeInfo
    ) -> None: ...

    AbbreviatedName: str
    Category: str
    DataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType
    Description: str
    DisplayName: str
    IsAKey: bool
    IsComputed: bool
    SuitableForObjectLabel: bool
    SuitableForTable: bool
    Type: System.Type

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ResultAttributeInfo: ...

class ResultAttributeListParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributeListParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ResultAttributeListParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IResultAttributeListParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IResultAttributeListParameter: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
    ) -> bool: ...

class ResultAttributeStatistics:  # Class
    @staticmethod
    def Variance(
        iraList: Iterable[Agilent.MassSpectrometry.DataAnalysis.IResultAttributes],
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
    ) -> float: ...
    @staticmethod
    def Span(
        iraList: Iterable[Agilent.MassSpectrometry.DataAnalysis.IResultAttributes],
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
    ) -> float: ...
    @staticmethod
    def StandardDeviation(
        iraList: Iterable[Agilent.MassSpectrometry.DataAnalysis.IResultAttributes],
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
    ) -> float: ...
    @staticmethod
    def Median(
        iraList: Iterable[Agilent.MassSpectrometry.DataAnalysis.IResultAttributes],
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
    ) -> float: ...
    @staticmethod
    def RSD(
        iraList: Iterable[Agilent.MassSpectrometry.DataAnalysis.IResultAttributes],
        attr: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
    ) -> float: ...

class ResultAttributeValueDictionary(
    Agilent.MassSpectrometry.DataAnalysis.IResultAttributes,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(
        self,
        attrDefDictionary: Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions,
        unitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary,
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.ResultAttributeValueDictionary,
    ) -> None: ...

    AttrDefDictionary: Agilent.MassSpectrometry.DataAnalysis.AttributeDefinitions
    BoolValueStringDelegate: (
        Agilent.MassSpectrometry.DataAnalysis.BoolValueStringDelegate
    )
    ComputedHasValueDelgate: (
        Agilent.MassSpectrometry.DataAnalysis.ComputedHasValueDelegate
    )
    ComputedResultAttributeValueDelegate: (
        Agilent.MassSpectrometry.DataAnalysis.ComputedResultAttributeValueDelegate
    )
    CurrentUnitDelegate: Agilent.MassSpectrometry.DataAnalysis.CurrentUnitDelegate
    def __getitem__(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> Any: ...
    def __setitem__(
        self,
        attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute,
        value_: Any,
    ) -> None: ...
    LastPrecisionUpdate: System.DateTime
    OwningClass: str
    UnitDictionary: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary

    def Equals(self, obj: Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ContainsKey(
        self, attribute: Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
    ) -> bool: ...
    def ConvertUnitsWithExceptions(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
        valuesOnly: bool,
        exceptions: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.ResultAttribute
        ],
    ) -> bool: ...

class ResultChangeNotifyDelegate(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        changedResult: Agilent.MassSpectrometry.DataAnalysis.IResult,
        wasAdded: bool,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        changedResult: Agilent.MassSpectrometry.DataAnalysis.IResult,
        wasAdded: bool,
    ) -> None: ...

class ResultList(
    Agilent.MassSpectrometry.DataAnalysis.CoreList[
        Agilent.MassSpectrometry.DataAnalysis.IResult
    ],
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    List[Agilent.MassSpectrometry.DataAnalysis.IResult],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.IResult],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.IResult],
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.IResult
    ],
    Agilent.MassSpectrometry.DataAnalysis.IResultList,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, uniqueTypes: bool) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ResultList
    ) -> None: ...
    def Add(self, theResult: Agilent.MassSpectrometry.DataAnalysis.IResult) -> None: ...

class RtExpansionMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AsymmetricRt: Agilent.MassSpectrometry.DataAnalysis.RtExpansionMode = (
        ...
    )  # static # readonly
    SymmetricRt: Agilent.MassSpectrometry.DataAnalysis.RtExpansionMode = (
        ...
    )  # static # readonly

class RunTimeCalibCoeff:  # Class
    def __init__(self) -> None: ...

    CalibCoeff: List[float]

class Sample:  # Class
    def __init__(self) -> None: ...

    AcqMethodNamePath: str
    AcqTime: System.DateTime
    BalanceType: str
    BarCode: str
    CalibLevelName: str
    Comments: str
    CustomAttributes: List[Agilent.MassSpectrometry.DataAnalysis.SampleCustomAttribute]
    DaMethodNamePath: str
    DataFileNamePath: str
    DilutionFactor: float
    EquilibrationTime: float
    InjectionVolume: float
    LockedMode: bool
    PlateCode: str
    PlatePosition: str
    RackCode: str
    RackPosition: str
    SampleCompletedStatus: bool
    SampleId: str
    SampleName: str
    SamplePosition: str
    SampleType: str
    UserName: str
    WeightToVolume: float

    def SetValidDefaultSampleInfo(self) -> None: ...

class SampleCategory(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = ...  # static # readonly
    CompoundParams: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    CustomParams: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    General: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    MassParams: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    OptimizationParams: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly
    UserParams: Agilent.MassSpectrometry.DataAnalysis.SampleCategory = (
        ...
    )  # static # readonly

class SampleConstants:  # Class
    DeviceType: str = ...  # static # readonly

class SampleCustomAttribute:  # Class
    def __init__(self) -> None: ...

    AttributeName: str
    AttributeValue: str
    SystemNamePrefix: str

class SamplePurityAlgorithms(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ADC: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    EICByTIC: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    TIC: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    TWC: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    UVSignalA: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    UVSignalB: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    UVSignalC: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SamplePurityAlgorithms = (
        ...
    )  # static # readonly

class SamplePurityResult(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CannotMeasure: Agilent.MassSpectrometry.DataAnalysis.SamplePurityResult = (
        ...
    )  # static # readonly
    Fail: Agilent.MassSpectrometry.DataAnalysis.SamplePurityResult = (
        ...
    )  # static # readonly
    Pass: Agilent.MassSpectrometry.DataAnalysis.SamplePurityResult = (
        ...
    )  # static # readonly

class ScanDetails:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, sourceScan: Agilent.MassSpectrometry.DataAnalysis.ScanDetails
    ) -> None: ...

    AbundanceLimit: float
    BasePeakMZ: float
    BasePeakValue: float
    CalibrationID: int
    ChargeState: int
    ChromScaleFactor: float
    CollisionEnergy: float
    CompensationField: float
    CycleNumber: int
    DataDependentParams: Agilent.MassSpectrometry.DataAnalysis.DataDependentParams
    DispersionField: float
    DwellTime: int
    FragmentationMode: Agilent.MassSpectrometry.DataAnalysis.FragmentationMode
    Fragmentor: float
    IonMode: Agilent.MassSpectrometry.DataAnalysis.IonizationMode
    IonPolarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    IsCollisionEnergyDynamic: bool
    IsFragmentorDynamic: bool
    MSLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel
    MSScanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    MZOfInterest: float
    MeasuredMassRangeMax: float
    MeasuredMassRangeMin: float
    MethodID: int
    MzIsolationWidth: float
    PaddingBytes: List[int]
    SamplingPeriod: float
    ScanID: int
    ScanTime: float
    Status: int
    TIC: float
    Threshold: float
    TimeSegmentID: int
    XSpecificParamType: Agilent.MassSpectrometry.DataAnalysis.XSpecificParamType

    def AddElement(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.SpectrumParams
    ) -> None: ...
    @overload
    def Initialize(self) -> None: ...
    @overload
    def Initialize(
        self, sourceScan: Agilent.MassSpectrometry.DataAnalysis.ScanDetails
    ) -> None: ...
    def GetSpectraPoints(self, spectraID: int) -> int: ...
    def GetElement(
        self, key: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.SpectrumParams: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ScanDetails: ...
    def GetElementByIndex(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.SpectrumParams: ...
    def GetSpectrumParamCount(self) -> int: ...
    def GetSpectrumParams(
        self, spectraID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.SpectrumParams: ...

class ScanHeader:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

    DeviceType: Agilent.MassSpectrometry.DataAnalysis.DeviceType
    FileVersion: int
    NumOfSpectraPerScan: int
    ScanRecordPadding: int

    def AddElement(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.SpectrumFormat
    ) -> None: ...
    def GetAllSpectraFormatIDs(
        self, arrSpectraFormatIDs: System.Collections.Generic.List[int]
    ) -> None: ...

class ScanRecInfoBase(
    Agilent.MassSpectrometry.DataAnalysis.DisposableBase,
    System.IDisposable,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ScanRecInfoBase
    ) -> None: ...

    SamplingPeriodInfo: float  # readonly
    ScanIDInfo: int  # readonly
    ScanTimeInfo: float  # readonly

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ScanRecInfoBase: ...

class ScanTypeFilter(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.ScanTypeFilter = ...  # static # readonly
    AllMSLevels: Agilent.MassSpectrometry.DataAnalysis.ScanTypeFilter = (
        ...
    )  # static # readonly
    Explicit: Agilent.MassSpectrometry.DataAnalysis.ScanTypeFilter = (
        ...
    )  # static # readonly
    SpecificMSLevel: Agilent.MassSpectrometry.DataAnalysis.ScanTypeFilter = (
        ...
    )  # static # readonly

class SchemaConstants:  # Class
    def __init__(self) -> None: ...

    DATE_TIME_NOT_FOUND: int  # static # readonly
    ENERGY_NOT_FOUND: float  # static # readonly
    MASS_NOT_FOUND: float  # static # readonly
    MZ_BIN_WIDTH_NOT_FOUND: float  # static # readonly
    RETENTION_TIME_NOT_FOUND: float  # static # readonly
    ROOT_ELEMENT: str = ...  # static # readonly
    SCHEMA_VERSION_ATTR: str = ...  # static # readonly
    TEMPERATURE_NOT_FOUND: float  # static # readonly

class SchemaReaderBase(
    System.IDisposable, Agilent.MassSpectrometry.DataAnalysis.DisposableBase
):  # Class
    ...

class ScreeningType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Fast: Agilent.MassSpectrometry.DataAnalysis.ScreeningType = ...  # static # readonly
    Normal: Agilent.MassSpectrometry.DataAnalysis.ScreeningType = (
        ...
    )  # static # readonly

class SearchCriteria(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CollisionEnergy: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    FragmentationVoltage: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    IonizationMode: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    Polarity: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    PrecursorIon: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.SearchCriteria = (
        ...
    )  # static # readonly

class SearchMethod(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Both: Agilent.MassSpectrometry.DataAnalysis.SearchMethod = ...  # static # readonly
    Forward: Agilent.MassSpectrometry.DataAnalysis.SearchMethod = (
        ...
    )  # static # readonly
    Reverse: Agilent.MassSpectrometry.DataAnalysis.SearchMethod = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SearchMethod = (
        ...
    )  # static # readonly

class SearchPrecursionIon(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ALLIONS_OR_CLASSIC: Agilent.MassSpectrometry.DataAnalysis.SearchPrecursionIon = (
        ...
    )  # static # readonly
    CLASSIC: Agilent.MassSpectrometry.DataAnalysis.SearchPrecursionIon = (
        ...
    )  # static # readonly

class SelectAnalysisTarget(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Chromatogram: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    ClearResults: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    Close: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    DeleteCompounds: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    Exit: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    Export: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    ExtractChromatogram: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    ExtractSpectrum: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    FindCompounds: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    MatchSequence: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    Reload: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    RunScript: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly
    Save: Agilent.MassSpectrometry.DataAnalysis.SelectAnalysisTarget = (
        ...
    )  # static # readonly

class SelectionChangeEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.SelectionChangedEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.SelectionChangedEventArgs,
    ) -> None: ...

class SelectionChangedEventArgs(System.EventArgs):  # Class
    def __init__(
        self, items: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]
    ) -> None: ...

    SelectedItems: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]  # readonly

class SendToPCDLConflictResolution(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Duplicate: Agilent.MassSpectrometry.DataAnalysis.SendToPCDLConflictResolution = (
        ...
    )  # static # readonly
    Replace: Agilent.MassSpectrometry.DataAnalysis.SendToPCDLConflictResolution = (
        ...
    )  # static # readonly
    Skip: Agilent.MassSpectrometry.DataAnalysis.SendToPCDLConflictResolution = (
        ...
    )  # static # readonly

class SeparationTechnique(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CE: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique = (
        ...
    )  # static # readonly
    GC: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique = (
        ...
    )  # static # readonly
    LC: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SeparationTechnique = (
        ...
    )  # static # readonly

class SerializationUtilities:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def SerializeDictionary(
        info: System.Runtime.Serialization.SerializationInfo,
        memberName: str,
        dictionary: Dict[K, V],
    ) -> None: ...
    @staticmethod
    def SerializeHasValuesDictionary(
        info: System.Runtime.Serialization.SerializationInfo,
        memberName: str,
        dictionary: Dict[Agilent.MassSpectrometry.DataAnalysis.ResultAttribute, bool],
    ) -> None: ...
    @staticmethod
    def ReadVersion(
        info: System.Runtime.Serialization.SerializationInfo, className: str, pfx: str
    ) -> int: ...
    @staticmethod
    def DeserializeDictionary(
        info: System.Runtime.Serialization.SerializationInfo, memberName: str
    ) -> Dict[K, V]: ...
    @staticmethod
    def SerializeUnitsDictionary(
        info: System.Runtime.Serialization.SerializationInfo,
        memberName: str,
        dictionary: Dict[
            Agilent.MassSpectrometry.DataAnalysis.DataValueType,
            Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
        ],
    ) -> None: ...
    @staticmethod
    def DeserializeHasValuesDictionary(
        info: System.Runtime.Serialization.SerializationInfo, memberName: str
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ResultAttribute, bool]: ...
    @staticmethod
    def DeserializeUnitsDictionary(
        info: System.Runtime.Serialization.SerializationInfo, memberName: str
    ) -> Dict[
        Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision,
    ]: ...

class SetXYZoomRangeParam:  # Class
    def __init__(
        self,
        dataItemId: int,
        xZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
        yZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...

    DataItemId: int  # readonly
    XZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly
    YZoomRange: Agilent.MassSpectrometry.DataAnalysis.IRange  # readonly

class ShorthandFormula:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def Create(
        speciesInfo: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    ) -> str: ...
    @overload
    @staticmethod
    def Create(
        speciesInfo: Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies,
    ) -> str: ...
    @staticmethod
    def Parse(
        QualFormat: str, z: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.IModificationSpecies: ...

class ShoulderModeType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Drop: Agilent.MassSpectrometry.DataAnalysis.ShoulderModeType = (
        ...
    )  # static # readonly
    OFF: Agilent.MassSpectrometry.DataAnalysis.ShoulderModeType = (
        ...
    )  # static # readonly
    Tangential: Agilent.MassSpectrometry.DataAnalysis.ShoulderModeType = (
        ...
    )  # static # readonly

class SignalToNoise(Agilent.MassSpectrometry.DataAnalysis.ISignalToNoise):  # Class
    def __init__(self) -> None: ...

class SignificantPeaks(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.SignificantPeaks = (
        ...
    )  # static # readonly
    PreferSpecial: Agilent.MassSpectrometry.DataAnalysis.SignificantPeaks = (
        ...
    )  # static # readonly
    SpecialOnly: Agilent.MassSpectrometry.DataAnalysis.SignificantPeaks = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SignificantPeaks = (
        ...
    )  # static # readonly

class SingleMzExpansionMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AsymmetricMz: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode = (
        ...
    )  # static # readonly
    SymmetricMz: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode = (
        ...
    )  # static # readonly
    SymmetricPpm: Agilent.MassSpectrometry.DataAnalysis.SingleMzExpansionMode = (
        ...
    )  # static # readonly

class SingletWidthType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Automatic: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType = (
        ...
    )  # static # readonly
    Default: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType = (
        ...
    )  # static # readonly
    Specified: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SingletWidthType = (
        ...
    )  # static # readonly

class SmoothingFunctionType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Gaussian: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType = (
        ...
    )  # static # readonly
    QuadraticCubicSG: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType = (
        ...
    )  # static # readonly
    QuarticQuinticSG: Agilent.MassSpectrometry.DataAnalysis.SmoothingFunctionType = (
        ...
    )  # static # readonly

class SordidError(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    InsufficientBaseline: Agilent.MassSpectrometry.DataAnalysis.SordidError = (
        ...
    )  # static # readonly
    NoSignificantSignal: Agilent.MassSpectrometry.DataAnalysis.SordidError = (
        ...
    )  # static # readonly
    NotEnoughPoints: Agilent.MassSpectrometry.DataAnalysis.SordidError = (
        ...
    )  # static # readonly
    ThresholdedData: Agilent.MassSpectrometry.DataAnalysis.SordidError = (
        ...
    )  # static # readonly

class SortDirection(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Ascending: Agilent.MassSpectrometry.DataAnalysis.SortDirection = (
        ...
    )  # static # readonly
    Descending: Agilent.MassSpectrometry.DataAnalysis.SortDirection = (
        ...
    )  # static # readonly

class SortedTableColumns:  # Struct
    ascending: bool
    columnName: str

class SpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.DataDescription,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.ISpecDescription,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ISpecDescription
    ) -> None: ...

    AcqTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    BackgroundTimeRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection
    CompoundNumber: int
    GroupID: int
    OverallAcqTimeRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    ScanMethodNumber: int
    SpecSubType: Agilent.MassSpectrometry.DataAnalysis.SpecSubType
    SpecType: Agilent.MassSpectrometry.DataAnalysis.SpecType

    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpecDescription: ...

class SpecSubType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HighE: Agilent.MassSpectrometry.DataAnalysis.SpecSubType = ...  # static # readonly
    LowE: Agilent.MassSpectrometry.DataAnalysis.SpecSubType = ...  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SpecSubType = (
        ...
    )  # static # readonly

class SpecType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    AMDISDeconvSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    AllIonsQualifiedIonMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    DeconvolutedMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    FindByFormulaMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    LibraryMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    MFEMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    MassAndUVSpectra: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    MassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    TofMassSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    UVSpectrum: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SpecType = (
        ...
    )  # static # readonly

class SpecialMsPeakResults(
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults,
    Agilent.MassSpectrometry.DataAnalysis.IResult,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ISpecialMsPeakResults
    ) -> None: ...

class SpeciesDefinition(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails,
    Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        baseCount: int,
        electronCount: int,
        modifierCount: int,
        modifierFormula: str,
        active: bool,
    ) -> None: ...
    @overload
    def __init__(
        self, iSrc: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ) -> None: ...
    @overload
    def __init__(
        self, iSrc: Agilent.MassSpectrometry.DataAnalysis.IIonSpeciesDetails
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Parse(
        speciesFormula: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.SpeciesDefinition: ...
    def Equals(self, other: Any) -> bool: ...

class SpeciesDefinitionListParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
    Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinitionListParameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
        ],
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
        ],
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.SpeciesDefinitionListParameter,
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
    ]

    @overload
    def Equals(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinitionListParameter,
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinitionListParameter: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ISpeciesDefinition
        ],
    ) -> bool: ...

class SpeciesType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Adduct: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = ...  # static # readonly
    Deduct: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = ...  # static # readonly
    Neutral: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = (
        ...
    )  # static # readonly
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = (
        ...
    )  # static # readonly
    Nmer: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = ...  # static # readonly
    Radical: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = (
        ...
    )  # static # readonly
    RadicalNmer: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = (
        ...
    )  # static # readonly
    Unknown: Agilent.MassSpectrometry.DataAnalysis.SpeciesType = (
        ...
    )  # static # readonly

class SpectralChromDescription(
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.IChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.ChromDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription
    ) -> None: ...

    ReferenceRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    SignalRanges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection

    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def UpdatePrecision(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription: ...

class SpectralChromatogram(
    Agilent.MassSpectrometry.DataAnalysis.IChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.Chromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.SpectralChromatogram
    ) -> None: ...

    Description: (
        Agilent.MassSpectrometry.DataAnalysis.ISpectralChromDescription
    )  # readonly
    XValuesAreTime: bool

    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpectralChromatogram: ...

class SpectralPeak:  # Struct
    def __init__(self, mz: float, height: float) -> None: ...

    CentroidMZ: float
    Height: float

class SpectralPeakFinder:  # Class
    def __init__(
        self,
        userParameters: Agilent.MassSpectrometry.DataAnalysis.SpectralPeakFinderParameters,
        peakWidthInMZ: Agilent.MassSpectrometry.DataAnalysis.IFunction,
    ) -> None: ...
    def PeekSmoothedData(self) -> List[float]: ...
    def FindPeaks(
        self, mzValues: List[float], intensities: List[float], fullSaturatonLevel: float
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeakFinder.Peak]: ...

    # Nested Types

    class Peak:  # Struct
        def __init__(self, mz: float, height: float, width: float) -> None: ...

        Height: float
        MZ: float
        Width: float

class SpectralPeakFinderParameters(ISpectralPeakFinderParameters):  # Class
    def __init__(self) -> None: ...

    Algorithm: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName
    BaselineRemovalShootingLength: float
    BaselineToleranceLength: float
    HeightThresholdType: SpectralPeakThresholdType
    HeightThresholdTypeForProfileData: SpectralPeakThresholdType
    HeightThresholdValue: float
    HeightThresholdValueForProfileData: float
    MaxPeakWidth: float  # readonly
    MaxWidthThreshold: float
    MinHeightForPeakDetectedData: float
    MinPeakWidth: float  # readonly
    MinWidthThreshold: float
    PreferredAlgorithm: Agilent.MassSpectrometry.DataAnalysis.PeakFinderAlgorithmName
    RejectOverlappingPeaks: bool
    SaturationThreshold: float
    SmoothingKernelLength: float
    SmoothingStrength: float

    def GetHashCode(self) -> int: ...
    def SetPeakWidthRange(self, min: float, max: float) -> None: ...
    @overload
    def Equals(self, obj: Any) -> bool: ...
    @overload
    def Equals(
        self,
        another: Agilent.MassSpectrometry.DataAnalysis.SpectralPeakFinderParameters,
    ) -> bool: ...

class Spectrum(
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.FXDataBase,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
):  # Class
    BkgrndIndicator: bool
    Count: int  # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.ISpecDescription  # readonly
    Limits: Agilent.MassSpectrometry.DataAnalysis.IFXLimits  # readonly
    PeakId: int
    XYStore: Agilent.MassSpectrometry.DataAnalysis.IFXStore

    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrum: ...

class SpectrumExtractDetails(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AvgCE: Agilent.MassSpectrometry.DataAnalysis.SpectrumExtractDetails = (
        ...
    )  # static # readonly
    AvgFV: Agilent.MassSpectrometry.DataAnalysis.SpectrumExtractDetails = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.SpectrumExtractDetails = (
        ...
    )  # static # readonly

class SpectrumFormat:  # Class
    def __init__(self) -> None: ...

    CompressionScheme: Agilent.MassSpectrometry.DataAnalysis.CompressionScheme
    FormatId: int
    MSStorageMode: Agilent.MassSpectrometry.DataAnalysis.MSStorageMode
    XSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType

    def AddElement(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.PointValueFormat
    ) -> None: ...

class SpectrumIndex(Agilent.MassSpectrometry.DataAnalysis.ISpectrumIndex):  # Class
    ACCURATE_MASS_KEY_SCALE_FACTOR: float = ...  # static # readonly

    def GetCandidates(
        self,
        mzArray: List[int],
        abundanceArray: List[float],
        preSearchParams: Agilent.MassSpectrometry.DataAnalysis.PreSearchParameters,
    ) -> System.Collections.Generic.List[int]: ...
    def GetSpectrumId(
        self, libraryId: int, spectrumHandle: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.ISpectrumId: ...

class SpectrumParams:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.SpectrumParams
    ) -> None: ...

    ByteCount: int
    MaxX: float
    MaxY: float
    MeasuredNoise: float
    MinX: float
    MinY: float
    PointCount: int
    SpectrumFmtId: int
    SpectrumOffset: int
    UncompressedByteCount: int

    @overload
    def Initialize(self) -> None: ...
    @overload
    def Initialize(
        self, source: Agilent.MassSpectrometry.DataAnalysis.SpectrumParams
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.SpectrumParams: ...

class SpectrumPeakFilter:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, maxPeakCount: int) -> None: ...
    @overload
    def __init__(
        self,
        minMzSeparation: float,
        mzSeparationUnits: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits,
    ) -> None: ...
    @overload
    def __init__(
        self,
        minMzSeparation: float,
        mzSeparationUnits: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits,
        maxPeakCount: int,
    ) -> None: ...

    MaxPeakCount: int  # readonly
    MinMzSeparation: float  # readonly
    MzSeparationUnits: Agilent.MassSpectrometry.DataAnalysis.MzDeltaUnits  # readonly

    @staticmethod
    def ApplyAbundanceThreshold(
        mzArray: List[float],
        abundanceArray: List[float],
        abundanceThreshold: float,
        filteredMzArray: List[float],
        filteredAbundanceArray: List[float],
    ) -> None: ...
    def Apply(
        self,
        mzArray: List[float],
        abundanceArray: List[float],
        filteredMzArray: List[float],
        filteredAbundanceArray: List[float],
    ) -> None: ...
    @staticmethod
    def ApplyPercentAbundanceThreshold(
        mzArray: List[float],
        abundanceArray: List[float],
        percentAbundanceThreshold: float,
        filteredMzArray: List[float],
        filteredAbundanceArray: List[float],
    ) -> None: ...

class SpectrumRowId(Agilent.MassSpectrometry.DataAnalysis.ISpectrumId):  # Class
    @overload
    def __init__(self, libraryID: int, compoundID: int, spectrumID: int) -> None: ...
    @overload
    def __init__(
        self,
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> None: ...

    CompoundID: int  # readonly
    LibraryID: int  # readonly
    SpectrumID: int  # readonly

    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class SpectrumSearchFilter:  # Class
    def __init__(self) -> None: ...

    CollisionEnergyRange: Agilent.MassSpectrometry.DataAnalysis.IRange
    MsLevel: Agilent.MassSpectrometry.DataAnalysis.MSLevel  # readonly
    Polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    RetentionTime: float
    ScanMode: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    SelectedMzRange: Agilent.MassSpectrometry.DataAnalysis.IRange

    def ToQueryString(self) -> str: ...
    @staticmethod
    def GetMSLevel(
        scanType: Agilent.MassSpectrometry.DataAnalysis.MSScanType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.MSLevel: ...

class SpectrumSignatureCache:  # Class
    @overload
    def __init__(
        self, msLibrary: Agilent.MassSpectrometry.DataAnalysis.MSLibrary
    ) -> None: ...
    @overload
    def __init__(
        self, massSpecLibrary: Agilent.MassSpectrometry.DataAnalysis.MassSpecLibrary
    ) -> None: ...

    NumberOfEntries: int  # readonly

    def GetSignatureForEntry(
        self, entry: Agilent.MassSpectrometry.DataAnalysis.ISpectrumId
    ) -> List[int]: ...
    @overload
    def GetSpectrumOverlap(
        self, mzValues: List[int]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...
    @overload
    def GetSpectrumOverlap(
        self, mzValues: List[float]
    ) -> Dict[Agilent.MassSpectrometry.DataAnalysis.ISpectrumId, int]: ...

class SpectrumUtils:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Base64ToFloatArray(str: str) -> List[float]: ...
    @staticmethod
    def GetAbundanceValues(
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> List[float]: ...
    @overload
    @staticmethod
    def SetSpectrumData(
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
        mz: List[float],
        abundance: List[float],
    ) -> None: ...
    @overload
    @staticmethod
    def SetSpectrumData(
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
        mz: List[float],
        abundance: List[float],
    ) -> None: ...
    @staticmethod
    def Base64ToDoubleArray(str: str) -> List[float]: ...
    @staticmethod
    def FloatArrayToBase64(fValues: List[float]) -> str: ...
    @staticmethod
    def Base64ToIntArray(str: str) -> List[int]: ...
    @staticmethod
    def GetMZValues(
        spectrumRow: Agilent.MassSpectrometry.DataAnalysis.LibraryDataSet.SpectrumRow,
    ) -> List[float]: ...
    @staticmethod
    def GetSpectrumLimits(
        mzValues: List[float],
        abundanceValues: List[float],
        mzMin: float,
        mzMax: float,
        baseMZ: float,
        baseAbundance: float,
    ) -> None: ...
    @staticmethod
    def IntArrayToBase64(iValues: List[int]) -> str: ...
    @staticmethod
    def DoubleArrayToBase64(dValues: List[float]) -> str: ...
    @staticmethod
    def GetUnitMass(mz: float) -> int: ...

class Spike:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, source: Agilent.MassSpectrometry.DataAnalysis.Spike) -> None: ...

    OriginalYValue: float
    PointNumber: int
    ReplaceYValue: float

class StartEndFlags(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Baseline: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    ForcedPeak: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    Horizontal: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    ManualPeak: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    NoFlags: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    Penetration: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly
    Valley: Agilent.MassSpectrometry.DataAnalysis.StartEndFlags = (
        ...
    )  # static # readonly

class StepYLimits(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IStepYLimits,
    Agilent.MassSpectrometry.DataAnalysis.FXLimits,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
    Agilent.MassSpectrometry.DataAnalysis.IFXLimits,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IStepYLimits
    ) -> None: ...

    StepMax: int
    StepMin: int

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IStepYLimits: ...

class StoredDataType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = ...  # static # readonly
    Chromatograms: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = (
        ...
    )  # static # readonly
    InstrumentCurves: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = (
        ...
    )  # static # readonly
    MassSpectra: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = (
        ...
    )  # static # readonly
    Spectra: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.StoredDataType = (
        ...
    )  # static # readonly

class StringCasing(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    LowerCase: Agilent.MassSpectrometry.DataAnalysis.StringCasing = (
        ...
    )  # static # readonly
    SentenceCase: Agilent.MassSpectrometry.DataAnalysis.StringCasing = (
        ...
    )  # static # readonly
    TitleCase: Agilent.MassSpectrometry.DataAnalysis.StringCasing = (
        ...
    )  # static # readonly

class StringCollectionParameter(
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IStringCollectionParameter,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, initialValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.StringCollectionParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[str]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IStringCollectionParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IStringCollectionParameter: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...

class StringParameter(
    Agilent.MassSpectrometry.DataAnalysis.IStringParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, initialValue: str) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.StringParameter
    ) -> None: ...

    DefaultValue: str
    Value: str

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IStringParameter
    ) -> bool: ...
    def CopyFrom(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> None: ...
    def LimitString(self, withType: bool) -> str: ...
    def Validate(self) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IStringParameter: ...
    def SetToDefault(self) -> None: ...
    def ToString(self) -> str: ...

class StringType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Abbreviation: Agilent.MassSpectrometry.DataAnalysis.StringType = (
        ...
    )  # static # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.StringType = (
        ...
    )  # static # readonly
    DisplayName: Agilent.MassSpectrometry.DataAnalysis.StringType = (
        ...
    )  # static # readonly

class StructureDrawer:  # Class
    def __init__(
        self,
        control: System.Windows.Forms.Control,
        structure: Agilent.MassSpectrometry.DataAnalysis.IMolecularStructure,
        background: Agilent.MassSpectrometry.DataAnalysis.IMolecularStructure,
    ) -> None: ...

    MaxFontSize: float
    MinFontSize: float
    ShowHBondForTerminatorAtoms: bool

    def Draw(self, graphics: System.Drawing.Graphics) -> None: ...

class StructureReader(System.IDisposable):  # Class
    def __init__(self, libraryPath: str) -> None: ...

    GotStructureInfo: bool  # readonly

    @overload
    def ReadStructureData(self, cas: str) -> str: ...
    @overload
    def ReadStructureData(self, casNumber: int) -> str: ...
    @staticmethod
    def CASToInteger(cas: str) -> int: ...
    def Dispose(self) -> None: ...

class SubformulaAssigner(
    Agilent.MassSpectrometry.DataAnalysis.IFragmentAssigner
):  # Class
    def __init__(self) -> None: ...
    def Assign(
        self,
        fragmentSpectrum: List[Agilent.MassSpectrometry.DataAnalysis.SpectralPeak],
        parentZ: int,
        parentMz: float,
        parentStructure: str,
    ) -> List[
        List[Agilent.MassSpectrometry.DataAnalysis.FragmentAssignmentCandidate]
    ]: ...
    def Setup(
        self,
        isolationWindow: Agilent.MassSpectrometry.DataAnalysis.IsolationWindow,
        parentChargeType: Agilent.MassSpectrometry.DataAnalysis.RadicalCationOrAnion,
        massAccuracyCoefficients: List[float],
        minMzOfWellCalibratedRegion: float,
        massAccuracyAtMz0: float,
        minScore: float,
        keepIsotope: bool,
    ) -> None: ...

class TangentSkimModeType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Exponential: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType = (
        ...
    )  # static # readonly
    NewExponential: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType = (
        ...
    )  # static # readonly
    Standard: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType = (
        ...
    )  # static # readonly
    Straight: Agilent.MassSpectrometry.DataAnalysis.TangentSkimModeType = (
        ...
    )  # static # readonly

class TargetSpectrum(Agilent.MassSpectrometry.DataAnalysis.ITargetSpectrum):  # Class
    AbundanceArray: List[float]  # readonly
    Abundances: List[float]  # readonly
    BasePeakMz: float  # readonly
    MZKeys: List[int]  # readonly
    MassAccuracy: (
        Agilent.MassSpectrometry.DataAnalysis.LibrarySearchMassAccuracy
    )  # readonly
    MzArray: List[float]  # readonly
    NoiseInUnitsOfBasePeak: float  # readonly
    PeakCount: int  # readonly
    RetentionTime: float  # readonly

    def Contains(self, mzKey: int) -> bool: ...
    def IsFlagged(self, mzKey: int) -> bool: ...
    def GetNormalizedAbundances(
        self, basePeakAbundanceNormalization: float
    ) -> List[float]: ...
    def SetScaledAbundances(self, scaledAbund: List[float]) -> None: ...
    def GetMZByKey(self, mzKey: int) -> float: ...
    def GetScaledAbundance(self, mzKey: int) -> float: ...
    def GetMZKey(self, mz: float) -> int: ...

class TargetedDeconvolutionParams:  # Class
    def __init__(self) -> None: ...

    MaxSpectrumPeaksToKeep: int
    MzOfInterest: float
    Polarity: Agilent.MassSpectrometry.DataAnalysis.IonPolarity
    Resolution: Agilent.MassSpectrometry.DataAnalysis.ComponentResolution
    RtChromExtractMax: float
    RtChromExtractMin: float
    ScanMode: Agilent.MassSpectrometry.DataAnalysis.MSScanType
    SpectrumThreshold: float
    TargetSpectrum: Agilent.MassSpectrometry.DataAnalysis.ISpectrum

class TargetedMsMsCpdDetails:  # Class
    ...

class TextAnnotation(
    Agilent.MassSpectrometry.DataAnalysis.IAnnotation,
    Agilent.MassSpectrometry.DataAnalysis.GenericAnnotation,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.TextAnnotation
    ) -> None: ...

    Font: System.Drawing.Font  # readonly
    FontName: str
    FontSize: float
    FontStyle: System.Drawing.FontStyle
    Text: str
    TextColor: System.Drawing.Color

    def Draw(
        self, g: System.Drawing.Graphics, pane: Pane, paneRect: System.Drawing.Rectangle
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: Any) -> bool: ...

class TextSelectionDecorator(
    Agilent.MassSpectrometry.DataAnalysis.ISelectionDecorator
):  # Class
    def __init__(self) -> None: ...

    AnnotationID: int

    def Draw(
        self,
        g: System.Drawing.Graphics,
        pane: Pane,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> None: ...
    def IsHit(
        self,
        xcc: int,
        ycc: int,
        annotations: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IGrabHandle: ...

class TgtFlagSeverity(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Error: Agilent.MassSpectrometry.DataAnalysis.TgtFlagSeverity = (
        ...
    )  # static # readonly
    Information: Agilent.MassSpectrometry.DataAnalysis.TgtFlagSeverity = (
        ...
    )  # static # readonly
    Pass: Agilent.MassSpectrometry.DataAnalysis.TgtFlagSeverity = (
        ...
    )  # static # readonly
    Warning: Agilent.MassSpectrometry.DataAnalysis.TgtFlagSeverity = (
        ...
    )  # static # readonly

class TimeSegmentAnnotations(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Line: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations = (
        ...
    )  # static # readonly
    LineAndLabel: Agilent.MassSpectrometry.DataAnalysis.TimeSegmentAnnotations = (
        ...
    )  # static # readonly

class TimeSegmentConstants:  # Class
    AbsThreshold: str = ...  # static # readonly
    EndTime: str = ...  # static # readonly
    FixedCycleLength: str = ...  # static # readonly
    IRMStatus: str = ...  # static # readonly
    MsCentroid: str = ...  # static # readonly
    MsMsCentroid: str = ...  # static # readonly
    NumOfScans: str = ...  # static # readonly
    RelThreshold: str = ...  # static # readonly
    StartTime: str = ...  # static # readonly
    TimeSegment: str = ...  # static # readonly
    TimeSegmentId: str = ...  # static # readonly
    TimeSegments: str = ...  # static # readonly
    Version: str = ...  # static # readonly

class TimeSegment_XSpecificConstants:  # Class
    AccumulationTime: str = ...  # static # readonly
    ExpandXValue: str = ...  # static # readonly
    HighXExpandLimit: str = ...  # static # readonly
    IonRecord: str = ...  # static # readonly
    IonRecords: str = ...  # static # readonly
    LowXExpandLimit: str = ...  # static # readonly
    Masses: str = ...  # static # readonly
    Name: str = ...  # static # readonly
    TimeSegmentId: str = ...  # static # readonly
    XValue: str = ...  # static # readonly

class Timesegment:  # Class
    def __init__(self) -> None: ...

    Endtime: float
    FixedCycleLength: bool
    MsAbsCentroidThreshold: float
    MsMsAbsCentroidThreshold: float
    MsMsRelCentroidThreshold: float
    MsRelCentroidThreshold: float
    NumberOfScans: int
    Starttime: float
    TimeSegmentID: int

class TitleElement(
    Agilent.MassSpectrometry.DataAnalysis.ITitleElement, System.ICloneable
):  # Class
    def __init__(
        self, Source: Agilent.MassSpectrometry.DataAnalysis.TitleElement
    ) -> None: ...

    DisplayName: str  # readonly
    ElementType: Agilent.MassSpectrometry.DataAnalysis.TitleElementType  # readonly
    Separator: str
    SubElementList: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement
    ]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ) -> bool: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    @staticmethod
    def CreateTitleElement(
        elementType: Agilent.MassSpectrometry.DataAnalysis.TitleElementType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.TitleElement: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITitleElement: ...

class TitleElementListParameter(
    Agilent.MassSpectrometry.DataAnalysis.ITitleElementListParameter,
    Agilent.MassSpectrometry.DataAnalysis.ICollectionElement,
    Agilent.MassSpectrometry.DataAnalysis.IParameter,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.Parameter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.TitleElementListParameter
    ) -> None: ...

    DefaultValue: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]
    Value: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
        Agilent.MassSpectrometry.DataAnalysis.ITitleElement
    ]

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleElementListParameter
    ) -> bool: ...
    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.IParameter
    ) -> bool: ...
    def Validate(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.ITitleElementListParameter: ...
    def SetToDefault(self) -> None: ...
    def IsValueValid(
        self,
        value_: Agilent.MassSpectrometry.DataAnalysis.ICoreList[
            Agilent.MassSpectrometry.DataAnalysis.ITitleElement
        ],
    ) -> bool: ...

class TitleElementType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BackGroundIndicator: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    BasePeakAbundance: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    ChromExtraction: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    CompoundInfo: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    DataFile: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    DeconvolutionIsotopeWidth: (
        Agilent.MassSpectrometry.DataAnalysis.TitleElementType
    ) = ...  # static # readonly
    DeviceName: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    FaimsFields: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    Fragmentation: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    GroupID: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    IncludedScans: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    Ionization: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    ProcessingHistory: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    ScanTypes: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    SignalDescription: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    SignalName: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    SpecTypes: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    Transition: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly
    UserText: Agilent.MassSpectrometry.DataAnalysis.TitleElementType = (
        ...
    )  # static # readonly

class TitleSubElement(
    Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement, System.ICloneable
):  # Class
    @overload
    def __init__(
        self,
        subEleType: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType,
        optional: bool,
        enabled: bool,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.TitleSubElement
    ) -> None: ...

    DisplayName: str  # readonly
    IsEnabled: bool
    IsOptional: bool  # readonly
    SubElementType: (
        Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType
    )  # readonly

    @overload
    def Equals(
        self, other: Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement
    ) -> bool: ...
    @overload
    def Equals(self, other: Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITitleSubElement: ...

class TitleSubElementType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BackGroundIndicator: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    BasePeakAbundance: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    ChargeState: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    CompoundInfo: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    ComputationType: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    DataFile: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    DeconvolutionIsotopeWidth: (
        Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType
    ) = ...  # static # readonly
    DeviceName: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    Energy: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    FaimsFields: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    FragmentationTechnique: (
        Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType
    ) = ...  # static # readonly
    FragmentorVoltage: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    GroupID: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    IonizationTechnique: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    Overall: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    Polarity: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    ProcessingHistory: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    RTRange: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    Range: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    ScanCount: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    ScanTypes: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    SignalDescription: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    SignalName: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    SpecTypes: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly
    UserText: Agilent.MassSpectrometry.DataAnalysis.TitleSubElementType = (
        ...
    )  # static # readonly

class Tm:  # Class
    def __init__(self) -> None: ...

    Caught: str  # static # readonly
    EnableStaticStringContents: bool  # static
    Finish: str  # static # readonly
    Start: str  # static # readonly

class TofCalibration(Agilent.MassSpectrometry.DataAnalysis.ITofCalibration):  # Class
    def __init__(self) -> None: ...

    MaximumPolynomialTerms: int  # static # readonly

    @overload
    def TimeToMass(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        times: List[float],
    ) -> List[float]: ...
    @overload
    def TimeToMass(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        time: float,
    ) -> float: ...
    @overload
    def MassToTime(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        mass: float,
    ) -> float: ...
    @overload
    def MassToTime(
        self,
        calibration: Agilent.MassSpectrometry.DataAnalysis.IPSetTofCalibration,
        masses: List[float],
    ) -> List[float]: ...

class TofCalibrationFormula(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FourTerm: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula = (
        ...
    )  # static # readonly
    Polynomial: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula = (
        ...
    )  # static # readonly
    Traditional: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationFormula = (
        ...
    )  # static # readonly

class TofCalibrationTechnique(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ExternalReference: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique = (
        ...
    )  # static # readonly
    InternalReference: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique = (
        ...
    )  # static # readonly
    Mixed: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.TofCalibrationTechnique = (
        ...
    )  # static # readonly

class TofMsProcessingMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DualGain: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode = (
        ...
    )  # static # readonly
    HiLow: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode = (
        ...
    )  # static # readonly
    Raw: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode = (
        ...
    )  # static # readonly
    Tlpp: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.TofMsProcessingMode = (
        ...
    )  # static # readonly

class TofSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IMassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.MassSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.ITofSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.TofSpectrum
    ) -> None: ...

    SpeciesForProductIonSpectra: str

    def CreatePSetUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    def CreatePSetPrecision(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.ITofSpectrum: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...

class ToleranceWindowMzPpm(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ITEM_MZ: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm = (
        ...
    )  # static # readonly
    ITEM_PPM: Agilent.MassSpectrometry.DataAnalysis.ToleranceWindowMzPpm = (
        ...
    )  # static # readonly

class TwoByteDictionary(
    Generic[K, V],
    Iterable[Any],
    Iterable[System.Collections.Generic.KeyValuePair[K, V]],
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(
        self,
        keyCast: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary.KeyCast[K, V],
        valueCast: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary.ValueCast[
            K, V
        ],
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary
    ) -> None: ...
    @overload
    def __init__(
        self,
        source: Dict[K, V],
        keyCast: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary.KeyCast[K, V],
        valueCast: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary.ValueCast[
            K, V
        ],
    ) -> None: ...

    Count: int  # readonly
    def __getitem__(self, key: K) -> V: ...
    def __setitem__(self, key: K, value_: V) -> None: ...
    def __getitem__(self, index: int) -> K: ...
    def Add(self, key: K, value_: V) -> None: ...
    def ContainsKey(self, key: K) -> bool: ...

    # Nested Types

    class BBIterator(
        Generic[K, V, K2, V2],
        Iterator[Any],
        System.IDisposable,
        Iterator[System.Collections.Generic.KeyValuePair[K2, V2]],
    ):  # Class
        def __init__(
            self,
            dictionary: Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary[K2, V2],
        ) -> None: ...

    class KeyCast(
        System.MulticastDelegate,
        Generic[K, V],
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> K: ...
        def BeginInvoke(
            self, b: int, callback: System.AsyncCallback, object: Any
        ) -> System.IAsyncResult: ...
        def Invoke(self, b: int) -> K: ...

    class ValueCast(
        System.MulticastDelegate,
        Generic[K, V],
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> V: ...
        def BeginInvoke(
            self, v: int, callback: System.AsyncCallback, object: Any
        ) -> System.IAsyncResult: ...
        def Invoke(self, v: int) -> V: ...

class UIDisplayContextMenuEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        location: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        peakNumbers: List[int],
    ) -> None: ...

    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    Location: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation  # readonly
    PeakNumbers: List[int]  # readonly

class UIDisplayHighlightPeaksEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        elementID: int,
        items: List[Agilent.MassSpectrometry.DataAnalysis.ItemStateChange],
    ) -> None: ...

    ElementId: int  # readonly
    Items: List[Agilent.MassSpectrometry.DataAnalysis.ItemStateChange]  # readonly

class UIDisplayPlotContextMenuEventArgs(
    Agilent.MassSpectrometry.DataAnalysis.UIDisplayContextMenuEventArgs
):  # Class
    def __init__(
        self,
        location: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        peakNumbers: List[int],
        items: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem],
        ranges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        unzoom: bool,
        annotationCaliperClicked: bool,
    ) -> None: ...

    ClickOnAnnotationCaliper: bool  # readonly
    Items: List[Agilent.MassSpectrometry.DataAnalysis.IDataItem]  # readonly
    Ranges: Agilent.MassSpectrometry.DataAnalysis.RangeCollection  # readonly
    Unzoom: bool  # readonly

class UIDisplayTableContextMenuEventArgs(
    Agilent.MassSpectrometry.DataAnalysis.UIDisplayContextMenuEventArgs
):  # Class
    def __init__(
        self,
        location: Agilent.MassSpectrometry.DataAnalysis.ContextMenuLocation,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        peakNumbers: List[int],
        level: int,
        hiddenColumns: List[str],
        visibleColumns: List[str],
        indicatedColumn: str,
        resultAttributeDefintions: Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions,
    ) -> None: ...

    HiddenColumns: List[str]  # readonly
    IndicatedColumn: str  # readonly
    Level: int  # readonly
    ResultAttributeDefinitions: (
        Agilent.MassSpectrometry.DataAnalysis.IResultAttributeDefinitions
    )  # readonly
    VisibleColumns: List[str]  # readonly

class UIFormulaSelectedChangedEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        dataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
        changeCategory: Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs.ChangeCategoryFlag,
        ids: List[int],
    ) -> None: ...

    ChangeCategory: (
        Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs.ChangeCategoryFlag
    )  # readonly
    DataItem: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    Ids: List[int]  # readonly

    # Nested Types

    class ChangeCategoryFlag(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        BestFormula: (
            Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs.ChangeCategoryFlag
        ) = ...  # static # readonly
        CollisionEnergyFormula: (
            Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs.ChangeCategoryFlag
        ) = ...  # static # readonly
        HighlightedFormula: (
            Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs.ChangeCategoryFlag
        ) = ...  # static # readonly

class UIFormulaSelectedChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIFormulaSelectedChangedEventArgs,
    ) -> None: ...

class UIFragmentIonChangeHighlightEventArgs(System.EventArgs):  # Class
    def __init__(self, dataItemID: int, mzvalue: float) -> None: ...

    DataItemID: int  # readonly
    FragementIonMZ: float  # readonly

class UIFragmentIonChangeHighlightEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIFragmentIonChangeHighlightEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIFragmentIonChangeHighlightEventArgs,
    ) -> None: ...

class UIGraphicsAdjustPeakThresholdEventArgs(System.EventArgs):  # Class
    def __init__(self, changeThreshold: bool, newThreshold: float) -> None: ...

    ChangeThreshold: bool  # readonly
    NewThreshold: float  # readonly

class UIGraphicsAdjustPeakThresholdEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsAdjustPeakThresholdEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsAdjustPeakThresholdEventArgs,
    ) -> None: ...

class UIGraphicsExtractDefaultEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        rangeCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
        item: Agilent.MassSpectrometry.DataAnalysis.IDataItem,
    ) -> None: ...

    Item: Agilent.MassSpectrometry.DataAnalysis.IDataItem  # readonly
    RangeCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection  # readonly

class UIGraphicsExtractDefaultEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsExtractDefaultEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsExtractDefaultEventArgs,
    ) -> None: ...

class UIGraphicsManualIntegrationEventArgs(System.EventArgs):  # Class
    def __init__(
        self, itemId: int, startX: float, startY: float, endX: float, endY: float
    ) -> None: ...

    ItemId: int  # readonly
    endX: float  # readonly
    endY: float  # readonly
    startX: float  # readonly
    startY: float  # readonly

class UIGraphicsManualIntegrationEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsManualIntegrationEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsManualIntegrationEventArgs,
    ) -> None: ...

class UIGraphicsMouseModeEventArgs(System.EventArgs):  # Class
    def __init__(
        self, mouseMode: Agilent.MassSpectrometry.DataAnalysis.MouseTool
    ) -> None: ...

    MouseMode: Agilent.MassSpectrometry.DataAnalysis.MouseTool  # readonly

class UIGraphicsMouseModeEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsMouseModeEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsMouseModeEventArgs,
    ) -> None: ...

class UIGraphicsOverlaidModeEventArgs(System.EventArgs):  # Class
    def __init__(self, OverlaidModeEnabled: bool) -> None: ...

    OverlaidModeEnabled: bool  # readonly

class UIGraphicsOverlaidModeEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsOverlaidModeEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIGraphicsOverlaidModeEventArgs,
    ) -> None: ...

class UIMassSubsequenceDialogEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIShowLinkDialogEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIShowLinkDialogEventArgs,
    ) -> None: ...

class UISelectedSequenceDefintionChangedEventArgs(System.EventArgs):  # Class
    def __init__(self, usageKey: str) -> None: ...

    UsageKey: str  # readonly

class UISelectedSequenceDefintionChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UISelectedSequenceDefintionChangedEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UISelectedSequenceDefintionChangedEventArgs,
    ) -> None: ...

class UISettingsButtonPressEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        settingsItem: Agilent.MassSpectrometry.DataAnalysis.ISettingsEditorItem,
        button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons,
    ) -> None: ...

    Button: Agilent.MassSpectrometry.DataAnalysis.ParamControlButtons  # readonly
    SettingsEditorItem: (
        Agilent.MassSpectrometry.DataAnalysis.ISettingsEditorItem
    )  # readonly

class UISettingsButtonPressEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UISettingsButtonPressEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UISettingsButtonPressEventArgs,
    ) -> None: ...

class UIShowLinkDialogEventArgs(System.EventArgs):  # Class
    def __init__(self, usageKey: str) -> None: ...

    UsageKey: str  # readonly

class UIShowLinkDialogEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIShowLinkDialogEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIShowLinkDialogEventArgs,
    ) -> None: ...

class UIUpdateAnnotationEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        dataItemID: int,
        annotationList: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList,
        showEditDialog: bool,
    ) -> None: ...

    AnnotationList: Agilent.MassSpectrometry.DataAnalysis.IAnnotationList  # readonly
    DataItemId: int  # readonly
    ShowPropertiesDialog: bool  # readonly

class UIUpdateAnnotationEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateAnnotationEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateAnnotationEventArgs,
    ) -> None: ...

class UIUpdateContextMenuEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIDisplayContextMenuEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIDisplayContextMenuEventArgs,
    ) -> None: ...

class UIUpdateDeleteEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, e: System.EventArgs) -> None: ...

class UIUpdateHighlightEventArgs(System.EventArgs):  # Class
    def __init__(self, elementID: int) -> None: ...

    ElementId: int  # readonly

class UIUpdateHighlightEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightEventArgs,
    ) -> None: ...

class UIUpdateHighlightManyEventArgs(System.EventArgs):  # Class
    def __init__(
        self, items: List[Agilent.MassSpectrometry.DataAnalysis.ItemStateChange]
    ) -> None: ...

    Items: List[Agilent.MassSpectrometry.DataAnalysis.ItemStateChange]  # readonly

class UIUpdateHighlightManyEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightManyEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateHighlightManyEventArgs,
    ) -> None: ...

class UIUpdateHighlightPeaksEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIDisplayHighlightPeaksEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIDisplayHighlightPeaksEventArgs,
    ) -> None: ...

class UIUpdateMarkEventArgs(System.EventArgs):  # Class
    def __init__(self, elementID: int) -> None: ...

    ElementId: int  # readonly

class UIUpdateMarkEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateMarkEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIUpdateMarkEventArgs,
    ) -> None: ...

class UIViewOrganizationChangedEventArgs(System.EventArgs):  # Class
    def __init__(
        self, organization: Agilent.MassSpectrometry.DataAnalysis.DataView
    ) -> None: ...

    Organization: Agilent.MassSpectrometry.DataAnalysis.DataView  # readonly

class UIViewOrganizationChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIViewOrganizationChangedEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.UIViewOrganizationChangedEventArgs,
    ) -> None: ...

class UVSpecDescription(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.SpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IAdjustDelayTime,
    Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IReadOnly,
    Agilent.MassSpectrometry.DataAnalysis.ISpecDescription,
    Agilent.MassSpectrometry.DataAnalysis.IDescription,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription
    ) -> None: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription: ...

class UVSpectrum(
    Agilent.MassSpectrometry.DataAnalysis.ISpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IFXData,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    Agilent.MassSpectrometry.DataAnalysis.IDelayTimeContainer,
    Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum,
    Agilent.MassSpectrometry.DataAnalysis.IXYData,
    Agilent.MassSpectrometry.DataAnalysis.IResultChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.Spectrum,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.UVSpectrum
    ) -> None: ...

    XYStore: Agilent.MassSpectrometry.DataAnalysis.IFXStore

    def CheckDescriptionType(
        self, description: Agilent.MassSpectrometry.DataAnalysis.IDescription
    ) -> bool: ...
    @staticmethod
    def DescriptionType() -> System.Type: ...
    @overload
    @staticmethod
    def Compare(
        uv1: Agilent.MassSpectrometry.DataAnalysis.UVSpectrum,
        uv2: Agilent.MassSpectrometry.DataAnalysis.UVSpectrum,
        compoundSpectra: bool,
    ) -> int: ...
    @overload
    @staticmethod
    def Compare(
        description1: Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription,
        description2: Agilent.MassSpectrometry.DataAnalysis.IUVSpecDescription,
        compoundSpectra: bool,
    ) -> int: ...
    @overload
    def AdjustToDelay(
        self, delayTimes: Agilent.MassSpectrometry.DataAnalysis.IPSetDeviceDelayInfo
    ) -> bool: ...
    @overload
    def AdjustToDelay(self, newDelay: float) -> bool: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IUVSpectrum: ...

class UncertaintyType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Absolute: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType = (
        ...
    )  # static # readonly
    PartsPerMillion: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType = (
        ...
    )  # static # readonly

class UnitDictionary(
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.TwoByteDictionary[
        Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ],
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary,
    Iterable[
        System.Collections.Generic.KeyValuePair[
            Agilent.MassSpectrometry.DataAnalysis.DataValueType,
            Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        ]
    ],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary
    ) -> None: ...
    @overload
    def __init__(
        self,
        sourceDict: Dict[
            Agilent.MassSpectrometry.DataAnalysis.DataValueType,
            Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        ],
    ) -> None: ...
    @staticmethod
    def UpdateDictionaryUnits(
        unitDict: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        warnOnUnitChange: bool,
    ) -> None: ...
    @staticmethod
    def AddToDictionary(
        unitDict: Agilent.MassSpectrometry.DataAnalysis.IUnitDictionary,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        warnOnUnitDifference: bool,
    ) -> None: ...

class UnitsAndPrecision(
    Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        dvType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
    ) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    ) -> None: ...
    @overload
    def __init__(
        self,
        dataValueType: Agilent.MassSpectrometry.DataAnalysis.DataValueType,
        dataUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        precisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType,
        precisionDigits: int,
    ) -> None: ...

class UnrecognizedFieldException(
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
    System.NotSupportedException,
):  # Class
    def __init__(self, message: str) -> None: ...

class UserMessage(
    System.MarshalByRefObject,
    Agilent.MassSpectrometry.DataAnalysis.IUserMessage,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(
        self,
        helpIdBase: int,
        helpFile: str,
        messageOrigin: Agilent.MassSpectrometry.DataAnalysis.ProgramModule,
        messageFormatId: System.Enum,
        messagePrameters: List[Any],
    ) -> None: ...
    @overload
    def __init__(
        self,
        messageOrigin: Agilent.MassSpectrometry.DataAnalysis.ProgramModule,
        messageFormatId: System.Enum,
        messagePrameters: List[Any],
    ) -> None: ...

    Details: str  # readonly
    HelpFile: str  # readonly
    HelpId: int  # readonly
    Message: str  # readonly
    MessageId: System.Enum  # readonly
    MessageOrigin: Agilent.MassSpectrometry.DataAnalysis.ProgramModule  # readonly
    UserMessageType: Agilent.MassSpectrometry.DataAnalysis.UserMessageType  # readonly

    def SetHelpFile(self, helpFilePath: str) -> None: ...
    def SetUserMessageType(
        self, type: Agilent.MassSpectrometry.DataAnalysis.UserMessageType
    ) -> None: ...
    def SetDetails(self, details: str) -> None: ...
    def SetHelpId(self, helpId: int) -> None: ...
    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class UserMessageType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Error: Agilent.MassSpectrometry.DataAnalysis.UserMessageType = (
        ...
    )  # static # readonly
    Information: Agilent.MassSpectrometry.DataAnalysis.UserMessageType = (
        ...
    )  # static # readonly
    Warning: Agilent.MassSpectrometry.DataAnalysis.UserMessageType = (
        ...
    )  # static # readonly

class VHGrabHandle(
    Agilent.MassSpectrometry.DataAnalysis.IGrabHandle,
    Agilent.MassSpectrometry.DataAnalysis.GrabHandle,
):  # Class
    def __init__(
        self,
        grabHandlePosition: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition,
    ) -> None: ...
    def Draw(self, g: System.Drawing.Graphics) -> None: ...
    @staticmethod
    def GetCursor(
        ghp: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition,
    ) -> System.Windows.Forms.Cursor: ...

class ValidationSetEventArgs(System.EventArgs):  # Class
    def __init__(self, usageKey: str) -> None: ...

    ValidatedParameterUsageKey: str  # readonly

class ValidationSetEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ValidationSetEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ValidationSetEventArgs,
    ) -> None: ...

class ValidationStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Invalid: Agilent.MassSpectrometry.DataAnalysis.ValidationStatus = (
        ...
    )  # static # readonly
    Modified: Agilent.MassSpectrometry.DataAnalysis.ValidationStatus = (
        ...
    )  # static # readonly
    Normal: Agilent.MassSpectrometry.DataAnalysis.ValidationStatus = (
        ...
    )  # static # readonly

class ValueChangeEventArgs(System.EventArgs):  # Class
    def __init__(self, usageKey: str) -> None: ...

    UsageKey: str  # readonly

class ValueChangeEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ValueChangeEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        args: Agilent.MassSpectrometry.DataAnalysis.ValueChangeEventArgs,
    ) -> None: ...

class VerticalGrabHandle(
    Agilent.MassSpectrometry.DataAnalysis.IGrabHandle,
    Agilent.MassSpectrometry.DataAnalysis.GrabHandle,
):  # Class
    def __init__(
        self, position: Agilent.MassSpectrometry.DataAnalysis.GrabHandleClickPosition
    ) -> None: ...

class WhereBuffer:  # Struct
    def __init__(self, dummy: int) -> None: ...

    first_scan: int
    lType: str
    last_scan: int
    max_scan: int
    rType: str
    s_bl_d: float
    s_corr: float
    s_max: int
    s_pkht: float
    s_raw: float
    s_start: int
    s_stop: int
    s_trap: float

    def IncreaseStop(self, a: int) -> None: ...
    def ToString(self) -> str: ...

class WhereBuffer:  # Struct
    def __init__(self, dummy: int) -> None: ...

    first_scan: int
    lType: str
    last_scan: int
    max_scan: int
    rType: str
    s_bl_d: float
    s_corr: float
    s_max: int
    s_pkht: float
    s_raw: float
    s_start: int
    s_stop: int
    s_trap: float

    def IncreaseStop(self, a: int) -> None: ...
    def ToString(self) -> str: ...

class XSamplingType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    BoundedRegions: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    Continuous: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    Discontinuous: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    Irregular: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    SparseStepped: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    Stepped: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.XSamplingType = (
        ...
    )  # static # readonly

class XSpecificData:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, dataPoints: int) -> None: ...

    AccumulationTimeArrayInfo: List[float]  # readonly
    DetectorModeArrayInfo: List[
        Agilent.MassSpectrometry.DataAnalysis.IonDetectorMode
    ]  # readonly
    NameArrayInfo: Dict[float, str]  # readonly
    RejectionFlagArrayInfo: List[bool]  # readonly
    StandardDeviationArray: List[float]  # readonly

class XSpecificParamType:  # Class
    def __init__(self) -> None: ...

    ByteCount: int
    Offset: int

    def CopyFrom(
        self, value_: Agilent.MassSpectrometry.DataAnalysis.XSpecificParamType
    ) -> None: ...

class XYArrayStore(
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
    Agilent.MassSpectrometry.DataAnalysis.BaseXYArrayStore,
    Agilent.MassSpectrometry.DataAnalysis.IXYStore,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IXYArrayStore,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.XYArrayStore
    ) -> None: ...

    DataUnits: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    Limits: Agilent.MassSpectrometry.DataAnalysis.IXYLimits  # readonly
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    XSamplingType: Agilent.MassSpectrometry.DataAnalysis.XSamplingType
    XUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly
    YUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly

    def UpdatePrecision(self) -> bool: ...
    def SetX(self, index: int, x: float) -> None: ...
    def SetY(self, index: int, y: float) -> None: ...
    def RefreshLimits(self) -> None: ...
    def GetX(self, index: int) -> float: ...
    def GetPoint(self, index: int, x: float, y: float) -> None: ...
    def GetY(self, index: int) -> float: ...
    def GetXArray(self) -> List[float]: ...
    @overload
    def SetData(
        self, xArray: List[float], yArray: List[float], pointCount: int
    ) -> None: ...
    @overload
    def SetData(
        self,
        xArray: List[float],
        yArray: List[float],
        accumTimeArray: List[float],
        pointCount: int,
    ) -> None: ...
    def GetAccumulationTime(self, index: int) -> float: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYStore: ...
    def IndexOfMaximumY(self, xMin: float, xMax: float) -> int: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def GetYArray(self) -> List[float]: ...
    def ToString(self) -> str: ...

class XYDataBase(
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverterDelayed,
    System.ICloneable,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
):  # Class
    AcquisitionMetaData: Agilent.MassSpectrometry.DataAnalysis.IAcqMetaData
    Compoundlabel: str
    CurrentDelayTime: float
    DataUnits: Agilent.MassSpectrometry.DataAnalysis.IDataUnits
    DefaultDrawingMode: Agilent.MassSpectrometry.DataAnalysis.DrawingMode
    DefaultSuppressNegativeYValues: bool
    PrecisionDigits: int
    PrecisionType: Agilent.MassSpectrometry.DataAnalysis.DisplayPrecisionType
    SubYValueLabel: str
    Title: str  # readonly
    XUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly
    YUnitsAndPrecision: (
        Agilent.MassSpectrometry.DataAnalysis.IUnitsAndPrecision
    )  # readonly

    def WriteFile(self, filePath: str, delimitor: str, appendData: bool) -> None: ...
    def UpdatePrecision(self) -> bool: ...
    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    def CreatePSetUnits(self) -> Agilent.MassSpectrometry.DataAnalysis.IPSetUnits: ...
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    def Interpolate(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    def CreatePSetPrecision(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.IPSetPrecision: ...
    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYData: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theCollection: Agilent.MassSpectrometry.DataAnalysis.RangeCollection,
    ) -> None: ...
    @overload
    def Convert(
        self,
        currentUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        theRange: Agilent.MassSpectrometry.DataAnalysis.IRange,
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[float],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: float,
    ) -> float: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        value_: int,
    ) -> int: ...
    @overload
    def Convert(
        self,
        oldUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        newUnit: Agilent.MassSpectrometry.DataAnalysis.DataUnit,
        values: List[int],
    ) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...
    def InitializePlotPreferences(
        self, prefs: Agilent.MassSpectrometry.DataAnalysis.IPlotPreferences
    ) -> None: ...
    def ConvertToXUnit(
        self,
        valueContainer: Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    ) -> None: ...
    def ToString(self) -> str: ...

class XYLimits(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IXYLimits,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, source: Agilent.MassSpectrometry.DataAnalysis.IXYLimits
    ) -> None: ...

    Capacity: int
    Count: int
    XMax: float
    XMin: float
    YMax: float
    YMin: float

    def Clone(self) -> Agilent.MassSpectrometry.DataAnalysis.IXYLimits: ...

class XYMath(Agilent.MassSpectrometry.DataAnalysis.IXYMath):  # Class
    def __init__(self) -> None: ...
    def AbsUncertainty(
        self,
        xValue: float,
        xUncertainty: float,
        uncertaintyType: Agilent.MassSpectrometry.DataAnalysis.UncertaintyType,
    ) -> float: ...

class XYPoint:  # Class
    def __init__(self, xValue: float, yValue: float) -> None: ...

    XValue: float
    YValue: float

class XYProcessingHistory(
    Agilent.MassSpectrometry.DataAnalysis.ConsistencyBase,
    Agilent.MassSpectrometry.DataAnalysis.IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.IChangeNotify,
    Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory,
):  # Class
    AlgorithmInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo  # readonly
    Description: Agilent.MassSpectrometry.DataAnalysis.IDescription  # readonly
    FirstOperandProcessingHistory: (
        Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory
    )  # readonly
    InfoOnly: bool
    OperationTime: System.DateTime  # readonly
    SecondOperandProcessingHistory: (
        Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory
    )  # readonly
    UserName: str  # readonly

    def WriteXML(self, writer: System.Xml.XmlWriter) -> None: ...
    @overload
    @staticmethod
    def CreateAndFillProcessingHistory(
        algorithmInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo,
        description: Agilent.MassSpectrometry.DataAnalysis.IDescription,
        resultObject: Agilent.MassSpectrometry.DataAnalysis.IFXData,
    ) -> None: ...
    @overload
    @staticmethod
    def CreateAndFillProcessingHistory(
        algorithmInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo,
        operands: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IFXData
        ],
        resultObject: Agilent.MassSpectrometry.DataAnalysis.IFXData,
    ) -> None: ...
    @overload
    @staticmethod
    def CreateAndFillProcessingHistory(
        algorithmInfo: Agilent.MassSpectrometry.DataAnalysis.IAlgorithmInfo,
        description: Agilent.MassSpectrometry.DataAnalysis.IDescription,
        operands: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.IFXData
        ],
        resultObject: Agilent.MassSpectrometry.DataAnalysis.IFXData,
    ) -> None: ...
    def UpdatePrecision(self) -> bool: ...
    @overload
    def GetHistorySummary(self, histSummary: str, shortHistSummary: str) -> None: ...
    @overload
    def GetHistorySummary(
        self,
        titleElement: Agilent.MassSpectrometry.DataAnalysis.ITitleElement,
        histSummary: str,
        shortHistSummary: str,
    ) -> None: ...
    def CopyInfoNode(
        self,
        infoNode: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory,
        destinationNode: Agilent.MassSpectrometry.DataAnalysis.IXYProcessingHistory,
    ) -> None: ...
    def ConvertUnits(
        self,
        units: Agilent.MassSpectrometry.DataAnalysis.IPSetUnits,
        converter: Agilent.MassSpectrometry.DataAnalysis.IUnitsConverter,
    ) -> bool: ...

class XYSmooth(Agilent.MassSpectrometry.DataAnalysis.IXYSmooth):  # Class
    def __init__(self) -> None: ...

class XmlUtil:  # Class
    def __init__(self) -> None: ...

    ExecDir: str  # static # readonly

    @staticmethod
    def GetElementValueAsBoolean(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: bool
    ) -> bool: ...
    @staticmethod
    def GetElementValueAsInt32(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: int
    ) -> int: ...
    @staticmethod
    def GetAttributeText(
        elementNode: System.Xml.XmlNode, attributeName: str
    ) -> str: ...
    @overload
    @staticmethod
    def WriteElement(
        sw: System.IO.StreamWriter, indent: str, elementName: str, value_: Any
    ) -> None: ...
    @overload
    @staticmethod
    def WriteElement(
        sw: System.IO.StreamWriter,
        indent: str,
        elementName: str,
        value_: Any,
        format: str,
    ) -> None: ...
    @staticmethod
    def GetElementValueAsDouble(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: float
    ) -> float: ...
    @staticmethod
    def WriteComment(sw: System.IO.StreamWriter, indent: str, comment: str) -> None: ...
    @overload
    @staticmethod
    def GetElementText(parentNode: System.Xml.XmlNode, elementName: str) -> str: ...
    @overload
    @staticmethod
    def GetElementText(
        parentNode: System.Xml.XmlNode, elementName: str, mustExist: bool
    ) -> str: ...

class YNormalizationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.YNormalizationType = (
        ...
    )  # static # readonly
    Each: Agilent.MassSpectrometry.DataAnalysis.YNormalizationType = (
        ...
    )  # static # readonly

class YUnitType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    Absolute: Agilent.MassSpectrometry.DataAnalysis.YUnitType = ...  # static # readonly
    Normalized: Agilent.MassSpectrometry.DataAnalysis.YUnitType = (
        ...
    )  # static # readonly

class quality_bits(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AreaProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    ClaireButNotBiased: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    ClaireOutsideCalib: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    HeightProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    MergeProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    NoProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    SeriousProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    Spiky: Agilent.MassSpectrometry.DataAnalysis.quality_bits = ...  # static # readonly
    SymmetryProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    Thresholded: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    WidthProblem: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
    contaminated_merge: Agilent.MassSpectrometry.DataAnalysis.quality_bits = (
        ...
    )  # static # readonly
