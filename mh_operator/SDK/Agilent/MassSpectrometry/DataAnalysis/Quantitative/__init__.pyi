# -*- coding: utf-8 -*-
import typing

# Import specific members from typing used in hints
from typing import (
    Any,
    Callable,
    Dict,
    FrozenSet,
    Generic,
    Iterable,
    Iterator,
    List,
    Mapping,
    Optional,
    Sequence,
    Set,
    Tuple,
    TypeVar,
    Union,
    overload,
)

import datetime
from enum import Enum

from mh_operator.SDK import Agilent, System

from . import (
    NLR,
    TSO,
    Analysis,
    AnalysisForm,
    CefFileIO,
    CheckBatchFiles,
    CheckBatchFilesConsole,
    ChromatogramInformation,
    ChromSpecData,
    CommandLineParse,
    Compliance,
    ComplianceConfiguration,
    ComplianceUI,
    CompoundsAtAGlance,
    Configuration,
    Controls2,
    CoreDataTypes,
    CustomDialogs,
    DataStorageECM,
    DataStorageLocal,
    Dialogs,
    Dialogs2,
    DynamicQuant,
    ECMHelper,
    ECMProxy,
    FileMessaging,
    FileMessagingPrc,
    FileMessagingSvc,
    FlagAndFilter,
    Grid,
    IndexedData,
    MethodAssistant,
    MethodDiff,
    MetricsPlot,
    NumericFormat,
    QuantAnalysis,
    QuantConsole,
    QueuedTask,
    Report,
    ReportFixedGraphics,
    ReportMethod,
    ReportMethodEdit,
    ReportMethodRun,
    ReportMethodUtils,
    ReportScript,
    ReportTasks,
    ReportWizard,
    RTCalibration,
    RunQueryHost,
    SampleData,
    Schema,
    ScriptEngine,
    SecureFileSystem,
    SetupSecureFolder,
    Toolbar,
    Toolbar2,
    ToolDefinitions,
    UILibrary,
    UIScriptIF,
    UIScriptIFImpls,
    UIUtils,
    UIUtils2,
    UnknownsMethod,
)

# Discovered Generic TypeVars:
T = TypeVar("T")
TKey = TypeVar("TKey")
TValue = TypeVar("TValue")
from . import (
    BaselinePreferenceType,
    CandidateHit,
    ChromRegion,
    ChromType,
    Component,
    ComponentPerceptionParams,
    ComponentSpectrum,
    DataFileValueDataType,
    DataUnit,
    DataValueType,
    DesiredMSStorageType,
    DetectionFilteringType,
    DeviceType,
    DoubleParameterLimit,
    FileType,
    GenieTimedEventCode,
    IAcqMetaData,
    IActuals,
    IAdjustDelayTime,
    IBDADataAccess,
    IBDAFileInformation,
    IBDAMSScanFileInformation,
    IBdaMsScanRecordCollection,
    IChangeNotify,
    IChromatogram,
    IChromPeak,
    IChromPeakList,
    ICompoundIdentification,
    IConsistency,
    IConvertibleValueContainer,
    ICoreAlgorithmFactory,
    IDataAccess,
    IFindPeaks,
    IFindPeaksParameters,
    IFXData,
    IGenieTimedEvent,
    IGenieTimedEventCollection,
    IItemHighlighting,
    ILastOperation,
    ILibrary,
    ILwMsPeakList,
    IMsMsChromPeak,
    IMsPeak,
    IMsPeakList,
    IonPeak,
    IonPolarity,
    IParameterSet,
    IPeak,
    IPeakHiding,
    IPeakInternals,
    IPeakList,
    IPSetDeviceDelayInfo,
    IPSetExcludeMass,
    IPSetExtractChrom,
    IPSetExtractSpectrum,
    IPSetGenieIntegrator,
    IPSetManualIntegration,
    IPSetPeakFilter,
    IPSetPeakFind,
    IPSetPeakID,
    IPSetPeakSpectrumExtraction,
    IPSetPrecision,
    IPSetRangeCollection,
    IPSetRTEIntegrator,
    IPSetSignalToNoise,
    IPSetSystemSuitability,
    IPSetTofCalibration,
    IPSetUnits,
    IRange,
    IReadChromatogram,
    IReadSpectra,
    IResult,
    IResultAttributes,
    IRMStatus,
    ISample,
    ISignalToNoise,
    ISortByAttribute,
    ISpectrum,
    IUserCalibration,
    IXYData,
    LibraryDataSet,
    MeasurementType,
    MinMaxRange,
    MSLevel,
    MSScanType,
    MSStorageMode,
    NoiseType,
    PeakErrorFlags,
    PeakFilterType,
    PeakLocationType,
    PeakStatus,
    Pharmacopoeia,
    PointValueStorageScheme,
    PSetGenieIntegrator,
    PSetRTEIntegrator,
    RangeCollection,
    SampleCategory,
    SeparationTechnique,
    SmoothingFunctionType,
    SpecType,
    StoredDataType,
    XSamplingType,
)
from .AgileIntegrator import AgilePeakShape, IPeakListProvider
from .AnalysisForm import MainForm
from .ChromSpecData import CachedPeak, RefSpecData
from .Compliance import (
    ICompliance,
    IComplianceCommand,
    IComplianceLightCommand,
    IDataStorage,
)
from .Configuration import NumberFormats
from .Controls2 import IPropertyPage
from .FD import IScanSpace
from .Grid import GridConfigBase, GridControlBase, IPlottableGrid, ValueListSet
from .QueuedTask import (
    IQueuedTask,
    IQueuedTaskAction,
    IQueuedTaskContext,
    IQueuedTaskNotification,
    QueuedTaskNotificationSettingCollection,
    TaskPriority,
)
from .ScriptEngine import IScriptEngine
from .SpectralSummerIntegrator import (
    IPSetSpectralSummerIntegrator,
    PSetSpectralSummerIntegrator,
)
from .Toolbar import (
    ExplorerBarDefinition,
    IExplorerBarGroup,
    IToolbarsManager,
    ToolbarsManagerBase,
)
from .UIScriptIF import IAddInManager, IChromSpecPane, IUIState
from .UIScriptIFImpls import UIState
from .UIUtils import BindingObjectCollection, EnumItem, EnumItemCollection
from .UIUtils2.Utils import FindOperatorType

# Stubs for namespace: Agilent.MassSpectrometry.DataAnalysis.Quantitative

class AccuMassMetricsParameters:  # Class
    def __init__(self) -> None: ...

    ExpectedDeviation: Agilent.MassSpectrometry.IExpectedDeviationParameters  # readonly
    IonGroupingParameters: Agilent.MassSpectrometry.IIonGroupingParameters  # readonly
    WeightingParameters: Agilent.MassSpectrometry.IScoreWeightingParameters  # readonly

class AcqMethodBrowser(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...
    def CloseData(self) -> None: ...
    def OpenData(self, dataPath: str) -> None: ...

class AcqMethodGrid(
    Infragistics.Win.IUltraControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.Layout.IArrangedElement,
    Infragistics.Win.IUIElementProvider,
    Infragistics.Win.IUltraControlElement,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.ComponentModel.ISupportInitialize,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.IWin32Window,
    Infragistics.Win.ISupportPresets,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    Infragistics.Win.IControlElementEventProcessor,
    Infragistics.Win.IUIElementTextProvider,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.CalcEngine.IUltraCalcParticipant,
    System.ComponentModel.ISynchronizeInvoke,
    Infragistics.Win.IValidatorClient,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    Agilent.MassHunter.Quantitative.UIModel.IGridControl,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    System.ComponentModel.IComponent,
    Infragistics.Win.ISelectionManager,
    Infragistics.Win.UltraWinGrid.Design.IGridDesignInfo,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    Infragistics.Win.Touch.IGestureConsumer,
    Infragistics.Shared.IUltraLicensedComponent,
    GridControlBase,
    System.Windows.Forms.IBindableComponent,
    System.IDisposable,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    Infragistics.Win.AutoEditMode.IAutoEditMode,
):  # Class
    def __init__(self) -> None: ...

    DataPath: str  # readonly

    def CloseData(self) -> None: ...
    def OpenData(self, dataPath: str) -> None: ...

class AcqMethodType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    GC_MS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType = (
        ...
    )  # static # readonly
    GC_QQQ: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType = (
        ...
    )  # static # readonly
    LC_QQQ: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType = (
        ...
    )  # static # readonly

class AcquisitionMethod:  # Class
    def __init__(self) -> None: ...

    AcqDataDirName: str = ...  # static # readonly
    AcqMethodDirPattern: str = ...  # static # readonly
    AcqMethodFileNamePattern: str = ...  # static # readonly
    AcqMethodFileNamePattern_LCQQQ: str = ...  # static # readonly
    AcqMethodFileName_GCQQQ: str = ...  # static # readonly
    AcqMethodFileName_GCSQ: str = ...  # static # readonly
    AcqMethodFilePattern: str = ...  # static # readonly
    AcqMethodFileWithLC: str = ...  # static # readonly
    AcqMethodSchemaFile: str = ...  # static # readonly
    AcqMethodWithLCSchemaFile: str = ...  # static # readonly

    AcqMethodPath: str  # readonly
    AcqMethodType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType
    )  # readonly
    DataSet: System.Data.DataSet  # readonly
    IsAcquisitionMethodPresent: bool  # readonly
    IsIonPolarityUnspecified: bool  # readonly
    XmlDataDoc: System.Xml.XmlDataDocument  # readonly

    def SetDefaultIonPolarity(self, defaultPolarity: IonPolarity) -> None: ...
    def GetOverallMzScanRange(self) -> IRange: ...
    @staticmethod
    def GetAcquisitionMethodFilePath(acqSampleDirPath: str) -> str: ...
    def GetCompoundMap(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMap: ...
    def InferIonPolarityFromTuneFileName(self) -> IonPolarity: ...
    def GetTimeSegmentByIndex(
        self, timeSegmentIndex: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeSegment: ...
    def SetAcquisitionPath(self, acqSampleDirPath: str) -> None: ...
    def GetTimeSegments(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeSegment]: ...
    def GetScans(
        self, scanType: MSScanType
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement
    ]: ...
    @staticmethod
    def GetAcqMethodType(
        sampleDirPath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType: ...
    @staticmethod
    def GetAcqMethodWithLC_FilePath(acqSampleDirPath: str) -> str: ...
    def ReadFromFile(
        self,
        acqMethodPath: str,
        acqMethodType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcqMethodType,
    ) -> None: ...

class AcquisitionMethodReader(System.IDisposable):  # Class
    def __init__(
        self,
        acqMethod: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcquisitionMethod,
    ) -> None: ...
    def ReadScanTimeAndRange(
        self,
        tsIndex: int,
        scanType: MSScanType,
        scanTime: float,
        mzLow: float,
        mzHigh: float,
    ) -> None: ...
    def Dispose(self) -> None: ...
    def ReadFromSample(self, acqSampleDirPath: str) -> None: ...

class AgileIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    @overload
    def __init__(self, version: int) -> None: ...
    @overload
    def __init__(self, version: int, peakFilters: IPSetPeakFilter) -> None: ...

    Parameters: IPSetPeakFind  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    def FindAllPeaks(
        self,
        xArray: List[float],
        yArray: List[float],
        timeSegments: List[float],
        findEdgePeaks: bool,
    ) -> IPeakList: ...

class AgileManualIntParameters(IFindPeaksParameters):  # Class
    def __init__(self) -> None: ...

    ManualPeakParameters: IPSetManualIntegration
    ParameterSets: System.Collections.Generic.List[IParameterSet]
    PeakFilterParameters: IPSetPeakFilter

    def ParameterSetByType(self, desiredType: System.Type) -> IParameterSet: ...

class AgileParameters(IFindPeaksParameters):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, timeSegments: List[float]) -> None: ...
    @overload
    def __init__(self, timeSegments: List[float], smoothingKernelSize: int) -> None: ...
    @overload
    def __init__(
        self,
        timeSegments: List[float],
        smoothingKernelSize: int,
        resolvePeaksByShape: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        timeSegments: List[float],
        smoothingKernelSize: int,
        resolvePeaksByShape: bool,
        peakShape: AgilePeakShape,
    ) -> None: ...

    FindEdgePeaks: bool
    PeakShape: AgilePeakShape  # readonly
    ResolvePeaksByShape: bool
    SmoothingKernelSize: int  # readonly
    TimeSegments: List[float]  # readonly

class AgileWrapper(IPeakListProvider, IFindPeaks):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, algoVersion: int) -> None: ...

    Version: int  # readonly

    def FindAllPeaks(
        self,
        xArray: List[float],
        yArray: List[float],
        ap: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AgileParameters,
    ) -> IPeakList: ...

class AlternativePeakCriteria(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DeconvolutedLibraryMatchScore: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AlternativePeakCriteria
    ) = ...  # static # readonly

class AnalysisEventArgs(System.EventArgs):  # Class
    @overload
    def __init__(self, count: int, current: int) -> None: ...
    @overload
    def __init__(self, count: int, current: int, target: str) -> None: ...

    AnalysisTarget: str  # readonly
    CurrentStep: int  # readonly
    StepCount: int  # readonly

class AnalysisEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs,
    ) -> None: ...

class AppCommandBase(
    Agilent.MassSpectrometry.CommandModel.CommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    CmdNameAddMethodCalibration: str = ...  # static # readonly
    CmdNameAddMethodTargetCompound: str = ...  # static # readonly
    CmdNameAddMethodTargetQualifier: str = ...  # static # readonly
    CmdNameAddSample: str = ...  # static # readonly
    CmdNameAnalyze: str = ...  # static # readonly
    CmdNameAppendMethodFromAcquisition: str = ...  # static # readonly
    CmdNameAppendMethodFromFile: str = ...  # static # readonly
    CmdNameAppendMethodFromScanData: str = ...  # static # readonly
    CmdNameApplyMethodToAllSamples: str = ...  # static # readonly
    CmdNameAverageQualifierRatio: str = ...  # static # readonly
    CmdNameAverageRetentionTime: str = ...  # static # readonly
    CmdNameCalibrate: str = ...  # static # readonly
    CmdNameCleanUpCalibrationTable: str = ...  # static # readonly
    CmdNameClearCalibration: str = ...  # static # readonly
    CmdNameClearManualIntegration: str = ...  # static # readonly
    CmdNameClearResults: str = ...  # static # readonly
    CmdNameCloseBatchTable: str = ...  # static # readonly
    CmdNameCopyCalibrationLevels: str = ...  # static # readonly
    CmdNameCreateAcqMethodFromQuantSIMMethod: str = ...  # static # readonly
    CmdNameCreateDynamicQuantTargets: str = ...  # static # readonly
    CmdNameCreateLevelsFromCalSamples: str = ...  # static # readonly
    CmdNameCreateLevelsFromFile: str = ...  # static # readonly
    CmdNameCreateMethodFromCEFFile: str = ...  # static # readonly
    CmdNameCreateMethodFromChromatographicData: str = ...  # static # readonly
    CmdNameCreateMethodFromLibrary: str = ...  # static # readonly
    CmdNameCreateMethodFromScanData: str = ...  # static # readonly
    CmdNameCreateNewMethod: str = ...  # static # readonly
    CmdNameCreateSerialDilutionLevels: str = ...  # static # readonly
    CmdNameCreateSerialDilutionLevelsForCompounds: str = ...  # static # readonly
    CmdNameDuplicateCompounds: str = ...  # static # readonly
    CmdNameEndMethodEditing: str = ...  # static # readonly
    CmdNameImportMethodFromAcquisition: str = ...  # static # readonly
    CmdNameImportMethodFromBatch: str = ...  # static # readonly
    CmdNameImportMethodFromFile: str = ...  # static # readonly
    CmdNameImportMethodFromSample: str = ...  # static # readonly
    CmdNameImportSamplesFromWorklist: str = ...  # static # readonly
    CmdNameIntegrate: str = ...  # static # readonly
    CmdNameMIApplyIstdRtToTarget: str = ...  # static # readonly
    CmdNameMIApplyTargetRtToQualifier: str = ...  # static # readonly
    CmdNameManuallyIntegrateDropBaseline: str = ...  # static # readonly
    CmdNameManuallyIntegrateMerge: str = ...  # static # readonly
    CmdNameManuallyIntegratePeak: str = ...  # static # readonly
    CmdNameManuallyIntegrateQualifierPeak: str = ...  # static # readonly
    CmdNameManuallyIntegrateSnapBaseline: str = ...  # static # readonly
    CmdNameManuallyIntegrateSplit: str = ...  # static # readonly
    CmdNameMethodClear: str = ...  # static # readonly
    CmdNameNewBatchTable: str = ...  # static # readonly
    CmdNameOpenAndApplyMethodFromBatch: str = ...  # static # readonly
    CmdNameOpenAndApplyMethodFromFile: str = ...  # static # readonly
    CmdNameOpenBatchTable: str = ...  # static # readonly
    CmdNameQuantitate: str = ...  # static # readonly
    CmdNameRemoveCalibration: str = ...  # static # readonly
    CmdNameRemoveMethodCalibration: str = ...  # static # readonly
    CmdNameRemoveMethodTargetCompound: str = ...  # static # readonly
    CmdNameRemoveMethodTargetQualifier: str = ...  # static # readonly
    CmdNameRemoveSample: str = ...  # static # readonly
    CmdNameRemoveSamples: str = ...  # static # readonly
    CmdNameRestoreIntegrationParameters: str = ...  # static # readonly
    CmdNameRestoreQualifierIntegrationParameters: str = ...  # static # readonly
    CmdNameSaveBatchTable: str = ...  # static # readonly
    CmdNameSaveBatchTableAs: str = ...  # static # readonly
    CmdNameSaveMethodAs: str = ...  # static # readonly
    CmdNameSelectPeak: str = ...  # static # readonly
    CmdNameSetBatchExtendedProperty: str = ...  # static # readonly
    CmdNameSetCalibrationAttribute: str = ...  # static # readonly
    CmdNameSetIntegrationParameters: str = ...  # static # readonly
    CmdNameSetIntegrator: str = ...  # static # readonly
    CmdNameSetLevelEnable: str = ...  # static # readonly
    CmdNameSetMethodCalibrationAttribute: str = ...  # static # readonly
    CmdNameSetMethodTargetCompoundAttribute: str = ...  # static # readonly
    CmdNameSetMethodTargetCompoundAttributes: str = ...  # static # readonly
    CmdNameSetMethodTargetQualifierAttribute: str = ...  # static # readonly
    CmdNameSetMethodTargetQualifierAttributes: str = ...  # static # readonly
    CmdNameSetPeakAttribute: str = ...  # static # readonly
    CmdNameSetPeakQualifierAttribute: str = ...  # static # readonly
    CmdNameSetQualifierIntegrationParameters: str = ...  # static # readonly
    CmdNameSetSampleAttribute: str = ...  # static # readonly
    CmdNameSetTargetCompoundAttribute: str = ...  # static # readonly
    CmdNameSetTargetQualifierAttribute: str = ...  # static # readonly
    CmdNameSetUpReferenceSpectra: str = ...  # static # readonly
    CmdNameSetupManuallyIntegratePeak: str = ...  # static # readonly
    CmdNameSetupManuallyIntegrateQualifierPeak: str = ...  # static # readonly
    CmdNameShiftRetentionTime: str = ...  # static # readonly
    CmdNameStartMethodEditing: str = ...  # static # readonly
    CmdNameSwapQualifierWithQuantifier: str = ...  # static # readonly
    CmdNameUpdateMassAssignment: str = ...  # static # readonly
    CmdNameUpdateQualifierRatio: str = ...  # static # readonly
    CmdNameUpdateQualifierRatios: str = ...  # static # readonly
    CmdNameUpdateRetentionTime: str = ...  # static # readonly
    CmdNameUpdateRetentionTimeFromISTD: str = ...  # static # readonly
    CmdNameUpdateRetentionTimes: str = ...  # static # readonly
    CmdNameZeroOutPeak: str = ...  # static # readonly
    CmdNameZeroOutQualifierPeak: str = ...  # static # readonly

    ActionString: str  # readonly
    Context: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext
    )  # readonly
    Name: str  # readonly
    Reversible: bool  # readonly

    def GetActionString(self) -> str: ...
    def Undo(self) -> Any: ...

class AppCommandContext(
    Agilent.MassSpectrometry.CommandModel.Model.ICommandHistory, System.IDisposable
):  # Class
    @overload
    def __init__(self, compliance: ICompliance) -> None: ...
    @overload
    def __init__(self) -> None: ...

    AcqDataDirName: str  # static # readonly
    AcqMethodDirPattern: str  # static # readonly
    BatchTableExtension: str  # static # readonly
    DAMethodDirName: str  # static # readonly
    DAMethodExtension: str  # static # readonly
    DAMethodFileName: str  # static # readonly
    DefaultBatchTableFileName: str  # static # readonly

    BatchDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet
    )  # readonly
    BatchFiles: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchFiles
    )  # readonly
    CanRedo: bool  # readonly
    CanStartMethodEditing: bool  # readonly
    CanUndo: bool  # readonly
    Compliance: ICompliance  # readonly
    EditingMethod: bool  # readonly
    IsCommandRunning: bool  # readonly
    MethodDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet
    )  # readonly
    NumberFormat: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat
    QuantitationDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet
    )  # readonly
    RunningScript: bool  # readonly

    def Clear(self) -> None: ...
    def Undo(self) -> Any: ...
    def StartMethodEditing(self, silent: bool) -> None: ...
    def Invoke(
        self, cmd: Agilent.MassSpectrometry.CommandModel.Model.ICommand
    ) -> Any: ...
    def Redo(self) -> Any: ...
    def Dispose(self) -> None: ...
    def SetBatchCleared(self, batchId: int) -> None: ...
    def RegisterLogListener(
        self, listener: Agilent.MassSpectrometry.CommandModel.Model.ILogListener
    ) -> None: ...
    def OnCompoundIdentificationStart(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def OnDeconvolutionStep(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def OnApplyMethodStarted(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventArgs
    ) -> None: ...
    @overload
    def BeginScript(
        self,
        commandAssemblies: List[str],
        referenceAssemblies: List[str],
        imports: List[str],
        debug: bool,
        language: str,
        scriptCode: System.IO.TextReader,
        customStub: System.MarshalByRefObject,
        callback: System.AsyncCallback,
        asyncState: Any,
    ) -> System.IAsyncResult: ...
    @overload
    def BeginScript(
        self,
        engine: IScriptEngine,
        file: str,
        callback: System.AsyncCallback,
        asyncState: Any,
    ) -> System.IAsyncResult: ...
    def SetBatchDirty(self, batchId: int, dirty: bool) -> None: ...
    def OnDeconvolutionStart(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def EndMethodEditing(self, silent: bool) -> None: ...
    def OnCompoundIdentificationStep(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def BeginInvoke(
        self,
        cmd: Agilent.MassSpectrometry.CommandModel.Model.ICommand,
        callback: System.AsyncCallback,
        asyncState: Any,
    ) -> System.IAsyncResult: ...
    def OnApplyMethodEnded(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventArgs
    ) -> None: ...
    def OnAnalysisStep(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> Any: ...
    def OnAnalysisEnd(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def OnLargeDataSetChangeEnd(self, e: System.EventArgs) -> None: ...
    def RevokeLogListener(
        self, listener: Agilent.MassSpectrometry.CommandModel.Model.ILogListener
    ) -> None: ...
    def EndOfBatchQuantitation(self, batchId: int) -> None: ...
    def EndScript(self, result: System.IAsyncResult) -> Any: ...
    def OnMethodAppliedToSample(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventArgs
    ) -> None: ...
    def OnAnalysisStart(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def OnCompoundIdentificationEnd(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def CreateDataItemNavigator(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataItemNavigator: ...
    def OnDeconvolutionEnd(
        self, e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ) -> None: ...
    def OnLargeDataSetChangeStart(self, e: System.EventArgs) -> None: ...
    def PrepareForQuantitation(self, batchId: int) -> None: ...

    AfterCommand: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventHandler
    )  # Event
    AnalysisEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    AnalysisStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    AnalysisStep: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    ApplyMethodEnded: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    ApplyMethodStarted: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    BatchFileClosed: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BatchFileClosing: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BatchFileCreated: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BatchFileOpened: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BatchFileOpening: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BatchFileSaved: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventHandler
    )  # Event
    BeforeCommand: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventHandler
    )  # Event
    CommandEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventHandler
    )  # Event
    CommandStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventHandler
    )  # Event
    CompoundIdentificationEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    CompoundIdentificationStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    CompoundIdentificationStep: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    DeconvolutionEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    DeconvolutionStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    DeconvolutionStep: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    LargeDataSetChangeEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext.LargeDataSetChangeEventHandler
    )  # Event
    LargeDataSetChangeStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext.LargeDataSetChangeEventHandler
    )  # Event
    MethodAppliedToSample: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    MethodEditingEnded: System.EventHandler  # Event
    MethodEditingEnding: System.EventHandler  # Event
    MethodEditingStarted: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEventHandler
    )  # Event
    MethodEditingStarting: System.EventHandler  # Event
    Progress: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ProgressEventArgs
    ]  # Event

    # Nested Types

    class LargeDataSetChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: System.EventArgs,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(self, sender: Any, e: System.EventArgs) -> None: ...

class AppConfiguration:  # Class
    DefaultUserLevel: System.Configuration.ConfigurationUserLevel  # static # readonly
    Location: str  # readonly
    TempFolder: str  # static # readonly

    @staticmethod
    def Save() -> None: ...
    @overload
    def RemoveString(self, sectionName: str, settingName: str) -> None: ...
    @overload
    def RemoveString(
        self, groupName: str, sectionName: str, settingName: str
    ) -> None: ...
    def GetSection(
        self, groupName: str, sectionName: str
    ) -> System.Configuration.ConfigurationSection: ...
    @overload
    def GetValue(self, section: str, setting: str, defaultValue: T) -> T: ...
    @overload
    def GetValue(
        self, group: str, section: str, setting: str, defaultValue: T
    ) -> T: ...
    @staticmethod
    def Initialize(exePath: str, instrument: str, application: str) -> None: ...
    @staticmethod
    def Cleanup(update: bool) -> None: ...
    @overload
    @staticmethod
    def GenerateConfigFilePath(
        exePath: str, level: System.Configuration.ConfigurationUserLevel
    ) -> str: ...
    @overload
    @staticmethod
    def GenerateConfigFilePath(
        exePath: str, level: System.Configuration.ConfigurationUserLevel, filename: str
    ) -> str: ...
    @overload
    @staticmethod
    def GenerateConfigFilePath(
        exePath: str,
        level: System.Configuration.ConfigurationUserLevel,
        appgroup: str,
        filename: str,
    ) -> str: ...
    @overload
    def SetString(self, sectionName: str, settingName: str, value_: str) -> None: ...
    @overload
    def SetString(
        self, groupName: str, sectionName: str, settingName: str, value_: str
    ) -> None: ...
    @staticmethod
    def GetLocalConfiguration() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppConfiguration
    ): ...
    @overload
    def GetString(self, sectionName: str, settingName: str) -> str: ...
    @overload
    def GetString(self, groupName: str, sectionName: str, settingName: str) -> str: ...
    @staticmethod
    def GetUserConfiguration() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppConfiguration
    ): ...

class AppContext(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAppContext,
    System.Windows.Forms.ApplicationContext,
    System.IDisposable,
):  # Class
    def __init__(
        self, cmdline: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandLine
    ) -> None: ...

    PresentationState: (
        Agilent.MassHunter.Quantitative.UIModel.IPresentationState
    )  # readonly
    UIState: IUIState  # readonly

    @staticmethod
    def RegisterApplicationService(
        uiState: IUIState, mainForm: MainForm, key: str
    ) -> Agilent.MassHunter.Quantitative.QuantAppServices.IService: ...
    def ShowErrorMessage(self, exception: System.Exception) -> None: ...
    @staticmethod
    def UpdateSplashScreen(
        presentationState: Agilent.MassHunter.Quantitative.UIModel.IPresentationState,
        splash: Agilent.MassHunter.Quantitative.Controls.SplashScreen.SplashScreenModel,
    ) -> None: ...
    @staticmethod
    def InitScriptEngine(
        uiState: IUIState,
        presentationState: Agilent.MassHunter.Quantitative.UIModel.IPresentationState,
        scriptPane: Agilent.MassHunter.Quantitative.UIModel.IScriptPane,
    ) -> None: ...
    @staticmethod
    def InitSplashScreen() -> (
        Agilent.MassHunter.Quantitative.Controls.SplashScreen.SplashScreenModel
    ): ...
    @staticmethod
    def ShowHelp(
        parent: System.Windows.Forms.IWin32Window, cmdlineType: System.Type
    ) -> None: ...
    def PreProcess(self) -> bool: ...
    @staticmethod
    def ParseConstants(uiState: UIState, constants: List[str]) -> None: ...

class AppLogicConfiguration:  # Class
    def __init__(self) -> None: ...

    GroupName: str = ...  # static # readonly

    HighMassAccuracy: bool  # static # readonly
    IsGCFlavor: bool  # static # readonly
    IsLCFlavor: bool  # static # readonly
    TandemMassSpec: bool  # static # readonly

    @staticmethod
    def GetUserStringFromFile(fileNameSetting: str, defaultValue: str) -> str: ...
    @overload
    @staticmethod
    def GetLocalValue(
        group: str, section: str, setting: str, defaultValue: int
    ) -> int: ...
    @overload
    @staticmethod
    def GetLocalValue(
        group: str, section: str, setting: str, defaultValue: int
    ) -> int: ...
    @overload
    @staticmethod
    def GetLocalValue(
        group: str, section: str, setting: str, defaultValue: float
    ) -> float: ...
    @overload
    @staticmethod
    def GetLocalValue(
        group: str, section: str, setting: str, defaultValue: bool
    ) -> bool: ...
    @overload
    @staticmethod
    def GetLocalValue(
        group: str, section: str, setting: str, defaultValue: str
    ) -> str: ...
    @overload
    @staticmethod
    def GetUserValue(
        group: str, section: str, setting: str, defaultValue: int
    ) -> int: ...
    @overload
    @staticmethod
    def GetUserValue(
        group: str, section: str, setting: str, defaultValue: int
    ) -> int: ...
    @overload
    @staticmethod
    def GetUserValue(
        group: str, section: str, setting: str, defaultValue: float
    ) -> float: ...
    @overload
    @staticmethod
    def GetUserValue(
        group: str, section: str, setting: str, defaultValue: bool
    ) -> bool: ...
    @overload
    @staticmethod
    def GetUserValue(
        group: str, section: str, setting: str, defaultValue: str
    ) -> str: ...

class ApplicationCommandCancelledException(
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplicationCommandException,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, message: str) -> None: ...
    @overload
    def __init__(self, message: str, helpId: int) -> None: ...
    @overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @overload
    def __init__(
        self, message: str, innerException: System.Exception, helpId: int
    ) -> None: ...

class ApplicationCommandException(
    System.ApplicationException,
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, message: str) -> None: ...
    @overload
    def __init__(self, message: str, helpId: int) -> None: ...
    @overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @overload
    def __init__(
        self, message: str, innerException: System.Exception, helpId: int
    ) -> None: ...

    HelpId: int  # readonly

    def GetObjectData(
        self,
        info: System.Runtime.Serialization.SerializationInfo,
        context: System.Runtime.Serialization.StreamingContext,
    ) -> None: ...

class ApplyMethodEventArgs(
    Iterable[Any],
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEventArgs,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId],
):  # Class
    def __init__(
        self,
        methodDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet,
        rowIds: Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId
        ],
    ) -> None: ...

    SampleCount: int  # readonly

class ApplyMethodEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventArgs,
    ) -> None: ...

class ArcherUtil:  # Class
    def __init__(self) -> None: ...

    MSTS_FILE: str = ...  # static # readonly
    QQQ_TOOL_TYPE: str = ...  # static # readonly
    QTOF_TOOL_TYPE: str = ...  # static # readonly
    TOF_TOOL_TYPE: str = ...  # static # readonly
    UNKNOWN_TOOL_TYPE: str = ...  # static # readonly

    @staticmethod
    def FileCompare(file1: str, file2: str) -> bool: ...
    @staticmethod
    def ReadOperatorName(sampleDataPath: str) -> str: ...
    @staticmethod
    def ReadInstrumentType(sampleDataPath: str) -> str: ...
    @staticmethod
    def IsTofData(sampleDataPath: str) -> bool: ...
    @staticmethod
    def GetChromatographyType(
        sampleDataPath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType: ...
    @staticmethod
    def ReadTimeSegmentRanges(
        sampleDataPath: str,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange]: ...
    @staticmethod
    def ReadInstrumentName(sampleDataPath: str) -> str: ...
    @staticmethod
    def IsProfileDataPresent(sampleDataPath: str) -> bool: ...
    @staticmethod
    def GetFullChromatographicRange(timeSegments: RangeCollection) -> IRange: ...
    @staticmethod
    def IsSampleDataAcquisitionCompleted(sampleDir: str) -> bool: ...
    @staticmethod
    def IsCentroidDataPresent(sampleDataPath: str) -> bool: ...
    @staticmethod
    def ReadTimeSegments(sampleDataPath: str) -> RangeCollection: ...
    @staticmethod
    def ReadTimeSegmentsFast(
        sampleDataPath: str,
    ) -> System.Collections.Generic.List[float]: ...

class AutoReviewDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        grid: Agilent.MassSpectrometry.DataAnalysis.Quantitative.WorktableGridControl,
        manualIntegrating: bool,
    ) -> None: ...

class AutoSetupAssistant(System.IDisposable, ICompoundIdentification):  # Class
    ComponentCount: int  # readonly
    Configuration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundIdentificationParams
    )
    IonSelectionRules: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionRules
    )  # readonly

    @staticmethod
    def FormatCASNumber(casNumber: int) -> str: ...
    def CreateCompoundFromComponent(
        self, component: Component
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def RunLibrarySearch(
        self, libraryMethodPath: str
    ) -> Dict[Component, System.Collections.Generic.List[CandidateHit]]: ...
    def Dispose(self) -> None: ...
    @overload
    def RunDeconvolution(self) -> System.Collections.Generic.List[Component]: ...
    @overload
    def RunDeconvolution(
        self, rtMin: float, rtMax: float
    ) -> System.Collections.Generic.List[Component]: ...
    @overload
    def RunDeconvolution(
        self, cpParams: ComponentPerceptionParams
    ) -> System.Collections.Generic.List[Component]: ...

class BackgroundSubtractionChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class BaselinePreferenceTypeOptions(
    Sequence[EnumItem[BaselinePreferenceType]],
    Iterable[EnumItem[BaselinePreferenceType]],
    List[EnumItem[BaselinePreferenceType]],
    Iterable[Any],
    Sequence[Any],
    System.ComponentModel.IComponent,
    EnumItemCollection[BaselinePreferenceType],
    List[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class BatchAttributes(System.ICloneable):  # Class
    def __init__(self) -> None: ...

    APP_SCHEMA_VERSION: int = ...  # static # readonly
    BatchAttrAnalysisTimeStamp: str = ...  # static # readonly
    BatchAttrAnalystName: str = ...  # static # readonly
    BatchAttrAnalyzeQuantVersion: str = ...  # static # readonly
    BatchAttrApplyMultiplierISTD: str = ...  # static # readonly
    BatchAttrApplyMultiplierMatrixSpike: str = ...  # static # readonly
    BatchAttrApplyMultiplierSurrogate: str = ...  # static # readonly
    BatchAttrApplyMultiplierTarget: str = ...  # static # readonly
    BatchAttrAuditTrail: str = ...  # static # readonly
    BatchAttrBatchDataPathFileName: str = ...  # static # readonly
    BatchAttrBatchName: str = ...  # static # readonly
    BatchAttrBatchState: str = ...  # static # readonly
    BatchAttrBracketingType: str = ...  # static # readonly
    BatchAttrCCMaximumElapsedTimeInHours: str = ...  # static # readonly
    BatchAttrCalibrationLastUpdatedTimeStamp: str = ...  # static # readonly
    BatchAttrComplianceName: str = ...  # static # readonly
    BatchAttrComplianceServer: str = ...  # static # readonly
    BatchAttrComplianceVersion: str = ...  # static # readonly
    BatchAttrCorrelationWindow: str = ...  # static # readonly
    BatchAttrDAMethodLastAppliedTimeStamp: str = ...  # static # readonly
    BatchAttrDAMethodPathFileNameOrigin: str = ...  # static # readonly
    BatchAttrDataVersion: str = ...  # static # readonly
    BatchAttrDynamicBackgroundSubtraction: str = ...  # static # readonly
    BatchAttrFeatureDetection: str = ...  # static # readonly
    BatchAttrHashCode: str = ...  # static # readonly
    BatchAttrIgnorePeaksNotFound: str = ...  # static # readonly
    BatchAttrLibraryMethodPathFileName: str = ...  # static # readonly
    BatchAttrLibraryPathFileName: str = ...  # static # readonly
    BatchAttrNonReferenceWindow: str = ...  # static # readonly
    BatchAttrNonReferenceWindowPercentOrMinutes: str = ...  # static # readonly
    BatchAttrRefLibraryPathFileName: str = ...  # static # readonly
    BatchAttrRefLibraryPatternPathFileName: str = ...  # static # readonly
    BatchAttrReferenceWindow: str = ...  # static # readonly
    BatchAttrReferenceWindowPercentOrMinutes: str = ...  # static # readonly
    BatchAttrRelativeISTD: str = ...  # static # readonly
    BatchAttrReportGenerationStartedTimeStamp: str = ...  # static # readonly
    BatchAttrReportGeneratorName: str = ...  # static # readonly
    BatchAttrReportQuantVersion: str = ...  # static # readonly
    BatchAttrReportResultsDataPathFileName: str = ...  # static # readonly
    BatchAttrRepositoryRevisionNumber: str = ...  # static # readonly
    BatchAttrSchemaVersion: str = ...  # static # readonly
    BatchAttrStandardAddition: str = ...  # static # readonly
    BatchAttrUseProfileData: str = ...  # static # readonly

    AnalysisTimeStamp: System.DateTime
    AnalystName: str
    AnalyzeQuantVersion: str
    AppSchemaVersion: int  # readonly
    ApplyMultiplierISTD: bool
    ApplyMultiplierMatrixSpike: bool
    ApplyMultiplierSurrogate: bool
    ApplyMultiplierTarget: bool
    AuditTrail: bool
    BatchDataPathFileName: str
    BatchName: str
    BatchState: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState
    BracketingType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BracketingType
    CCMaximumElapsedTimeInHours: float
    CalibrationLastUpdatedTimeStamp: System.DateTime
    ComplianceName: str
    ComplianceServer: str
    ComplianceVersion: str
    CorrelationWindow: float
    DAMethodLastAppliedTimeStamp: System.DateTime
    DAMethodPathFileNameOrigin: str
    DataVersion: int
    DynamicBackgroundSubtraction: bool
    FeatureDetection: bool
    HashCode: str  # readonly
    IgnorePeaksNotFound: bool
    LibraryMethodPathFileName: str
    LibraryPathFileName: str
    NonReferenceWindow: float
    NonReferenceWindowPercentOrMinutes: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    )
    RefLibraryPathFileName: str
    RefLibraryPatternPathFileName: str
    ReferenceWindow: float
    ReferenceWindowPercentOrMinutes: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    )
    RelativeISTD: bool
    ReportGenerationStartedTimeStamp: System.DateTime
    ReportGeneratorName: str
    ReportQuantVersion: str
    ReportResultsDataPathFileName: str
    RepositoryRevisionNumber: str
    SchemaVersion: int
    StandardAddition: bool
    UseProfileData: bool

    def LoadFromExtendedProperties(self, dataSet: System.Data.DataSet) -> None: ...
    def SetHashCode(self, code: str) -> None: ...
    def ApplyToExtendedProperties(self, dataSet: System.Data.DataSet) -> None: ...
    def Clone(self) -> Any: ...
    def WriteXml(self, writer: System.Xml.XmlTextWriter) -> int: ...
    def ReadXml(
        self, reader: System.Xml.XmlReader, dataset: System.Data.DataSet
    ) -> None: ...

    BackgroundSubtractionChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BackgroundSubtractionChangedEventHandler
    )  # Event
    FeatureDetectionChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.FeatureDetectionChangedEventHandler
    )  # Event
    StandardAdditionChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.StandardAdditionChangedEventHandler
    )  # Event
    UseProfileDataChangeEvent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.UseProfileDataChangedEventHandler
    )  # Event

class BatchAttributesRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ba: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> None: ...
    @staticmethod
    def Write(
        ba: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
        bw: System.IO.BinaryWriter,
    ) -> int: ...

class BatchDataSet(
    System.IDisposable,
    System.Xml.Serialization.IXmlSerializable,
    System.ComponentModel.ISupportInitializeNotification,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase,
    System.ComponentModel.IComponent,
    System.ComponentModel.ISupportInitialize,
    System.IServiceProvider,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    QuantResultsDir: str  # static # readonly

    AuditTrail: bool  # readonly
    BatchFiles: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchFiles
    )  # readonly

    def OpenBatchTable(
        self, dataPath: str, fileName: str, readOnly: bool, revisionNumber: str
    ) -> int: ...
    def SaveBatchTableAs(self, batchId: int, dataPath: str, fileName: str) -> None: ...
    def SetupCalibrationReference(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        refSampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def SaveBatchTable(self, batchId: int) -> None: ...
    def ApplyMethodToSample(self, batchId: int, sampleId: int) -> None: ...
    def CloseAllTables(self) -> None: ...
    def NewBatchTable(self, dataPath: str, fileName: str, auditTrail: bool) -> int: ...
    def ClearResults(self, batchId: int) -> None: ...
    def ApplyMethodToAllSamples(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    def FindQualifierRowsWithUnmodifiedIntegrationParameters(
        self, batchId: int, compoundId: int, qualifierId: int
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ]: ...
    def GetMethodSample(
        self, batchId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...
    def FindCompoundRowsWithUnmodifiedIntegrationParameters(
        self, batchId: int, compoundId: int
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ]: ...
    @staticmethod
    def ImportSampleInformation(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchDataDir: str,
        sampleDir: str,
        batchId: int,
        sampleId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...
    def CloseBatchTable(self, batchId: int) -> None: ...
    def OverrideMatrixDependentLimit(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        storeOriginal: bool,
    ) -> None: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self, batchId: int, sampleId: int, compoundId: int
    ) -> float: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> float: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self, batchId: int, sampleId: int, compoundId: int, useLowestCalLevel: bool
    ) -> float: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        useLowestCalLevel: bool,
    ) -> float: ...
    @staticmethod
    def ClearResultsInCompoundRow(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def ImportSamplesUsingWorklistData(
        self, sampleDirectories: List[str], batchId: int
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ]: ...
    def AddSamplesSortByAcqDate(
        self,
        addedSampleRows: List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ],
    ) -> None: ...
    @overload
    @staticmethod
    def GetFullBatchFilePath(batchDataDir: str, batchFileName: str) -> str: ...
    @overload
    @staticmethod
    def GetFullBatchFilePath(batchId: int) -> str: ...

class BatchEventArgs(System.EventArgs):  # Class
    def __init__(self, id: int) -> None: ...

    BatchID: int  # readonly

class BatchEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchEventArgs,
    ) -> None: ...

class BatchFile(System.MarshalByRefObject):  # Class
    BatchAttributes: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes
    )  # readonly
    BatchFilePath: str  # readonly
    BatchState: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState
    )  # readonly
    DataPath: str  # readonly
    FileName: str  # readonly
    ID: int  # readonly
    IsBinary: bool  # readonly
    IsDirty: bool  # readonly
    IsNewFile: bool  # readonly
    IsReadOnly: bool  # readonly
    IsSingleSampleMode: bool  # readonly
    RevisionNumber: str  # readonly

    @staticmethod
    def GetFullBatchPath(
        compliance: ICompliance, batchFileDir: str, fileName: str
    ) -> str: ...

class BatchFiles(
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchFile],
    Iterable[Any],
):  # Class
    Count: int  # readonly
    def __getitem__(
        self, batchId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchFile: ...
    def Contains(self, batchId: int) -> bool: ...

class BatchRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...

class BatchSchemaUpgrade:  # Class
    @staticmethod
    def IncompatibleSchemaVersion(fromVersion: int, toVersion: int) -> bool: ...
    @staticmethod
    def ConvertDataSet(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        fromVersion: int,
        toVersion: int,
    ) -> None: ...

class BatchState(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Initial: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState = (
        ...
    )  # static # readonly
    Processed: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState = (
        ...
    )  # static # readonly
    ResultsCleaned: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState = (
        ...
    )  # static # readonly
    ResultsDirty: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchState = (
        ...
    )  # static # readonly

class BatchWriter(System.IDisposable, System.Xml.XmlTextWriter):  # Class
    def __init__(
        self,
        stream: System.IO.Stream,
        datasetToWrite: System.Data.DataSet,
        attributes: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
    ) -> None: ...

    HashAlgorithmType: System.Type  # static # readonly

    @staticmethod
    def CheckHashCode(stream: System.IO.Stream) -> bool: ...
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...

class BestHitSelector:  # Class
    def __init__(self) -> None: ...
    def FindBestHits(
        self,
        multiParams: System.Collections.Generic.List[ComponentPerceptionParams],
        searchResults: Dict[Component, System.Collections.Generic.List[CandidateHit]],
        componentsByDM: Dict[
            ComponentPerceptionParams, System.Collections.Generic.List[Component]
        ],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ComponentGroup
    ]: ...

class BinaryBatch:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        s: System.IO.Stream,
    ) -> None: ...
    @staticmethod
    def Write(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        s: System.IO.Stream,
    ) -> List[int]: ...
    @staticmethod
    def UpdateBatchAttributesAndRehash(
        ba: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
        destination: System.IO.BinaryWriter,
    ) -> None: ...
    @staticmethod
    def CopyBatchAttributes(
        originalBatch: System.IO.BinaryReader, destination: System.IO.BinaryWriter
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes: ...
    @staticmethod
    def ReadInputStreamIntoMemory(
        ms: System.IO.MemoryStream, s: System.IO.Stream
    ) -> bool: ...
    @overload
    @staticmethod
    def ReadFileHeader(
        fileType: int,
        fileFormatVersion: int,
        schemaVersion: int,
        dataVersion: int,
        hashCode: List[int],
        br: System.IO.BinaryReader,
    ) -> bool: ...
    @overload
    @staticmethod
    def ReadFileHeader(
        fileType: int,
        fileFormatVersion: int,
        schemaVersion: int,
        dataVersion: int,
        hashCode: List[int],
        br: System.IO.BinaryReader,
        ba: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
    ) -> bool: ...
    @staticmethod
    def CopyBatchResults(
        partialResultsBatch: System.IO.BinaryReader, destination: System.IO.BinaryWriter
    ) -> None: ...
    @staticmethod
    def ValidateFileHeader(
        s: System.IO.Stream,
        fileType: int,
        fileFormatVersion: int,
        dataSchemaVersion: int,
        appSchemaVersion: int,
        hashcode: List[int],
    ) -> None: ...

class BindingPSetGenieIntegrator(
    System.ComponentModel.IRaiseItemChangedEvents,
    Sequence[IPSetGenieIntegrator],
    System.IDisposable,
    System.ComponentModel.IBindingList,
    System.ComponentModel.ICancelAddNew,
    System.ComponentModel.IComponent,
    List[IPSetGenieIntegrator],
    List[Any],
    Iterable[Any],
    Sequence[Any],
    BindingObjectCollection[IPSetGenieIntegrator],
    Iterable[IPSetGenieIntegrator],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class BindingPeakFilter(
    System.ComponentModel.IRaiseItemChangedEvents,
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakFilterWrap],
    BindingObjectCollection[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakFilterWrap
    ],
    System.ComponentModel.IBindingList,
    List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakFilterWrap],
    System.ComponentModel.ICancelAddNew,
    System.ComponentModel.IComponent,
    Sequence[Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakFilterWrap],
    List[Any],
    Iterable[Any],
    Sequence[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class BindingRteIntegratorParameters(
    System.ComponentModel.IRaiseItemChangedEvents,
    List[IPSetRTEIntegrator],
    System.ComponentModel.IBindingList,
    Iterable[IPSetRTEIntegrator],
    System.ComponentModel.ICancelAddNew,
    BindingObjectCollection[IPSetRTEIntegrator],
    System.ComponentModel.IComponent,
    Sequence[IPSetRTEIntegrator],
    List[Any],
    Iterable[Any],
    Sequence[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class BracketingType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Overlapped: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BracketingType = (
        ...
    )  # static # readonly
    SampleGroup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BracketingType = (
        ...
    )  # static # readonly
    StandardAddition: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BracketingType
    ) = ...  # static # readonly

class Cache(Generic[TKey, TValue]):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, capacity: int) -> None: ...

    DEFAULT_CAPACITY: int = ...  # static # readonly
    MIN_CAPACITY: int = ...  # static # readonly

    Capacity: int  # readonly

    def Put(self, key: TKey, value_: TValue) -> None: ...
    def Clear(self) -> None: ...
    def Get(self, key: TKey) -> TValue: ...

class CalCurve(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    Agilent.MassHunter.Quantitative.UIModel.ICalCurvePane,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    AutoScale: bool
    CanAcceptAssistantCurve: bool  # readonly
    CanAutoScale: bool  # readonly
    CanCopy: bool  # readonly
    CurveFitAssistantConfidenceBandVisible: bool
    CurveFitAssistantTable: GridControlBase  # readonly
    CurveFitAssistantVisible: bool  # readonly
    IsLogScaleX: bool
    IsLogScaleY: bool
    PlotControl: Agilent.MassSpectrometry.GUI.Plot.PlotControl  # readonly
    RelativeConcentration: bool
    ShowCC: bool
    ShowIstdResponses: bool
    ShowQC: bool
    ShowStandardDeviationBars: bool
    ToolbarsManager: IToolbarsManager
    _PlotControl: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurvePlot
    )  # readonly

    def AcceptAssistantCurve(self) -> None: ...
    def AutoScaleY(self) -> None: ...
    @staticmethod
    def IsAssistantColumn(column: str) -> bool: ...
    def Copy(self) -> None: ...
    def AutoScaleX(self) -> None: ...
    def SetDataNavigator(
        self,
        dataNavigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator,
    ) -> None: ...
    def StoreSettings(self) -> None: ...
    def CreatePropertyPages(self) -> List[IPropertyPage]: ...
    def HideCurveFitAssistant(self) -> None: ...
    @staticmethod
    def GetAssistantColumnCaption(column: str) -> str: ...
    def FitToLevels(self, levelNames: Iterable[str], includesOrigin: bool) -> None: ...
    def ShowCurveFitAssistant(self) -> None: ...

class CalCurveFitDataSet(
    System.IDisposable,
    System.ComponentModel.ISupportInitializeNotification,
    System.IServiceProvider,
    System.Data.DataSet,
    System.Xml.Serialization.IXmlSerializable,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
    System.ComponentModel.ISupportInitialize,
    System.ComponentModel.IComponent,
):  # Class
    def __init__(self) -> None: ...

    CurveFit: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitDataTable
    )  # readonly
    Relations: System.Data.DataRelationCollection  # readonly
    SchemaSerializationMode: System.Data.SchemaSerializationMode
    Tables: System.Data.DataTableCollection  # readonly

    @staticmethod
    def GetTypedDataSetSchema(
        xs: System.Xml.Schema.XmlSchemaSet,
    ) -> System.Xml.Schema.XmlSchemaComplexType: ...
    def Clone(self) -> System.Data.DataSet: ...

    # Nested Types

    class CurveFitDataTable(
        System.IServiceProvider,
        System.ComponentModel.ISupportInitialize,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ],
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        System.ComponentModel.IListSource,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ],
        System.IDisposable,
    ):  # Class
        def __init__(self) -> None: ...

        AConfidenceIntervalColumn: System.Data.DataColumn  # readonly
        AParameterColumn: System.Data.DataColumn  # readonly
        BConfidenceIntervalColumn: System.Data.DataColumn  # readonly
        BParameterColumn: System.Data.DataColumn  # readonly
        CConfidenceIntervalColumn: System.Data.DataColumn  # readonly
        CParameterColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        CurveFitIDColumn: System.Data.DataColumn  # readonly
        CurveFitOriginColumn: System.Data.DataColumn  # readonly
        CurveFitTypeColumn: System.Data.DataColumn  # readonly
        CurveFitWeightColumn: System.Data.DataColumn  # readonly
        EquationColumn: System.Data.DataColumn  # readonly
        FitRangeBottomColumn: System.Data.DataColumn  # readonly
        FitRangeTopColumn: System.Data.DataColumn  # readonly
        InvalidModelColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ): ...
        MaxPercentResidualColumn: System.Data.DataColumn  # readonly
        MaxResidualLevelIDColumn: System.Data.DataColumn  # readonly
        OutlierCountColumn: System.Data.DataColumn  # readonly
        OutlierLevel1IDColumn: System.Data.DataColumn  # readonly
        OutlierLevel2IDColumn: System.Data.DataColumn  # readonly
        OutlierLevel3IDColumn: System.Data.DataColumn  # readonly
        R2Column: System.Data.DataColumn  # readonly
        StandardErrorColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddCurveFitRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow,
        ) -> None: ...
        @overload
        def AddCurveFitRow(
            self,
            CurveFitType: str,
            CurveFitOrigin: str,
            CurveFitWeight: str,
            OutlierCount: int,
            InvalidModel: bool,
            FitRangeBottom: float,
            FitRangeTop: float,
            R2: float,
            StandardError: float,
            MaxPercentResidual: float,
            MaxResidualLevelID: int,
            OutlierLevel1ID: int,
            OutlierLevel2ID: int,
            OutlierLevel3ID: int,
            AParameter: float,
            AConfidenceInterval: float,
            BParameter: float,
            BConfidenceInterval: float,
            CParameter: float,
            CConfidenceInterval: float,
            Equation: str,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ): ...
        def RemoveCurveFitRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow,
        ) -> None: ...
        def Clone(self) -> System.Data.DataTable: ...
        def FindByCurveFitID(
            self, CurveFitID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ): ...
        def NewCurveFitRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        ): ...

        CurveFitRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEventHandler
        )  # Event
        CurveFitRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEventHandler
        )  # Event
        CurveFitRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEventHandler
        )  # Event
        CurveFitRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEventHandler
        )  # Event

    class CurveFitRow(System.Data.DataRow):  # Class
        AConfidenceInterval: float
        AParameter: float
        BConfidenceInterval: float
        BParameter: float
        CConfidenceInterval: float
        CParameter: float
        CurveFitID: int
        CurveFitOrigin: str
        CurveFitType: str
        CurveFitWeight: str
        Equation: str
        FitRangeBottom: float
        FitRangeTop: float
        InvalidModel: bool
        MaxPercentResidual: float
        MaxResidualLevelID: int
        OutlierCount: int
        OutlierLevel1ID: int
        OutlierLevel2ID: int
        OutlierLevel3ID: int
        R2: float
        StandardError: float

        def IsOutlierLevel2IDNull(self) -> bool: ...
        def IsAConfidenceIntervalNull(self) -> bool: ...
        def SetCurveFitTypeNull(self) -> None: ...
        def SetR2Null(self) -> None: ...
        def IsCurveFitOriginNull(self) -> bool: ...
        def SetOutlierLevel1IDNull(self) -> None: ...
        def SetFitRangeTopNull(self) -> None: ...
        def IsMaxResidualLevelIDNull(self) -> bool: ...
        def SetCurveFitOriginNull(self) -> None: ...
        def SetOutlierCountNull(self) -> None: ...
        def SetEquationNull(self) -> None: ...
        def SetAConfidenceIntervalNull(self) -> None: ...
        def SetCurveFitWeightNull(self) -> None: ...
        def SetCConfidenceIntervalNull(self) -> None: ...
        def IsOutlierCountNull(self) -> bool: ...
        def SetMaxPercentResidualNull(self) -> None: ...
        def IsInvalidModelNull(self) -> bool: ...
        def IsAParameterNull(self) -> bool: ...
        def IsCurveFitWeightNull(self) -> bool: ...
        def IsFitRangeTopNull(self) -> bool: ...
        def IsMaxPercentResidualNull(self) -> bool: ...
        def IsCConfidenceIntervalNull(self) -> bool: ...
        def IsR2Null(self) -> bool: ...
        def IsCParameterNull(self) -> bool: ...
        def SetBParameterNull(self) -> None: ...
        def SetMaxResidualLevelIDNull(self) -> None: ...
        def IsBParameterNull(self) -> bool: ...
        def SetBConfidenceIntervalNull(self) -> None: ...
        def IsCurveFitTypeNull(self) -> bool: ...
        def IsOutlierLevel3IDNull(self) -> bool: ...
        def SetFitRangeBottomNull(self) -> None: ...
        def SetOutlierLevel3IDNull(self) -> None: ...
        def SetOutlierLevel2IDNull(self) -> None: ...
        def SetStandardErrorNull(self) -> None: ...
        def SetInvalidModelNull(self) -> None: ...
        def SetAParameterNull(self) -> None: ...
        def IsEquationNull(self) -> bool: ...
        def SetCParameterNull(self) -> None: ...
        def IsStandardErrorNull(self) -> bool: ...
        def IsBConfidenceIntervalNull(self) -> bool: ...
        def IsFitRangeBottomNull(self) -> bool: ...
        def IsOutlierLevel1IDNull(self) -> bool: ...

    class CurveFitRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRow
        )  # readonly

    class CurveFitRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet.CurveFitRowChangeEvent,
        ) -> None: ...

class CalCurvePlot(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.ComponentModel.ISupportInitialize,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    Agilent.MassSpectrometry.GUI.Plot.PlotControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    DataNavigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator

    def GetAutoScaleRangeY2(
        self, pane: Agilent.MassSpectrometry.GUI.Plot.Pane, minX: float, maxX: float
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def GetAutoScaleRangeY(
        self, pane: Agilent.MassSpectrometry.GUI.Plot.Pane, minX: float, maxX: float
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def GetPreferredXRangeLimit(
        self, row: int, column: int
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def InitializeData(
        self,
        currentMethodCompound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        currentSample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def GetAutoScaleRangeX(
        self, pane: Agilent.MassSpectrometry.GUI.Plot.Pane
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def GetPreferredYRangeLimit(
        self, row: int, column: int
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def StoreSettings(self) -> None: ...
    def InitConfiguration(self) -> None: ...
    def ClearData(self) -> None: ...
    @overload
    def DrawTo(
        self,
        currentMethodCompound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        currentSample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
    ) -> None: ...
    @overload
    def DrawTo(
        self,
        currentMethodCompound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        currentSample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
    ) -> None: ...

class CalCurvePropPage(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    IPropertyPage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(
        self, plot: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurvePlot
    ) -> None: ...

class CalibrationCurveFit:  # Class
    def __init__(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        relative: bool,
    ) -> None: ...

    BottomOfXRange: float  # readonly
    CanDoStandardAddition: bool  # readonly
    FitEquation: str  # readonly
    IsRelative: bool  # readonly
    IsSolved: bool  # readonly
    MaxX: float  # readonly
    MinX: float  # readonly
    Points: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint
    ]  # readonly
    R2: float  # readonly
    Status: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus
    )  # readonly

    def GetCurveFitXValue(self, yValue: float) -> float: ...
    @staticmethod
    def ApplyIsotopicDilution(
        rm: float,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> float: ...
    def GetConcentrationFromStandardAddition(self) -> float: ...
    def GetCurveFitYValues(self, xValues: List[float]) -> List[float]: ...
    def DoFit(self) -> None: ...

class CalibrationLevel:  # Class
    def __init__(
        self,
        levelName: str,
        isRelativeResponse: bool,
        istdConcentration: float,
        replicates: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow
        ],
        zeroLevelRelativeResponse: List[float],
    ) -> None: ...

    AverageQCResponse: float  # readonly
    AverageResponse: float  # readonly
    Concentration: float  # readonly
    EnabledQCReplicateCount: int  # readonly
    EnabledReplicateCount: int  # readonly
    IsRelativeResponse: bool  # readonly
    IstdConcentration: float  # readonly
    LevelName: str  # readonly
    ResponseStandardDeviation: float  # readonly
    ResponseStandardDeviationQC: float  # readonly
    TotalReplicateCount: int  # readonly

    def GetResponse(self, levelID: int) -> float: ...
    @staticmethod
    def ApplyIsotopicDilutionCorrection(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        relResponses: List[float],
    ) -> None: ...

class CalibrationMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Average: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationMode = (
        ...
    )  # static # readonly
    NoUpdate: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationMode = (
        ...
    )  # static # readonly
    Replace: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationMode = (
        ...
    )  # static # readonly

class CalibrationPoint(
    System.IComparable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint
    ]
):  # Class
    @overload
    def __init__(
        self, calRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow
    ) -> None: ...
    @overload
    def __init__(
        self,
        calRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        relativeConcentraton: float,
        relativeResponse: float,
    ) -> None: ...

    AverageCounter: float  # readonly
    CalibrationStdAcquistionDateTime: Optional[System.DateTime]  # readonly
    CalibrationStdPath: str  # readonly
    CalibrationType: str  # readonly
    Concentration: float  # readonly
    IsEnabled: bool  # readonly
    IsRelative: bool  # readonly
    LevelID: int  # readonly
    LevelLastUpdateTime: Optional[System.DateTime]  # readonly
    LevelName: str  # readonly
    RSD: float  # readonly
    RelativeConcentration: float  # readonly
    RelativeResponse: float  # readonly
    Response: float  # readonly
    ResponseFactor: Optional[float]  # readonly

    def GetX(self, relative: bool) -> float: ...
    @overload
    def GetY(self, relative: bool) -> float: ...
    @overload
    def GetY(self) -> float: ...

class CalibrationPointCollection(
    Iterable[Any],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint],
    System.IDisposable,
):  # Class
    def __init__(self) -> None: ...

    Count: int  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint: ...
    def Sort(self) -> None: ...
    def Add(
        self, point: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint
    ) -> None: ...
    def Copy(
        self,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPointCollection
    ): ...
    def Clear(self) -> None: ...
    def Dispose(self) -> None: ...
    def RemoveAt(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationPoint: ...

class CalibrationRangeFilter(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HighLow: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationRangeFilter
    ) = ...  # static # readonly
    HighOnly: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationRangeFilter
    ) = ...  # static # readonly
    LowOnly: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationRangeFilter
    ) = ...  # static # readonly

class CalibrationRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...

class CalibrationReferenceCompoundNameValue(System.IComparable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, compoundId: int, compoundName: str) -> None: ...
    @overload
    def __init__(self, error: str) -> None: ...

    PropertyName: str = ...  # static # readonly

    def Equals(self, obj: Any) -> bool: ...
    @staticmethod
    def GetValue(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> Any: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def CreateCommand(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        value_: Any,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase: ...
    def CompareTo(self, obj: Any) -> int: ...
    @staticmethod
    def GetSelections(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> List[Any]: ...
    def ToString(self) -> str: ...

class CalibrationRowId(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
):  # Class
    def __init__(self, batch: int, sample: int, compound: int, level: int) -> None: ...

    CompoundId: int  # readonly
    LevelId: int  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class CalibrationSetup(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationSetup
):  # Class
    def CreateCalibrationLevelsFromCalSamples(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
    ) -> None: ...
    def CopyCalibrationLevels(self, fromCompoundId: int, toCompoundId: int) -> None: ...
    def ApplyLevelsToAllCompounds(self, compoundId: int) -> None: ...
    def GetPredefinedDilutionPatterns(self) -> List[str]: ...
    @overload
    def CreateCalibrationLevels(self, compoundId: int) -> None: ...
    @overload
    def CreateCalibrationLevels(
        self, compoundId: int, numberOfLevels: int, levelNamePrefix: str
    ) -> None: ...
    def ReadCalibrationLevelsFromFile(self, filePath: str) -> None: ...
    def ValidateDilutionPattern(self, dilutionPattern: str) -> str: ...
    def ValidateSetup(self) -> str: ...

class CalibrationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType = (
        ...
    )  # static # readonly
    Calibration: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType = (
        ...
    )  # static # readonly
    Method: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType = (
        ...
    )  # static # readonly
    QC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType = (
        ...
    )  # static # readonly
    ZeroStandard: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType = (
        ...
    )  # static # readonly

class CapacityFactorCalculationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EuropeanPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CapacityFactorCalculationType
    ) = ...  # static # readonly
    JapanesePharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CapacityFactorCalculationType
    ) = ...  # static # readonly
    UnitedStatesPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CapacityFactorCalculationType
    ) = ...  # static # readonly

class ChooseChromatogram(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    Count: int  # readonly
    SelectedRowId: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
    )  # readonly

    def Add(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase,
        name: str,
    ) -> None: ...

class ChromSpec(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    Agilent.MassHunter.Quantitative.UIModel.IChromSpecPane,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    AutoScale: bool
    CanAutoScale: bool  # readonly
    CanClearManualIntegration: bool  # readonly
    CanCopy: bool  # readonly
    CanFitToCalibrationLevel: bool  # readonly
    CanFitToPeak: bool  # readonly
    CanFitToPeakHeight: bool  # readonly
    CanManualIntegrate: bool  # readonly
    CanResetRTRange: bool  # readonly
    CanRestoreIntegrationSetup: bool  # readonly
    CanSearchLibrary: bool  # readonly
    CanShowDeconvolutedComponents: bool  # readonly
    CanShowIntegrationSetupDialog: bool  # readonly
    CanShowWiderRTRange: bool  # readonly
    CanZeroPeak: bool  # readonly
    ChromatogramXUnit: DataUnit
    FillPeaks: bool
    FitToHighestLevel: bool
    FitToLowestLevel: bool
    FitToPeak: bool
    FitToPeakHeight: bool
    IsSelectedPaneCompound: bool  # readonly
    IsSelectedPaneIstd: bool  # readonly
    IsSelectedPaneQualifier: bool  # readonly
    IsSelectedPaneSpectrum: bool  # readonly
    ManualIntegrationMode: bool  # readonly
    ManualScaleY: bool  # readonly
    NormalizeQualifiers: bool
    PlotControl: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromSpecControl
    )  # readonly
    Properties: Agilent.MassHunter.Quantitative.UIModel.IChromSpecProperties  # readonly
    SelectedCompoundId: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.TargetCompoundRowId
    )  # readonly
    SelectedQualifierId: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.TargetQualifierRowId
    )  # readonly
    ShowBaselineCalculationPoints: bool
    ShowBaselines: bool
    ShowChromatogram: bool
    ShowDeconvolutedComponents: bool
    ShowIstd: bool
    ShowMatchScores: bool
    ShowOverrideSpectrum: bool
    ShowQualifierAnnotations: bool
    ShowQualifiers: bool
    ShowReferenceSpectrum: bool
    ShowSpectrum: bool
    ShowUncertaintyBand: bool
    ToolbarsManager: IToolbarsManager

    def GetActiveObject(self) -> T: ...
    def AutoScaleY(self) -> None: ...
    def RestoreIntegrationSetup(self) -> None: ...
    def SetManualScaleY(self, miny: float, maxy: float) -> None: ...
    def Copy(self) -> None: ...
    def SearchLibrary(
        self, app: Agilent.MassHunter.Quantitative.UIModel.ILibraryApp
    ) -> None: ...
    def ShowWiderRTRange(self) -> None: ...
    def EnterManualIntegration(self) -> None: ...
    def AutoScaleAllPanes(self) -> None: ...
    def AutoScaleX(self) -> None: ...
    def ExitManualIntegration(self) -> None: ...
    def ResetRTRange(self) -> None: ...
    def ClearManualIntegration(self) -> None: ...
    def SetDataNavigator(
        self, dataNavigator: Agilent.MassHunter.Quantitative.UIModel.IDataNavigator
    ) -> None: ...
    def CreatePropertyPages(self) -> List[IPropertyPage]: ...
    def StoreSettings(self) -> None: ...
    def ZeroPeak(self) -> None: ...
    def GetActivePaneScale(
        self, minx: float, maxx: float, miny: float, maxy: float
    ) -> bool: ...
    def ShowIntegrationSetupDialog(self) -> None: ...
    def ShowPeakLabelsDialog(self) -> None: ...

class ChromSpecPropPage(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    IPropertyPage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(
        self,
        control: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromSpecControl,
    ) -> None: ...

class ChromSpecPropPage2(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    IPropertyPage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(
        self,
        control: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromSpecControl,
    ) -> None: ...

class ChromSpecProperties(
    System.IDisposable, Agilent.MassHunter.Quantitative.UIModel.IChromSpecProperties
):  # Class
    AlternatePeakFillColor: System.Drawing.Color
    BackColor: System.Drawing.Color
    ChromatogramPeakLabelCaption: bool
    ChromatogramPeakLabelFormat: str  # readonly
    ChromatogramPeakLabelTypes: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ]
    ChromatogramPeakLabelUnits: bool
    ChromatogramTitleElements: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement
    ]
    DeconvolutedComponentColors: List[System.Drawing.Color]
    FillAllQualifierPeaks: bool
    FillOutofLimitQualifierPeaks: bool
    FillPeaks: bool
    FillPeaksTransparency: int
    FillTargetPeaksInQualifiers: bool
    FontSize: float
    ForeColor: System.Drawing.Color
    GridlinesColor: System.Drawing.Color
    GridlinesVisible: bool
    MIOutlierQualifierTitleColor: System.Drawing.Color
    MaxColumnsPerPage: int
    NoiseRegionsColor: System.Drawing.Color
    NormalizeQualifiers: bool
    NormalizeQuantifier: bool
    OverrideSpectrum: bool
    PlotColor: System.Drawing.Color
    PrecursorColor: System.Drawing.Color
    PrecursorFill: bool
    PrecursorSize: int
    PrimaryPeakAcceptedFillColor: System.Drawing.Color
    PrimaryPeakInspectFillColor: System.Drawing.Color
    PrimaryPeakManualIntegratedColor: System.Drawing.Color
    PrimaryPeakRejectedFillColor: System.Drawing.Color
    QualifierColors: List[System.Drawing.Color]
    QualifierInfoLabelType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType
    )
    QualifiersTransparency: int
    ReferenceRetentionTimeColor: System.Drawing.Color
    ReferenceRetentionTimeDashStyle: System.Drawing.Drawing2D.DashStyle
    ReferenceWindowColor: System.Drawing.Color
    ReferenceWindowDashStyle: System.Drawing.Drawing2D.DashStyle
    ShowBaseRegions: bool
    ShowBaselines: bool
    ShowChromatogram: bool
    ShowDeconvolutedComponents: bool
    ShowDefaultChromatogramTitle: bool
    ShowIstd: bool
    ShowManualIntegrationHandles: bool
    ShowMassIndicators: bool
    ShowMatchScores: bool
    ShowNoiseRegions: bool
    ShowOriginalBaselines: bool
    ShowPatternSpectra: bool
    ShowQualifierAnnotations: bool
    ShowQualifierCoelutionScore: bool
    ShowQualifiers: bool
    ShowReferenceLibrarySource: bool
    ShowReferenceRetentionTime: bool
    ShowReferenceSpectrum: bool
    ShowReferenceWindow: bool
    ShowSpectrum: bool
    ShowTimeSegmentBorder: bool
    ShowUncertaintyBand: bool
    TimeSegmentBorderColor: System.Drawing.Color
    UncertaintyBandDashStyle: System.Drawing.Drawing2D.DashStyle

    def GetQualifierColor(self, index: int) -> System.Drawing.Color: ...
    def UpdateControl(
        self,
        control: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromSpecControl,
    ) -> None: ...
    def GetPeakFillColor(
        self,
        isPrimary: bool,
        manualIntegrated: bool,
        status: PeakStatus,
        transparency: int,
        fillAlternatePeaks: bool,
    ) -> System.Drawing.Color: ...
    def InitFromConfiguration(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetDeconvolutedComponentColor(self, index: int) -> System.Drawing.Color: ...

class ChromatogramAutoScaleType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AutoScale: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly
    FitToHighestLevel: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly
    FitToLowestLevel: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly
    FitToPeak: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly
    FitToPeakHeight: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly
    ManualY: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType
    ) = ...  # static # readonly

class ChromatogramPeakLabelType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Area: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    CalculatedConcentration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    CompoundGroup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    CompoundName: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    DeltaRT: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    FinalConcentration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    Height: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    QValueComputed: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    RetentionTime: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly
    SignalToNoise: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramPeakLabelType
    ) = ...  # static # readonly

class ChromatographyType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CE: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType = (
        ...
    )  # static # readonly
    GC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType = (
        ...
    )  # static # readonly
    LC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType = (
        ...
    )  # static # readonly

class ClaireIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    def __init__(self) -> None: ...

    Parameters: IPSetPeakFind  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...

class CmdAddMethodCalibration(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdAddRowBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        levelId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        levelId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly

    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAddMethodTargetCompound(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdAddRowBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        id: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        id: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly

    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAddMethodTargetQualifier(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdAddRowBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAddRowBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    Attributes: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue
    ]  # readonly
    Reversible: bool  # readonly
    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def AddAttribute(self, name: str, value_: Any) -> None: ...
    def Undo(self) -> Any: ...

class CmdAddSample(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdAddRowBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def Redo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAnalyze(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAppendMethodFromAcquisition(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAppendMethodFromFile(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFile: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAppendMethodFromScanData(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdMethodFromScanDataBase,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibrarySearch: bool,
        numberOfQualifiers: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibrarySearch: bool,
        numberOfQualifiers: int,
        createSIMMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibSearch: bool,
        numberOfQualifiers: int,
        minMz: float,
        minRelAbundance: float,
        ionQualityMetric: str,
        massWeighting: str,
        mzExclusionList: List[float],
        needAtLeastOneQualifier: bool,
    ) -> None: ...
    def Do(self) -> Any: ...

class CmdApplyMethodToAllSamples(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batch: int,
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAverageQualifierRatios(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundId: int,
        qualifierId: int,
        useCals: bool,
        useQCs: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdAverageRetentionTime(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundId: int,
        useCals: bool,
        useQCs: bool,
        useWeighting: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundId: int,
        useCals: bool,
        useQCs: bool,
        useWeighting: bool,
        weight: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCalibrate(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        averageCalibration: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundIds: List[int],
        averageCalibration: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundIds: List[int],
        levelConcentrations: List[Optional[float]],
        sampleIds: List[int],
        averageCalibration: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCleanUpCalibrationTable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdClearCalibration(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundIds: List[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundIds: List[int],
        levelNames: List[str],
        levelTypes: List[str],
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdClearManualIntegration(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
    ) -> None: ...

    BatchId: int  # readonly
    CompoundIds: List[int]  # readonly
    QualifierIds: List[Optional[int]]  # readonly
    Reversible: bool  # readonly
    SampleIds: List[int]  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdClearResults(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batch: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batch: int,
        clearCalibration: bool,
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCloseBatchTable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCompositeBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    Generic[T],
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...

class CmdCopyCalibrationLevels(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        fromCompoundId: int,
        toCompoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateAcqMethodFromQuantSIMMethod(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        acqMethodDirectory: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        acqMethodDirectory: str,
        useConstantCycleTime: bool,
        cyclesPerSecond: float,
        useEqualDwellTimes: bool,
        dwellTime: float,
        removeDuplicateTransitions: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateDynamicQuantTargets(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateLevelsFromCalSamples(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateLevelsFromFile(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        levelFile: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateMethodFromCefFile(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        cefFilePath: str,
        appendToCurrentMethod: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateMethodFromChromatographicData(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        startTime: Optional[float],
        appendToCurrentMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        startTime: Optional[float],
        endTime: Optional[float],
        peakFilterType: str,
        areaAbsThreshold: Optional[float],
        areaPctThreshold: Optional[float],
        heightAbsThreshold: Optional[float],
        heightPctThreshold: Optional[float],
        maxPeakCount: Optional[int],
        appendToCurrentMethod: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateMethodFromLibrary(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        libraryFile: str,
        rtCalibrationFile: str,
        targetListFile: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        appendToCurrentMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        libraryFile: str,
        rtCalibrationFile: str,
        targetListFile: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        ionMode: str,
        appendToCurrentMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        libraryFile: str,
        rtCalibrationFile: str,
        targetListFile: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        ionMode: str,
        compoundPerSpectrum: bool,
        appendToCurrentMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        libraryFile: str,
        rtCalibrationFile: str,
        targetListFile: str,
        samplePath: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        ionMode: str,
        compoundPerSpectrum: bool,
        pickIonsFromMultipleSpectrum: bool,
        updateRetentionTimeFromData: bool,
        appendToCurrentMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        libraryFile: str,
        rtCalibrationFile: str,
        targetListFile: str,
        samplePath: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        ionMode: str,
        compoundPerSpectrum: bool,
        pickIonsFromMultipleSpectrum: bool,
        selectedSpecies: List[str],
        updateRetentionTimeFromData: bool,
        appendToCurrentMethod: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateMethodFromScanData(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdMethodFromScanDataBase,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibSearch: bool,
        numberOfQualifiers: int,
        minMz: float,
        minRelAbundance: float,
        ionQualityMetric: str,
        massWeighting: str,
        mzExclusionList: List[float],
        needAtLeastOneQualifier: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibSearch: bool,
        numberOfQualifiers: int,
        createSIMMethod: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        libMethodPath: str,
        withLibSearch: bool,
        numberOfQualifiers: int,
    ) -> None: ...
    def Do(self) -> Any: ...

class CmdCreateNewMethod(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: Optional[int],
        sampleId: Optional[int],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateSerialDilutionLevels(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        numberOfLevels: int,
        levelNamePrefix: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdCreateSerialDilutionLevelsForCompounds(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
        numberOfLevels: int,
        levelNamePrefix: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdDuplicateCompounds(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdEndMethodEditing(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdImportMethodFromAcquisition(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdImportMethodFromBatch(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        dataPath: str,
        batchFileName: str,
        revisionNumber: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        dataPath: str,
        batchFileName: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdImportMethodFromFile(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFilePath: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFilePath: str,
        batchId: Optional[int],
        sampleId: Optional[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFilePath: str,
        revisionNumber: str,
        batchId: Optional[int],
        sampleId: Optional[int],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdImportMethodFromSample(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdImportSamplesFromWorklist(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPath: str,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleDirPaths: List[str],
        batchId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdIntegrate(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateApplyIstdRtToTarget(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateApplyTargetRtToQualifier(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateDropBaseline(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
        y: List[float],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateMerge(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
        withLeft: bool,
        snap: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegratePeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateQualifierPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateSnapBaseline(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
        xStart: List[float],
        xEnd: List[float],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdManuallyIntegrateSplit(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
        keepLeft: bool,
        snap: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdMethodClear(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdMethodFromScanDataBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdNewBatchTable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchDataPath: str,
        batchFileName: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchDataPath: str,
        batchFileName: str,
        auditTrail: bool,
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdOpenAndApplyMethodFromBatch(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchFilePath: str,
        batchFileName: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchFilePath: str,
        batchFileName: str,
        revisionNumber: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdOpenAndApplyMethodFromFile(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFilePath: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodFilePath: str,
        revisionNumber: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdOpenBatchTable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchDataPath: str,
        batchFileName: str,
        isReadOnly: bool,
        revisionNumber: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchDataPath: str,
        batchFileName: str,
        isReadOnly: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchDataPath: str,
        batchFileName: str,
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdQuantitate(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRemoveCalibration(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        compoundIds: List[int],
        levelNames: List[str],
        levelTypes: List[str],
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRemoveMethodCalibration(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdRemoveRowBase,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        levelId: int,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRemoveMethodTargetCompound(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdRemoveRowBase,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        targetCompoundId: int,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRemoveMethodTargetQualifier(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdRemoveRowBase,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRemoveRowBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    DataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase  # readonly
    Reversible: bool  # readonly
    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...

class CmdRemoveSample(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdRemoveRowBase,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...
    def Undo(self) -> Any: ...

class CmdRemoveSamples(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdCompositeBase[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdRemoveSample
    ],
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        sampleRowIds: List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId
        ],
    ) -> None: ...
    def RemoveSample(self, batchId: int, sampleId: int) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRestoreIntegrationParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdRestoreQualifierIntegrationParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSaveBatchTable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        id: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSaveBatchTableAs(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        dataPath: str,
        fileName: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSaveMethodAs(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        path: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSelectPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
        peakId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetBatchExtendedProperty(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        name: str,
        value_: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetCalibrationAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        levelId: int,
        name: str,
        value_: Any,
        applyAllSamples: bool,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...
    def Do(self) -> Any: ...

class CmdSetColumnValueBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    Name: str  # readonly
    OldValue: Any  # readonly
    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly
    Value: Any  # readonly

    def Do(self) -> Any: ...
    def Redo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...
    def Undo(self) -> Any: ...

class CmdSetIntegrationParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        integrationParams: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        integrator: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetLevelEnable(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        levelId: int,
        enable: bool,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetMethodCalibrationAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        levelId: int,
        name: str,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetMethodTargetCompoundAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        name: str,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetMethodTargetCompoundAttributes(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def GetActionString(self) -> str: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...
    def Do(self) -> Any: ...

class CmdSetMethodTargetQualifierAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
        name: str,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetMethodTargetQualifierAttributes(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        qualifierIds: List[List[int]],
        attributes: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue],
    ) -> None: ...

    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def GetActionString(self) -> str: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...
    def Do(self) -> Any: ...

class CmdSetPeakAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        peakId: int,
        value_: Any,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        peakId: int,
        userCustomCalculationIndex: int,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetPeakQualifierAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        peakId: int,
        qualifierId: int,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetQualifierIntegrationParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
        integrationParams: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetSampleAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        name: str,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetTargetCompoundAttribute(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        columnName: str,
        newValue: Any,
        applyAllSamples: bool,
    ) -> None: ...

    Name: str  # readonly
    OldValue: Any  # readonly
    Reversible: bool  # readonly
    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly
    Value: Any  # readonly

    def GetActionString(self) -> str: ...
    def Redo(self) -> Any: ...
    def Undo(self) -> Any: ...
    def GetParameters(self) -> List[Any]: ...
    def Do(self) -> Any: ...

class CmdSetTargetQualifierAttribute(
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CmdSetColumnValueBase,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
        name: str,
        value_: Any,
    ) -> None: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetUpReferenceSpectra(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        refLibraryPath: str,
        lookupLibraryPath: str,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetupManuallyIntegratePeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSetupManuallyIntegrateQualifierPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdShiftRetentionTime(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        shift: float,
        scale: float,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdStartMethodEditing(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdSwapQualifierWithQuantifier(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateMassAssignment(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateQualifierRatio(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateQualifierRatios(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
        qualifierId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundIds: List[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundIds: List[int],
        qualifierId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateRetentionTime(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateRetentionTimeFromISTD(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdUpdateRetentionTimes(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundIds: List[int],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleId: int,
        compoundIds: List[int],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CmdZeroOutPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        qualifierIds: List[Optional[int]],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchId: int,
        sampleIds: List[int],
        compoundIds: List[int],
        peakIds: List[int],
        qualifierIds: List[Optional[int]],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class CommandConfig:  # Class
    @staticmethod
    def GetCommandAssemblyNames() -> List[str]: ...

class CommandEventArgs(System.EventArgs):  # Class
    Command: Agilent.MassSpectrometry.CommandModel.Model.ICommand  # readonly

class CommandEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CommandEventArgs,
    ) -> None: ...

class CommandLine:  # Class
    def __init__(self) -> None: ...

    ExitCodeErrorCommandLine: int = ...  # static # readonly
    ExitCodeErrorComplianceLicense: int = ...  # static # readonly
    ExitCodeErrorComplianceLogOn: int = ...  # static # readonly
    ExitCodeErrorComplianceLogOnNotRequired: int = ...  # static # readonly
    ExitCodeErrorComplianceLogOnRequired: int = ...  # static # readonly
    ExitCodeErrorConfiguration: int = ...  # static # readonly
    ExitCodeErrorGeneral: int = ...  # static # readonly
    ExitCodeErrorTrialLicense: int = ...  # static # readonly

    AccountName: str
    ApplicationService: str
    ApplicationType: str
    BatchFile: str
    ConnectionTicket: str
    Console: bool
    Culture: str
    DefineConstants: List[str]
    Domain: str
    EncryptedPassword: str
    ErrorHasUserWhileNotRequired: bool
    ExitCode: int  # static
    Help: bool
    Instrument: str
    ParametersXml: str
    Password: str
    ScriptFiles: List[str]
    Server: str
    ToolDefinition: str
    User: str
    _InstrumentType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    )  # readonly
    _Password: System.Security.SecureString  # readonly

    def LoadParametersXml(self) -> None: ...
    def ClearPassword(self) -> None: ...

class CommandLine:  # Class
    def __init__(self) -> None: ...

    BatchFile: str
    BatchPath: str
    Culture: str
    ReportFolder: str

    def Run(self) -> int: ...

class Compare1Rt2SigSorter(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK
    ]
):  # Class
    def __init__(self) -> None: ...
    def Compare(
        self,
        x: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK,
        y: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK,
    ) -> int: ...

class Compare1Sig2RtSorter(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK
    ]
):  # Class
    def __init__(self) -> None: ...
    def Compare(
        self,
        x: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK,
        y: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK,
    ) -> int: ...

class ComponentGroup:  # Class
    BestHitComponentInfo: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ComponentInfo
    )  # readonly
    HasSameBasePeak: bool  # readonly
    HasSameRT: bool  # readonly
    IsComplete: bool  # readonly

    def HasComponentForDMIndex(self, dmIndex: int) -> bool: ...
    def GetSortedComponentHitList(
        self,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.GroupedComponentHit
    ]: ...

class ComponentInfo:  # Class
    BasePeakMz: float  # readonly
    BasePeakRT: float  # readonly
    BestHit: CandidateHit  # readonly
    BestHitScore: float  # readonly
    Component: Component  # readonly
    DMIndex: int  # readonly
    HitList: System.Collections.Generic.List[CandidateHit]  # readonly
    MostAbundantIons: System.Collections.Generic.List[IonPeak]  # readonly
    NumberOfIonPeaks: int  # readonly
    RetentionTime: float  # readonly
    SharpestIons: System.Collections.Generic.List[IonPeak]  # readonly

    def Overlaps(
        self, other: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ComponentInfo
    ) -> bool: ...

class ComponentManager:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def GetInterface(interfaceType: System.Type) -> Any: ...
    @overload
    @staticmethod
    def GetInterface(interfaceType: System.Type, instanceName: str) -> Any: ...

class CompoundData:  # Class
    Chromatogram: IChromatogram  # readonly
    CompoundId: int  # readonly
    PeakList: IChromPeakList  # readonly
    RetentionTimeStep: float  # readonly
    SelectedPeak: IChromPeak  # readonly
    Spectrum: ISpectrum  # readonly

class CompoundFilter(System.IDisposable):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodGenerator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGenerator,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        methodGenerator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGenerator,
        excludeTargetCompounds: bool,
    ) -> None: ...

    ExcludeTargetCompounds: bool

    def Dispose(self) -> None: ...

class CompoundFilterType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundFilterType = (
        ...
    )  # static # readonly
    SingleValue: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundFilterType
    ) = ...  # static # readonly

class CompoundIdentificationParams:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, xmlFileName: str) -> None: ...

    CONFIG_XML_FILE: str = ...  # static # readonly
    DEFAULT_CONFIG_XML_FILE: str = ...  # static # readonly

    AllowDuplicates: bool
    MaxCompoundsPerComponent: int
    MaxHitGroupLength: int
    MaxRelativeScoreDrop: float
    MinIonsRequiredForSearch: int
    MinMatchScore: float
    RTMatchTolerance: float
    RelativeTICPeakThreshold: float
    UseRelativeTICPeakThreshold: bool

    @overload
    def Write(self) -> None: ...
    @overload
    def Write(self, fileName: str) -> None: ...

class CompoundIntegrationSetupDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegrationSetupDialog,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        state: Agilent.MassHunter.Quantitative.UIModel.IPresentationState,
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class CompoundKeySortType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CompoundGroup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType
    ) = ...  # static # readonly
    ID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType = (
        ...
    )  # static # readonly
    ISTD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType = (
        ...
    )  # static # readonly
    Name: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType = (
        ...
    )  # static # readonly
    RetentionTime: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType
    ) = ...  # static # readonly
    UserDefined: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType
    ) = ...  # static # readonly

class CompoundMap:  # Class
    Count: int  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound: ...
    OverlappedTimeSegments: bool  # readonly

    def GetTimeSegmentsForCompound(
        self,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound,
    ) -> List[int]: ...
    def GetTimeSegmentsForCompoundByIndex(self, cpdIndex: int) -> List[int]: ...

class CompoundMath(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ConcentrationAverage: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath
    ) = ...  # static # readonly
    ConcentrationRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath
    ) = ...  # static # readonly
    ConcentrationSum: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath
    ) = ...  # static # readonly
    ResponseAverage: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath = (
        ...
    )  # static # readonly
    ResponseRatio: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath = (
        ...
    )  # static # readonly
    ResponseSum: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath = (
        ...
    )  # static # readonly
    TPHResponseSubtraction: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundMath
    ) = ...  # static # readonly

class CompoundSetup(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICompoundSetup,
):  # Class
    AcquisitionMethod: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcquisitionMethod
    )  # readonly
    AutoSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AutoSetupAssistant
    )  # readonly
    DynamicTargetDefinition: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DynamicTargetDefinition
    )  # readonly
    FileInformation: IBDAFileInformation  # readonly
    MethodSetupSession: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession
    )  # readonly
    SampleDirPath: str

    @overload
    def GetTotalIonChromatogram(self) -> IChromatogram: ...
    @overload
    def GetTotalIonChromatogram(
        self,
        msLevel: MSLevel,
        msScanType: MSScanType,
        rtMin: Optional[float],
        rtMax: Optional[float],
    ) -> IChromatogram: ...
    def GetCompoundData(
        self, compoundId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundData: ...
    def AverageQualifierRatios(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        compoundId: int,
        qualifierId: int,
        useCals: bool,
        useQCs: bool,
    ) -> None: ...
    def UpdateQualifierRatios(self, compoundId: int, qualifierId: int) -> None: ...
    def GetAverageRetentionTimeStep(self) -> float: ...
    def Dispose(self) -> None: ...
    def GetOverrideSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> ISpectrum: ...
    def ShiftRetentionTime(
        self, compoundId: int, shift: float, scale: float
    ) -> None: ...
    def GetChromatogram(self, paramSet: IPSetExtractChrom) -> IChromatogram: ...
    def GetTotalSignalChromatogram(
        self,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    def UpdateRetentionTimeFromISTD(self, compoundId: int) -> None: ...
    def SelectQualifierPeak(
        self, compoundId: int, qualifierId: int, peakIndex: int
    ) -> None: ...
    def UpdateMassAssignment(self, compoundId: int) -> None: ...
    def SelectPrimaryPeak(self, compoundId: int, peakIndex: int) -> None: ...
    def UpdateExtractionRT(
        self, compoundId: int, rtStart: float, rtEnd: float
    ) -> None: ...
    def DefineDynamicTargets(self) -> None: ...
    def UpdateCompoundDataRT(
        self, compoundId: int, rtStart: float, rtEnd: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundData: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    def ManuallyIntegratePeak(
        self, compoundId: int, xStart: float, yStart: float, xEnd: float, yEnd: float
    ) -> None: ...
    @overload
    def GetSpectrum(self, paramSet: IPSetExtractSpectrum) -> ISpectrum: ...
    @overload
    def GetSpectrum(self, rtStart: float, rtEnd: float) -> ISpectrum: ...
    def AverageRetentionTime(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        compoundId: int,
        useCals: bool,
        useQCs: bool,
        useWeighting: bool,
        weight: float,
    ) -> None: ...
    def GetQualifierData(
        self, compoundId: int, qualifierId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierData: ...
    def ManuallyIntegrateQualifierPeak(
        self,
        compoundId: int,
        qualifierId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...
    def UpdateQualifierDataRT(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        rtStart: float,
        rtEnd: float,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierData: ...
    def UpdateRetentionTime(self, compoundId: int) -> None: ...

class CompoundType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ISTD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundType = (
        ...
    )  # static # readonly
    MatrixSpike: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundType = (
        ...
    )  # static # readonly
    Surrogate: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundType = (
        ...
    )  # static # readonly
    Target: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundType = (
        ...
    )  # static # readonly

class ContextMenuIds:  # Class
    CalCurve: str = ...  # static # readonly
    ChromSpecPlot: str = ...  # static # readonly
    CurveFitAssistantTable: str = ...  # static # readonly
    MethodErrorListTable: str = ...  # static # readonly
    MethodTable: str = ...  # static # readonly
    MetricsPlot: str = ...  # static # readonly
    SamplePlotChromatogram: str = ...  # static # readonly
    SamplePlotSpectrum: str = ...  # static # readonly
    Worktable: str = ...  # static # readonly
    WorktableColumn: str = ...  # static # readonly
    WorktableHeader: str = ...  # static # readonly
    WorktableRow: str = ...  # static # readonly

class CoreAlgorithmFactory(ICoreAlgorithmFactory):  # Class
    def __init__(self) -> None: ...
    def GetPSetSignalToNoise(self) -> IPSetSignalToNoise: ...
    def UpdateChromPeakFinderParams(
        self,
        peakFinderParams: IFindPeaksParameters,
        cpParams: ComponentPerceptionParams,
    ) -> None: ...
    def GetChromPeakFinderParams(
        self, peakFinder: IFindPeaks
    ) -> IFindPeaksParameters: ...
    def GetPSetExtractChrom(self) -> IPSetExtractChrom: ...
    def GetMinRequiredNumberOfChromPoints(self, peakFinder: IFindPeaks) -> int: ...
    def GetPSetExtractSpectrum(self) -> IPSetExtractSpectrum: ...
    def GetChromPeakFinder(self, separationType: SeparationTechnique) -> IFindPeaks: ...
    def GetSpectrumPeakFinderParams(self) -> IFindPeaksParameters: ...
    def GetSpectrumPeakFinder(self) -> IFindPeaks: ...
    def RunFeatureDeconvolution(
        self, chromRegion: ChromRegion, cpParams: ComponentPerceptionParams
    ) -> System.Collections.Generic.List[Component]: ...
    def GetSignalToNoiseAlgorithm(self) -> ISignalToNoise: ...
    def GetScanDeskewParameters(
        self,
        dataAccess: IDataAccess,
        chromRegion: ChromRegion,
        mzHigh: float,
        skewRate: float,
    ) -> None: ...

class CurveFit:  # Class
    def __init__(self) -> None: ...

    A: float  # readonly
    B: float  # readonly
    C: float  # readonly
    CurveFitOrigin: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin
    )  # readonly
    CurveFitStatus: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus
    )  # readonly
    CurveFitType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    )  # readonly
    CurveFitWeighting: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    )  # readonly
    Equation: str  # readonly
    InverseLinearEquation: str  # readonly
    IsSolved: bool  # readonly
    MaxPercentResidual: float  # readonly
    OutlierIndex: int  # readonly
    R: float  # readonly
    R2: float  # readonly
    StandardError: float  # readonly
    TValue95: float  # readonly

    def EvaluateInverseFitFunction(
        self,
        response: float,
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> float: ...
    @overload
    def Response(self, amount: float) -> float: ...
    @overload
    def Response(self, amountArray: List[float]) -> List[float]: ...
    @overload
    @staticmethod
    def EvaluateFitFunction(
        amounts: List[float],
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> List[float]: ...
    @overload
    @staticmethod
    def EvaluateFitFunction(
        amount: float,
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> float: ...
    def GetConfidenceIntervalB(self, confidence: float) -> float: ...
    @overload
    def Fit(
        self,
        points: IXYData,
        ft: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        wt: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
        or_: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
    ) -> None: ...
    @overload
    def Fit(
        self,
        amounts: List[float],
        responses: List[float],
        blankOffset: float,
        fitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        weighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
    ) -> None: ...
    @overload
    def Fit(
        self,
        amounts: List[float],
        responses: List[float],
        fitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        weighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
        origin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
    ) -> None: ...
    @staticmethod
    def GetDefaultCurveFitType() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    ): ...
    def GetResiduals(self) -> List[float]: ...
    @overload
    @staticmethod
    def IsValidFit(
        fitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        weighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
        origin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsValidFit(
        fitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        weighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
        origin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        zeroConc: bool,
    ) -> bool: ...
    def GetConfidenceIntervalA(self, confidence: float) -> float: ...
    def GetFitTypeString(self) -> str: ...
    @staticmethod
    def GetDefaultFitOriginType() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin
    ): ...
    @overload
    def GetFitName(
        self,
        ft: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        localized: bool,
    ) -> str: ...
    @overload
    def GetFitName(
        self, ft: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    ) -> str: ...
    @staticmethod
    def GetFitFunctionRangeBottom(
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        quantRangeLow: float,
        a: float,
        b: float,
        c: float,
    ) -> float: ...
    @staticmethod
    def ValidateFit(
        fitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        weighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
        origin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        zeroConc: bool,
    ) -> str: ...
    def EnablePoint(self, index: int, state: bool) -> None: ...
    def IsDefinedC(self) -> bool: ...
    def IsDefinedB(self) -> bool: ...
    def GetConfidenceIntervalC(self, confidence: float) -> float: ...
    @staticmethod
    def GetDefaultFitWeightType() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ): ...

class CurveFitConfig:  # Class
    def __init__(self) -> None: ...

    CurveFitOrigin: str  # static # readonly
    CurveFitType: str  # static # readonly
    CurveFitWeight: str  # static # readonly
    FitCoeffFormat: str  # static # readonly
    FitCoeffFormatSmall: str  # static # readonly
    MaxOutlierCount: int  # static # readonly

class CurveFitEnums:  # Class
    def __init__(self) -> None: ...

    CurveFitOrigin_originBlankOffset: str  # static # readonly
    CurveFitOrigin_originForce: str  # static # readonly
    CurveFitOrigin_originIgnore: str  # static # readonly
    CurveFitOrigin_originInclude: str  # static # readonly
    CurveFitStatus_NotConverged: str  # static # readonly
    CurveFitStatus_NotEnoughDataPoints: str  # static # readonly
    CurveFitStatus_ResponseOutOfRange: str  # static # readonly
    CurveFitStatus_Success: str  # static # readonly
    CurveFitStatus_UnknownError: str  # static # readonly
    CurveFitType_fitAverageOfResponseFactors: str  # static # readonly
    CurveFitType_fitFirstOrderLog: str  # static # readonly
    CurveFitType_fitLinear: str  # static # readonly
    CurveFitType_fitPower: str  # static # readonly
    CurveFitType_fitQuadratic: str  # static # readonly
    CurveFitType_fitSecondOrderLog: str  # static # readonly
    CurveFitWeighting_weightEqual: str  # static # readonly
    CurveFitWeighting_weightLog: str  # static # readonly
    CurveFitWeighting_weightOneOverSDSquared: str  # static # readonly
    CurveFitWeighting_weightOneOverX: str  # static # readonly
    CurveFitWeighting_weightOneOverXSquared: str  # static # readonly
    CurveFitWeighting_weightOneOverY: str  # static # readonly
    CurveFitWeighting_weightOneOverYSquared: str  # static # readonly

    @staticmethod
    def GetCurveFitOriginString(
        curveFitOrigin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
    ) -> str: ...
    @staticmethod
    def GetCurveFitWeightingString(
        curveFitWeighting: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting,
    ) -> str: ...
    @staticmethod
    def GetCurveFitStatusString(
        curveFitStatus: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus,
    ) -> str: ...
    @staticmethod
    def GetCurveFitTypeString(
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
    ) -> str: ...

class CurveFitOrigin(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    originBlankOffset: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin
    ) = ...  # static # readonly
    originForce: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin = (
        ...
    )  # static # readonly
    originIgnore: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin = (
        ...
    )  # static # readonly
    originInclude: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin = (
        ...
    )  # static # readonly

class CurveFitStatus(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    NotConverged: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus = (
        ...
    )  # static # readonly
    NotEnoughDataPoints: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus
    ) = ...  # static # readonly
    ResponseOutOfRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus
    ) = ...  # static # readonly
    Success: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus = (
        ...
    )  # static # readonly
    UnknownError: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus = (
        ...
    )  # static # readonly

class CurveFitType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    fitAverageOfResponseFactors: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    ) = ...  # static # readonly
    fitFirstOrderLog: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    ) = ...  # static # readonly
    fitLinear: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType = (
        ...
    )  # static # readonly
    fitPower: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType = (
        ...
    )  # static # readonly
    fitQuadratic: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType = (
        ...
    )  # static # readonly
    fitSecondOrderLog: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    ) = ...  # static # readonly

class CurveFitWeighting(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    weightEqual: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly
    weightLog: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting = (
        ...
    )  # static # readonly
    weightOneOverSDSquared: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly
    weightOneOverX: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly
    weightOneOverXSquared: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly
    weightOneOverY: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly
    weightOneOverYSquared: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    ) = ...  # static # readonly

class CustomConfig:  # Class
    def __init__(self) -> None: ...

    AssemblyName: str  # static # readonly
    ComponentConfigFile: str  # static # readonly
    DebugScript: bool  # static # readonly
    ScriptFile: str  # static # readonly

class CustomExpressionFactory:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetCustomExpressions() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICustomExpressions
    ): ...

class CustomExpressions(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICustomExpressions
):  # Class
    def __init__(self) -> None: ...
    def _UpdateFinalConcentration(
        self,
        peakRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
    ) -> None: ...
    def _UpdateAccuracy(
        self,
        peakRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
    ) -> None: ...

class DataAccessConfig:  # Class
    def __init__(self) -> None: ...

    DataAccessMultiplier: float  # static # readonly
    EnableMultiThreadedAnalysis: bool  # static # readonly
    EnableOptimizedBatchAnalysis: bool  # static # readonly
    FillGapsWithZeros: bool  # static # readonly
    MaxQuantMemoryBytes: int  # static # readonly
    TotalAvailableApplicationRAM: int  # static # readonly
    UseCompoundNamesForSpectrumExtraction: bool  # static # readonly
    UseCompoundNamesInMRMDataAccess: bool  # static # readonly
    UseFeatureDataAccess: bool  # static # readonly
    UseHighResolutionKeys: bool  # static # readonly
    UseIndexedDataAccess: bool  # static # readonly
    UseMRMDataAccess: bool  # static # readonly
    UseOldDataAccess: bool  # static # readonly
    UseProfileData: bool  # static # readonly

class DataItemNavigator(System.IDisposable):  # Class
    def __init__(
        self,
        commandContext: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    BatchId: int  # readonly
    CompoundId: int  # readonly
    FileInformation: IBDAFileInformation  # readonly
    HasIstd: bool  # readonly
    QualifierId: int  # readonly
    SampleDataPath: str  # readonly
    SampleId: int  # readonly

    def GetIstdCompoundSpectrum(self) -> ISpectrum: ...
    def GetIstdCompoundChromatogram(self) -> IChromatogram: ...
    @overload
    def GetSpectrum(self, paramSet: IPSetExtractSpectrum) -> ISpectrum: ...
    @overload
    def GetSpectrum(self, rtStart: float, rtEnd: float) -> ISpectrum: ...
    @staticmethod
    def GetFullSampleDataPath(
        dataStorage: IDataStorage,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> str: ...
    @overload
    def GetTargetCompoundChromatogram(self) -> IChromatogram: ...
    @overload
    def GetTargetCompoundChromatogram(
        self, rtStart: float, rtEnd: float
    ) -> IChromatogram: ...
    @overload
    def GetTargetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> IChromatogram: ...
    def GetChromatogram(self, paramSet: IPSetExtractChrom) -> IChromatogram: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    @staticmethod
    def GetTargetCompoundChromatogramParameters(
        dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetCompoundSpectrum(self) -> ISpectrum: ...
    @overload
    def GetTargetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
    ) -> ISpectrum: ...
    @overload
    def GetTargetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        useSpectrumExtractionOverride: bool,
    ) -> ISpectrum: ...
    def GetTargetQualifierSpectrum(
        self, compoundId: int, qualifierId: int
    ) -> ISpectrum: ...
    def MoveCompound(self, compoundId: int) -> None: ...
    def MoveSample(self, batchId: int, sampleId: int) -> None: ...
    def GetCompoundAndQualifierSpectrum(self, compoundId: int) -> List[ISpectrum]: ...
    def MoveQualifier(self, qualifierId: int) -> None: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self, batchId: int, sampleId: int, compoundId: int
    ) -> float: ...
    @overload
    def GetFixedYScaleForChromatogram(
        self, batchId: int, sampleId: int, compoundId: int, useLowestCalLevel: bool
    ) -> float: ...
    def GetTotalSignalChromatogram(
        self,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    def Dispose(self) -> None: ...
    @overload
    def GetTIC(self) -> IChromatogram: ...
    @overload
    def GetTIC(
        self,
        msLevel: MSLevel,
        scanType: MSScanType,
        rtMin: Optional[float],
        rtMax: Optional[float],
    ) -> IChromatogram: ...
    @overload
    def GetTargetQualifierChromatogram(self) -> IChromatogram: ...
    @overload
    def GetTargetQualifierChromatogram(
        self, compoundId: int, qualifierId: int
    ) -> IChromatogram: ...
    @staticmethod
    def GetTargetQualifierChromatogramParameters(
        dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        compoundId: int,
        qualifierId: int,
    ) -> IPSetExtractChrom: ...

class DataNavigator(
    System.IDisposable, Agilent.MassHunter.Quantitative.UIModel.IDataNavigator
):  # Class
    def __init__(
        self,
        state: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
    ) -> None: ...

    BatchId: int  # readonly
    CompoundGroupFilter: Agilent.MassHunter.Quantitative.UIModel.CompoundGroupFilterInfo
    CompoundId: int  # readonly
    CompoundKey: Agilent.MassHunter.Quantitative.UIModel.CompoundKey
    CompoundKeySortType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundKeySortType
    )
    CurrentCompoundRow: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    )  # readonly
    CurrentIstdRow: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    )  # readonly
    CurrentSampleRow: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    )  # readonly
    HasIstd: bool  # readonly
    ISTDFilter: Agilent.MassHunter.Quantitative.UIModel.ISTDFilterInfo
    IsCompoundValid: bool  # readonly
    IsSampleValid: bool  # readonly
    IstdId: int  # readonly
    MSScanTypes: MSScanType  # readonly
    PresentationState: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState
    )  # readonly
    SampleDataPath: str  # readonly
    SampleFileInformation: IBDAFileInformation  # readonly
    SampleId: int  # readonly
    TimeSegmentFilter: Agilent.MassHunter.Quantitative.UIModel.TimeSegmentFilterInfo

    def GetIstdSpectrum(self) -> ISpectrum: ...
    @overload
    def NavigateCompound(
        self,
        sampleId: int,
        compoundKey: Agilent.MassHunter.Quantitative.UIModel.CompoundKey,
    ) -> None: ...
    @overload
    def NavigateCompound(self, sampleId: int, compoundId: int) -> None: ...
    def HasNextCompoundKey(self) -> bool: ...
    def GetISTDFilters(
        self,
    ) -> List[Agilent.MassHunter.Quantitative.UIModel.ISTDFilterInfo]: ...
    def GetIstdChromatogram(self) -> IChromatogram: ...
    def GetTIC(
        self,
        level: MSLevel,
        scanType: MSScanType,
        minX: Optional[float],
        maxX: Optional[float],
    ) -> IChromatogram: ...
    def Dispose(self) -> None: ...
    def GoToPreviousCompoundKey(self) -> None: ...
    @overload
    def GetCompoundSpectrum(self) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        useSpectrumExtractionOverride: bool,
    ) -> ISpectrum: ...
    def GetTimeSegmentFilters(
        self,
    ) -> List[Agilent.MassHunter.Quantitative.UIModel.TimeSegmentFilterInfo]: ...
    def GetChromatogram(self, extract: IPSetExtractChrom) -> IChromatogram: ...
    def GetTotalSignalChromatogram(
        self,
        retentionTimeMin: float,
        retentionTimeMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    def GetLibraryPathFromLibraryMethod(self, libmethod: str, index: int) -> str: ...
    def GetCompoundGroupFilters(
        self,
    ) -> List[Agilent.MassHunter.Quantitative.UIModel.CompoundGroupFilterInfo]: ...
    def GoToNextCompoundKey(self) -> None: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(self) -> IChromatogram: ...
    def NavigateSample(self, sampleId: int) -> None: ...
    def GetIstdCompoundAndQualifierSpectrum(self) -> List[ISpectrum]: ...
    def GetReferenceLibrarySpectrum(self) -> ISpectrum: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    def GetQualifierChromatogram(
        self, compoundId: int, qualifierId: int
    ) -> IChromatogram: ...
    def GetSampleTic(self) -> IChromatogram: ...
    def GetSpectrum(self, extract: IPSetExtractSpectrum) -> ISpectrum: ...
    def GetFilteredCompoundKeys(
        self,
    ) -> List[Agilent.MassHunter.Quantitative.UIModel.CompoundKey]: ...
    def HasPreviousCompoundKey(self) -> bool: ...
    def GetCompoundSpectrumForReferenceLibraryMatch(self) -> ISpectrum: ...
    @overload
    def GetCompoundAndQualifierSpectrum(self) -> List[ISpectrum]: ...
    @overload
    def GetCompoundAndQualifierSpectrum(self, compoundId: int) -> List[ISpectrum]: ...

    CompoundFilterChange: System.EventHandler  # Event
    CompoundKeyChange: System.EventHandler  # Event
    CompoundKeySortTypeChange: System.EventHandler  # Event
    NavigateChange: System.EventHandler[
        Agilent.MassHunter.Quantitative.UIModel.NavigateChangeEventArgs
    ]  # Event
    NavigateChanging: System.EventHandler[
        Agilent.MassHunter.Quantitative.UIModel.NavigateChangingEventArgs
    ]  # Event

class DataSetBase(
    System.IDisposable,
    System.Xml.Serialization.IXmlSerializable,
    System.ComponentModel.ISupportInitializeNotification,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    System.ComponentModel.IComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    System.ComponentModel.ISupportInitialize,
    System.IServiceProvider,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
):  # Class
    CommandContext: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext
    )  # readonly
    LockObject: Any  # readonly
    NumberFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat
    )  # readonly

    def RestoreRow(
        self, rowStore: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowStore
    ) -> None: ...
    def RemoveChildRows(
        self, rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
    ) -> None: ...
    def RestoreChildRows(
        self, rowStore: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowStore
    ) -> None: ...
    def MergeResults(
        self,
        dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...

class DefaultMassCal(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibration,
):  # Class
    def __init__(self) -> None: ...

    DEFAULT_MASS_CAL_FILE: str = ...  # static # readonly

    def Dispose(self) -> None: ...
    def ReadMassCalibration(self, acqDataDir: str) -> bool: ...
    def GetTimeToMassConversion(
        self,
        massCalID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion: ...

class DefaultMassCalibrationID(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID
):  # Class
    def __init__(self, calID: int) -> None: ...

    CalibrationID: int  # readonly
    MassCalOffset: int  # readonly
    ScanID: int  # readonly

class DeleteGraphicsFilesTaks(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IDeleteGraphicsFilesTask,
    IQueuedTask,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    CancelEventName: str
    Context: IQueuedTaskContext
    OutputPath: str
    ProcessingPriority: TaskPriority
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly

    def Process(self) -> None: ...
    def GetSchema(self) -> System.Xml.Schema.XmlSchema: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Dispose(self) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class DetectionFilteringTypeOptions(
    EnumItemCollection[DetectionFilteringType],
    Iterable[Any],
    List[EnumItem[DetectionFilteringType]],
    Iterable[EnumItem[DetectionFilteringType]],
    Sequence[Any],
    System.ComponentModel.IComponent,
    Sequence[EnumItem[DetectionFilteringType]],
    List[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class DeviceInfo:  # Class
    DeviceID: int  # readonly
    DeviceName: str  # readonly
    DeviceType: DeviceType  # readonly
    Key: str  # readonly
    ModelNumber: str  # readonly
    OrdinalNumber: int  # readonly
    SerialNumber: str  # readonly
    StoredDataType: StoredDataType  # readonly

class DevicesXmlReader:  # Class
    def __init__(self, sampleDataPath: str) -> None: ...

    MsDataPresent: bool  # readonly
    NonMsSignalsPresent: bool  # readonly
    SampleDataPath: str  # readonly

    def Read(self) -> None: ...
    def GetDetectorDeviceList(self) -> List[str]: ...
    def GetDeviceList(self) -> List[str]: ...
    def GetDeviceByNameAndOrdinalNumber(
        self, nameOrdinalNumber: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DeviceInfo: ...

class DoubleRange:  # Class
    @overload
    def __init__(self, min: float, max: float) -> None: ...
    @overload
    def __init__(self, range: IRange) -> None: ...

    Center: float  # readonly
    Max: float  # readonly
    Min: float  # readonly
    Width: float  # readonly

    @overload
    def Overlaps(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ) -> bool: ...
    @overload
    def Overlaps(self, min: float, max: float) -> bool: ...
    def Contains(self, value_: float) -> bool: ...
    def GetOverlap(
        self, start: float, end: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange: ...

class DoubleRangeCollection:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, capacity: int) -> None: ...

    Count: int  # readonly
    IsEmpty: bool  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange: ...
    def Contains(self, value_: float) -> bool: ...
    @overload
    def Add(self, point: float) -> None: ...
    @overload
    def Add(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ) -> None: ...

class DoubleSet:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rangeCollection: RangeCollection) -> None: ...

    Count: int  # readonly
    IsEmpty: bool  # readonly
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange: ...
    def Contains(self, value_: float) -> bool: ...
    def ToRangeCollection(
        self, units: DataUnit, type: DataValueType
    ) -> RangeCollection: ...
    @overload
    def Add(self, point: float) -> None: ...
    @overload
    def Add(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ) -> None: ...

class DynamicTargetDefinition:  # Class
    ...

class EditMethodState(
    System.IDisposable, Agilent.MassHunter.Quantitative.UIModel.IEditMethodState
):  # Class
    CurrentCompoundId: int  # readonly
    CurrentLevelId: int  # readonly
    CurrentObjectIsCalibration: bool  # readonly
    CurrentObjectIsSample: bool  # readonly
    CurrentObjectIsTargetCompound: bool  # readonly
    CurrentObjectIsTargetQualifier: bool  # readonly
    CurrentQualifierId: int  # readonly
    IsDirty: bool  # readonly
    MethodDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet
    )  # readonly
    MethodFilePathName: str  # readonly
    OriginatedBatch: str

    def NavigateQualifier(self, compoundId: int, qualifierId: int) -> None: ...
    def NavigateCalibration(self, compoundId: int, levelId: int) -> None: ...
    def NavigateSample(self) -> None: ...
    def RequestHighlightMethodInfo(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase,
        tableName: str,
        columnName: str,
    ) -> None: ...
    def GetTimeSegments(self) -> List[int]: ...
    def GetTargetCompoundRow(
        self,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def NavigateCompound(self, compoundId: int) -> None: ...
    def GetIstdCompoundRow(
        self,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def Dispose(self) -> None: ...

    BackgroundSubtractionChange: System.EventHandler  # Event
    HighlightMethodInfo: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.HighlightMethodInfoEventArgs
    ]  # Event
    NavigationChange: System.EventHandler  # Event

class EmailNotify(
    System.IDisposable,
    System.Xml.Serialization.IXmlSerializable,
    IQueuedTaskNotification,
):  # Class
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...

    # Nested Types

    class Data:  # Class
        def __init__(self) -> None: ...

        End: Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotify.DataItem
        Error: Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotify.DataItem
        Start: Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotify.DataItem
        To: str

        def Initialize(
            self,
            section: Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettingsSection,
        ) -> None: ...

    class DataItem:  # Class
        def __init__(self) -> None: ...

        Body: str
        Enabled: bool
        Subject: str

        def Initialize(
            self,
            settings: Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettings,
        ) -> None: ...

class EmailNotifySettings(System.Configuration.ConfigurationElement):  # Class
    def __init__(self) -> None: ...

    Body: str
    Enabled: bool
    Subject: str

class EmailNotifySettingsSection(System.Configuration.ConfigurationSection):  # Class
    def __init__(self) -> None: ...

    TaskEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettings
    )  # readonly
    TaskError: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettings
    )  # readonly
    TaskStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettings
    )  # readonly
    To: str

class EnumUtils:  # Class
    @overload
    @staticmethod
    def LocalizeEnumString(value_: System.Enum) -> str: ...
    @overload
    @staticmethod
    def LocalizeEnumString(
        value_: System.Enum, culture: System.Globalization.CultureInfo
    ) -> str: ...

class Enums:  # Class
    AlternativePeakCriteria_DeconvolutedLibraryMatchScore: str  # static # readonly
    AlternativePeakCriteria_None: str  # static # readonly
    CalibrationType_CC: str  # static # readonly
    CalibrationType_Calibration: str  # static # readonly
    CalibrationType_Method: str  # static # readonly
    CalibrationType_QC: str  # static # readonly
    CalibrationType_ZeroStandard: str  # static # readonly
    CompoundMath_ConcentrationAverage: str  # static # readonly
    CompoundMath_ConcentrationRatio: str  # static # readonly
    CompoundMath_ConcentrationSum: str  # static # readonly
    CompoundMath_ResponseAverage: str  # static # readonly
    CompoundMath_ResponseRatio: str  # static # readonly
    CompoundMath_ResponseSum: str  # static # readonly
    CompoundMath_TPHResponseSubtraction: str  # static # readonly
    CompoundType_ISTD: str  # static # readonly
    CompoundType_MatrixSpike: str  # static # readonly
    CompoundType_Surrogate: str  # static # readonly
    CompoundType_Target: str  # static # readonly
    IntegratorType_Agile: str  # static # readonly
    IntegratorType_Agile2: str  # static # readonly
    IntegratorType_AutoMagic: str  # static # readonly
    IntegratorType_AutoMagic_GC: str  # static # readonly
    IntegratorType_AutoMagic_LC: str  # static # readonly
    IntegratorType_Claire: str  # static # readonly
    IntegratorType_FollowBaseline_GC: str  # static # readonly
    IntegratorType_FollowBaseline_LC: str  # static # readonly
    IntegratorType_Genie: str  # static # readonly
    IntegratorType_RTE: str  # static # readonly
    IntegratorType_SpectralSummer: str  # static # readonly
    MSScanType_MultipleReaction: str  # static # readonly
    MSScanType_NeutralGain: str  # static # readonly
    MSScanType_NeutralLoss: str  # static # readonly
    MSScanType_PrecursorIon: str  # static # readonly
    MSScanType_ProductIon: str  # static # readonly
    MSScanType_Scan: str  # static # readonly
    MSScanType_SelectedIon: str  # static # readonly
    MZDeltaUnits_PPM: str  # static # readonly
    MZDeltaUnits_Percent: str  # static # readonly
    MZDeltaUnits_Thomsons: str  # static # readonly
    NoiseType_ASTM: str  # static # readonly
    NoiseType_AutoRMS: str  # static # readonly
    NoiseType_PeakToPeak: str  # static # readonly
    NoiseType_PeakToPeakDrift: str  # static # readonly
    NoiseType_RMS: str  # static # readonly
    PEAK_ERROR_AREA_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_HEIGHT_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_INTERFERENCE_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_MERGE_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_NO_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_SERIOUS_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_SPIKY: int = ...  # static # readonly
    PEAK_ERROR_SYMMETRY_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_THRESHOLDED_DATA_PROBLEM: int = ...  # static # readonly
    PEAK_ERROR_WIDTH_PROBLEM: int = ...  # static # readonly
    PEAK_STATUS_ACCEPTED: int = ...  # static # readonly
    PEAK_STATUS_INSPECT: int = ...  # static # readonly
    PEAK_STATUS_REJECTED: int = ...  # static # readonly
    PEAK_STATUS_UNSPECIFIED: int = ...  # static # readonly
    PeakErrorFlags_AreaProblem: str  # static # readonly
    PeakErrorFlags_HeightProblem: str  # static # readonly
    PeakErrorFlags_InterferenceProblem: str  # static # readonly
    PeakErrorFlags_MergeProblem: str  # static # readonly
    PeakErrorFlags_NoProblem: str  # static # readonly
    PeakErrorFlags_SeriousProblem: str  # static # readonly
    PeakErrorFlags_Spiky: str  # static # readonly
    PeakErrorFlags_SymmetryProblem: str  # static # readonly
    PeakErrorFlags_ThresholdedDataProblem: str  # static # readonly
    PeakErrorFlags_WidthProblem: str  # static # readonly
    PeakSelectionCriterion_CloseRT: str  # static # readonly
    PeakSelectionCriterion_CloseRTQual: str  # static # readonly
    PeakSelectionCriterion_GreatestQValue: str  # static # readonly
    PeakSelectionCriterion_GreatestResponse: str  # static # readonly
    PeakStatus_Accepted: str  # static # readonly
    PeakStatus_Inspect: str  # static # readonly
    PeakStatus_Rejected: str  # static # readonly
    PeakStatus_Unspecified: str  # static # readonly
    PlatesCalculationType_EuropeanPharmacopoeia: str  # static # readonly
    PlatesCalculationType_JapanesePharmacopoeia: str  # static # readonly
    PlatesCalculationType_UnitedStatesPharmacopoeia: str  # static # readonly
    Polarity_Negative: str  # static # readonly
    Polarity_Positive: str  # static # readonly
    RTRecognitionWindowUnits_Minutes: str  # static # readonly
    RTRecognitionWindowUnits_Percent: str  # static # readonly
    ResolutionCalculationType_EuropeanPharmacopoeia: str  # static # readonly
    ResolutionCalculationType_JapanesePharmacopoeia: str  # static # readonly
    ResolutionCalculationType_UnitedStatesPharmacopoeia: str  # static # readonly
    ResolutionCalculationType_ValleyHeightPeakHeightRatio: str  # static # readonly
    ResolutionCalculationType_ValleyHeightToPeakHeightAverageRatio: (
        str  # static # readonly
    )
    ResolutionCalculationType_ValleyHeightToPeakHeightSumRatio: str  # static # readonly
    SampleType_Blank: str  # static # readonly
    SampleType_CC: str  # static # readonly
    SampleType_Calibration: str  # static # readonly
    SampleType_DoubleBlank: str  # static # readonly
    SampleType_Matrix: str  # static # readonly
    SampleType_MatrixBlank: str  # static # readonly
    SampleType_MatrixDup: str  # static # readonly
    SampleType_QC: str  # static # readonly
    SampleType_ResponseCheck: str  # static # readonly
    SampleType_Sample: str  # static # readonly
    SampleType_TuneCheck: str  # static # readonly
    ScanType_MRM: str  # static # readonly
    ScanType_Ms1SIM: str  # static # readonly
    ScanType_Ms1Scan: str  # static # readonly
    ScanType_Ms2SIM: str  # static # readonly
    ScanType_Ms2Scan: str  # static # readonly
    ScanType_NeutralGain: str  # static # readonly
    ScanType_NeutralLoss: str  # static # readonly
    ScanType_PrecursorIon: str  # static # readonly
    ScanType_ProductIon: str  # static # readonly
    SmoothingType_Gaussian: str  # static # readonly
    SmoothingType_None: str  # static # readonly
    SmoothingType_SG23: str  # static # readonly
    SmoothingType_SG45: str  # static # readonly
    SpectrumExtractionOverride_AverageScan: str  # static # readonly
    SpectrumExtractionOverride_DeconvolutedScan: str  # static # readonly
    SpectrumExtractionOverride_Default: str  # static # readonly
    SpectrumExtractionOverride_TargetedMSMS: str  # static # readonly
    SpectrumScanInclusion_Apex: str  # static # readonly
    SpectrumScanInclusion_Average: str  # static # readonly
    UncertaintyMode_Absolute: str  # static # readonly
    UncertaintyMode_Relative: str  # static # readonly

    @staticmethod
    def GetPeakStatusString(peakStatus: PeakStatus) -> str: ...
    @staticmethod
    def GetMSScanTypeString(msScanType: MSScanType) -> str: ...
    @overload
    @staticmethod
    def IsAgileIntegrator(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsAgileIntegrator(integratorType: str) -> bool: ...
    @staticmethod
    def GetMZDeltaUnitsString(
        mzDeltaUnits: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MZDeltaUnits,
    ) -> str: ...
    @staticmethod
    def ToMSScanType(
        scanType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType,
    ) -> MSScanType: ...
    @staticmethod
    def ParseIntegratorType(
        intTypeName: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    @staticmethod
    def ToMSLevel(
        scanType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType,
    ) -> MSLevel: ...
    @overload
    @staticmethod
    def ParseRTRecognitionWindowUnits(
        str: str,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ): ...
    @overload
    @staticmethod
    def ParseRTRecognitionWindowUnits(
        str: str,
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ): ...
    @overload
    @staticmethod
    def ParseRTRecognitionWindowUnits(
        intValue: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ): ...
    @overload
    @staticmethod
    def ParseRTRecognitionWindowUnits(
        intValue: int,
        defaultValue: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ): ...
    @staticmethod
    def ToSmoothingFunctionType(
        smoothType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingType,
    ) -> SmoothingFunctionType: ...
    @overload
    @staticmethod
    def IsCalibrationOrQCOrCCSample(sampleTypeName: str) -> bool: ...
    @overload
    @staticmethod
    def IsCalibrationOrQCOrCCSample(
        sampleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType,
    ) -> bool: ...
    @staticmethod
    def GetCompoundTypeString(
        compoundType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundType,
    ) -> str: ...
    @staticmethod
    def GetNoiseTypeString(noiseType: NoiseType) -> str: ...
    @staticmethod
    def GetUncertaintyModeString(
        uncertaintyMode: Agilent.MassSpectrometry.DataAnalysis.Quantitative.UncertaintyMode,
    ) -> str: ...
    @staticmethod
    def IsCCSample(sampleTypeName: str) -> bool: ...
    @staticmethod
    def ParsePeakStatus(peakStatus: int) -> PeakStatus: ...
    @overload
    @staticmethod
    def IsMsIntegrator(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsMsIntegrator(integratorType: str) -> bool: ...
    @overload
    @staticmethod
    def IsParameterFreeIntegrator(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsParameterFreeIntegrator(integratorType: str) -> bool: ...
    @staticmethod
    def GetIntegratorTypeString(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> str: ...
    @staticmethod
    def ParseSymmetryCalculationType(
        str: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SymmetryCalculationType: ...
    @staticmethod
    def GetPeakErrorFlagsString(peakErrorFlags: PeakErrorFlags) -> str: ...
    @staticmethod
    def ParsePeakErrorFlags(peakErrorFlags: int) -> PeakErrorFlags: ...
    @staticmethod
    def GetScanTypeString(
        scanType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType,
    ) -> str: ...
    @staticmethod
    def ParsePeakSelectionCriterion(
        str: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion: ...
    @overload
    @staticmethod
    def IsMsMsIntegrator(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> bool: ...
    @overload
    @staticmethod
    def IsMsMsIntegrator(integratorType: str) -> bool: ...
    @staticmethod
    def GetSampleTypeString(
        sampleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType,
    ) -> str: ...
    @overload
    @staticmethod
    def IsCalibrationOrQCSample(sampleTypeName: str) -> bool: ...
    @overload
    @staticmethod
    def IsCalibrationOrQCSample(
        sampleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType,
    ) -> bool: ...
    @staticmethod
    def IsMatrixSample(sampleTypeName: str) -> bool: ...
    @staticmethod
    def ToScanType(
        msScanType: MSScanType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType: ...
    @staticmethod
    def ParseScanType(
        str: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType: ...
    @overload
    @staticmethod
    def IsBlankSample(sampleTypeName: str) -> bool: ...
    @overload
    @staticmethod
    def IsBlankSample(
        sampleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType,
    ) -> bool: ...
    @staticmethod
    def GetIonPolarityString(polarity: IonPolarity) -> str: ...
    @staticmethod
    def ParseSmoothingType(
        str: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingType: ...
    @overload
    @staticmethod
    def ParseUncertaintyMode(
        str: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.UncertaintyMode: ...
    @overload
    @staticmethod
    def ParseUncertaintyMode(
        intValue: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.UncertaintyMode: ...
    @staticmethod
    def GetPeakSelectionCriterionString(
        peakSelectionCriterion: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion,
    ) -> str: ...
    @staticmethod
    def ParseNoiseType(str: str) -> NoiseType: ...
    @staticmethod
    def GetCalibrationTypeString(
        calibrationType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType,
    ) -> str: ...
    @staticmethod
    def ParseScanTypes(scanTypes: MSScanType) -> List[MSScanType]: ...

class ErrorReportConfig:  # Class
    def __init__(self) -> None: ...

    DumpLogOnNormalExit: bool  # static # readonly
    EmailAddress: str  # static # readonly
    ErrorReportingEnabled: bool  # static # readonly

class EventHandlerSet(System.IDisposable):  # Class
    def __init__(self) -> None: ...

    Empty: bool  # readonly
    def __getitem__(self, key: Any) -> System.Delegate: ...
    def __setitem__(self, key: Any, value_: System.Delegate) -> None: ...
    def RemoveHandler(self, key: Any, handler: System.Delegate) -> None: ...
    def GetInvocationList(self, key: Any) -> List[System.Delegate]: ...
    def AddHandler(self, key: Any, handler: System.Delegate) -> None: ...
    def Clear(self) -> None: ...
    def Fire(self, key: Any, args: List[Any]) -> None: ...
    def Dispose(self) -> None: ...

class ExcelReportSetting(System.Configuration.ConfigurationElement):  # Class
    def __init__(self) -> None: ...

    Arguments: str
    Command: str
    DefaultExcelReportFileNameFormat: str  # readonly
    DefaultPrinter: str  # readonly

class ExcelReportTask(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    IQueuedTask,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExcelReportTask,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    CancelEventName: str
    Context: IQueuedTaskContext
    DestinationFilePath: str
    OpenPublishFile: bool
    PrinterName: str
    ProcessingPriority: TaskPriority
    PublishFormat: str
    ReportDestination: str
    ResultFilePath: str
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly
    TemplateFilePath: str
    UserName: str

    def Process(self) -> None: ...
    @staticmethod
    def AddinInstalled() -> bool: ...
    def Dispose(self) -> None: ...

class ExpectedDeviationParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExpectedDeviationParameters2,
    Agilent.MassSpectrometry.IExpectedDeviationParameters,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, forMsMs: bool) -> None: ...
    @overload
    def __init__(
        self, src: Agilent.MassSpectrometry.IExpectedDeviationParameters
    ) -> None: ...

class FeatureDeconvolution:  # Class
    def __init__(self) -> None: ...
    def Run(
        self, chromRegion: ChromRegion, cpParams: ComponentPerceptionParams
    ) -> System.Collections.Generic.List[Component]: ...

class FeatureDetectionChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class FilterResultTask(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    IQueuedTask,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFilterResultTask,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    CancelEventName: str
    CompoundIds: List[int]
    Context: IQueuedTaskContext
    DestinationFilePath: str
    ProcessingPriority: TaskPriority
    ResultFilePath: str
    SampleIds: List[int]
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly

    def Process(self) -> None: ...
    def Dispose(self) -> None: ...

class GeneralIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, rteParams: IPSetRTEIntegrator, peakFilters: IPSetPeakFilter
    ) -> None: ...

    PSET_CLASS: str = ...  # static # readonly

    Parameters: IPSetPeakFind  # readonly

    @staticmethod
    def GetRTEParamDifference(
        paramXML1: str, paramXML2: str
    ) -> Dict[str, List[Any]]: ...
    @staticmethod
    def AreParametersOfSameIntegratorType(params1: str, params2: str) -> bool: ...
    @staticmethod
    def GetDiffsActionString(diffs: Dict[str, List[Any]]) -> str: ...
    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    def ParseIntegratorParameters(self, parameterString: str) -> PSetRTEIntegrator: ...
    @staticmethod
    def GetParameterDiffs(
        integrator: str, params1: str, params2: str
    ) -> Dict[str, List[Any]]: ...
    @staticmethod
    def CondenseIntegratorParameterString(paramXML: str) -> str: ...
    @staticmethod
    def AreParametersEqual(paramXML1: str, paramXML2: str) -> bool: ...
    @staticmethod
    def ReadIntegratorParametersFromXMLFile(paramFile: str) -> PSetRTEIntegrator: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(paramXML: str) -> str: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(rteParams: IPSetRTEIntegrator) -> str: ...

class GenerateMethodReport(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        templateFilePath: str,
        fromMethodDataSet: bool,
        batchPath: str,
        batchFile: str,
        sampleId: int,
        outputPath: str,
        reportFileName: str,
        progress: System.Action[str],
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        templateFilePath: str,
        outputPath: str,
        reportFileName: str,
        progress: System.Action[str],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class GenerateReport(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
    System.IDisposable,
    Agilent.MassSpectrometry.CommandModel.Model.ICommand,
    IComplianceLightCommand,
    IComplianceCommand,
):  # Class
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchFolder: str,
        batchFile: str,
        method: str,
        outputPath: str,
        applicationType: str,
        samples: List[int],
        compounds: List[int],
        pushTask: bool,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchFolder: str,
        batchFile: str,
        method: str,
        outputPath: str,
        applicationType: str,
        samples: List[int],
        compounds: List[int],
        pushTask: bool,
        logonXml: str,
    ) -> None: ...
    @overload
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        batchFolder: str,
        batchFile: str,
        method: str,
        outputPath: str,
        applicationType: str,
        cancelEventName: str,
        samples: List[int],
        compounds: List[int],
        pushTask: bool,
        logonXml: str,
        progress: System.Action[str],
    ) -> None: ...

    Type: Agilent.MassSpectrometry.CommandModel.Model.CommandType  # readonly

    def Do(self) -> Any: ...
    def GetActionString(self) -> str: ...
    def GetParameters(self) -> List[Any]: ...

class GenieIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, genieParams: IPSetGenieIntegrator, peakFilters: IPSetPeakFilter
    ) -> None: ...

    PSET_CLASS: str = ...  # static # readonly

    Parameters: IPSetPeakFind  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    def ParseIntegratorParameters(
        self, parameterString: str
    ) -> PSetGenieIntegrator: ...
    @overload
    @staticmethod
    def GetTimedEventString(te: IGenieTimedEvent) -> str: ...
    @overload
    @staticmethod
    def GetTimedEventString(teList: IGenieTimedEventCollection) -> str: ...
    @staticmethod
    def CreateFromXML(paramXML: str) -> IPSetGenieIntegrator: ...
    @staticmethod
    def AreParametersEqual(paramXML1: str, paramXML2: str) -> bool: ...
    @staticmethod
    def GetGenieParamDifference(
        paramXML1: str, paramXML2: str
    ) -> Dict[str, List[Any]]: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(paramXML: str) -> str: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(genieParams: IPSetGenieIntegrator) -> str: ...

class GenieIntegratorParametersControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UserControl,
):  # Class
    def __init__(self) -> None: ...

    OriginalParameters: IPSetGenieIntegrator
    Parameters: IPSetGenieIntegrator

    def Reset(self) -> None: ...

class GenieTimedEventComboBoxItem:  # Class
    def __init__(self, code: GenieTimedEventCode) -> None: ...

    TimedEventCode: GenieTimedEventCode  # readonly
    TimedEventText: str  # readonly

    @staticmethod
    def CodeToString(code: GenieTimedEventCode) -> str: ...

class GenieTimedEventComboBoxItems(
    List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.GenieTimedEventComboBoxItem
    ],
    Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.GenieTimedEventComboBoxItem
    ],
    Iterable[Any],
    Sequence[Any],
    System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.GenieTimedEventComboBoxItem
    ],
    Sequence[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.GenieTimedEventComboBoxItem
    ],
    System.ComponentModel.IComponent,
    List[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...
    def Dispose(self) -> None: ...

class GenieTimedEventDisplayItem:  # Class
    def __init__(self) -> None: ...

    Code: Optional[GenieTimedEventCode]  # readonly
    Event: IGenieTimedEvent  # readonly
    EventText: str  # readonly
    Time: Optional[float]  # readonly
    Value: Optional[float]  # readonly
    ValueEditable: bool  # readonly

    @staticmethod
    def IsValueEditable(code: GenieTimedEventCode) -> bool: ...

class GenieTimedEventDisplayItems(
    System.ComponentModel.IComponent,
    System.ComponentModel.IBindingList,
    Sequence[Any],
    System.ComponentModel.Component,
    System.IDisposable,
    List[Any],
    Iterable[Any],
    System.ComponentModel.ITypedList,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

    ParameterSet: IPSetGenieIntegrator

class GraphicsOptionsDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    FixedGraphicsFile: str
    GraphicsSettingsFile: str
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    LoadFixedGraphicsFile: bool
    LoadGraphicsSettingsFile: bool

class GridExportMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EntireTable: Agilent.MassSpectrometry.DataAnalysis.Quantitative.GridExportMode = (
        ...
    )  # static # readonly
    SelectedRows: Agilent.MassSpectrometry.DataAnalysis.Quantitative.GridExportMode = (
        ...
    )  # static # readonly

class GroupedComponentHit:  # Class
    ComponentGroup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ComponentGroup
    )  # readonly
    ComponentInfo: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ComponentInfo
    )  # readonly
    Hit: CandidateHit  # readonly
    Score: float  # readonly

class HighlightMethodInfoEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase,
        tableName: str,
        columnName: str,
    ) -> None: ...

    ColumnName: str  # readonly
    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly
    TableName: str  # readonly

class HitSorter(
    System.Collections.Generic.IComparer[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_SINGLE_HIT
    ]
):  # Class
    def __init__(self) -> None: ...
    def Compare(
        self,
        x: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_SINGLE_HIT,
        y: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_SINGLE_HIT,
    ) -> int: ...

class IAcquisitionCompound(object):  # Interface
    Group: str  # readonly
    IsDMRM: bool  # readonly
    IsEnabled: bool  # readonly
    IsISTD: bool  # readonly
    LeftRTDelta: float  # readonly
    Name: str  # readonly
    PrecursorIonMZ: float  # readonly
    ProductIonMZs: System.Collections.Generic.List[float]  # readonly
    RightRTDelta: float  # readonly
    ScanType: MSScanType  # readonly
    ScheduledRT: float  # readonly
    TimeSegment: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeSegment
    )  # readonly

    def GetScanElement(
        self, mz: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement: ...

class IAppContext(object):  # Interface
    PresentationState: (
        Agilent.MassHunter.Quantitative.UIModel.IPresentationState
    )  # readonly
    UIState: IUIState  # readonly

    def ShowErrorMessage(self, ex: System.Exception) -> None: ...
    def ExitThread(self) -> None: ...

class IBatchRow(object):  # Interface
    AcqDateTime: System.DateTime
    AcqDateTimeLocal: System.DateTimeOffset
    AcqMethodFileName: str
    AcqMethodPathName: str
    AcqOperator: str
    BalanceOverride: str
    Barcode: str
    BatchID: int
    CalibrationReferenceSampleID: int
    Comment: str
    Completed: bool
    DADateTime: System.DateTime
    DAMethodFileName: str
    DAMethodPathName: str
    DataFileName: str
    DataPathName: str
    Dilution: float
    DualInjector: bool
    DualInjectorAcqDateTime: System.DateTime
    DualInjectorBarcode: str
    DualInjectorExpectedBarcode: str
    DualInjectorVial: int
    DualInjectorVolume: float
    EquilibrationTime: float
    ExpectedBarcode: str
    GraphicSampleChromatogram: str
    ISTDDilution: float
    InjectionsPerPosition: int
    InjectorVolume: float
    InstrumentName: str
    InstrumentType: str
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    LevelName: str
    Locked: bool
    MatrixSpikeDilution: float
    MatrixSpikeGroup: str
    MatrixType: str
    OutlierCCTime: str
    PlateCode: str
    PlatePosition: str
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    QuantitationMessage: str
    RackCode: str
    RackPosition: str
    RunStartValvePositionDescription: str
    RunStartValvePositionNumber: str
    RunStopValvePositionDescription: str
    RunStopValvePositionNumber: str
    SampleAmount: float
    SampleApproved: bool
    SampleGroup: str
    SampleID: int
    SampleInformation: str
    SampleName: str
    SamplePosition: str
    SamplePrepFileName: str
    SamplePrepPathName: str
    SampleType: str
    SamplingDateTime: System.DateTime
    SamplingTime: float
    SequenceFileName: str
    SequencePathName: str
    SurrogateDilution: float
    TotalSampleAmount: float
    TrayName: str
    TuneFileLastTimeStamp: System.DateTime
    TuneFileName: str
    TunePathName: str
    UserDefined: str
    UserDefined1: str
    UserDefined2: str
    UserDefined3: str
    UserDefined4: str
    UserDefined5: str
    UserDefined6: str
    UserDefined7: str
    UserDefined8: str
    UserDefined9: str
    Vial: int

    def SetGraphicSampleChromatogramNull(self) -> None: ...
    def SetEquilibrationTimeNull(self) -> None: ...
    def IsRackPositionNull(self) -> bool: ...
    def SetDataPathNameNull(self) -> None: ...
    def IsSampleTypeNull(self) -> bool: ...
    def SetRunStopValvePositionDescriptionNull(self) -> None: ...
    def IsISTDDilutionNull(self) -> bool: ...
    def IsDualInjectorVolumeNull(self) -> bool: ...
    def IsTrayNameNull(self) -> bool: ...
    def SetTotalSampleAmountNull(self) -> None: ...
    def IsAcqOperatorNull(self) -> bool: ...
    def IsBarcodeNull(self) -> bool: ...
    def IsUserDefined8Null(self) -> bool: ...
    def IsCalibrationReferenceSampleIDNull(self) -> bool: ...
    def SetSamplingDateTimeNull(self) -> None: ...
    def IsInstrumentTypeNull(self) -> bool: ...
    def SetDAMethodFileNameNull(self) -> None: ...
    def SetUserDefined5Null(self) -> None: ...
    def IsLockedNull(self) -> bool: ...
    def IsRunStartValvePositionDescriptionNull(self) -> bool: ...
    def IsDualInjectorExpectedBarcodeNull(self) -> bool: ...
    def IsUserDefined1Null(self) -> bool: ...
    def IsMatrixSpikeGroupNull(self) -> bool: ...
    def SetRunStartValvePositionNumberNull(self) -> None: ...
    def SetDilutionNull(self) -> None: ...
    def IsCompletedNull(self) -> bool: ...
    def IsDataPathNameNull(self) -> bool: ...
    def IsDualInjectorAcqDateTimeNull(self) -> bool: ...
    def SetSampleNameNull(self) -> None: ...
    def IsAcqMethodFileNameNull(self) -> bool: ...
    def IsSequenceFileNameNull(self) -> bool: ...
    def SetSamplingTimeNull(self) -> None: ...
    def IsSampleInformationNull(self) -> bool: ...
    def SetTuneFileLastTimeStampNull(self) -> None: ...
    def IsSamplingDateTimeNull(self) -> bool: ...
    def SetSampleInformationNull(self) -> None: ...
    def SetCommentNull(self) -> None: ...
    def IsDADateTimeNull(self) -> bool: ...
    def IsUserDefined6Null(self) -> bool: ...
    def IsSampleApprovedNull(self) -> bool: ...
    def IsUserDefined3Null(self) -> bool: ...
    def SetSampleGroupNull(self) -> None: ...
    def IsSampleAmountNull(self) -> bool: ...
    def IsDualInjectorNull(self) -> bool: ...
    def SetDualInjectorNull(self) -> None: ...
    def SetTunePathNameNull(self) -> None: ...
    def SetAcqDateTimeLocalNull(self) -> None: ...
    def IsRunStartValvePositionNumberNull(self) -> bool: ...
    def SetVialNull(self) -> None: ...
    def SetUserDefinedNull(self) -> None: ...
    def SetRunStartValvePositionDescriptionNull(self) -> None: ...
    def SetUserDefined3Null(self) -> None: ...
    def SetOutlierCCTimeNull(self) -> None: ...
    def SetMatrixSpikeDilutionNull(self) -> None: ...
    def IsPlateCodeNull(self) -> bool: ...
    def SetBarcodeNull(self) -> None: ...
    def SetRackCodeNull(self) -> None: ...
    def SetDualInjectorExpectedBarcodeNull(self) -> None: ...
    def IsSamplePrepPathNameNull(self) -> bool: ...
    def SetUserDefined4Null(self) -> None: ...
    def SetInstrumentTypeNull(self) -> None: ...
    def SetSamplePositionNull(self) -> None: ...
    def IsUserDefined4Null(self) -> bool: ...
    def SetDualInjectorVialNull(self) -> None: ...
    def SetUserDefined9Null(self) -> None: ...
    def IsUserDefined9Null(self) -> bool: ...
    def GetCompoundRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
    ]: ...
    def IsTuneFileLastTimeStampNull(self) -> bool: ...
    def SetQuantitationMessageNull(self) -> None: ...
    def SetSampleApprovedNull(self) -> None: ...
    def IsLevelNameNull(self) -> bool: ...
    def SetPlateCodeNull(self) -> None: ...
    def IsAcqMethodPathNameNull(self) -> bool: ...
    def SetPlatePositionNull(self) -> None: ...
    def IsQuantitationMessageNull(self) -> bool: ...
    def SetUserDefined6Null(self) -> None: ...
    def SetLevelNameNull(self) -> None: ...
    def SetUserDefined1Null(self) -> None: ...
    def IsInjectorVolumeNull(self) -> bool: ...
    def IsInstrumentNameNull(self) -> bool: ...
    def IsDataFileNameNull(self) -> bool: ...
    def IsSamplingTimeNull(self) -> bool: ...
    def IsDilutionNull(self) -> bool: ...
    def SetTuneFileNameNull(self) -> None: ...
    def SetDataFileNameNull(self) -> None: ...
    def SetBalanceOverrideNull(self) -> None: ...
    def SetInjectionsPerPositionNull(self) -> None: ...
    def IsGraphicSampleChromatogramNull(self) -> bool: ...
    def SetSequenceFileNameNull(self) -> None: ...
    def IsSamplePrepFileNameNull(self) -> bool: ...
    def IsUserDefinedNull(self) -> bool: ...
    def SetAcqMethodPathNameNull(self) -> None: ...
    def IsMatrixTypeNull(self) -> bool: ...
    def IsUserDefined2Null(self) -> bool: ...
    def IsTotalSampleAmountNull(self) -> bool: ...
    def SetUserDefined8Null(self) -> None: ...
    def SetInjectorVolumeNull(self) -> None: ...
    def IsTuneFileNameNull(self) -> bool: ...
    def IsDAMethodPathNameNull(self) -> bool: ...
    def SetSurrogateDilutionNull(self) -> None: ...
    def SetMatrixTypeNull(self) -> None: ...
    def SetAcqOperatorNull(self) -> None: ...
    def IsUserDefined5Null(self) -> bool: ...
    def IsTunePathNameNull(self) -> bool: ...
    def SetSamplePrepFileNameNull(self) -> None: ...
    def IsBalanceOverrideNull(self) -> bool: ...
    def SetExpectedBarcodeNull(self) -> None: ...
    def IsOutlierCCTimeNull(self) -> bool: ...
    def SetDADateTimeNull(self) -> None: ...
    def SetLockedNull(self) -> None: ...
    def IsSamplePositionNull(self) -> bool: ...
    def SetSequencePathNameNull(self) -> None: ...
    def SetCompletedNull(self) -> None: ...
    def IsDAMethodFileNameNull(self) -> bool: ...
    def IsCommentNull(self) -> bool: ...
    def SetAcqMethodFileNameNull(self) -> None: ...
    def IsExpectedBarcodeNull(self) -> bool: ...
    def IsInjectionsPerPositionNull(self) -> bool: ...
    def SetTrayNameNull(self) -> None: ...
    def IsMatrixSpikeDilutionNull(self) -> bool: ...
    def IsAcqDateTimeLocalNull(self) -> bool: ...
    def IsUserDefined7Null(self) -> bool: ...
    def IsDualInjectorBarcodeNull(self) -> bool: ...
    def IsRunStopValvePositionNumberNull(self) -> bool: ...
    def SetSampleTypeNull(self) -> None: ...
    def SetDAMethodPathNameNull(self) -> None: ...
    def IsRunStopValvePositionDescriptionNull(self) -> bool: ...
    def SetUserDefined7Null(self) -> None: ...
    def IsEquilibrationTimeNull(self) -> bool: ...
    def SetISTDDilutionNull(self) -> None: ...
    def SetAcqDateTimeNull(self) -> None: ...
    def SetUserDefined2Null(self) -> None: ...
    def SetMatrixSpikeGroupNull(self) -> None: ...
    def SetSamplePrepPathNameNull(self) -> None: ...
    def SetDualInjectorBarcodeNull(self) -> None: ...
    def SetDualInjectorVolumeNull(self) -> None: ...
    def SetDualInjectorAcqDateTimeNull(self) -> None: ...
    def IsRackCodeNull(self) -> bool: ...
    def IsAcqDateTimeNull(self) -> bool: ...
    def SetCalibrationReferenceSampleIDNull(self) -> None: ...
    def SetSampleAmountNull(self) -> None: ...
    def SetRunStopValvePositionNumberNull(self) -> None: ...
    def IsSampleGroupNull(self) -> bool: ...
    def IsDualInjectorVialNull(self) -> bool: ...
    def IsSequencePathNameNull(self) -> bool: ...
    def SetInstrumentNameNull(self) -> None: ...
    def IsPlatePositionNull(self) -> bool: ...
    def SetRackPositionNull(self) -> None: ...
    def IsSampleNameNull(self) -> bool: ...
    def IsSurrogateDilutionNull(self) -> bool: ...
    def IsVialNull(self) -> bool: ...

class IBatchTable(object):  # Interface
    LevelNameChanged: System.Data.DataColumnChangeEventHandler  # Event
    MatrixSpikeDilutionChanged: System.Data.DataColumnChangeEventHandler  # Event
    MatrixSpikeGroupChanged: System.Data.DataColumnChangeEventHandler  # Event
    MatrixTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
    SampleInformationChanged: System.Data.DataColumnChangeEventHandler  # Event
    SampleTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
    SurrogateDilutionChanged: System.Data.DataColumnChangeEventHandler  # Event

class ICalCurveFitOptimizer(object):  # Interface
    ConfidenceLevel: float
    CurveFitDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet
    )  # readonly
    MaxOutlierCount: int

    @overload
    def EvaluateFitFunction(
        self,
        amount: float,
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> float: ...
    @overload
    def EvaluateFitFunction(
        self,
        amounts: List[float],
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> List[float]: ...
    @overload
    def EvaluateFitFunction(
        self, amounts: List[float], curveFitId: int
    ) -> List[float]: ...
    def GetOutlierIDs(self, curveFitId: int) -> List[int]: ...
    def LoadCurveFitData(
        self,
        quantDS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...
    def ComputeConfidenceBand(
        self,
        curveFitId: int,
        amounts: List[float],
        bottom: List[float],
        top: List[float],
    ) -> None: ...
    def GetFitFunctionRangeBottom(self, curveFitId: int) -> float: ...

class ICalibrationRow(object):  # Interface
    BatchID: int
    CalibrationSTDAcquisitionDateTime: System.DateTime
    CalibrationSTDPathName: str
    CalibrationType: str
    CompoundID: int
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    LevelAverageCounter: float
    LevelConcentration: float
    LevelEnable: bool
    LevelID: int
    LevelLastUpdateTime: System.DateTime
    LevelName: str
    LevelRSD: float
    LevelResponse: float
    LevelResponseFactor: float
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    SampleID: int

    def IsCalibrationTypeNull(self) -> bool: ...
    def IsCalibrationSTDPathNameNull(self) -> bool: ...
    def IsLevelNameNull(self) -> bool: ...
    def IsLevelLastUpdateTimeNull(self) -> bool: ...
    def SetCalibrationSTDAcquisitionDateTimeNull(self) -> None: ...
    def SetLevelLastUpdateTimeNull(self) -> None: ...
    def IsLevelResponseFactorNull(self) -> bool: ...
    def SetCalibrationTypeNull(self) -> None: ...
    def IsLevelEnableNull(self) -> bool: ...
    def SetLevelConcentrationNull(self) -> None: ...
    def IsLevelResponseNull(self) -> bool: ...
    def IsLevelConcentrationNull(self) -> bool: ...
    def GetTargetCompoundRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def SetLevelAverageCounterNull(self) -> None: ...
    def SetCalibrationSTDPathNameNull(self) -> None: ...
    def SetLevelNameNull(self) -> None: ...
    def SetLevelEnableNull(self) -> None: ...
    def IsLevelRSDNull(self) -> bool: ...
    def IsCalibrationSTDAcquisitionDateTimeNull(self) -> bool: ...
    def Clone(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def IsLevelAverageCounterNull(self) -> bool: ...
    def SetLevelRSDNull(self) -> None: ...
    def SetLevelResponseFactorNull(self) -> None: ...
    def SetLevelResponseNull(self) -> None: ...

class ICalibrationSetup(object):  # Interface
    def CreateCalibrationLevelsFromCalSamples(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
    ) -> None: ...
    def CopyCalibrationLevels(self, fromCompoundId: int, toCompoundId: int) -> None: ...
    def ApplyLevelsToAllCompounds(self, compoundId: int) -> None: ...
    def GetPredefinedDilutionPatterns(self) -> List[str]: ...
    @overload
    def CreateCalibrationLevels(self, compoundId: int) -> None: ...
    @overload
    def CreateCalibrationLevels(
        self, compoundId: int, numberOfLevels: int, levelNamePrefix: str
    ) -> None: ...
    def ReadCalibrationLevelsFromFile(self, filePath: str) -> None: ...
    def ValidateDilutionPattern(self, dilutionPattern: str) -> str: ...
    def ValidateSetup(self) -> str: ...

class ICompoundSetup(object):  # Interface
    AutoSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AutoSetupAssistant
    )  # readonly
    FileInformation: IBDAFileInformation  # readonly

    def AverageQualifierRatios(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        compoundId: int,
        qualifierId: int,
        useCals: bool,
        useQCs: bool,
    ) -> None: ...
    @overload
    def GetSpectrum(self, paramSet: IPSetExtractSpectrum) -> ISpectrum: ...
    @overload
    def GetSpectrum(self, rtStart: float, rtEnd: float) -> ISpectrum: ...
    def SelectQualifierPeak(
        self, compoundId: int, qualifierId: int, peakIndex: int
    ) -> None: ...
    def GetChromatogram(self, paramSet: IPSetExtractChrom) -> IChromatogram: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    def UpdateExtractionRT(
        self, compoundId: int, rtStart: float, rtEnd: float
    ) -> None: ...
    def GetCompoundData(
        self, compoundId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundData: ...
    def UpdateQualifierRatios(self, compoundId: int, qualifierId: int) -> None: ...
    def ManuallyIntegrateQualifierPeak(
        self,
        compoundId: int,
        qualifierId: int,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
    ) -> None: ...
    def UpdateRetentionTime(self, compoundId: int) -> None: ...
    def UpdateRetentionTimeFromISTD(self, compoundId: int) -> None: ...
    def ManuallyIntegratePeak(
        self, compoundId: int, xStart: float, yStart: float, xEnd: float, yEnd: float
    ) -> None: ...
    def GetTotalSignalChromatogram(
        self,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    def SelectPrimaryPeak(self, compoundId: int, peakIndex: int) -> None: ...
    @overload
    def GetTotalIonChromatogram(self) -> IChromatogram: ...
    @overload
    def GetTotalIonChromatogram(
        self,
        msLevel: MSLevel,
        msScanType: MSScanType,
        rtMin: Optional[float],
        rtMax: Optional[float],
    ) -> IChromatogram: ...
    def ShiftRetentionTime(
        self, compoundId: int, shift: float, scale: float
    ) -> None: ...
    def GetQualifierData(
        self, compoundId: int, qualifierId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierData: ...
    def UpdateMassAssignment(self, compoundId: int) -> None: ...
    def AverageRetentionTime(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        compoundId: int,
        useCals: bool,
        useQCs: bool,
        useWeighting: bool,
        weight: float,
    ) -> None: ...

class ICustomExpressions(object):  # Interface
    def _UpdateFinalConcentration(
        self,
        peakRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
    ) -> None: ...
    def _UpdateAccuracy(
        self,
        peakRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
    ) -> None: ...

class IDeleteGraphicsFilesTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    OutputPath: str

class IExcelReportTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    DestinationFilePath: str
    OpenPublishFile: bool
    PrinterName: str
    PublishFormat: str
    ReportDestination: str
    ResultFilePath: str
    TemplateFilePath: str
    UserName: str

class IExpectedDeviationParameters2(
    Agilent.MassSpectrometry.IExpectedDeviationParameters
):  # Interface
    MassMatchIsAbsolute: bool
    MassMatchToleranceMDa: float
    MassMatchTolerancePpm: float
    MinIsotopeIonAbundance: float

    def Clone(
        self,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExpectedDeviationParameters2
    ): ...

class IFeature(object):  # Interface
    ApexPointIndex: int  # readonly
    ApexScanIndex: int  # readonly
    Area: float  # readonly
    AssignedFlightTime: float  # readonly
    AssignedMz: float  # readonly
    AssignedRT: float  # readonly
    EndX: float  # readonly
    FeatureID: int  # readonly
    FlightTimeVariation: float  # readonly
    Height: float  # readonly
    IsSaturated: bool  # readonly
    RestoredArea: float  # readonly
    RestoredHeight: float  # readonly
    RidgeID: int  # readonly
    ScanSpace: IScanSpace  # readonly
    StartX: float  # readonly

class IFeatureChromPeak(object):  # Interface
    Feature: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFeature  # readonly

    def ManualIntegrate(
        self,
        featureChrom: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFeatureChromatogram,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
        peakList: IChromPeakList,
    ) -> None: ...

class IFeatureChromPeakList(
    IChromPeakList,
    IPeakList,
    IResult,
    System.ICloneable,
    List[IPeak],
    Sequence[IPeak],
    Iterable[IPeak],
    Iterable[Any],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFeatureChromPeak],
):  # Interface
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFeatureChromPeak: ...
    def FilterPeaks(self, filters: IPSetPeakFilter) -> None: ...

class IFeatureChromatogram(object):  # Interface
    FeaturePeakList: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFeatureChromPeakList
    )  # readonly
    XStep: float  # readonly

    def ManualIntegrate(
        self,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
        peaklist: IChromPeakList,
    ) -> IChromPeak: ...

class IFilterResultTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    CompoundIds: List[int]
    DestinationFilePath: str
    ResultFilePath: str
    SampleIds: List[int]

class IIntegrator(object):  # Interface
    Parameters: IPSetPeakFind  # readonly
    PeakFilters: IPSetPeakFilter  # readonly
    PeakFinder: IFindPeaks  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    def ManualIntegrate(
        self,
        chromatogram: IChromatogram,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
        peaklist: IChromPeakList,
    ) -> IChromPeak: ...
    def FindPeaks(self, chromatogram: IChromatogram) -> IChromPeakList: ...

class ILocalizeResultFileTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    DestinationFilePath: str
    GlobalResultFilePath: str
    LocalizeMapFilePath: str

class ILogonTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    LogonXml: str

class IMSDataAccess(object):  # Interface
    ChromatographyType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType
    )  # readonly
    CoreDataAccess: IDataAccess  # readonly
    FileInformation: IBDAFileInformation  # readonly
    IsAccurateMass: bool  # readonly
    IsIndexedData: bool  # readonly
    IsOpen: bool  # readonly
    LastAccessTime: System.DateTime  # readonly
    SampleDataPath: str  # readonly

    @overload
    def GetQualifierSpectrum(self, compoundId: int, qualifierId: int) -> ISpectrum: ...
    @overload
    def GetQualifierSpectrum(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> ISpectrum: ...
    def CloseSampleData(self) -> None: ...
    def GetCompoundTIC(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetSpectrum(self, rtStart: float, rtEnd: float) -> ISpectrum: ...
    @overload
    def GetSpectrum(self, paramSet: IPSetExtractSpectrum) -> ISpectrum: ...
    @overload
    def GetChromatogram(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetChromatogram(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        scanMode: MSScanType,
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetChromatogram(self, paramSet: IPSetExtractChrom) -> IChromatogram: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    def DynamicBackgroundSubtract(self) -> None: ...
    def GetChromatographicRange(self) -> IRange: ...
    @overload
    def GetCompoundAndQualifierSpectrum(
        self, compoundId: int, needTitle: bool
    ) -> List[ISpectrum]: ...
    @overload
    def GetCompoundAndQualifierSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> List[ISpectrum]: ...
    @overload
    def GetCompoundChromatogram(self, compoundId: int) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self, compoundId: int, rtStart: float, rtEnd: float
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        rtStart: float,
        rtEnd: float,
        needTitle: bool,
    ) -> IChromatogram: ...
    def GetAreaCorrectionChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self, compoundId: int, qualifierId: int
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self, compoundId: int, qualifierId: int, rtStart: float, rtEnd: float
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        rtStart: float,
        rtEnd: float,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetTotalSignalChromatogram(
        self,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    @overload
    def GetTotalSignalChromatogram(
        self,
        msLevel: MSLevel,
        scanType: MSScanType,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundSpectrum(self, compoundId: int, needTitle: bool) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self, compoundId: int, selectedPeak: IChromPeak, needTitle: bool
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        selectedPeak: IChromPeak,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        useSpectrumExtractionOverride: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        needTitle: bool,
        spectrumExtractionOverride: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride,
    ) -> ISpectrum: ...
    def GetTimeSegmentRanges(self) -> RangeCollection: ...
    @overload
    def GetTIC(self) -> IChromatogram: ...
    @overload
    def GetTIC(self, rtMin: float, rtMax: float) -> IChromatogram: ...
    @overload
    def GetTIC(
        self,
        msLevel: MSLevel,
        scanType: MSScanType,
        rtMin: Optional[float],
        rtMax: Optional[float],
    ) -> IChromatogram: ...

class IMassCalibration(object):  # Interface
    def ReadMassCalibration(self, acqDataDir: str) -> bool: ...
    def GetTimeToMassConversion(
        self,
        massCalID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion: ...

class IMassCalibrationID(object):  # Interface
    CalibrationID: int  # readonly
    MassCalOffset: int  # readonly
    ScanID: int  # readonly

class INumericCustomFormat(object):  # Interface
    FormatProvider: System.IFormatProvider  # readonly
    FormatString: str  # readonly

class INumericFormat(object):  # Interface
    def Contains(self, columnName: str) -> bool: ...
    def GetFormat(
        self, columnName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat: ...

class IOutlier(object):  # Interface
    Category: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories
    )  # readonly
    DataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    IsAutoUpdateEnabled: bool  # readonly
    OutlierColumn: str  # readonly
    OutlierCompoundType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCompoundType
    )  # readonly
    OutlierType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    )  # readonly
    OutlierValueColumn: str  # readonly
    Table: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables  # readonly

    def UpdateAll(self) -> None: ...
    def GetPrerequisiteColumns(self) -> List[str]: ...
    def DisableAutoUpdates(self) -> None: ...
    def GetOutlierInfo(
        self, row: System.Data.DataRow, columnName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierInfo: ...
    def GetLimitColumns(self) -> List[str]: ...
    def EnableAutoUpdates(self) -> None: ...

class IParamSetBuilder(object):  # Interface
    def GetTargetQualifierSpectrumParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    def GetAreaCorrectionChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    def GetChromatogramParameters(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetCompoundChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetCompoundChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        selectedPeak: IChromPeak,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        startRT: float,
        endRT: float,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    def GetTargetQualifierChromatogramParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetQualifierChromatogramParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...

class IPeakQualifierRow(object):  # Interface
    Area: float
    BaselineEnd: float
    BaselineEndOriginal: float
    BaselineStandardDeviation: float
    BaselineStart: float
    BaselineStartOriginal: float
    BatchID: int
    CoelutionScore: float
    CompoundID: int
    FullWidthHalfMaximum: float
    Height: float
    IntegrationEndTime: float
    IntegrationEndTimeOriginal: float
    IntegrationMetricQualityFlags: str
    IntegrationQualityMetric: str
    IntegrationStartTime: float
    IntegrationStartTimeOriginal: float
    IsZeroPeaked: bool  # readonly
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    MZ: float
    ManuallyIntegrated: bool
    MassAccuracy: float
    Noise: float
    NoiseRegions: str
    OutlierQualifierCoelutionScore: str
    OutlierQualifierFullWidthHalfMaximum: str
    OutlierQualifierIntegrationQualityMetric: str
    OutlierQualifierMassAccuracy: str
    OutlierQualifierOutOfLimits: str
    OutlierQualifierResolutionFront: str
    OutlierQualifierResolutionRear: str
    OutlierQualifierSignalToNoiseRatio: str
    OutlierQualifierSymmetry: str
    OutlierSaturationRecovery: str
    PeakID: int
    QualifierID: int
    QualifierResponseRatio: float
    QualifierResponseRatioOriginal: float
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    ResolutionFront: float
    ResolutionRear: float
    RetentionTime: float
    RetentionTimeOriginal: float
    SampleID: int
    SaturationRecoveryRatio: float
    SignalToNoiseRatio: float
    Symmetry: float
    UserCustomCalculation: float

    def IsMZNull(self) -> bool: ...
    def IsOutlierQualifierSignalToNoiseRatioNull(self) -> bool: ...
    def SetIntegrationQualityMetricNull(self) -> None: ...
    def IsBaselineStandardDeviationNull(self) -> bool: ...
    def IsMassAccuracyNull(self) -> bool: ...
    def IsQualifierResponseRatioOriginalNull(self) -> bool: ...
    def IsResolutionRearNull(self) -> bool: ...
    def IsOutlierQualifierResolutionFrontNull(self) -> bool: ...
    def SetBaselineEndNull(self) -> None: ...
    def SetOutlierQualifierIntegrationQualityMetricNull(self) -> None: ...
    def SetOutlierSaturationRecoveryNull(self) -> None: ...
    def IsHeightNull(self) -> bool: ...
    def SetIntegrationStartTimeNull(self) -> None: ...
    def SetOutlierQualifierResolutionFrontNull(self) -> None: ...
    def IsRetentionTimeOriginalNull(self) -> bool: ...
    def IsBaselineEndOriginalNull(self) -> bool: ...
    def IsManuallyIntegratedNull(self) -> bool: ...
    def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
    def GetTargetQualifierRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
    def IsAreaNull(self) -> bool: ...
    def IsBaselineEndNull(self) -> bool: ...
    def IsNoiseNull(self) -> bool: ...
    def SetOutlierQualifierCoelutionScoreNull(self) -> None: ...
    def SetResolutionFrontNull(self) -> None: ...
    def IsFullWidthHalfMaximumNull(self) -> bool: ...
    def SetManuallyIntegratedNull(self) -> None: ...
    def SetIntegrationEndTimeNull(self) -> None: ...
    def IsOutlierQualifierOutOfLimitsNull(self) -> bool: ...
    def IsRetentionTimeNull(self) -> bool: ...
    def SetQualifierResponseRatioOriginalNull(self) -> None: ...
    def SetOutlierQualifierSignalToNoiseRatioNull(self) -> None: ...
    def IsIntegrationQualityMetricNull(self) -> bool: ...
    def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
    def IsOutlierQualifierMassAccuracyNull(self) -> bool: ...
    def IsOutlierQualifierSymmetryNull(self) -> bool: ...
    def IsUserCustomCalculationNull(self) -> bool: ...
    def SetOutlierQualifierSymmetryNull(self) -> None: ...
    def SetResolutionRearNull(self) -> None: ...
    def IsSignalToNoiseRatioNull(self) -> bool: ...
    def SetBaselineStartOriginalNull(self) -> None: ...
    def SetSaturationRecoveryRatioNull(self) -> None: ...
    def IsNoiseRegionsNull(self) -> bool: ...
    def SetBaselineStartNull(self) -> None: ...
    def SetIntegrationStartTimeOriginalNull(self) -> None: ...
    def IsOutlierQualifierCoelutionScoreNull(self) -> bool: ...
    def IsSaturationRecoveryRatioNull(self) -> bool: ...
    def SetUserCustomCalculationNull(self) -> None: ...
    def SetSignalToNoiseRatioNull(self) -> None: ...
    def SetBaselineStandardDeviationNull(self) -> None: ...
    def SetHeightNull(self) -> None: ...
    def SetOutlierQualifierOutOfLimitsNull(self) -> None: ...
    def IsCoelutionScoreNull(self) -> bool: ...
    def SetCoelutionScoreNull(self) -> None: ...
    def SetMassAccuracyNull(self) -> None: ...
    def SetSymmetryNull(self) -> None: ...
    def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
    def SetIntegrationEndTimeOriginalNull(self) -> None: ...
    def SetNoiseRegionsNull(self) -> None: ...
    def SetBaselineEndOriginalNull(self) -> None: ...
    def IsIntegrationEndTimeNull(self) -> bool: ...
    def SetRetentionTimeNull(self) -> None: ...
    def SetNoiseNull(self) -> None: ...
    def IsOutlierQualifierIntegrationQualityMetricNull(self) -> bool: ...
    def SetOutlierQualifierFullWidthHalfMaximumNull(self) -> None: ...
    def SetQualifierResponseRatioNull(self) -> None: ...
    def IsOutlierQualifierFullWidthHalfMaximumNull(self) -> bool: ...
    def IsIntegrationStartTimeNull(self) -> bool: ...
    def IsOutlierQualifierResolutionRearNull(self) -> bool: ...
    def IsBaselineStartNull(self) -> bool: ...
    def IsQualifierResponseRatioNull(self) -> bool: ...
    def SetFullWidthHalfMaximumNull(self) -> None: ...
    def SetMZNull(self) -> None: ...
    def SetAreaNull(self) -> None: ...
    def SetRetentionTimeOriginalNull(self) -> None: ...
    def SetOutlierQualifierMassAccuracyNull(self) -> None: ...
    def SetOutlierQualifierResolutionRearNull(self) -> None: ...
    def GetPeakRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def IsOutlierSaturationRecoveryNull(self) -> bool: ...
    def IsSymmetryNull(self) -> bool: ...
    def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
    def IsResolutionFrontNull(self) -> bool: ...
    def IsBaselineStartOriginalNull(self) -> bool: ...

class IPeakRow(object):  # Interface
    Accuracy: float
    AlternativePeakRTDiff: float
    AlternativeTargetHit: str
    Area: float
    AreaCorrectionResponse: float
    BaselineDraw: str
    BaselineEnd: float
    BaselineEndOriginal: float
    BaselineStandardDeviation: float
    BaselineStart: float
    BaselineStartOriginal: float
    BatchID: int
    CCISTDResponseRatio: float
    CCResponseRatio: float
    CalculatedConcentration: float
    CapacityFactor: float
    CompoundID: int
    EstimatedConcentration: str
    FinalConcentration: float
    FullWidthHalfMaximum: float
    GroupNumber: int
    Height: float
    ISTDConcentrationRatio: float
    ISTDResponsePercentDeviation: float
    ISTDResponseRatio: float
    IntegrationEndTime: float
    IntegrationEndTimeOriginal: float
    IntegrationMetricQualityFlags: str
    IntegrationQualityMetric: str
    IntegrationStartTime: float
    IntegrationStartTimeOriginal: float
    IsZeroPeaked: bool  # readonly
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    MZ: float
    ManuallyIntegrated: bool
    MassAbundanceScore: float
    MassAccuracy: float
    MassAccuracyScore: float
    MassMatchScore: float
    MassSpacingScore: float
    MatrixSpikePercentDeviation: float
    MatrixSpikePercentRecovery: float
    Noise: float
    NoiseRegions: str
    OutlierAccuracy: str
    OutlierBelowLimitOfDetection: str
    OutlierBelowLimitOfQuantitation: str
    OutlierBlankConcentrationOutsideLimit: str
    OutlierCCISTDResponseRatio: str
    OutlierCCResponseRatio: str
    OutlierCCRetentionTime: str
    OutlierCapacityFactor: str
    OutlierFullWidthHalfMaximum: str
    OutlierISTDResponse: str
    OutlierISTDResponsePercentDeviation: str
    OutlierIntegrationQualityMetric: str
    OutlierLibraryMatchScore: str
    OutlierMassAccuracy: str
    OutlierMassMatchScore: str
    OutlierMatrixSpikeGroupRecovery: str
    OutlierMatrixSpikeOutOfLimits: str
    OutlierMatrixSpikeOutsidePercentDeviation: str
    OutlierMatrixSpikePercentRecovery: str
    OutlierOutOfCalibrationRange: str
    OutlierPlates: str
    OutlierPurity: str
    OutlierQCLCSRecoveryOutOfLimits: str
    OutlierQCOutOfLimits: str
    OutlierQCOutsideRSD: str
    OutlierQValue: str
    OutlierRelativeRetentionTime: str
    OutlierResolutionFront: str
    OutlierResolutionRear: str
    OutlierRetentionTime: str
    OutlierSampleAmountOutOfLimits: str
    OutlierSampleOutsideRSD: str
    OutlierSaturationRecovery: str
    OutlierSignalToNoiseRatioBelowLimit: str
    OutlierSurrogateOutOfLimits: str
    OutlierSurrogatePercentRecovery: str
    OutlierSymmetry: str
    PeakID: int
    Plates: int
    Purity: float
    QValueComputed: int
    QValueSort: int
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    ReferenceLibraryMatchScore: float
    RelativeRetentionTime: float
    ResolutionFront: float
    ResolutionRear: float
    ResponseRatio: float
    RetentionIndex: float
    RetentionTime: float
    RetentionTimeDifference: float
    RetentionTimeDifferenceKey: int
    RetentionTimeOriginal: float
    SampleID: int
    SampleRSD: float
    SaturationRecoveryRatio: float
    SelectedGroupRetentionTime: float
    SelectedTargetRetentionTime: float
    SignalToNoiseRatio: float
    SurrogatePercentRecovery: float
    Symmetry: float
    TargetResponse: float
    TargetResponseOriginal: float
    UserCustomCalculation: float
    UserCustomCalculation1: float
    UserCustomCalculation2: float
    UserCustomCalculation3: float
    UserCustomCalculation4: float
    Width: float

    def IsTargetResponseNull(self) -> bool: ...
    def SetOutlierPurityNull(self) -> None: ...
    def SetOutlierCCResponseRatioNull(self) -> None: ...
    def IsNoiseRegionsNull(self) -> bool: ...
    def SetOutlierResolutionRearNull(self) -> None: ...
    def IsMatrixSpikePercentDeviationNull(self) -> bool: ...
    def IsUserCustomCalculation2Null(self) -> bool: ...
    def IsOutlierMassAccuracyNull(self) -> bool: ...
    def IsOutlierResolutionRearNull(self) -> bool: ...
    def SetUserCustomCalculation4Null(self) -> None: ...
    def IsOutlierPurityNull(self) -> bool: ...
    def IsFullWidthHalfMaximumNull(self) -> bool: ...
    def IsResolutionFrontNull(self) -> bool: ...
    def SetOutlierSaturationRecoveryNull(self) -> None: ...
    def IsOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> bool: ...
    def IsSelectedGroupRetentionTimeNull(self) -> bool: ...
    def IsOutlierBelowLimitOfDetectionNull(self) -> bool: ...
    def IsBaselineDrawNull(self) -> bool: ...
    def SetWidthNull(self) -> None: ...
    def IsOutlierRetentionTimeNull(self) -> bool: ...
    def SetResponseRatioNull(self) -> None: ...
    def SetAreaNull(self) -> None: ...
    def SetFinalConcentrationNull(self) -> None: ...
    def IsAlternativeTargetHitNull(self) -> bool: ...
    def IsOutlierCCRetentionTimeNull(self) -> bool: ...
    def IsOutlierOutOfCalibrationRangeNull(self) -> bool: ...
    def IsOutlierSymmetryNull(self) -> bool: ...
    def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
    def IsOutlierBlankConcentrationOutsideLimitNull(self) -> bool: ...
    def SetHeightNull(self) -> None: ...
    def IsOutlierAccuracyNull(self) -> bool: ...
    def SetRetentionTimeDifferenceKeyNull(self) -> None: ...
    def IsOutlierSurrogateOutOfLimitsNull(self) -> bool: ...
    def SetOutlierQCLCSRecoveryOutOfLimitsNull(self) -> None: ...
    def SetOutlierBlankConcentrationOutsideLimitNull(self) -> None: ...
    def IsRetentionTimeOriginalNull(self) -> bool: ...
    def SetSignalToNoiseRatioNull(self) -> None: ...
    def SetOutlierSymmetryNull(self) -> None: ...
    def IsCCResponseRatioNull(self) -> bool: ...
    def SetFullWidthHalfMaximumNull(self) -> None: ...
    def SetOutlierIntegrationQualityMetricNull(self) -> None: ...
    def IsFinalConcentrationNull(self) -> bool: ...
    def SetIntegrationStartTimeNull(self) -> None: ...
    def SetUserCustomCalculation1Null(self) -> None: ...
    def SetOutlierMassAccuracyNull(self) -> None: ...
    def SetISTDConcentrationRatioNull(self) -> None: ...
    def SetOutlierMatrixSpikeGroupRecoveryNull(self) -> None: ...
    def IsOutlierSaturationRecoveryNull(self) -> bool: ...
    def IsMassSpacingScoreNull(self) -> bool: ...
    def IsNoiseNull(self) -> bool: ...
    def SetAlternativeTargetHitNull(self) -> None: ...
    def SetOutlierAccuracyNull(self) -> None: ...
    def SetResolutionFrontNull(self) -> None: ...
    def SetOutlierQCOutsideRSDNull(self) -> None: ...
    def IsMassAbundanceScoreNull(self) -> bool: ...
    def IsOutlierRelativeRetentionTimeNull(self) -> bool: ...
    def IsCapacityFactorNull(self) -> bool: ...
    def SetMassAccuracyScoreNull(self) -> None: ...
    def SetOutlierQCOutOfLimitsNull(self) -> None: ...
    def IsOutlierISTDResponsePercentDeviationNull(self) -> bool: ...
    def IsOutlierMatrixSpikePercentRecoveryNull(self) -> bool: ...
    def SetMassSpacingScoreNull(self) -> None: ...
    def GetQualifierPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow]: ...
    def SetRelativeRetentionTimeNull(self) -> None: ...
    def IsOutlierSurrogatePercentRecoveryNull(self) -> bool: ...
    def SetOutlierISTDResponseNull(self) -> None: ...
    def SetMatrixSpikePercentDeviationNull(self) -> None: ...
    def IsRetentionTimeDifferenceKeyNull(self) -> bool: ...
    def SetOutlierCapacityFactorNull(self) -> None: ...
    def SetBaselineStandardDeviationNull(self) -> None: ...
    def SetPlatesNull(self) -> None: ...
    def IsUserCustomCalculation4Null(self) -> bool: ...
    def IsBaselineStartOriginalNull(self) -> bool: ...
    def IsBaselineEndOriginalNull(self) -> bool: ...
    def SetOutlierQValueNull(self) -> None: ...
    def IsPlatesNull(self) -> bool: ...
    def IsResolutionRearNull(self) -> bool: ...
    def SetAccuracyNull(self) -> None: ...
    def SetIntegrationStartTimeOriginalNull(self) -> None: ...
    def SetOutlierBelowLimitOfQuantitationNull(self) -> None: ...
    def IsOutlierCapacityFactorNull(self) -> bool: ...
    def IsRelativeRetentionTimeNull(self) -> bool: ...
    def SetIntegrationQualityMetricNull(self) -> None: ...
    def IsOutlierIntegrationQualityMetricNull(self) -> bool: ...
    def IsWidthNull(self) -> bool: ...
    def IsOutlierMatrixSpikeGroupRecoveryNull(self) -> bool: ...
    def SetBaselineStartOriginalNull(self) -> None: ...
    def SetTargetResponseNull(self) -> None: ...
    def IsTargetResponseOriginalNull(self) -> bool: ...
    def IsOutlierSignalToNoiseRatioBelowLimitNull(self) -> bool: ...
    def IsAlternativePeakRTDiffNull(self) -> bool: ...
    def IsOutlierQCOutOfLimitsNull(self) -> bool: ...
    def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
    def SetManuallyIntegratedNull(self) -> None: ...
    def IsAccuracyNull(self) -> bool: ...
    def IsQValueComputedNull(self) -> bool: ...
    def SetOutlierSurrogateOutOfLimitsNull(self) -> None: ...
    def IsPurityNull(self) -> bool: ...
    def IsSampleRSDNull(self) -> bool: ...
    def IsOutlierLibraryMatchScoreNull(self) -> bool: ...
    def SetIntegrationEndTimeOriginalNull(self) -> None: ...
    def IsAreaCorrectionResponseNull(self) -> bool: ...
    def IsSignalToNoiseRatioNull(self) -> bool: ...
    def IsOutlierPlatesNull(self) -> bool: ...
    def SetCapacityFactorNull(self) -> None: ...
    def SetEstimatedConcentrationNull(self) -> None: ...
    def SetReferenceLibraryMatchScoreNull(self) -> None: ...
    def IsSaturationRecoveryRatioNull(self) -> bool: ...
    def IsOutlierCCISTDResponseRatioNull(self) -> bool: ...
    def IsUserCustomCalculation1Null(self) -> bool: ...
    def IsIntegrationStartTimeNull(self) -> bool: ...
    def SetAreaCorrectionResponseNull(self) -> None: ...
    def IsBaselineStartNull(self) -> bool: ...
    def SetOutlierOutOfCalibrationRangeNull(self) -> None: ...
    def SetSelectedGroupRetentionTimeNull(self) -> None: ...
    def IsOutlierCCResponseRatioNull(self) -> bool: ...
    def SetQValueComputedNull(self) -> None: ...
    def IsOutlierBelowLimitOfQuantitationNull(self) -> bool: ...
    def IsCCISTDResponseRatioNull(self) -> bool: ...
    def IsOutlierQValueNull(self) -> bool: ...
    def SetOutlierSurrogatePercentRecoveryNull(self) -> None: ...
    def SetCCISTDResponseRatioNull(self) -> None: ...
    def SetOutlierMatrixSpikePercentRecoveryNull(self) -> None: ...
    def IsOutlierMatrixSpikeOutOfLimitsNull(self) -> bool: ...
    def SetRetentionTimeOriginalNull(self) -> None: ...
    def SetRetentionTimeNull(self) -> None: ...
    def SetMZNull(self) -> None: ...
    def SetNoiseNull(self) -> None: ...
    def IsOutlierSampleAmountOutOfLimitsNull(self) -> bool: ...
    def SetPurityNull(self) -> None: ...
    def SetISTDResponsePercentDeviationNull(self) -> None: ...
    def SetMatrixSpikePercentRecoveryNull(self) -> None: ...
    def SetQValueSortNull(self) -> None: ...
    def IsSelectedTargetRetentionTimeNull(self) -> bool: ...
    def SetBaselineEndOriginalNull(self) -> None: ...
    def SetSampleRSDNull(self) -> None: ...
    def SetIntegrationEndTimeNull(self) -> None: ...
    def IsOutlierMassMatchScoreNull(self) -> bool: ...
    def SetSurrogatePercentRecoveryNull(self) -> None: ...
    def SetUserCustomCalculation2Null(self) -> None: ...
    def SetRetentionTimeDifferenceNull(self) -> None: ...
    def IsQValueSortNull(self) -> bool: ...
    def SetOutlierBelowLimitOfDetectionNull(self) -> None: ...
    def SetCCResponseRatioNull(self) -> None: ...
    def IsISTDResponsePercentDeviationNull(self) -> bool: ...
    def IsUserCustomCalculation3Null(self) -> bool: ...
    def SetAlternativePeakRTDiffNull(self) -> None: ...
    def SetOutlierResolutionFrontNull(self) -> None: ...
    def IsBaselineEndNull(self) -> bool: ...
    def SetOutlierLibraryMatchScoreNull(self) -> None: ...
    def IsOutlierQCOutsideRSDNull(self) -> bool: ...
    def IsOutlierQCLCSRecoveryOutOfLimitsNull(self) -> bool: ...
    def IsHeightNull(self) -> bool: ...
    def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
    def IsBaselineStandardDeviationNull(self) -> bool: ...
    def IsIntegrationEndTimeNull(self) -> bool: ...
    def SetMassAccuracyNull(self) -> None: ...
    def IsMatrixSpikePercentRecoveryNull(self) -> bool: ...
    def SetOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> None: ...
    def IsManuallyIntegratedNull(self) -> bool: ...
    def IsResponseRatioNull(self) -> bool: ...
    def SetNoiseRegionsNull(self) -> None: ...
    def IsOutlierResolutionFrontNull(self) -> bool: ...
    def SetSymmetryNull(self) -> None: ...
    def SetMassMatchScoreNull(self) -> None: ...
    def SetOutlierISTDResponsePercentDeviationNull(self) -> None: ...
    def IsMassAccuracyScoreNull(self) -> bool: ...
    def IsRetentionIndexNull(self) -> bool: ...
    def IsISTDConcentrationRatioNull(self) -> bool: ...
    def IsOutlierISTDResponseNull(self) -> bool: ...
    def IsMZNull(self) -> bool: ...
    def IsMassAccuracyNull(self) -> bool: ...
    def SetGroupNumberNull(self) -> None: ...
    def IsMassMatchScoreNull(self) -> bool: ...
    def SetOutlierCCISTDResponseRatioNull(self) -> None: ...
    def SetMassAbundanceScoreNull(self) -> None: ...
    def IsCalculatedConcentrationNull(self) -> bool: ...
    def SetUserCustomCalculationNull(self) -> None: ...
    def SetOutlierRetentionTimeNull(self) -> None: ...
    def IsSymmetryNull(self) -> bool: ...
    def SetSaturationRecoveryRatioNull(self) -> None: ...
    def SetOutlierMassMatchScoreNull(self) -> None: ...
    def SetRetentionIndexNull(self) -> None: ...
    def SetOutlierCCRetentionTimeNull(self) -> None: ...
    def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
    def SetOutlierSampleAmountOutOfLimitsNull(self) -> None: ...
    def SetOutlierSignalToNoiseRatioBelowLimitNull(self) -> None: ...
    def SetTargetResponseOriginalNull(self) -> None: ...
    def SetSelectedTargetRetentionTimeNull(self) -> None: ...
    def IsOutlierFullWidthHalfMaximumNull(self) -> bool: ...
    def IsEstimatedConcentrationNull(self) -> bool: ...
    def IsOutlierSampleOutsideRSDNull(self) -> bool: ...
    def IsRetentionTimeNull(self) -> bool: ...
    def SetOutlierMatrixSpikeOutOfLimitsNull(self) -> None: ...
    def IsReferenceLibraryMatchScoreNull(self) -> bool: ...
    def IsAreaNull(self) -> bool: ...
    def SetCalculatedConcentrationNull(self) -> None: ...
    def SetBaselineStartNull(self) -> None: ...
    def IsISTDResponseRatioNull(self) -> bool: ...
    def SetOutlierSampleOutsideRSDNull(self) -> None: ...
    def GetTargetCompoundRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def IsSurrogatePercentRecoveryNull(self) -> bool: ...
    def IsUserCustomCalculationNull(self) -> bool: ...
    def SetBaselineDrawNull(self) -> None: ...
    def SetOutlierFullWidthHalfMaximumNull(self) -> None: ...
    def IsGroupNumberNull(self) -> bool: ...
    def SetOutlierRelativeRetentionTimeNull(self) -> None: ...
    def SetISTDResponseRatioNull(self) -> None: ...
    def SetOutlierPlatesNull(self) -> None: ...
    def IsIntegrationQualityMetricNull(self) -> bool: ...
    def SetResolutionRearNull(self) -> None: ...
    def SetBaselineEndNull(self) -> None: ...
    def IsRetentionTimeDifferenceNull(self) -> bool: ...
    def SetUserCustomCalculation3Null(self) -> None: ...

class IProcessTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    Arguments: str
    CreateNoWindow: Optional[bool]
    Domain: str
    ErrorDialog: Optional[bool]
    FileName: str
    Guid: System.Guid
    LoadUserProfile: Optional[bool]
    Name: str
    Password: str
    UseShellExecute: Optional[bool]
    UserName: str
    Verb: str
    Wait: Optional[bool]
    WorkingDirectory: str

class IQuantDataSet(object):  # Interface
    BatchProperties: System.Data.PropertyCollection  # readonly
    BatchRowCount: int  # readonly
    BatchTable: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchTable
    )  # readonly
    CalibrationRowCount: int  # readonly
    ColumnEventsDisabled: bool
    NumberFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat
    )  # readonly
    PeakQualifierRowCount: int  # readonly
    PeakRowCount: int  # readonly
    TargetCompoundRowCount: int  # readonly
    TargetQualifierRowCount: int  # readonly

    def GetPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
    def CreateCalibrationRowForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def GetBatchRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow]: ...
    def GetCalibrationRowsForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def FindBatchRow(
        self, batchID: int, sampleID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
    def FindCalibrationRow(
        self, batchID: int, sampleID: int, compoundID: int, levelID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def FindPrimaryPeakRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def FindRelatedISTDCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def GetCalibrationRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def GetPeakQualifierRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow]: ...
    def GetTargetCompoundRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
    ]: ...
    def GetTargetQualifierRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
    ]: ...
    def FindPeakRow(
        self, batchID: int, sampleID: int, compoundID: int, peakID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def DeleteAllCalibrationRows(self) -> None: ...
    def FindPeakQualifierRow(
        self,
        batchID: int,
        sampleID: int,
        compoundID: int,
        qualifierID: int,
        peakID: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow: ...
    def GetCalReferenceForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def FindTargetQualifierRow(
        self, batchID: int, sampleID: int, compoundID: int, qualifierID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
    def FindTargetCompoundRow(
        self, batchID: int, sampleID: int, compoundID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...

class IReportGraphics(System.IDisposable):  # Interface
    def GenerateIonTrace(
        self,
        type: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType,
        keys: List[Any],
        outputFile: str,
        log: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsLog,
    ) -> None: ...
    def Generate(
        self,
        parameters: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsParameters,
        type: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType,
        keys: List[Any],
        outputFile: str,
        log: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsLog,
    ) -> None: ...
    def SetContext(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        instrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType,
        applicationType: str,
        formats: NumberFormats,
    ) -> None: ...

class IReportGraphicsGenerator(System.IDisposable):  # Interface
    CancelEventName: str
    Graphics: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphics
    IonTraceFiles: bool
    Log: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsLog
    NoGraphics: bool
    Parameters: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsParameters
    )
    Progress: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsProgress
    ReporterName: str

    def SetContext(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...
    def Generate(
        self, batchId: int, outputDirectory: str, outputFileName: str
    ) -> None: ...

class IReportGraphicsLog(System.IDisposable):  # Interface
    def WriteLog(
        self,
        level: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultsLogLevel,
        format: str,
        args: List[Any],
    ) -> None: ...

class IReportGraphicsParameters(System.IDisposable):  # Interface
    AllowOverwrite: bool
    BackColor: System.Drawing.Color  # readonly
    BorderColor: System.Drawing.Color  # readonly

    def GetSampleRangeX(
        self, name: str
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def GetSampleRangeY(
        self, name: str
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def SetContext(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...
    def SkipGraphics(
        self,
        graphicsType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType,
    ) -> bool: ...
    def GetGraphicsSize(
        self,
        graphicsType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType,
        keys: List[Any],
    ) -> System.Drawing.SizeF: ...
    def GetCompoundRangeX(
        self, name: str
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def GetCompoundRangeY(
        self, name: str
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def GetSpectrumRangeX(
        self, name: str
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...

class IReportGraphicsProgress(object):  # Interface
    def Step(self) -> None: ...
    def SetMessage(self, message: str) -> None: ...
    def SetMaxSteps(self, maximum: int) -> None: ...

class IReportGraphicsTask(
    IQueuedTask, System.Xml.Serialization.IXmlSerializable, System.IDisposable
):  # Interface
    BatchFile: str
    BatchFolder: str
    FixedGraphicsFile: str
    GenerateGraphicsFiles: bool
    GraphicsSettingsFile: str
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    OutputPath: str
    ReporterName: str

class IScanElement(object):  # Interface
    CellAcceleratorVoltage: Optional[float]  # readonly
    CollisionEnergy: float  # readonly
    DeltaEMV: Optional[float]  # readonly
    DwellTime: Optional[float]  # readonly
    FragmentorVoltage: float  # readonly
    Gain: Optional[float]  # readonly
    Index: int  # readonly
    IonPolarity: IonPolarity  # readonly
    IonSource: str  # readonly
    Ms1Res: str  # readonly
    Ms2Res: str  # readonly
    ScanSegmentIndex: int  # readonly
    ScanType: MSScanType  # readonly

class IScriptableBatch(object):  # Interface
    def _OnBatchAnalysisStarting(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...
    def _OnBatchLoaded(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...
    def _OnBatchAnalyzed(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...

class IScriptableCompound(object):  # Interface
    def _OnCompoundCalibrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        average: bool,
    ) -> None: ...
    def _OnCompoundQuantitated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _IgnoreQuantitationErrors(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        manuallyIntegrated: bool,
    ) -> bool: ...
    def _OnCompoundIntegrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundQuantitationFailed(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundIntegrated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundCalibrated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        average: bool,
    ) -> None: ...
    def _IgnorePeakNotFoundException(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        e: System.ApplicationException,
        manuallyIntegrated: bool,
    ) -> bool: ...
    def _OnCompoundQuantitationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class IScriptableOutlier(object):  # Interface
    def _GetCompoundList(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ]: ...

class IScriptableQualifierIon(object):  # Interface
    def _OnManualIntegrationStarting(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
        xStart: float,
        xEnd: float,
        yStart: float,
        yEnd: float,
    ) -> None: ...
    def _OnManualIntegrationCompleted(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksCompleted(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksStarting(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...

class IScriptableQuantifierIon(object):  # Interface
    def _OnManualIntegrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
        xStart: float,
        xEnd: float,
        yStart: float,
        yEnd: float,
    ) -> None: ...
    def _OnManualIntegrationCompleted(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksCompleted(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class IScriptableSample(object):  # Interface
    def _OnSampleIntegrationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleIntegrated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleCalibrationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        average: bool,
    ) -> None: ...
    def _OnSampleCalibrated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        average: bool,
    ) -> None: ...
    def _OnSampleQuantitated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleQuantitationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...

class ISingleCompoundScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement
):  # Interface
    CompoundGroup: str  # readonly
    CompoundName: str  # readonly
    IsISTD: bool  # readonly

class ISpectrumReader(System.IDisposable):  # Interface
    CompressedByteCount: int
    FileOffset: int

    @overload
    def Read(self, array: List[int]) -> None: ...
    @overload
    def Read(self, array: List[int]) -> None: ...
    @overload
    def Read(self, array: List[float]) -> None: ...
    @overload
    def Read(self, array: List[float]) -> None: ...
    def ReadInt32(self) -> int: ...
    def ReadBytes(self, count: int) -> List[int]: ...
    def ReadSingle(self) -> float: ...
    def ReadDouble(self) -> float: ...

class ITargetCompoundRow(object):  # Interface
    AccuracyLimitMultiplierLOQ: float
    AccuracyMaximumPercentDeviation: float
    AgilentID: str
    AlternativePeakCriteria: str
    AlternativePeakID: int
    AreaCorrectionFactor: float
    AreaCorrectionMZ: float
    AreaCorrectionSelectedMZ: float
    AverageRelativeRetentionTime: float
    AverageResponseFactor: float
    AverageResponseFactorRSD: float
    BatchID: int
    BlankResponseOffset: float
    CASNumber: str
    CCISTDResponseRatioLimitHigh: float
    CCISTDResponseRatioLimitLow: float
    CCResponseRatioLimitHigh: float
    CCResponseRatioLimitLow: float
    CalibrationRangeFilter: str
    CalibrationReferenceCompoundID: int
    CapacityFactorLimit: float
    CellAcceleratorVoltage: float
    CoelutionScoreLimit: float
    CollisionEnergy: float
    CollisionEnergyDelta: float
    ColumnVoidTime: float
    CompoundApproved: bool
    CompoundGroup: str
    CompoundID: int
    CompoundMath: str
    CompoundName: str
    CompoundType: str
    ConcentrationUnits: str
    CurveFit: str
    CurveFitFormula: str
    CurveFitLimitHigh: float
    CurveFitLimitLow: float
    CurveFitMinimumR2: float
    CurveFitOrigin: str
    CurveFitR2: float
    CurveFitStatus: str
    CurveFitWeight: str
    DilutionHighestConcentration: float
    DilutionPattern: str
    DynamicTargetCompoundID: int
    DynamicTargetRank: int
    ExpectedConcentration: float
    FragmentorVoltage: float
    FragmentorVoltageDelta: float
    FullWidthHalfMaximumLimitHigh: float
    FullWidthHalfMaximumLimitLow: float
    GraphicPeakChromatogram: str
    GraphicPeakQualifiers: str
    GraphicPeakSpectrum: str
    GraphicTargetCompoundCalibration: str
    ID: int
    ISTDCompoundID: int
    ISTDConcentration: float
    ISTDFlag: bool
    ISTDResponseLimitHigh: float
    ISTDResponseLimitLow: float
    ISTDResponseMaximumPercentDeviation: float
    ISTDResponseMinimumPercentDeviation: float
    IntegrationParameters: str
    IntegrationParametersModified: bool
    Integrator: str
    IonPolarity: str
    IonSource: str
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    KEGGID: str
    LeftRetentionTimeDelta: float
    LibraryMatchScore: float
    LibraryMatchScoreMinimum: float
    LibraryRetentionIndex: float
    LibraryRetentionTime: float
    LimitOfDetection: float
    LimitOfQuantitation: float
    LinearResponseRangeMax: float
    LinearResponseRangeMin: float
    MZ: float
    MZAdditional: str
    MZExtractionWindowFilterLeft: float
    MZExtractionWindowFilterRight: float
    MZExtractionWindowUnits: str
    MZScanRangeHigh: float
    MZScanRangeLow: float
    MassAccuracyLimit: float
    MassMatchScoreMinimum: float
    MatrixAConcentrationLimitHigh: float
    MatrixAConcentrationLimitLow: float
    MatrixBConcentrationLimitHigh: float
    MatrixBConcentrationLimitLow: float
    MatrixSpikeBConcentration: float
    MatrixSpikeBMaximumPercentDeviation: float
    MatrixSpikeBPercentRecoveryMaximum: float
    MatrixSpikeBPercentRecoveryMinimum: float
    MatrixSpikeConcentration: float
    MatrixSpikeMaximumPercentDeviation: float
    MatrixSpikePercentRecoveryMaximum: float
    MatrixSpikePercentRecoveryMinimum: float
    MatrixTypeOverride: str
    MaximumAverageResponseFactorRSD: float
    MaximumBlankConcentration: float
    MaximumBlankResponse: float
    MaximumCCResponseFactorDeviation: float
    MaximumNumberOfHits: int
    MaximumPercentResidual: float
    MethodDetectionLimit: float
    MinimumAverageResponseFactor: float
    MinimumCCRelativeResponseFactor: float
    MinimumPercentPurity: float
    MinimumSignalToNoiseRatio: float
    MolecularFormula: str
    Multiplier: float
    NeutralLossGain: float
    NoiseAlgorithmType: str
    NoiseOfRawSignal: float
    NoiseReference: str
    NoiseRegions: str
    NoiseStandardDeviationMultiplier: float
    NonReferenceWindowOverride: float
    OutlierAlternativePeak: str
    OutlierAverageResponseFactor: str
    OutlierAverageResponseFactorRSD: str
    OutlierBlankResponseOutsideLimit: str
    OutlierCCAverageResponseFactor: str
    OutlierCCRelativeResponseFactor: str
    OutlierCustomCalculation: str
    OutlierMethodDetectionLimit: str
    OutlierMinimumCurveFitR2: str
    OutlierPeakNotFound: str
    OutlierRelativeResponseFactor: str
    OutlierRelativeStandardError: str
    OutlierResponseCheckBelowLimit: str
    OutlierResponseFactor: str
    PeakFilterThreshold: str
    PeakFilterThresholdValue: float
    PeakSelectionCriterion: str
    PlatesCalculationType: str
    PlatesLimit: int
    PrimaryHitPeakID: int
    QCLCSMaximumRecoveryA: float
    QCLCSMaximumRecoveryB: float
    QCLCSMinimumRecoveryA: float
    QCLCSMinimumRecoveryB: float
    QCMaximumDeviation: float
    QCMaximumPercentRSD: float
    QValueMinimum: int
    QualifierRatioMethod: int
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    QuantitateByHeight: bool
    QuantitationMessage: str
    ReferenceMSPathName: str
    ReferenceWindowOverride: float
    RelativeISTDMultiplier: float
    RelativeResponseFactorMaximumPercentDeviation: float
    RelativeRetentionTimeMaximumPercentDeviation: float
    RelativeStandardError: float
    RelativeStandardErrorMaximum: float
    ResolutionCalculationType: str
    ResolutionLimit: float
    ResponseCheckMinimum: float
    ResponseFactorMaximumPercentDeviation: float
    RetentionIndex: float
    RetentionTime: float
    RetentionTimeDeltaUnits: str
    RetentionTimeWindow: float
    RetentionTimeWindowCC: float
    RetentionTimeWindowUnits: str
    RightRetentionTimeDelta: float
    RxUnlabeledIsotopicDilution: float
    RyLabeledIsotopicDilution: float
    SampleAmountLimitHigh: float
    SampleAmountLimitLow: float
    SampleID: int
    SampleMaximumPercentRSD: float
    ScanType: str
    SelectedMZ: float
    SignalInstance: int
    SignalName: str
    SignalRetentionTimeOffset: float
    SignalToNoiseMultiplier: float
    SignalType: str
    Smoothing: str
    SmoothingFunctionWidth: int
    SmoothingGaussianWidth: float
    Species: str
    SpectrumBaselineThreshold: float
    SpectrumExtractionOverride: str
    SpectrumPeakHeightPercentThreshold: float
    SpectrumPercentSaturationThreshold: float
    SpectrumQuantifierQualifierOnly: bool
    SpectrumScanInclusion: str
    Sublist: bool
    SurrogateConcentration: float
    SurrogateConcentrationLimitHigh: float
    SurrogateConcentrationLimitLow: float
    SurrogatePercentRecoveryMaximum: float
    SurrogatePercentRecoveryMinimum: float
    SymmetryCalculationType: str
    SymmetryLimitHigh: float
    SymmetryLimitLow: float
    TargetCompoundIDStatus: str
    ThresholdNumberOfPeaks: int
    TimeReferenceFlag: bool
    TimeSegment: int
    Transition: str
    TriggeredTransitions: str
    UncertaintyRelativeOrAbsolute: str
    UserAnnotation: str
    UserCustomCalculation: float
    UserCustomCalculationLimitHigh: float
    UserCustomCalculationLimitLow: float
    UserDefined: str
    UserDefined1: str
    UserDefined2: str
    UserDefined3: str
    UserDefined4: str
    UserDefined5: str
    UserDefined6: str
    UserDefined7: str
    UserDefined8: str
    UserDefined9: str
    UserDefinedTargetCompoundID: int
    WavelengthExtractionRangeHigh: float
    WavelengthExtractionRangeLow: float
    WavelengthReferenceRangeHigh: float
    WavelengthReferenceRangeLow: float

    def SetUserCustomCalculationLimitLowNull(self) -> None: ...
    def IsAgilentIDNull(self) -> bool: ...
    def IsLinearResponseRangeMinNull(self) -> bool: ...
    def SetUserDefined1Null(self) -> None: ...
    def IsTargetCompoundIDStatusNull(self) -> bool: ...
    def SetOutlierAlternativePeakNull(self) -> None: ...
    def IsOutlierResponseCheckBelowLimitNull(self) -> bool: ...
    def SetNoiseReferenceNull(self) -> None: ...
    def IsMatrixBConcentrationLimitHighNull(self) -> bool: ...
    def SetQualifierRatioMethodNull(self) -> None: ...
    def IsCASNumberNull(self) -> bool: ...
    def SetSignalRetentionTimeOffsetNull(self) -> None: ...
    def SetLibraryRetentionTimeNull(self) -> None: ...
    def SetDynamicTargetCompoundIDNull(self) -> None: ...
    def SetRelativeRetentionTimeMaximumPercentDeviationNull(self) -> None: ...
    def SetSurrogatePercentRecoveryMaximumNull(self) -> None: ...
    def SetAccuracyLimitMultiplierLOQNull(self) -> None: ...
    def AddCalRow(
        self,
        calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
    ) -> None: ...
    def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
    def SetWavelengthExtractionRangeLowNull(self) -> None: ...
    def IsUserCustomCalculationLimitHighNull(self) -> bool: ...
    def IsWavelengthExtractionRangeLowNull(self) -> bool: ...
    def IsQCMaximumPercentRSDNull(self) -> bool: ...
    def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
    def SetCapacityFactorLimitNull(self) -> None: ...
    def IsSignalToNoiseMultiplierNull(self) -> bool: ...
    def SetIntegratorNull(self) -> None: ...
    def SetCurveFitR2Null(self) -> None: ...
    def SetMinimumCCRelativeResponseFactorNull(self) -> None: ...
    def IsMatrixSpikeBConcentrationNull(self) -> bool: ...
    def SetMaximumAverageResponseFactorRSDNull(self) -> None: ...
    def IsUserDefined8Null(self) -> bool: ...
    def IsISTDResponseLimitHighNull(self) -> bool: ...
    def SetOutlierResponseCheckBelowLimitNull(self) -> None: ...
    def SetQCLCSMinimumRecoveryBNull(self) -> None: ...
    def SetDilutionHighestConcentrationNull(self) -> None: ...
    def IsCurveFitMinimumR2Null(self) -> bool: ...
    def IsCurveFitLimitLowNull(self) -> bool: ...
    def IsNoiseAlgorithmTypeNull(self) -> bool: ...
    def SetMinimumAverageResponseFactorNull(self) -> None: ...
    def IsNeutralLossGainNull(self) -> bool: ...
    def SetLeftRetentionTimeDeltaNull(self) -> None: ...
    def IsQCLCSMinimumRecoveryANull(self) -> bool: ...
    def SetOutlierCCAverageResponseFactorNull(self) -> None: ...
    def IsLimitOfQuantitationNull(self) -> bool: ...
    def IsISTDConcentrationNull(self) -> bool: ...
    def IsCurveFitLimitHighNull(self) -> bool: ...
    def SetBlankResponseOffsetNull(self) -> None: ...
    def SetMolecularFormulaNull(self) -> None: ...
    def IsSpectrumQuantifierQualifierOnlyNull(self) -> bool: ...
    def SetSurrogateConcentrationLimitLowNull(self) -> None: ...
    def IsSurrogateConcentrationLimitHighNull(self) -> bool: ...
    def IsMZExtractionWindowUnitsNull(self) -> bool: ...
    def SetNoiseAlgorithmTypeNull(self) -> None: ...
    def SetWavelengthReferenceRangeLowNull(self) -> None: ...
    def SetMatrixSpikeMaximumPercentDeviationNull(self) -> None: ...
    def SetFullWidthHalfMaximumLimitLowNull(self) -> None: ...
    def SetLimitOfDetectionNull(self) -> None: ...
    def IsDilutionHighestConcentrationNull(self) -> bool: ...
    def SetQCLCSMinimumRecoveryANull(self) -> None: ...
    def IsDynamicTargetRankNull(self) -> bool: ...
    def SetSignalToNoiseMultiplierNull(self) -> None: ...
    def IsSignalInstanceNull(self) -> bool: ...
    def IsLibraryMatchScoreMinimumNull(self) -> bool: ...
    def SetMZExtractionWindowUnitsNull(self) -> None: ...
    def SetMaximumBlankConcentrationNull(self) -> None: ...
    def SetReferenceMSPathNameNull(self) -> None: ...
    def SetMinimumSignalToNoiseRatioNull(self) -> None: ...
    def SetNonReferenceWindowOverrideNull(self) -> None: ...
    def SetOutlierCCRelativeResponseFactorNull(self) -> None: ...
    def IsMatrixSpikeBPercentRecoveryMaximumNull(self) -> bool: ...
    def IsCollisionEnergyDeltaNull(self) -> bool: ...
    def IsOutlierAverageResponseFactorRSDNull(self) -> bool: ...
    def IsQCLCSMaximumRecoveryANull(self) -> bool: ...
    def IsTimeSegmentNull(self) -> bool: ...
    def SetMaximumBlankResponseNull(self) -> None: ...
    def SetResolutionCalculationTypeNull(self) -> None: ...
    def IsIntegrationParametersNull(self) -> bool: ...
    def IsMZScanRangeHighNull(self) -> bool: ...
    def SetCollisionEnergyNull(self) -> None: ...
    def IsNoiseStandardDeviationMultiplierNull(self) -> bool: ...
    def SetMassMatchScoreMinimumNull(self) -> None: ...
    def SetQCMaximumDeviationNull(self) -> None: ...
    def IsTimeReferenceFlagNull(self) -> bool: ...
    def IsGraphicTargetCompoundCalibrationNull(self) -> bool: ...
    def IsAreaCorrectionMZNull(self) -> bool: ...
    def IsDilutionPatternNull(self) -> bool: ...
    def IsCurveFitFormulaNull(self) -> bool: ...
    def SetSmoothingNull(self) -> None: ...
    def SetSpectrumBaselineThresholdNull(self) -> None: ...
    def IsPlatesLimitNull(self) -> bool: ...
    def IsMatrixSpikePercentRecoveryMaximumNull(self) -> bool: ...
    def SetISTDCompoundIDNull(self) -> None: ...
    def IsOutlierRelativeStandardErrorNull(self) -> bool: ...
    def SetRelativeStandardErrorNull(self) -> None: ...
    def IsUncertaintyRelativeOrAbsoluteNull(self) -> bool: ...
    def SetCurveFitFormulaNull(self) -> None: ...
    def SetSurrogateConcentrationNull(self) -> None: ...
    def IsSymmetryCalculationTypeNull(self) -> bool: ...
    def IsCompoundApprovedNull(self) -> bool: ...
    def SetSpeciesNull(self) -> None: ...
    def SetCurveFitLimitLowNull(self) -> None: ...
    def IsMinimumAverageResponseFactorNull(self) -> bool: ...
    def IsTriggeredTransitionsNull(self) -> bool: ...
    def IsUserDefined4Null(self) -> bool: ...
    def IsThresholdNumberOfPeaksNull(self) -> bool: ...
    def SetSampleAmountLimitLowNull(self) -> None: ...
    def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
    def IsCompoundTypeNull(self) -> bool: ...
    def IsSymmetryLimitHighNull(self) -> bool: ...
    def SetMatrixSpikeBPercentRecoveryMaximumNull(self) -> None: ...
    def SetUserDefined9Null(self) -> None: ...
    def SetNoiseOfRawSignalNull(self) -> None: ...
    def IsOutlierBlankResponseOutsideLimitNull(self) -> bool: ...
    def SetMatrixSpikePercentRecoveryMaximumNull(self) -> None: ...
    def IsCompoundGroupNull(self) -> bool: ...
    def SetLinearResponseRangeMinNull(self) -> None: ...
    def IsMatrixSpikePercentRecoveryMinimumNull(self) -> bool: ...
    def SetSpectrumQuantifierQualifierOnlyNull(self) -> None: ...
    def IsUserDefinedTargetCompoundIDNull(self) -> bool: ...
    def IsFullWidthHalfMaximumLimitLowNull(self) -> bool: ...
    def IsCurveFitStatusNull(self) -> bool: ...
    def SetCurveFitLimitHighNull(self) -> None: ...
    def SetTransitionNull(self) -> None: ...
    def IsLibraryRetentionTimeNull(self) -> bool: ...
    def SetMethodDetectionLimitNull(self) -> None: ...
    def SetISTDFlagNull(self) -> None: ...
    def SetOutlierPeakNotFoundNull(self) -> None: ...
    def SetMultiplierNull(self) -> None: ...
    def SetCoelutionScoreLimitNull(self) -> None: ...
    def SetDilutionPatternNull(self) -> None: ...
    def IsPeakFilterThresholdValueNull(self) -> bool: ...
    def IsNoiseRegionsNull(self) -> bool: ...
    def IsPrimaryHitPeakIDNull(self) -> bool: ...
    def SetOutlierRelativeStandardErrorNull(self) -> None: ...
    def SetQCLCSMaximumRecoveryBNull(self) -> None: ...
    def IsMatrixAConcentrationLimitHighNull(self) -> bool: ...
    def SetIntegrationParametersModifiedNull(self) -> None: ...
    def SetTimeReferenceFlagNull(self) -> None: ...
    def SetUserDefined4Null(self) -> None: ...
    def IsOutlierMinimumCurveFitR2Null(self) -> bool: ...
    def SetMatrixBConcentrationLimitHighNull(self) -> None: ...
    def SetDynamicTargetRankNull(self) -> None: ...
    def IsLimitOfDetectionNull(self) -> bool: ...
    def SetSpectrumScanInclusionNull(self) -> None: ...
    def SetIonPolarityNull(self) -> None: ...
    def IsOutlierPeakNotFoundNull(self) -> bool: ...
    def SetSignalInstanceNull(self) -> None: ...
    def IsBlankResponseOffsetNull(self) -> bool: ...
    def SetLibraryRetentionIndexNull(self) -> None: ...
    def IsOutlierResponseFactorNull(self) -> bool: ...
    def SetGraphicPeakSpectrumNull(self) -> None: ...
    def IsLibraryRetentionIndexNull(self) -> bool: ...
    def IsMZNull(self) -> bool: ...
    def SetISTDResponseLimitHighNull(self) -> None: ...
    def SetSmoothingFunctionWidthNull(self) -> None: ...
    def IsWavelengthReferenceRangeLowNull(self) -> bool: ...
    def IsOutlierCCRelativeResponseFactorNull(self) -> bool: ...
    def IsAverageResponseFactorNull(self) -> bool: ...
    def GetCalRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def SetAreaCorrectionSelectedMZNull(self) -> None: ...
    def SetTargetCompoundIDStatusNull(self) -> None: ...
    def SetRightRetentionTimeDeltaNull(self) -> None: ...
    def IsMatrixSpikeConcentrationNull(self) -> bool: ...
    def SetQCLCSMaximumRecoveryANull(self) -> None: ...
    def SetCurveFitWeightNull(self) -> None: ...
    def IsAverageRelativeRetentionTimeNull(self) -> bool: ...
    def SetPeakFilterThresholdNull(self) -> None: ...
    def IsIonPolarityNull(self) -> bool: ...
    def SetCASNumberNull(self) -> None: ...
    def IsRetentionTimeWindowCCNull(self) -> bool: ...
    def SetRetentionTimeDeltaUnitsNull(self) -> None: ...
    def IsCapacityFactorLimitNull(self) -> bool: ...
    def SetQuantitationMessageNull(self) -> None: ...
    def SetCompoundNameNull(self) -> None: ...
    def SetMaximumNumberOfHitsNull(self) -> None: ...
    def IsCurveFitNull(self) -> bool: ...
    def IsRetentionTimeNull(self) -> bool: ...
    def SetGraphicPeakQualifiersNull(self) -> None: ...
    def IsCollisionEnergyNull(self) -> bool: ...
    def SetOutlierRelativeResponseFactorNull(self) -> None: ...
    def IsFullWidthHalfMaximumLimitHighNull(self) -> bool: ...
    def IsISTDResponseMaximumPercentDeviationNull(self) -> bool: ...
    def SetCCISTDResponseRatioLimitLowNull(self) -> None: ...
    def GetBatchRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
    def SetOutlierAverageResponseFactorNull(self) -> None: ...
    def IsQualifierRatioMethodNull(self) -> bool: ...
    def SetUserAnnotationNull(self) -> None: ...
    def SetMatrixSpikeConcentrationNull(self) -> None: ...
    def IsSignalRetentionTimeOffsetNull(self) -> bool: ...
    def SetLinearResponseRangeMaxNull(self) -> None: ...
    def IsMinimumPercentPurityNull(self) -> bool: ...
    def SetFullWidthHalfMaximumLimitHighNull(self) -> None: ...
    def IsRxUnlabeledIsotopicDilutionNull(self) -> bool: ...
    def SetCCResponseRatioLimitHighNull(self) -> None: ...
    def SetMZAdditionalNull(self) -> None: ...
    def IsPeakSelectionCriterionNull(self) -> bool: ...
    def SetRelativeStandardErrorMaximumNull(self) -> None: ...
    def IsMatrixSpikeBMaximumPercentDeviationNull(self) -> bool: ...
    def SetRelativeISTDMultiplierNull(self) -> None: ...
    def IsNoiseOfRawSignalNull(self) -> bool: ...
    def SetCompoundApprovedNull(self) -> None: ...
    def IsAccuracyLimitMultiplierLOQNull(self) -> bool: ...
    def IsIntegrationParametersModifiedNull(self) -> bool: ...
    def IsISTDFlagNull(self) -> bool: ...
    def IsDynamicTargetCompoundIDNull(self) -> bool: ...
    def IsKEGGIDNull(self) -> bool: ...
    def SetISTDConcentrationNull(self) -> None: ...
    def SetMZScanRangeHighNull(self) -> None: ...
    def IsSampleMaximumPercentRSDNull(self) -> bool: ...
    def SetTriggeredTransitionsNull(self) -> None: ...
    def DeleteCalRow(
        self,
        calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
    ) -> None: ...
    def IsRetentionIndexNull(self) -> bool: ...
    def SetSpectrumPercentSaturationThresholdNull(self) -> None: ...
    def IsWavelengthExtractionRangeHighNull(self) -> bool: ...
    def IsCCISTDResponseRatioLimitLowNull(self) -> bool: ...
    def IsCCResponseRatioLimitLowNull(self) -> bool: ...
    def SetResponseFactorMaximumPercentDeviationNull(self) -> None: ...
    def SetCurveFitStatusNull(self) -> None: ...
    def SetMatrixBConcentrationLimitLowNull(self) -> None: ...
    def SetSelectedMZNull(self) -> None: ...
    def IsQuantitateByHeightNull(self) -> bool: ...
    def IsMaximumAverageResponseFactorRSDNull(self) -> bool: ...
    def IsOutlierRelativeResponseFactorNull(self) -> bool: ...
    def SetCalibrationRangeFilterNull(self) -> None: ...
    def IsUserDefined7Null(self) -> bool: ...
    def IsSelectedMZNull(self) -> bool: ...
    def IsTransitionNull(self) -> bool: ...
    def IsMatrixTypeOverrideNull(self) -> bool: ...
    def SetMatrixSpikeBMaximumPercentDeviationNull(self) -> None: ...
    def IsSmoothingFunctionWidthNull(self) -> bool: ...
    def SetFragmentorVoltageNull(self) -> None: ...
    def IsOutlierMethodDetectionLimitNull(self) -> bool: ...
    def IsIonSourceNull(self) -> bool: ...
    def SetCCISTDResponseRatioLimitHighNull(self) -> None: ...
    def SetPeakFilterThresholdValueNull(self) -> None: ...
    def SetCurveFitMinimumR2Null(self) -> None: ...
    def IsUserDefined3Null(self) -> bool: ...
    def SetMaximumCCResponseFactorDeviationNull(self) -> None: ...
    def GetQualifierRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
    ]: ...
    def IsConcentrationUnitsNull(self) -> bool: ...
    def SetMatrixSpikePercentRecoveryMinimumNull(self) -> None: ...
    def SetCellAcceleratorVoltageNull(self) -> None: ...
    def SetPrimaryHitPeakIDNull(self) -> None: ...
    def IsMatrixSpikeBPercentRecoveryMinimumNull(self) -> bool: ...
    def SetSpectrumPeakHeightPercentThresholdNull(self) -> None: ...
    def SetCalibrationReferenceCompoundIDNull(self) -> None: ...
    def IsSignalTypeNull(self) -> bool: ...
    def SetIDNull(self) -> None: ...
    def IsQCLCSMinimumRecoveryBNull(self) -> bool: ...
    def IsIntegratorNull(self) -> bool: ...
    def SetAlternativePeakIDNull(self) -> None: ...
    def IsOutlierAlternativePeakNull(self) -> bool: ...
    def SetGraphicTargetCompoundCalibrationNull(self) -> None: ...
    def IsSurrogateConcentrationNull(self) -> bool: ...
    def SetUserDefinedTargetCompoundIDNull(self) -> None: ...
    def IsQCMaximumDeviationNull(self) -> bool: ...
    def SetSurrogatePercentRecoveryMinimumNull(self) -> None: ...
    def IsSmoothingGaussianWidthNull(self) -> bool: ...
    def IsUserCustomCalculationNull(self) -> bool: ...
    def SetUserDefined6Null(self) -> None: ...
    def SetISTDResponseLimitLowNull(self) -> None: ...
    def IsCellAcceleratorVoltageNull(self) -> bool: ...
    def SetOutlierMinimumCurveFitR2Null(self) -> None: ...
    def IsMethodDetectionLimitNull(self) -> bool: ...
    def IsMassAccuracyLimitNull(self) -> bool: ...
    def IsMolecularFormulaNull(self) -> bool: ...
    def IsReferenceWindowOverrideNull(self) -> bool: ...
    def IsSublistNull(self) -> bool: ...
    def IsMaximumBlankResponseNull(self) -> bool: ...
    def SetRetentionTimeWindowUnitsNull(self) -> None: ...
    def IsSpectrumExtractionOverrideNull(self) -> bool: ...
    def IsMaximumBlankConcentrationNull(self) -> bool: ...
    def IsResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
    def IsPlatesCalculationTypeNull(self) -> bool: ...
    def IsISTDResponseLimitLowNull(self) -> bool: ...
    def SetAverageResponseFactorNull(self) -> None: ...
    def SetAgilentIDNull(self) -> None: ...
    def IsAccuracyMaximumPercentDeviationNull(self) -> bool: ...
    def IsMaximumPercentResidualNull(self) -> bool: ...
    def IsGraphicPeakChromatogramNull(self) -> bool: ...
    def IsAreaCorrectionFactorNull(self) -> bool: ...
    def SetMZExtractionWindowFilterRightNull(self) -> None: ...
    def SetAreaCorrectionMZNull(self) -> None: ...
    def SetISTDResponseMaximumPercentDeviationNull(self) -> None: ...
    def IsMZScanRangeLowNull(self) -> bool: ...
    def SetRetentionIndexNull(self) -> None: ...
    def IsQCLCSMaximumRecoveryBNull(self) -> bool: ...
    def SetSymmetryLimitHighNull(self) -> None: ...
    def IsOutlierCustomCalculationNull(self) -> bool: ...
    def IsUserAnnotationNull(self) -> bool: ...
    def SetOutlierResponseFactorNull(self) -> None: ...
    def IsSignalNameNull(self) -> bool: ...
    def SetOutlierCustomCalculationNull(self) -> None: ...
    def IsResponseCheckMinimumNull(self) -> bool: ...
    def SetFragmentorVoltageDeltaNull(self) -> None: ...
    def IsOutlierCCAverageResponseFactorNull(self) -> bool: ...
    def SetQCMaximumPercentRSDNull(self) -> None: ...
    def IsGraphicPeakQualifiersNull(self) -> bool: ...
    def IsColumnVoidTimeNull(self) -> bool: ...
    def IsAlternativePeakIDNull(self) -> bool: ...
    def SetCompoundTypeNull(self) -> None: ...
    def IsFragmentorVoltageDeltaNull(self) -> bool: ...
    def SetPlatesLimitNull(self) -> None: ...
    def GetPrimaryPeakRow(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def IsRelativeISTDMultiplierNull(self) -> bool: ...
    def IsCoelutionScoreLimitNull(self) -> bool: ...
    def IsSmoothingNull(self) -> bool: ...
    def SetSmoothingGaussianWidthNull(self) -> None: ...
    def IsCompoundMathNull(self) -> bool: ...
    def IsQValueMinimumNull(self) -> bool: ...
    def IsCalibrationReferenceCompoundIDNull(self) -> bool: ...
    def IsRelativeStandardErrorNull(self) -> bool: ...
    def IsUserDefined9Null(self) -> bool: ...
    def IsSymmetryLimitLowNull(self) -> bool: ...
    def SetUserDefined7Null(self) -> None: ...
    def SetSymmetryLimitLowNull(self) -> None: ...
    def IsSpectrumPeakHeightPercentThresholdNull(self) -> bool: ...
    def IsAreaCorrectionSelectedMZNull(self) -> bool: ...
    def IsCCISTDResponseRatioLimitHighNull(self) -> bool: ...
    def SetConcentrationUnitsNull(self) -> None: ...
    def IsIDNull(self) -> bool: ...
    def SetSymmetryCalculationTypeNull(self) -> None: ...
    def SetNoiseStandardDeviationMultiplierNull(self) -> None: ...
    def SetOutlierMethodDetectionLimitNull(self) -> None: ...
    def SetCompoundMathNull(self) -> None: ...
    def SetMatrixTypeOverrideNull(self) -> None: ...
    def SetCurveFitNull(self) -> None: ...
    def SetRetentionTimeNull(self) -> None: ...
    def SetMinimumPercentPurityNull(self) -> None: ...
    def SetResolutionLimitNull(self) -> None: ...
    def IsMatrixAConcentrationLimitLowNull(self) -> bool: ...
    def GetCompoundName(self) -> str: ...
    def SetAverageRelativeRetentionTimeNull(self) -> None: ...
    def SetMassAccuracyLimitNull(self) -> None: ...
    def SetUserDefinedNull(self) -> None: ...
    def IsLeftRetentionTimeDeltaNull(self) -> bool: ...
    def IsOutlierAverageResponseFactorNull(self) -> bool: ...
    def IsCurveFitR2Null(self) -> bool: ...
    def IsMatrixBConcentrationLimitLowNull(self) -> bool: ...
    def IsSurrogateConcentrationLimitLowNull(self) -> bool: ...
    def IsUserCustomCalculationLimitLowNull(self) -> bool: ...
    def SetLibraryMatchScoreMinimumNull(self) -> None: ...
    def IsRelativeStandardErrorMaximumNull(self) -> bool: ...
    def IsSpectrumScanInclusionNull(self) -> bool: ...
    def SetPlatesCalculationTypeNull(self) -> None: ...
    def SetResponseCheckMinimumNull(self) -> None: ...
    def SetSurrogateConcentrationLimitHighNull(self) -> None: ...
    def SetMatrixSpikeBConcentrationNull(self) -> None: ...
    def IsSpeciesNull(self) -> bool: ...
    def SetSpectrumExtractionOverrideNull(self) -> None: ...
    def SetThresholdNumberOfPeaksNull(self) -> None: ...
    def SetAreaCorrectionFactorNull(self) -> None: ...
    def SetNoiseRegionsNull(self) -> None: ...
    def IsUserDefined6Null(self) -> bool: ...
    def SetSignalNameNull(self) -> None: ...
    def SetWavelengthExtractionRangeHighNull(self) -> None: ...
    def IsMinimumSignalToNoiseRatioNull(self) -> bool: ...
    def SetUserDefined2Null(self) -> None: ...
    def IsExpectedConcentrationNull(self) -> bool: ...
    def SetUserDefined8Null(self) -> None: ...
    def SetMZScanRangeLowNull(self) -> None: ...
    def SetUserDefined5Null(self) -> None: ...
    def IsRelativeResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
    def IsUserDefined2Null(self) -> bool: ...
    def IsISTDCompoundIDNull(self) -> bool: ...
    def IsSurrogatePercentRecoveryMaximumNull(self) -> bool: ...
    def SetPeakSelectionCriterionNull(self) -> None: ...
    def IsReferenceMSPathNameNull(self) -> bool: ...
    def SetTimeSegmentNull(self) -> None: ...
    def SetIonSourceNull(self) -> None: ...
    def IsMassMatchScoreMinimumNull(self) -> bool: ...
    def SetRelativeResponseFactorMaximumPercentDeviationNull(self) -> None: ...
    def IsSampleAmountLimitHighNull(self) -> bool: ...
    def SetRetentionTimeWindowCCNull(self) -> None: ...
    def IsCalibrationRangeFilterNull(self) -> bool: ...
    def IsGraphicPeakSpectrumNull(self) -> bool: ...
    def IsSpectrumBaselineThresholdNull(self) -> bool: ...
    def IsUserDefined5Null(self) -> bool: ...
    def IsRyLabeledIsotopicDilutionNull(self) -> bool: ...
    def SetMZNull(self) -> None: ...
    def IsResolutionCalculationTypeNull(self) -> bool: ...
    def IsSpectrumPercentSaturationThresholdNull(self) -> bool: ...
    def IsCurveFitWeightNull(self) -> bool: ...
    def SetScanTypeNull(self) -> None: ...
    def SetRyLabeledIsotopicDilutionNull(self) -> None: ...
    def IsISTDResponseMinimumPercentDeviationNull(self) -> bool: ...
    def SetAverageResponseFactorRSDNull(self) -> None: ...
    def IsRelativeRetentionTimeMaximumPercentDeviationNull(self) -> bool: ...
    def IsSurrogatePercentRecoveryMinimumNull(self) -> bool: ...
    def IsFragmentorVoltageNull(self) -> bool: ...
    def IsUserDefinedNull(self) -> bool: ...
    def IsCCResponseRatioLimitHighNull(self) -> bool: ...
    def IsUserDefined1Null(self) -> bool: ...
    def SetAlternativePeakCriteriaNull(self) -> None: ...
    def SetMatrixSpikeBPercentRecoveryMinimumNull(self) -> None: ...
    def GetPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
    def IsMZAdditionalNull(self) -> bool: ...
    def SetSampleMaximumPercentRSDNull(self) -> None: ...
    def IsAlternativePeakCriteriaNull(self) -> bool: ...
    def IsMaximumNumberOfHitsNull(self) -> bool: ...
    def SetOutlierBlankResponseOutsideLimitNull(self) -> None: ...
    def IsCompoundNameNull(self) -> bool: ...
    def SetUserDefined3Null(self) -> None: ...
    def SetMatrixAConcentrationLimitHighNull(self) -> None: ...
    def SetRetentionTimeWindowNull(self) -> None: ...
    def IsMaximumCCResponseFactorDeviationNull(self) -> bool: ...
    def SetLibraryMatchScoreNull(self) -> None: ...
    def SetReferenceWindowOverrideNull(self) -> None: ...
    def SetCompoundGroupNull(self) -> None: ...
    def SetWavelengthReferenceRangeHighNull(self) -> None: ...
    def IsRetentionTimeWindowNull(self) -> bool: ...
    def SetQValueMinimumNull(self) -> None: ...
    def SetUserCustomCalculationNull(self) -> None: ...
    def SetKEGGIDNull(self) -> None: ...
    def IsQuantitationMessageNull(self) -> bool: ...
    def SetCCResponseRatioLimitLowNull(self) -> None: ...
    def SetCurveFitOriginNull(self) -> None: ...
    def IsWavelengthReferenceRangeHighNull(self) -> bool: ...
    def IsPeakFilterThresholdNull(self) -> bool: ...
    def IsLinearResponseRangeMaxNull(self) -> bool: ...
    def SetQuantitateByHeightNull(self) -> None: ...
    def SetNeutralLossGainNull(self) -> None: ...
    def IsNonReferenceWindowOverrideNull(self) -> bool: ...
    def SetUncertaintyRelativeOrAbsoluteNull(self) -> None: ...
    def IsResolutionLimitNull(self) -> bool: ...
    def SetColumnVoidTimeNull(self) -> None: ...
    def SetOutlierAverageResponseFactorRSDNull(self) -> None: ...
    def IsRetentionTimeDeltaUnitsNull(self) -> bool: ...
    def IsLibraryMatchScoreNull(self) -> bool: ...
    def SetGraphicPeakChromatogramNull(self) -> None: ...
    def SetCollisionEnergyDeltaNull(self) -> None: ...
    def IsRightRetentionTimeDeltaNull(self) -> bool: ...
    def IsAverageResponseFactorRSDNull(self) -> bool: ...
    def IsMinimumCCRelativeResponseFactorNull(self) -> bool: ...
    def SetUserCustomCalculationLimitHighNull(self) -> None: ...
    def SetISTDResponseMinimumPercentDeviationNull(self) -> None: ...
    def SetSampleAmountLimitHighNull(self) -> None: ...
    def IsSampleAmountLimitLowNull(self) -> bool: ...
    def IsMatrixSpikeMaximumPercentDeviationNull(self) -> bool: ...
    def SetSublistNull(self) -> None: ...
    def SetAccuracyMaximumPercentDeviationNull(self) -> None: ...
    def IsRetentionTimeWindowUnitsNull(self) -> bool: ...
    def SetLimitOfQuantitationNull(self) -> None: ...
    def SetIntegrationParametersNull(self) -> None: ...
    def SetMatrixAConcentrationLimitLowNull(self) -> None: ...
    def IsNoiseReferenceNull(self) -> bool: ...
    def IsMultiplierNull(self) -> bool: ...
    def IsCurveFitOriginNull(self) -> bool: ...
    def SetMaximumPercentResidualNull(self) -> None: ...
    def IsScanTypeNull(self) -> bool: ...
    def SetExpectedConcentrationNull(self) -> None: ...
    def SetSignalTypeNull(self) -> None: ...
    def SetRxUnlabeledIsotopicDilutionNull(self) -> None: ...

class ITargetQualifierRow(object):  # Interface
    AreaSum: bool
    BatchID: int
    CellAcceleratorVoltage: float
    CollisionEnergy: float
    CollisionEnergyDelta: float
    CompoundID: int
    FragmentorVoltage: float
    FragmentorVoltageDelta: float
    GraphicPeakQualifierChromatogram: str
    IntegrationParameters: str
    IntegrationParametersModified: bool
    IonPolarity: str
    def __getitem__(self, columnName: str) -> Any: ...
    def __setitem__(self, columnName: str, value_: Any) -> None: ...
    MZ: float
    MZExtractionWindowFilterLeft: float
    MZExtractionWindowFilterRight: float
    MZExtractionWindowUnits: str
    OutlierPeakNotFound: str
    PeakFilterThreshold: str
    PeakFilterThresholdValue: float
    QualifierID: int
    QualifierName: str
    QualifierRangeMaximum: float
    QualifierRangeMinimum: float
    QuantDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    QuantitationMessage: str
    RelativeResponse: float
    SampleID: int
    ScanType: str
    SelectedMZ: float
    ThresholdNumberOfPeaks: int
    Transition: str
    Uncertainty: float
    UserDefined: str

    def IsMZNull(self) -> bool: ...
    def SetSelectedMZNull(self) -> None: ...
    def SetPeakFilterThresholdValueNull(self) -> None: ...
    def IsOutlierPeakNotFoundNull(self) -> bool: ...
    def IsFragmentorVoltageDeltaNull(self) -> bool: ...
    def IsAreaSumNull(self) -> bool: ...
    def IsScanTypeNull(self) -> bool: ...
    def SetUserDefinedNull(self) -> None: ...
    def SetMZExtractionWindowFilterRightNull(self) -> None: ...
    def SetCellAcceleratorVoltageNull(self) -> None: ...
    def IsGraphicPeakQualifierChromatogramNull(self) -> bool: ...
    def SetIntegrationParametersNull(self) -> None: ...
    def SetIonPolarityNull(self) -> None: ...
    def IsQuantitationMessageNull(self) -> bool: ...
    def IsQualifierNameNull(self) -> bool: ...
    def SetCollisionEnergyDeltaNull(self) -> None: ...
    def IsFragmentorVoltageNull(self) -> bool: ...
    def IsPeakFilterThresholdValueNull(self) -> bool: ...
    def SetThresholdNumberOfPeaksNull(self) -> None: ...
    def SetTransitionNull(self) -> None: ...
    def SetFragmentorVoltageNull(self) -> None: ...
    def IsIonPolarityNull(self) -> bool: ...
    def IsQualifierRangeMinimumNull(self) -> bool: ...
    def IsSelectedMZNull(self) -> bool: ...
    def GetQualifierPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow]: ...
    def IsPeakFilterThresholdNull(self) -> bool: ...
    def IsIntegrationParametersModifiedNull(self) -> bool: ...
    def IsCollisionEnergyNull(self) -> bool: ...
    def SetPeakFilterThresholdNull(self) -> None: ...
    def SetRelativeResponseNull(self) -> None: ...
    def SetOutlierPeakNotFoundNull(self) -> None: ...
    def IsThresholdNumberOfPeaksNull(self) -> bool: ...
    def SetQuantitationMessageNull(self) -> None: ...
    def SetQualifierRangeMinimumNull(self) -> None: ...
    def SetFragmentorVoltageDeltaNull(self) -> None: ...
    def IsUncertaintyNull(self) -> bool: ...
    def IsCollisionEnergyDeltaNull(self) -> bool: ...
    def SetMZExtractionWindowUnitsNull(self) -> None: ...
    def IsIntegrationParametersNull(self) -> bool: ...
    def GetTargetCompoundRowParent(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def SetScanTypeNull(self) -> None: ...
    def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
    def SetUncertaintyNull(self) -> None: ...
    def SetMZNull(self) -> None: ...
    def IsQualifierRangeMaximumNull(self) -> bool: ...
    def IsRelativeResponseNull(self) -> bool: ...
    def IsUserDefinedNull(self) -> bool: ...
    def SetCollisionEnergyNull(self) -> None: ...
    def SetQualifierNameNull(self) -> None: ...
    def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
    def SetQualifierRangeMaximumNull(self) -> None: ...
    def SetAreaSumNull(self) -> None: ...
    def IsMZExtractionWindowUnitsNull(self) -> bool: ...
    def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
    def IsTransitionNull(self) -> bool: ...
    def SetIntegrationParametersModifiedNull(self) -> None: ...
    def IsCellAcceleratorVoltageNull(self) -> bool: ...
    def SetGraphicPeakQualifierChromatogramNull(self) -> None: ...

class ITimeSegment(object):  # Interface
    DynamicMRMScanElementCount: int  # readonly
    EndTime: float  # readonly
    Index: int  # readonly
    StartTime: float  # readonly
    TriggeredMRMScanElementCount: int  # readonly

    def GetTriggeredMRMs(
        self, compoundName: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MRMScanElement
    ]: ...
    def Contains(self, rt: float) -> bool: ...
    def GetPrecursorIons(self) -> List[float]: ...
    def GetCompounds(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound
    ]: ...
    def GetCompound(
        self, compoundName: str, precursorIon: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound: ...
    @overload
    def GetScanElements(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement]: ...
    @overload
    def GetScanElements(
        self, scanType: MSScanType
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement]: ...

class ITimeToMassConversion(object):  # Interface
    A: float  # readonly
    T0: float  # readonly

    @overload
    def TimeToMass(self, flightTime: float) -> float: ...
    @overload
    def TimeToMass(self, flightTimes: List[float]) -> None: ...

class IndividualPeakList(
    Sequence[Any],
    Iterable[Any],
    Sequence[Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK],
    List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK],
    System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK
    ],
    Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK],
    List[Any],
):  # Class
    def __init__(self) -> None: ...
    def GetUserSelectPeak(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK: ...
    def SetUserSelectPeak(
        self, peak: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_INDIV_PEAK
    ) -> None: ...

class IniFile:  # Class
    def __init__(self, path: str) -> None: ...

    NumSections: int  # readonly
    Path: str  # readonly

    @overload
    def GetSection(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IniFileSection: ...
    @overload
    def GetSection(
        self, sectionName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IniFileSection: ...
    @staticmethod
    def Parse(
        contents: str,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IniFileSection
    ]: ...
    def RemoveSection(
        self, section: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IniFileSection
    ) -> None: ...
    def SaveAs(self, destPath: str) -> None: ...
    def AddSection(
        self, section: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IniFileSection
    ) -> None: ...
    def Save(self) -> None: ...

class IniFileSection:  # Class
    def __init__(self, sectionName: str) -> None: ...

    Name: str  # readonly

    def RemoveProperty(self, propertyName: str) -> None: ...
    def SetPropertyValue(self, propertyName: str, propertyValue: str) -> None: ...
    @overload
    def AddProperty(self, nameValueString: str) -> None: ...
    @overload
    def AddProperty(self, propertyName: str, propertyValue: str) -> None: ...
    def GetProperty(self, propertyName: str) -> str: ...

class InstrumentType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    GCMS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly
    QQQ: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly
    QTOF: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly
    TOF: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly
    TwoD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly
    Unspecified: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType = (
        ...
    )  # static # readonly

class IntRange:  # Class
    def __init__(self, min: int, max: int) -> None: ...

    Max: int  # readonly
    Min: int  # readonly
    NumberOfPoints: int  # readonly

    @overload
    def Overlaps(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange
    ) -> bool: ...
    @overload
    def Overlaps(self, min: int, max: int) -> bool: ...
    def Contains(self, value_: int) -> bool: ...
    @overload
    def GetUnion(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange: ...
    @overload
    def GetUnion(
        self, start: int, end: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange: ...
    @overload
    def GetOverlap(
        self, range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange: ...
    @overload
    def GetOverlap(
        self, start: int, end: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange: ...

    # Nested Types

    class MaxComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            a: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange,
            b: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange,
        ) -> int: ...

    class MinComparer(
        System.Collections.Generic.IComparer[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange
        ]
    ):  # Class
        def __init__(self) -> None: ...
        def Compare(
            self,
            a: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange,
            b: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntRange,
        ) -> int: ...

class IntegrateSpectrum:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Integrate(
        spectrum: ISpectrum, heightAbsThreshold: float, heightPctThreshold: float
    ) -> IPeakList: ...

class IntegrationSetupDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    EnableApplyToAll: bool
    EnableDefaultButton: bool
    EnableIntegratorTypeControl: bool
    EnableParameters: bool
    EnablePeakFilters: bool
    EnableResetButton: bool
    GenieIntegrator: IPSetGenieIntegrator
    IntegratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    OriginalGenieIntegrator: IPSetGenieIntegrator
    OriginalIntegratorType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )
    OriginalPeakFilter: IPSetPeakFilter
    OriginalRTEIntegrator: IPSetRTEIntegrator
    OriginalSpectralSummerIntegrator: IPSetSpectralSummerIntegrator
    PeakFilter: IPSetPeakFilter
    RTEIntegrator: IPSetRTEIntegrator
    SpectralSummerIntegrator: IPSetSpectralSummerIntegrator

    def GetAppliedAttributes(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue]: ...
    def ActivatePeakFilterPage(self) -> None: ...
    def ActivateIntegratorTypePage(self) -> None: ...
    def ActivateParametersPage(self) -> None: ...

class Integrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator
):  # Class
    DefaultIntegratorType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )  # static # readonly
    DefaultIntegratorTypeForGC: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )  # static # readonly
    DefaultIntegratorTypeForGCDeconvolution: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )  # static # readonly
    DefaultIntegratorTypeForLC: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )  # static # readonly
    DefaultIntegratorTypeForLCDeconvolution: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )  # static # readonly
    Parameters: IPSetPeakFind  # readonly
    PeakFilters: IPSetPeakFilter  # readonly
    PeakFinder: IFindPeaks  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    @staticmethod
    def ApplySignalToNoiseFilter(
        peakList: IChromPeakList, filter: IPSetPeakFilter
    ) -> None: ...
    def FindPeaks(self, chromatogram: IChromatogram) -> IChromPeakList: ...
    @overload
    @staticmethod
    def GetPeakFilterParameters(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IPSetPeakFilter: ...
    @overload
    @staticmethod
    def GetPeakFilterParameters(
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IPSetPeakFilter: ...
    def ManualIntegrate(
        self,
        chromatogram: IChromatogram,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
        peaklist: IChromPeakList,
    ) -> IChromPeak: ...
    @staticmethod
    def GetTimeRangeFilter(
        chromatogram: IChromatogram, rangeOfInterest: IRange
    ) -> IPSetRangeCollection: ...

class IntegratorFactory:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetDefaultIntegrator() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator
    ): ...
    @overload
    @staticmethod
    def GetIntegrator(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator: ...
    @overload
    @staticmethod
    def GetIntegrator(
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator: ...
    @overload
    @staticmethod
    def GetIntegrator(
        integratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator: ...

class IntegratorType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Agile: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    Agile2: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    AutoMagic: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    AutoMagic_GC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    AutoMagic_LC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    Claire: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    FollowBaseline_GC: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    ) = ...  # static # readonly
    FollowBaseline_LC: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    ) = ...  # static # readonly
    Genie: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    RTE: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType = (
        ...
    )  # static # readonly
    SpectralSummer: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    ) = ...  # static # readonly

class IntegratorTypeControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UserControl,
):  # Class
    def __init__(self) -> None: ...

    IntegratorType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    OriginalIntegratorType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType
    )

    def Reset(self) -> None: ...

    IntegratorTypeChanged: System.EventHandler  # Event

class IonQualityMetric(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Abundance_SNR: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonQualityMetric
    ) = ...  # static # readonly
    Abundance_Squared: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonQualityMetric
    ) = ...  # static # readonly
    SNR_Squared: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonQualityMetric = (
        ...
    )  # static # readonly

class IonSelectionMassWeighting(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Mass: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionMassWeighting
    ) = ...  # static # readonly
    Mass_Squared: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionMassWeighting
    ) = ...  # static # readonly

class IonSelectionRules(System.IDisposable):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numQualifiersPerCompound: int) -> None: ...

    AT_LEAST_ONE_QUALIFIER: bool = ...  # static # readonly
    EXCLUDE_SATURATED_PEAKS: bool = ...  # static # readonly
    ION_QUALITY_METRIC: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonQualityMetric
    ) = ...  # static # readonly
    ISOTOPE_CLUSTER_SIZE: float = ...  # static # readonly
    MASS_WEIGHTING: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionMassWeighting
    ) = ...  # static # readonly
    MAX_MZ: float = ...  # static # readonly
    MIN_MZ: float = ...  # static # readonly
    MIN_REL_ABUNDANCE: float = ...  # static # readonly
    NUM_QUALIFIERS_PER_COMPOUND: int = ...  # static # readonly
    SUBTRACT_INTERFERENCES: bool = ...  # static # readonly

    ExcludeSaturatedPeaks: bool
    IonQualityMetric: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonQualityMetric
    )
    MassWeighting: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionMassWeighting
    )
    MaxMz: float
    MinMz: float
    MinRelativeAbundance: float
    MzExlusionList: System.Collections.Generic.List[float]
    NeedAtLeastOneQualifier: bool
    NumQualifiersPerCompound: int

    def SelectIons(
        self, component: Component
    ) -> System.Collections.Generic.List[IonPeak]: ...
    def SmartSelectIons(
        self,
        target: Component,
        componentList: System.Collections.Generic.List[Component],
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> System.Collections.Generic.List[IonPeak]: ...
    def Dispose(self) -> None: ...
    def EndIonSelection(self) -> None: ...

class IstdCompoundNameValue(System.IComparable):  # Class
    PropertyName: str = ...  # static # readonly

    def Equals(self, obj: Any) -> bool: ...
    @staticmethod
    def GetValue(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> Any: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def CreateCommand(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compoundId: int,
        value_: Any,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase: ...
    def CompareTo(self, obj: Any) -> int: ...
    @staticmethod
    def GetSelections(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> List[Any]: ...
    def ToString(self) -> str: ...

class LibraryMatchScoreUtils:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetSpectrumExtractionRTRange(
        chromatogram: IChromatogram,
        peak: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        startX: float,
        endX: float,
    ) -> None: ...
    @overload
    @staticmethod
    def SetSaturationMzTrackingRanges(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        calcSpectrum: Agilent.MassSpectrometry.IMsXyData,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ]: ...
    @overload
    @staticmethod
    def SetSaturationMzTrackingRanges(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        mzArray: List[float],
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ]: ...

class LibraryMethodPathDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self, dataNavigator: Agilent.MassHunter.Quantitative.UIModel.IDataNavigator
    ) -> None: ...
    def GetCurrentLibraryMethodPath(self) -> str: ...

class LibraryRTCalibration:  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    BatchDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet
    )  # readonly

    def Run(self, batchId: int, libraryPath: str, outputFilePath: str) -> None: ...

class License:  # Class
    Container: str = ...  # static # readonly
    Duration: int = ...  # static # readonly
    Expire: str = ...  # static # readonly
    Product: str = ...  # static # readonly

    @staticmethod
    def Expires(
        company: str, product: str, version: str
    ) -> Optional[System.DateTime]: ...
    @staticmethod
    def UninstallTrialLicense(
        company: str, product: str, version: str, containerName: str
    ) -> None: ...
    @staticmethod
    def InstallTrialLicense(
        company: str,
        product: str,
        version: str,
        containerName: str,
        expiration: System.DateTime,
        duration: System.TimeSpan,
        allowOverwrite: bool,
    ) -> None: ...
    @staticmethod
    def Exists(company: str, product: str, version: str) -> bool: ...
    @staticmethod
    def CheckLicense(
        company: str, product: str, version: str, containerName: str
    ) -> bool: ...

class LocalizeResultFileTask(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ILocalizeResultFileTask,
    System.Xml.Serialization.IXmlSerializable,
    IQueuedTask,
    System.IDisposable,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    CancelEventName: str
    Context: IQueuedTaskContext
    DestinationFilePath: str
    GlobalResultFilePath: str
    LocalizeMapFilePath: str
    ProcessingPriority: TaskPriority
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly

    def Process(self) -> None: ...
    def Dispose(self) -> None: ...

class LogonTask(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ILogonTask,
    IQueuedTask,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    CancelEventName: str
    Context: IQueuedTaskContext
    LogonXml: str
    ProcessingPriority: TaskPriority
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly

    def Process(self) -> None: ...
    def GetSchema(self) -> System.Xml.Schema.XmlSchema: ...
    def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
    def Dispose(self) -> None: ...
    def ReadXml(self, reader: System.Xml.XmlReader) -> None: ...

class MRMScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ISingleCompoundScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.SingleCompoundScanElement,
):  # Class
    def __init__(
        self, scanElementNode: System.Xml.XmlNode, dmrm: bool, isGC: bool
    ) -> None: ...

    IsDMRM: bool  # readonly
    IsEnabled: bool  # readonly
    IsPrimaryMRMTransition: bool  # readonly
    LeftRTDelta: float  # readonly
    Ms1mz: float  # readonly
    Ms2mz: float  # readonly
    RightRTDelta: float  # readonly
    ScheduledRT: float  # readonly

class MSDataAccess(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMSDataAccess
):  # Class
    BatchID: int  # readonly
    ChromatographyType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType
    )  # readonly
    CoreDataAccess: IDataAccess  # readonly
    DataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    )  # readonly
    FileInformation: IBDAFileInformation  # readonly
    IsAccurateMass: bool  # readonly
    IsIndexedData: bool  # readonly
    IsOpen: bool  # readonly
    LastAccessTime: System.DateTime  # readonly
    SampleDataPath: str  # readonly
    SampleID: int  # readonly

    @overload
    @staticmethod
    def OpenSampleData(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        sampleDataPath: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMSDataAccess: ...
    @overload
    @staticmethod
    def OpenSampleData(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        sampleDataPath: str,
        newlyOpened: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMSDataAccess: ...
    @overload
    @staticmethod
    def ClearChromRangeCache() -> None: ...
    @overload
    @staticmethod
    def ClearChromRangeCache(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> None: ...
    @overload
    def GetQualifierSpectrum(self, compoundId: int, qualifierId: int) -> ISpectrum: ...
    @overload
    def GetQualifierSpectrum(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> ISpectrum: ...
    def CloseSampleData(self) -> None: ...
    def GetCompoundTIC(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetSpectrum(self, rtStart: float, rtEnd: float) -> ISpectrum: ...
    @overload
    def GetSpectrum(self, paramSet: IPSetExtractSpectrum) -> ISpectrum: ...
    @staticmethod
    def CloseAllSamples() -> None: ...
    def GetAcquiredSignals(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal]: ...
    @overload
    def GetChromatogram(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetChromatogram(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        scanMode: MSScanType,
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetChromatogram(self, paramSet: IPSetExtractChrom) -> IChromatogram: ...
    def DynamicBackgroundSubtract(self) -> None: ...
    def GetChromatographicRange(self) -> IRange: ...
    @overload
    def GetCompoundAndQualifierSpectrum(
        self, compoundId: int, needTitle: bool
    ) -> List[ISpectrum]: ...
    @overload
    def GetCompoundAndQualifierSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> List[ISpectrum]: ...
    @overload
    def GetCompoundChromatogram(self, compoundId: int) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self, compoundId: int, rtStart: float, rtEnd: float
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        rtStart: float,
        rtEnd: float,
        needTitle: bool,
    ) -> IChromatogram: ...
    def GetAreaCorrectionChromatogram(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self, compoundId: int, qualifierId: int
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self, compoundId: int, qualifierId: int, rtStart: float, rtEnd: float
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetQualifierChromatogram(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        rtStart: float,
        rtEnd: float,
        needTitle: bool,
    ) -> IChromatogram: ...
    @overload
    def GetTotalSignalChromatogram(
        self,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    @overload
    def GetTotalSignalChromatogram(
        self,
        msLevel: MSLevel,
        scanType: MSScanType,
        rtMin: float,
        rtMax: float,
        signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Signal,
    ) -> IChromatogram: ...
    @overload
    def GetCompoundSpectrum(self, compoundId: int, needTitle: bool) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self, compoundId: int, selectedPeak: IChromPeak, needTitle: bool
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        selectedPeak: IChromPeak,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundId: int,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        useSpectrumExtractionOverride: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        spectrumExtractionOverride: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        needTitle: bool,
    ) -> ISpectrum: ...
    @overload
    def GetCompoundSpectrum(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        saturationTrackingMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        extractionMzRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        startRT: float,
        endRT: float,
        needTitle: bool,
        spectrumExtractionOverride: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride,
    ) -> ISpectrum: ...
    def GetTimeSegmentRanges(self) -> RangeCollection: ...
    @overload
    def GetTIC(self) -> IChromatogram: ...
    @overload
    def GetTIC(self, rtMin: float, rtMax: float) -> IChromatogram: ...
    @overload
    def GetTIC(
        self,
        msLevel: MSLevel,
        scanType: MSScanType,
        rtMin: Optional[float],
        rtMax: Optional[float],
    ) -> IChromatogram: ...
    @staticmethod
    def UseProfileData(
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow,
    ) -> bool: ...

class MSScanData(System.IDisposable):  # Class
    def __init__(self) -> None: ...

    ACQ_DATA_DIR: str = ...  # static # readonly
    PEAK_FILE: str = ...  # static # readonly
    PRO_FILE: str = ...  # static # readonly
    SCAN_FILE: str = ...  # static # readonly

    HasCentroidData: bool  # readonly
    HasProfileData: bool  # readonly
    IsWritable: bool
    def __getitem__(
        self, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanRecord: ...
    MassCalEnabled: bool
    ScanRecordCount: int  # readonly

    def GetMzScanRange(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange: ...
    def WriteCentroidSpectrum(
        self,
        scanRecord: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanRecord,
        mz: List[float],
        abundance: List[float],
        basePeakIndex: int,
    ) -> None: ...
    def DumpScanRecords(self, sampleDataDirectory: str) -> None: ...
    def BeginWriteCentroidData(self) -> None: ...
    def AreMixedPolaritiesPresent(self) -> bool: ...
    def ReadFromFile(self, dataDirectory: str, readSpectra: bool) -> int: ...
    def ApplyMassCalToXValues(
        self,
        scanRecord: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanRecord,
        xValues: List[float],
    ) -> None: ...
    def Dispose(self) -> None: ...
    def EndWriteCentroidData(self) -> None: ...
    def WriteRuntimeMassCal(
        self, aArray: List[float], t0Array: List[float]
    ) -> None: ...

class MSSpectrumHeader:  # Class
    ByteCount: int  # readonly
    MzRange: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange  # readonly
    OneDataRangeDeltaYOffset: int  # readonly
    PointCount: int  # readonly
    SpectrumID: int  # readonly
    SpectrumOffset: int  # readonly
    UncompressedByteCount: int  # readonly
    YRange: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange  # readonly

class MZDeltaUnits(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PPM: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MZDeltaUnits = (
        ...
    )  # static # readonly
    Percent: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MZDeltaUnits = (
        ...
    )  # static # readonly
    Thomsons: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MZDeltaUnits = (
        ...
    )  # static # readonly

class MZPoint:  # Class
    @overload
    def __init__(self, mz: float, y: float) -> None: ...
    @overload
    def __init__(self, mz: float, y: float, scaleFactor: float) -> None: ...

    MZ: float  # readonly
    Y: float  # readonly

class ManualIntegrationState(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    DirectlyManuallyIntegrated: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ManualIntegrationState
    ) = ...  # static # readonly
    NotManuallyIntegrated: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ManualIntegrationState
    ) = ...  # static # readonly
    RelatedISTDIsManuallyIntegrated: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ManualIntegrationState
    ) = ...  # static # readonly

class ManualScaleYDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self, control: IChromSpecPane) -> None: ...

class MassCalibration(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibration,
):  # Class
    def __init__(self) -> None: ...

    DefaultMassCal: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DefaultMassCal
    )  # readonly
    RuntimeMassCal: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RuntimeMassCal
    )  # readonly
    UserMassCal: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.UserMassCal
    )  # readonly

    def Dispose(self) -> None: ...
    def ReadMassCalibration(self, acqDataDir: str) -> bool: ...
    def GetTimeToMassConversion(
        self,
        massCalID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion: ...

class MassSpectralSignal(
    System.IComparable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MassSpectralSignal
    ]
):  # Class
    def __init__(self, dPrecursorMZ: float, dProductMZ: float) -> None: ...
    def GetProductMZ(self) -> float: ...
    def CompareTo(
        self,
        other: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MassSpectralSignal,
    ) -> int: ...
    def GetPrecursorMZ(self) -> float: ...

class Matrix:  # Class
    @overload
    def __init__(self, nRows: int, nCols: int) -> None: ...
    @overload
    def __init__(self, a: System.Array[float]) -> None: ...
    @overload
    def __init__(self, a: List[List[float]]) -> None: ...
    @overload
    def __init__(
        self, a: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Matrix
    ) -> None: ...
    def __getitem__(self, row: int) -> List[float]: ...
    def __setitem__(self, row: int, value_: List[float]) -> None: ...
    def __getitem__(self, row: int, col: int) -> float: ...
    def __setitem__(self, row: int, col: int, value_: float) -> None: ...
    NColumns: int  # readonly
    NRows: int  # readonly

    def Inverse(self) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.Matrix: ...
    def Transpose(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.Matrix: ...
    @staticmethod
    def UnitMatrix(
        rank: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.Matrix: ...
    def IsUnitMatrix(self, maxDelta: float) -> bool: ...

class MatrixAlgorithms:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GaussJordan(a: List[List[float]], b: List[List[float]]) -> None: ...

class MatrixOverrideDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        pstate: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
    ) -> None: ...
    def Initialize(self, compoundID: int, value_: str) -> None: ...

class MatrixTypeOverrideItem:  # Class
    def __init__(self) -> None: ...

    ColumnValuePairs: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OverridenColumnValuePair
    ]
    MatrixType: str

class MatrixTypeOverrides:  # Class
    def __init__(self) -> None: ...

    MatrixTypeOverrideItems: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem
    ]

    @staticmethod
    def XmlDeserializeFromString(
        objectData: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrides: ...
    @staticmethod
    def Add(
        array: List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem
        ],
        newValue: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem
    ]: ...
    @staticmethod
    def Remove(
        array: List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem
        ],
        valueToRemove: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrideItem
    ]: ...
    @staticmethod
    def XmlSerializeToString(
        objectInstance: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MatrixTypeOverrides,
    ) -> str: ...

class MethodCompoundIntegrationDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegrationSetupDialog,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        state: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class MethodDataSet(
    System.IDisposable,
    System.Xml.Serialization.IXmlSerializable,
    System.ComponentModel.ISupportInitializeNotification,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase,
    System.ComponentModel.IComponent,
    System.ComponentModel.ISupportInitialize,
    System.IServiceProvider,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
):  # Class
    BatchID: int = ...  # static # readonly
    SampleID: int = ...  # static # readonly
    UnifiedMethod_File: str = ...  # static # readonly
    UnifiedMethod_SubFolders: str = ...  # static # readonly

    BatchAttributes: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes
    )  # readonly
    CompoundsDeleted: bool  # readonly
    IsDirty: bool  # readonly
    MethodSetupContext: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupContext
    )  # readonly
    QualifiersDeleted: bool  # readonly
    SampleRow: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    )  # readonly

    def UpdateQualifierMZ(
        self, compoundId: int, qualifierId: int, mz: float
    ) -> None: ...
    def ConvertQuantIonToQualifier(
        self,
        fromCpdRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        toCpdRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        qualifierId: int,
        responseRatio: float,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...
    def ImportFromLocalFile(self, localFilePath: str, checkHashCode: bool) -> None: ...
    def ClearMethod(self) -> None: ...
    def CopyCalibrationRow(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationRowId,
        sourceCalRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
    ): ...
    def UpdateCASNumber(self, compoundId: int, cas: str) -> None: ...
    def SwapQualifierQuantifier(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...
    def InitTargetCompoundRow(
        self,
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def EndLargeDataSetChange(self) -> None: ...
    def AddCalibrationLevel(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationRowId,
        calibrationType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalibrationType,
        levelName: str,
        concentration: float,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
    ): ...
    def AddQualifierFromAcquisition(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TargetQualifierRowId,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound,
        mz: float,
        responseRatio: float,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...
    def DeleteCompounds(
        self,
        compounds: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ],
    ) -> None: ...
    def RestoreOverridenLimits(self, batchId: int, sampleId: int) -> None: ...
    def CopyCalibrationLevels(
        self,
        src: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        dest: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def GetMethodState(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState: ...
    def ConvertQualifier(
        self,
        qualRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        toCpdRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        qualifierId: int,
        responseRatio: float,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...
    def StartLargeDataSetChange(self) -> None: ...
    def ImportFromSample(self, batchId: int, sampleId: int) -> None: ...
    @overload
    def UpdateTransition(
        self,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    @overload
    def UpdateTransition(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...
    def ShallowCopyTargetCompoundRow(
        self,
        source: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def NormalizeMethod(self) -> None: ...
    def WriteTo(self, stream: System.IO.Stream) -> None: ...
    def ClearMethodFilePath(self) -> None: ...
    def GetMethodFilePath(self) -> str: ...
    def AddCompoundFromAcquisition(
        self,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TargetCompoundRowId,
        timeSegment: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeSegment,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound,
        mz: float,
        rt: float,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def UpdateQualifierRatio(
        self, compoundId: int, qualifierId: int, qualifierRatio: float
    ) -> None: ...
    def BeginChange(self) -> None: ...
    def UpdateMZ(self, compoundId: int, mz: float) -> None: ...
    def SetSampleNameAndPath(self, sampleDirPath: str) -> None: ...
    def EndChange(self) -> None: ...
    def ImportFromFile(self, fileName: str, revisionNumber: str) -> None: ...
    def CombineCalibrationReplicates(self, compoundId: int) -> None: ...
    @overload
    def SetSampleAttributes(
        self,
        separationTechnique: SeparationTechnique,
        chromatographyType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType,
    ) -> None: ...
    @overload
    def SetSampleAttributes(
        self,
        batchSampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        separationTechnique: SeparationTechnique,
        chromatographyType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatographyType,
    ) -> None: ...
    def UpdateAllQualifierLimits(self) -> None: ...
    @staticmethod
    def InitTargetQualifierRow(
        qrow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...
    def DeleteAllCalibrationRows(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def UpdateRetentionTime(self, compoundId: int, retentionTime: float) -> None: ...
    def SaveAs(self, pathName: str) -> None: ...

class MethodDataSource(
    System.IDisposable,
    Infragistics.Win.UltraWinDataSource.Design.IDataSourceDesignInfo,
    System.ComponentModel.IComponent,
    Infragistics.Shared.IUltraComponent,
    Infragistics.Shared.IUltraLicensedComponent,
    Infragistics.Shared.IUltraPropertyPageDialogComponent,
    System.ComponentModel.ISupportInitialize,
    System.Windows.Forms.ICurrencyManagerProvider,
    Infragistics.Win.UltraWinDataSource.UltraDataSource,
    System.ComponentModel.IListSource,
):  # Class
    def __init__(
        self, grid: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGridCtrl
    ) -> None: ...
    @staticmethod
    def CreateCommand(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        row: Infragistics.Win.UltraWinGrid.UltraGridRow,
        propertyName: str,
        value_: Any,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase: ...

class MethodEditTaskMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CalibrationCurveSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    CalibrationReferenceSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    Compound2DSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    CompoundLibrarySetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    CompoundSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    ConcentrationSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    Default: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode = (
        ...
    )  # static # readonly
    GlobalsSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    ISTDSetup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode = (
        ...
    )  # static # readonly
    IntegrationParametersSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    IsotopicDilutionSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    MRMCompoundSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    MassExtractionSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    OutlierSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    QualifierSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    RetentionTimeSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    SignalToNoiseSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    SmoothingSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly
    SpectrumExtractionSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    ) = ...  # static # readonly

class MethodErrorListCtrl(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    Agilent.MassHunter.Quantitative.UIModel.IMethodErrorListPane,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...
    def SetPresentationState(
        self,
        state: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
    ) -> None: ...
    def SetToolbarsManager(self, toolbarsMgr: IToolbarsManager) -> None: ...
    def SetMessages(
        self,
        messages: Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
        ],
    ) -> None: ...

class MethodErrorListGridCtrl(
    Infragistics.Win.IUltraControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.Layout.IArrangedElement,
    Infragistics.Win.IUIElementProvider,
    Infragistics.Win.IUltraControlElement,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.ComponentModel.ISupportInitialize,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.IWin32Window,
    Infragistics.Win.ISupportPresets,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    Infragistics.Win.IControlElementEventProcessor,
    Infragistics.Win.IUIElementTextProvider,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.CalcEngine.IUltraCalcParticipant,
    System.ComponentModel.ISynchronizeInvoke,
    Infragistics.Win.IValidatorClient,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    Agilent.MassHunter.Quantitative.UIModel.IGridControl,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    System.ComponentModel.IComponent,
    Infragistics.Win.ISelectionManager,
    Infragistics.Win.UltraWinGrid.Design.IGridDesignInfo,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    Infragistics.Win.Touch.IGestureConsumer,
    Infragistics.Shared.IUltraLicensedComponent,
    GridControlBase,
    System.Windows.Forms.IBindableComponent,
    System.IDisposable,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    Infragistics.Win.AutoEditMode.IAutoEditMode,
):  # Class
    def __init__(self) -> None: ...

    ToolbarsManager: IToolbarsManager

    def SetPresentationState(
        self,
        state: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
    ) -> None: ...
    def SetMessages(
        self,
        messages: Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
        ],
    ) -> None: ...

class MethodEventArgs(System.EventArgs):  # Class
    def __init__(
        self,
        methodDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet,
    ) -> None: ...

    MethodDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet
    )  # readonly

class MethodEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(
        self,
        sender: Any,
        e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEventArgs,
    ) -> None: ...

class MethodFromLibraryIonMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    HighestMass: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodFromLibraryIonMode
    ) = ...  # static # readonly
    Monoisotopic: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodFromLibraryIonMode
    ) = ...  # static # readonly
    MostAbundant: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodFromLibraryIonMode
    ) = ...  # static # readonly
    Weighted: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodFromLibraryIonMode
    ) = ...  # static # readonly

class MethodGenerator:  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    CompoundIdentParams: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundIdentificationParams
    )  # readonly
    LibraryPath: str

    @overload
    def GenerateMethodForSample(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> str: ...
    @overload
    def GenerateMethodForSample(self, batchId: int, sampleId: int) -> str: ...

class MethodGridCtrl(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGridCtrlBase,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    Infragistics.Win.IUltraControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.Layout.IArrangedElement,
    Infragistics.Win.IUIElementProvider,
    Infragistics.Win.IUltraControlElement,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.ComponentModel.ISupportInitialize,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.IWin32Window,
    Infragistics.Win.ISupportPresets,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    Infragistics.Win.IControlElementEventProcessor,
    Infragistics.Win.IUIElementTextProvider,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.CalcEngine.IUltraCalcParticipant,
    System.ComponentModel.ISynchronizeInvoke,
    Infragistics.Win.IValidatorClient,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    Agilent.MassHunter.Quantitative.UIModel.IGridControl,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    System.ComponentModel.IComponent,
    Infragistics.Win.ISelectionManager,
    Infragistics.Win.UltraWinGrid.Design.IGridDesignInfo,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    Infragistics.Win.Touch.IGestureConsumer,
    Infragistics.Shared.IUltraLicensedComponent,
    System.Windows.Forms.IBindableComponent,
    System.IDisposable,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    Infragistics.Win.AutoEditMode.IAutoEditMode,
):  # Class
    def __init__(self) -> None: ...

    CanDelete: bool  # readonly
    CanPaste: bool  # readonly
    SortCompoundsBy: str

    def LoadColumnSettings(self, file: str) -> None: ...
    def GetSelectedCompoundIds(self) -> List[int]: ...
    def ShowColumn(self, bandName: str, columnName: str, columnAfter: str) -> None: ...
    def CollapseAll(self) -> None: ...
    def ResetSort(self) -> None: ...
    def SetDefaultBehavior(self) -> None: ...
    def ShowColumnsDialog(self) -> None: ...
    def SetDataNavigator(
        self,
        dataNavigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator,
    ) -> None: ...
    def SaveColumnSettings(self, file: str) -> None: ...
    def SupportsSaveLoadColumnSettings(self) -> bool: ...
    def UpdateColors(self) -> None: ...
    def DeleteRows(self) -> None: ...
    def ActivateCell(self, compoundId: int, columnName: str) -> None: ...
    def Delete(self) -> None: ...
    def FindNext(
        self,
        tableName: str,
        columnName: str,
        operatorType: FindOperatorType,
        value_: Any,
    ) -> bool: ...
    def HideColumn(self, bandName: str, columnName: str) -> None: ...
    def Paste(self) -> None: ...
    def ResetColumns(self) -> None: ...

class MethodGridCtrlBase(
    Infragistics.Win.IUltraControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.Layout.IArrangedElement,
    Infragistics.Win.IUIElementProvider,
    Infragistics.Win.IUltraControlElement,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.ComponentModel.ISupportInitialize,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.IWin32Window,
    Infragistics.Win.ISupportPresets,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    Infragistics.Win.IControlElementEventProcessor,
    Infragistics.Win.IUIElementTextProvider,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.CalcEngine.IUltraCalcParticipant,
    System.ComponentModel.ISynchronizeInvoke,
    Infragistics.Win.IValidatorClient,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    Agilent.MassHunter.Quantitative.UIModel.IGridControl,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    System.ComponentModel.IComponent,
    Infragistics.Win.ISelectionManager,
    Infragistics.Win.UltraWinGrid.Design.IGridDesignInfo,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    Infragistics.Win.Touch.IGestureConsumer,
    Infragistics.Shared.IUltraLicensedComponent,
    GridControlBase,
    System.Windows.Forms.IBindableComponent,
    System.IDisposable,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    Infragistics.Win.AutoEditMode.IAutoEditMode,
):  # Class
    def __init__(self) -> None: ...
    def SetDefaultBehavior(self) -> None: ...
    def SetDataNavigator(
        self,
        dataNavigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator,
    ) -> None: ...

class MethodQualifierIntegrationDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierIntegrationSetupDialog,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        state: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PresentationState,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...
    def GetAppliedAttributes(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue]: ...

class MethodSetupConfig:  # Class
    def __init__(self) -> None: ...

    DefaultIntegratorForGC: str  # static # readonly
    DefaultIntegratorForGCDeconvolution: str  # static # readonly
    DefaultIntegratorForLC: str  # static # readonly
    DefaultIntegratorForLCDeconvolution: str  # static # readonly
    ISTDConcentration: float  # static # readonly
    LibraryPath: str  # static # readonly
    MinDataCountForMsIntegrator: int  # static # readonly
    MinDataCountForMsMsIntegrator: int  # static # readonly
    MrmMzExtractionWindowLeft: float  # static # readonly
    MrmMzExtractionWindowRight: float  # static # readonly
    MrmMzExtractionWindowUnits: str  # static # readonly
    MzExtractionWindowLeft: float  # static # readonly
    MzExtractionWindowRight: float  # static # readonly
    MzExtractionWindowUnits: str  # static # readonly
    NoiseAlgorithmType: str  # static # readonly
    NoiseStandardDeviationMultiplier: float  # static # readonly
    NonTandemScanMode: str  # static # readonly
    RTAverageWeightFactor: float  # static # readonly
    ScanMode: str  # static # readonly
    TimeReferenceFlag: bool  # static # readonly
    TofMzExtractionWindowLeft: float  # static # readonly
    TofMzExtractionWindowRight: float  # static # readonly
    TofMzExtractionWindowUnits: str  # static # readonly

class MethodSetupContext:  # Class
    def __init__(
        self,
        batchDS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        methodDS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet,
    ) -> None: ...
    @overload
    def GetManuallyIntegratedQualifierRow(
        self, compoundId: int, qualifierId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    @overload
    def GetManuallyIntegratedQualifierRow(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    def SaveManualIntegrationResults(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def GetManuallyIntegratedPeakRows(
        self, sampleID: int
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ]: ...
    def GetManuallyIntegratedQualifierRows(
        self, sampleID: int
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ]: ...
    @overload
    def GetManuallyIntegratedPeakRow(
        self, compoundId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...
    @overload
    def GetManuallyIntegratedPeakRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...

class MethodSetupSession:  # Class
    AcquisitionMethod: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AcquisitionMethod
    )  # readonly
    AcquisitionSamplePath: str  # readonly
    AppCommandContext: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext
    )  # readonly
    CalibrationSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationSetup
    )  # readonly
    CompoundIdentification: ICompoundIdentification  # readonly
    CompoundSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICompoundSetup
    )  # readonly
    MethodDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodDataSet
    )  # readonly

    @overload
    def SwapQualifierWithQuantifier(
        self, compoundId: int, qualifierId: int
    ) -> None: ...
    @overload
    def SwapQualifierWithQuantifier(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...
    def PrepareToImportMethodFromFile(self) -> None: ...
    @staticmethod
    def GetInstance(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession: ...
    def ValidateMethodSetup(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...
    def CheckMethodAndThrowOnErrors(self) -> None: ...
    def CreateDynamicQuantTargets(self) -> None: ...
    @staticmethod
    def IsActive(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> bool: ...
    @overload
    @staticmethod
    def StartMethodSetup(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        silent: bool,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession: ...
    @overload
    @staticmethod
    def StartMethodSetup(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession: ...
    @overload
    def CreateMethodFromScanData(
        self,
        sampleDataDir: str,
        libMethodPath: str,
        withLibSearch: bool,
        numberOfQualifiers: int,
    ) -> None: ...
    @overload
    def CreateMethodFromScanData(
        self,
        sampleDataDir: str,
        libraryMethodPath: str,
        withLibSearch: bool,
        ionSelectionRules: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionRules,
    ) -> None: ...
    @overload
    def CreateMethodFromScanData(
        self,
        sampleDataDir: str,
        libMethodPath: str,
        withLibSearch: bool,
        createSIMMethod: bool,
        ionSelectionRules: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionRules,
        multiParameterSearch: bool,
    ) -> None: ...
    def AppendMethodFromFile(self, fileName: str) -> None: ...
    def ImportMethodFromAcquisition(self, sampleDataDir: str) -> None: ...
    def ImportMethodFromBatchSample(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
        sampleId: int,
    ) -> None: ...
    def CreateMethodFrom2DData(
        self,
        sampleDataDir: str,
        startTime: float,
        endTime: float,
        peakFilterType: PeakFilterType,
        areaAbsThreshold: float,
        areaPctThreshold: float,
        heightAbsThreshold: float,
        heightPctThreshold: float,
        signalToNoiseThreshold: float,
        maxPeakCount: int,
        append: bool,
    ) -> None: ...
    def CreateMethodFromCEFFile(self, cefFilePath: str, append: bool) -> None: ...
    def GetFixedYScaleForChromatogram(self, compoundId: int) -> float: ...
    def AppendMethodFromAcquisition(self, sampleDataDir: str) -> None: ...
    def CreateMethodFromLibrary(
        self,
        libraryFile: str,
        rtCalFile: str,
        targetListFile: str,
        samplePath: str,
        numQualifiers: int,
        sumQualifiersFromAdditionalSpectra: bool,
        ionMode: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodFromLibraryIonMode,
        compoundPerSpectrum: bool,
        pickIonFromMultipleSpectra: bool,
        selectedSpecies: List[str],
        updateRetentionTimeWithData: bool,
        append: bool,
    ) -> None: ...
    def AppendMethodFromScanData(
        self,
        sampleDataDir: str,
        libMethodPath: str,
        withLibSearch: bool,
        createSIMMethod: bool,
        ionSelectionRules: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IonSelectionRules,
        multiParameterSearch: bool,
    ) -> None: ...
    @overload
    def EndMethodSetup(self, silent: bool) -> None: ...
    @overload
    def EndMethodSetup(self) -> None: ...
    def CombineCalibrationReplicates(self, compoundId: int) -> None: ...
    def InitMethodImportedFromBatchFile(
        self,
        batchDataDir: str,
        methodSampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def ImportMethodFromBatchFile(
        self, batchDataPath: str, batchFileName: str, revisionNumber: str
    ) -> None: ...
    def DuplicateCompounds(self, compoundIds: List[int]) -> None: ...

class MethodState(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CalibrationDefined: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState
    ) = ...  # static # readonly
    CompoundsDefined: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState = (
        ...
    )  # static # readonly
    CreatedEmpty: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState = (
        ...
    )  # static # readonly
    ISTDsDefined: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState = (
        ...
    )  # static # readonly
    QualifiersDefined: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodState
    ) = ...  # static # readonly

class MethodTasksControl(
    Infragistics.Win.IUltraControlElement,
    Infragistics.Shared.IUltraLicensedComponent,
    Infragistics.Win.IValidatorClient,
    Infragistics.Win.UltraWinExplorerBar.UltraExplorerBar,
    Infragistics.Win.IImageListProvider,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.ComponentModel.ISupportInitialize,
    System.IDisposable,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.ISelectionManager,
    System.ComponentModel.ISynchronizeInvoke,
    System.Configuration.IPersistComponentSettings,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    Infragistics.Shared.Serialization.ICodeDomSerializableEX,
    Infragistics.Win.UltraWinExplorerBar.IItemContainer,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.IBindableComponent,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    Agilent.MassHunter.Quantitative.UIModel.IMethodTasksPane,
    Infragistics.Win.IControlElementEventProcessor,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    Infragistics.Win.Notifications.INotificationBadgeSettingsOwner,
    Infragistics.Win.Touch.IGestureConsumer,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    Infragistics.Win.IUltraControl,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IDropTarget,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...
    def GetGroup(self, id: str) -> IExplorerBarGroup: ...
    def SetupTasks(
        self,
        toolbarsMgr: ToolbarsManagerBase,
        definition: ExplorerBarDefinition,
        resourceMgr: System.Resources.ResourceManager,
        workflowManager: IAddInManager,
    ) -> None: ...

class MethodValidationMessage:  # Class
    ColumnName: str  # readonly
    Message: str  # readonly
    MessageType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ValidationMessageType
    )  # readonly
    RowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase  # readonly
    TableName: str  # readonly

class MethodValidator:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def ValidateLibraryMethod(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchGlobals: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...
    @overload
    @staticmethod
    def ValidateMethod(
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchDataSet,
        batchId: int,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...
    @overload
    @staticmethod
    def ValidateMethod(
        methodSetup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...
    @staticmethod
    def ValidateReferenceLibrary(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchGlobals: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...

class MsIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    @overload
    def __init__(self, peakFinder: IFindPeaks) -> None: ...
    @overload
    def __init__(
        self, peakFinder: IFindPeaks, peakFilters: IPSetPeakFilter
    ) -> None: ...

    Parameters: IPSetPeakFind  # readonly

    def ManualIntegrate(
        self,
        chromatogram: IChromatogram,
        xStart: float,
        yStart: float,
        xEnd: float,
        yEnd: float,
        peaklist: IChromPeakList,
    ) -> IChromPeak: ...

class MsMsIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.MsMsIntegratorBase,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, peakFilters: IPSetPeakFilter) -> None: ...
    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...

class MsMsIntegratorBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    @overload
    def __init__(self, peakFinder: IFindPeaks) -> None: ...
    @overload
    def __init__(
        self, peakFinder: IFindPeaks, peakFilters: IPSetPeakFilter
    ) -> None: ...

    Parameters: IPSetPeakFind  # readonly

class MsMsIntegrator_GC(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.MsMsIntegratorBase,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, peakFilters: IPSetPeakFilter) -> None: ...
    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...

class MsMsIntegrator_LC(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.MsMsIntegratorBase,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, peakFilters: IPSetPeakFilter) -> None: ...
    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...

class MultiFitModel(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalCurveFitOptimizer
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, useRelativeConcentration: bool) -> None: ...

    DEFAULT_CONFIDENCE: float = ...  # static # readonly
    MAX_OUTLIER_COUNT: int = ...  # static # readonly
    N_PARAMETER_GRID_POINTS: int = ...  # static # readonly

    ConfidenceLevel: float
    CurveFitDataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CalCurveFitDataSet
    )  # readonly
    MaxOutlierCount: int

    @overload
    def EvaluateFitFunction(
        self, amounts: List[float], curveFitId: int
    ) -> List[float]: ...
    @overload
    def EvaluateFitFunction(
        self,
        amounts: List[float],
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> List[float]: ...
    @overload
    def EvaluateFitFunction(
        self,
        amount: float,
        curveFitType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType,
        originType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin,
        a: float,
        b: float,
        c: float,
    ) -> float: ...
    def GetOutlierIDs(self, curveFitId: int) -> List[int]: ...
    def LoadCurveFitData(
        self,
        quantDS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> None: ...
    def ComputeConfidenceBand(
        self,
        curveFitId: int,
        amounts: List[float],
        bottom: List[float],
        top: List[float],
    ) -> None: ...
    def GetFitFunctionRangeBottom(self, curveFitId: int) -> float: ...

class MzCollisionResolutionStrategy(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Max: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MzCollisionResolutionStrategy
    ) = ...  # static # readonly
    Sum: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MzCollisionResolutionStrategy
    ) = ...  # static # readonly
    Throw: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MzCollisionResolutionStrategy
    ) = ...  # static # readonly

class NameValue:  # Struct
    @overload
    def __init__(self, name: str, value_: Any) -> None: ...
    @overload
    def __init__(
        self, nv: Agilent.MassSpectrometry.DataAnalysis.Quantitative.NameValue
    ) -> None: ...

    Name: str  # readonly
    Value: Any  # readonly

class NeutralGainScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanBaseElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    def __init__(self, scanElementNode: System.Xml.XmlNode) -> None: ...

    Gain: float  # readonly
    HighMz: float  # readonly
    LowMz: float  # readonly

class NeutralLossScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanBaseElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    def __init__(self, scanElementNode: System.Xml.XmlNode) -> None: ...

    HighMz: float  # readonly
    Loss: float  # readonly
    LowMz: float  # readonly

class NoiseReferenceSignal(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Blank: Agilent.MassSpectrometry.DataAnalysis.Quantitative.NoiseReferenceSignal = (
        ...
    )  # static # readonly
    Sample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.NoiseReferenceSignal = (
        ...
    )  # static # readonly

class NormalizeType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Each: Agilent.MassSpectrometry.DataAnalysis.Quantitative.NormalizeType = (
        ...
    )  # static # readonly
    EachX: Agilent.MassSpectrometry.DataAnalysis.Quantitative.NormalizeType = (
        ...
    )  # static # readonly

class NumbersUtil:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def FindBinaryGreatestCommonDivisor(a: int, b: int) -> int: ...
    @staticmethod
    def FindNearestRationalNumber(
        a: float, precision: float, p: int, q: int
    ) -> float: ...
    @staticmethod
    def FindRationalGCD(
        a: float, b: float, precision: float, p: int, q: int
    ) -> float: ...
    @staticmethod
    def FindGreatestCommonDivisor(a: int, b: int) -> int: ...

class NumericFormatUtils:  # Class
    SignificantFiguresFormatPrefix: str = ...  # static # readonly

    @staticmethod
    def CreateSignificantFiguresFormat(
        digits: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat: ...
    @staticmethod
    def ToSignificantDigits(
        value_: float, significant_digits: int, provider: System.IFormatProvider
    ) -> str: ...
    @staticmethod
    def FromFormatString(
        fmt: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat: ...
    @overload
    @staticmethod
    def ToString(
        value_: Any,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: Any,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
        provider: System.IFormatProvider,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: float,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: float,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
        provider: System.IFormatProvider,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: System.DateTime,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: System.DateTime,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
        provider: System.IFormatProvider,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: System.DateTimeOffset,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...
    @overload
    @staticmethod
    def ToString(
        value_: System.DateTimeOffset,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
        provider: System.IFormatProvider,
    ) -> str: ...

class ObjectTrack:  # Class
    @staticmethod
    def Created(obj: Any) -> None: ...
    @staticmethod
    def Disposed(obj: Any) -> None: ...
    @staticmethod
    def Dump() -> None: ...
    @staticmethod
    def Finalized(obj: Any) -> None: ...

class OptimizedQuantDataSet(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
):  # Class
    @overload
    def __init__(
        self,
        quantDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchID: int,
    ) -> None: ...
    @overload
    def __init__(
        self,
        quantDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    @overload
    def __init__(
        self,
        quantDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchID: int,
        sampleID: int,
    ) -> None: ...

    Batch: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.BatchRowTable
    )  # readonly
    BatchID: int  # readonly
    BatchProperties: System.Data.PropertyCollection  # readonly
    BatchRowCount: int  # readonly
    BatchTable: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchTable
    )  # readonly
    Calibration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.CalibrationRowTable
    )  # readonly
    CalibrationRowCount: int  # readonly
    ColumnEventsDisabled: bool
    NumberFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat
    )  # readonly
    Peak: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakRowTable
    )  # readonly
    PeakQualifier: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakQualifierRowTable
    )  # readonly
    PeakQualifierRowCount: int  # readonly
    PeakRowCount: int  # readonly
    TargetCompound: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetCompoundRowTable
    )  # readonly
    TargetCompoundRowCount: int  # readonly
    TargetQualifier: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetQualifierRowTable
    )  # readonly
    TargetQualifierRowCount: int  # readonly

    def GetTargetQualifierRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
    ]: ...
    def FindCalibrationRow(
        self, batchID: int, sampleID: int, compoundID: int, levelID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def FindTargetCompoundRow(
        self, batchID: int, sampleID: int, compoundID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def GetCalReferenceForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def CopyResultsTo(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> None: ...
    def FindPeakQualifierRow(
        self,
        batchID: int,
        sampleID: int,
        compoundID: int,
        qualifierID: int,
        peakID: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow: ...
    def FindRelatedISTDCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    @staticmethod
    def ParallelCopyResultsTo(
        sampleDataSets: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet
        ],
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> None: ...
    def GetPeakQualifierRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow]: ...
    def GetCalibrationRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def FindTargetQualifierRow(
        self, batchID: int, sampleID: int, compoundID: int, qualifierID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
    def GetBatchRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow]: ...
    def CreateCalibrationRowForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def FindUnusedCalibrationLevelID(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> int: ...
    def GetTargetCompoundRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
    ]: ...
    def FindBatchRow(
        self, batchID: int, sampleID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
    def FindPeakRow(
        self, batchID: int, sampleID: int, compoundID: int, peakID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def GetCalibrationRowsForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def CopyTo(
        self,
        quantDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> None: ...
    def FindPrimaryPeakRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def GetPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
    @staticmethod
    def DebugCompare(
        a: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
        b: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    ) -> str: ...
    def DeleteAllCalibrationRows(self) -> None: ...

    # Nested Types

    class BatchRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow
    ):  # Class
        AcqDateTime: System.DateTime
        AcqDateTimeLocal: System.DateTimeOffset
        AcqMethodFileName: str
        AcqMethodPathName: str
        AcqOperator: str
        BalanceOverride: str
        Barcode: str
        BatchID: int
        CalibrationReferenceSampleID: int
        Comment: str
        Completed: bool
        DADateTime: System.DateTime
        DAMethodFileName: str
        DAMethodPathName: str
        DataFileName: str
        DataPathName: str
        Dilution: float
        DualInjector: bool
        DualInjectorAcqDateTime: System.DateTime
        DualInjectorBarcode: str
        DualInjectorExpectedBarcode: str
        DualInjectorVial: int
        DualInjectorVolume: float
        EquilibrationTime: float
        ExpectedBarcode: str
        GraphicSampleChromatogram: str
        ISTDDilution: float
        InjectionsPerPosition: int
        InjectorVolume: float
        InstrumentName: str
        InstrumentType: str
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        LevelName: str
        Locked: bool
        MatrixSpikeDilution: float
        MatrixSpikeGroup: str
        MatrixType: str
        OutlierCCTime: str
        PlateCode: str
        PlatePosition: str
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessage: str
        RackCode: str
        RackPosition: str
        RunStartValvePositionDescription: str
        RunStartValvePositionNumber: str
        RunStopValvePositionDescription: str
        RunStopValvePositionNumber: str
        SampleAmount: float
        SampleApproved: bool
        SampleGroup: str
        SampleID: int
        SampleInformation: str
        SampleName: str
        SamplePosition: str
        SamplePrepFileName: str
        SamplePrepPathName: str
        SampleType: str
        SamplingDateTime: System.DateTime
        SamplingTime: float
        SequenceFileName: str
        SequencePathName: str
        SurrogateDilution: float
        TotalSampleAmount: float
        TrayName: str
        TuneFileLastTimeStamp: System.DateTime
        TuneFileName: str
        TunePathName: str
        UserDefined: str
        UserDefined1: str
        UserDefined2: str
        UserDefined3: str
        UserDefined4: str
        UserDefined5: str
        UserDefined6: str
        UserDefined7: str
        UserDefined8: str
        UserDefined9: str
        Vial: int

        def SetGraphicSampleChromatogramNull(self) -> None: ...
        def SetEquilibrationTimeNull(self) -> None: ...
        def IsRackPositionNull(self) -> bool: ...
        def SetDataPathNameNull(self) -> None: ...
        def IsSampleTypeNull(self) -> bool: ...
        def SetRunStopValvePositionDescriptionNull(self) -> None: ...
        def IsISTDDilutionNull(self) -> bool: ...
        def IsDualInjectorVolumeNull(self) -> bool: ...
        def IsTrayNameNull(self) -> bool: ...
        def SetTotalSampleAmountNull(self) -> None: ...
        def IsAcqOperatorNull(self) -> bool: ...
        def IsBarcodeNull(self) -> bool: ...
        def IsUserDefined8Null(self) -> bool: ...
        def IsBatchIDNull(self) -> bool: ...
        def IsCalibrationReferenceSampleIDNull(self) -> bool: ...
        def SetSamplingDateTimeNull(self) -> None: ...
        def IsInstrumentTypeNull(self) -> bool: ...
        def SetDAMethodFileNameNull(self) -> None: ...
        def SetUserDefined5Null(self) -> None: ...
        def IsLockedNull(self) -> bool: ...
        def IsRunStartValvePositionDescriptionNull(self) -> bool: ...
        def IsDualInjectorExpectedBarcodeNull(self) -> bool: ...
        def IsUserDefined1Null(self) -> bool: ...
        def IsMatrixSpikeGroupNull(self) -> bool: ...
        def SetRunStartValvePositionNumberNull(self) -> None: ...
        def SetDilutionNull(self) -> None: ...
        def IsCompletedNull(self) -> bool: ...
        def IsDataPathNameNull(self) -> bool: ...
        def IsDualInjectorAcqDateTimeNull(self) -> bool: ...
        def SetSampleNameNull(self) -> None: ...
        def IsAcqMethodFileNameNull(self) -> bool: ...
        def IsSequenceFileNameNull(self) -> bool: ...
        def SetSamplingTimeNull(self) -> None: ...
        def IsSampleInformationNull(self) -> bool: ...
        def SetTuneFileLastTimeStampNull(self) -> None: ...
        def IsSamplingDateTimeNull(self) -> bool: ...
        def SetSampleInformationNull(self) -> None: ...
        def SetCommentNull(self) -> None: ...
        def IsDADateTimeNull(self) -> bool: ...
        def IsUserDefined6Null(self) -> bool: ...
        def IsSampleApprovedNull(self) -> bool: ...
        def IsUserDefined3Null(self) -> bool: ...
        def SetSampleGroupNull(self) -> None: ...
        def IsSampleAmountNull(self) -> bool: ...
        def IsDualInjectorNull(self) -> bool: ...
        def SetDualInjectorNull(self) -> None: ...
        def SetTunePathNameNull(self) -> None: ...
        def SetAcqDateTimeLocalNull(self) -> None: ...
        def IsRunStartValvePositionNumberNull(self) -> bool: ...
        def SetVialNull(self) -> None: ...
        def SetUserDefinedNull(self) -> None: ...
        def SetRunStartValvePositionDescriptionNull(self) -> None: ...
        def SetUserDefined3Null(self) -> None: ...
        def SetOutlierCCTimeNull(self) -> None: ...
        def SetMatrixSpikeDilutionNull(self) -> None: ...
        def IsPlateCodeNull(self) -> bool: ...
        def SetBarcodeNull(self) -> None: ...
        def SetRackCodeNull(self) -> None: ...
        def SetDualInjectorExpectedBarcodeNull(self) -> None: ...
        def IsSamplePrepPathNameNull(self) -> bool: ...
        def SetBatchIDNull(self) -> None: ...
        def SetUserDefined4Null(self) -> None: ...
        def SetInstrumentTypeNull(self) -> None: ...
        def SetSamplePositionNull(self) -> None: ...
        def IsUserDefined4Null(self) -> bool: ...
        def SetSampleIDNull(self) -> None: ...
        def SetDualInjectorVialNull(self) -> None: ...
        def SetUserDefined9Null(self) -> None: ...
        def IsUserDefined9Null(self) -> bool: ...
        def GetCompoundRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
        ]: ...
        def IsTuneFileLastTimeStampNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetSampleApprovedNull(self) -> None: ...
        def IsLevelNameNull(self) -> bool: ...
        def SetPlateCodeNull(self) -> None: ...
        def IsAcqMethodPathNameNull(self) -> bool: ...
        def SetPlatePositionNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def SetUserDefined6Null(self) -> None: ...
        def SetLevelNameNull(self) -> None: ...
        def SetUserDefined1Null(self) -> None: ...
        def IsInjectorVolumeNull(self) -> bool: ...
        def IsInstrumentNameNull(self) -> bool: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        ) -> None: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        ) -> None: ...
        def IsDataFileNameNull(self) -> bool: ...
        def IsSamplingTimeNull(self) -> bool: ...
        def IsDilutionNull(self) -> bool: ...
        def SetTuneFileNameNull(self) -> None: ...
        def SetDataFileNameNull(self) -> None: ...
        def SetBalanceOverrideNull(self) -> None: ...
        def SetInjectionsPerPositionNull(self) -> None: ...
        def IsGraphicSampleChromatogramNull(self) -> bool: ...
        def SetSequenceFileNameNull(self) -> None: ...
        def IsSamplePrepFileNameNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetAcqMethodPathNameNull(self) -> None: ...
        def IsMatrixTypeNull(self) -> bool: ...
        def IsUserDefined2Null(self) -> bool: ...
        def IsSampleIDNull(self) -> bool: ...
        def IsTotalSampleAmountNull(self) -> bool: ...
        def SetUserDefined8Null(self) -> None: ...
        def SetInjectorVolumeNull(self) -> None: ...
        def IsTuneFileNameNull(self) -> bool: ...
        def IsDAMethodPathNameNull(self) -> bool: ...
        def SetSurrogateDilutionNull(self) -> None: ...
        def SetMatrixTypeNull(self) -> None: ...
        def SetAcqOperatorNull(self) -> None: ...
        def IsUserDefined5Null(self) -> bool: ...
        def IsTunePathNameNull(self) -> bool: ...
        def SetSamplePrepFileNameNull(self) -> None: ...
        def IsBalanceOverrideNull(self) -> bool: ...
        def SetExpectedBarcodeNull(self) -> None: ...
        def IsOutlierCCTimeNull(self) -> bool: ...
        def SetDADateTimeNull(self) -> None: ...
        def SetLockedNull(self) -> None: ...
        def IsSamplePositionNull(self) -> bool: ...
        def SetSequencePathNameNull(self) -> None: ...
        def SetCompletedNull(self) -> None: ...
        def IsDAMethodFileNameNull(self) -> bool: ...
        def IsCommentNull(self) -> bool: ...
        def SetAcqMethodFileNameNull(self) -> None: ...
        def IsExpectedBarcodeNull(self) -> bool: ...
        def IsInjectionsPerPositionNull(self) -> bool: ...
        def SetTrayNameNull(self) -> None: ...
        def IsMatrixSpikeDilutionNull(self) -> bool: ...
        def IsAcqDateTimeLocalNull(self) -> bool: ...
        def IsUserDefined7Null(self) -> bool: ...
        def IsDualInjectorBarcodeNull(self) -> bool: ...
        def IsRunStopValvePositionNumberNull(self) -> bool: ...
        def SetSampleTypeNull(self) -> None: ...
        def SetDAMethodPathNameNull(self) -> None: ...
        def IsRunStopValvePositionDescriptionNull(self) -> bool: ...
        def SetUserDefined7Null(self) -> None: ...
        def IsEquilibrationTimeNull(self) -> bool: ...
        def SetISTDDilutionNull(self) -> None: ...
        def SetAcqDateTimeNull(self) -> None: ...
        def SetUserDefined2Null(self) -> None: ...
        def SetMatrixSpikeGroupNull(self) -> None: ...
        def SetSamplePrepPathNameNull(self) -> None: ...
        def SetDualInjectorBarcodeNull(self) -> None: ...
        def SetDualInjectorVolumeNull(self) -> None: ...
        def SetDualInjectorAcqDateTimeNull(self) -> None: ...
        def IsRackCodeNull(self) -> bool: ...
        def IsAcqDateTimeNull(self) -> bool: ...
        def SetCalibrationReferenceSampleIDNull(self) -> None: ...
        def SetSampleAmountNull(self) -> None: ...
        def SetRunStopValvePositionNumberNull(self) -> None: ...
        def IsSampleGroupNull(self) -> bool: ...
        def IsDualInjectorVialNull(self) -> bool: ...
        def IsSequencePathNameNull(self) -> bool: ...
        def SetInstrumentNameNull(self) -> None: ...
        def IsPlatePositionNull(self) -> bool: ...
        def SetRackPositionNull(self) -> None: ...
        def IsSampleNameNull(self) -> bool: ...
        def IsSurrogateDilutionNull(self) -> bool: ...
        def IsVialNull(self) -> bool: ...

    class BatchRowTable(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchTable
    ):  # Class
        def SelectByReferenceCalibrationSampleID(
            self, refCalSampleID: int
        ) -> System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow
        ]: ...
        def AddBatchDataRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.BatchRow,
        ) -> None: ...
        def NewBatchRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.BatchRow
        ): ...
        def RemoveBatchRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.BatchRow,
        ) -> None: ...

    class CalibrationRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow
    ):  # Class
        BatchID: int
        CalibrationSTDAcquisitionDateTime: System.DateTime
        CalibrationSTDPathName: str
        CalibrationType: str
        CompoundID: int
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        LevelAverageCounter: float
        LevelConcentration: float
        LevelEnable: bool
        LevelID: int
        LevelLastUpdateTime: System.DateTime
        LevelName: str
        LevelRSD: float
        LevelResponse: float
        LevelResponseFactor: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        SampleID: int

        def IsCalibrationTypeNull(self) -> bool: ...
        def IsBatchIDNull(self) -> bool: ...
        def IsCalibrationSTDPathNameNull(self) -> bool: ...
        def IsLevelNameNull(self) -> bool: ...
        def IsLevelLastUpdateTimeNull(self) -> bool: ...
        def SetCalibrationSTDAcquisitionDateTimeNull(self) -> None: ...
        def SetSampleIDNull(self) -> None: ...
        def IsLevelResponseFactorNull(self) -> bool: ...
        def IsSampleIDNull(self) -> bool: ...
        def SetLevelLastUpdateTimeNull(self) -> None: ...
        def SetLevelIDNull(self) -> None: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
        ) -> None: ...
        def SetCompoundIDNull(self) -> None: ...
        def SetCalibrationTypeNull(self) -> None: ...
        def IsLevelEnableNull(self) -> bool: ...
        def SetLevelConcentrationNull(self) -> None: ...
        def IsLevelResponseNull(self) -> bool: ...
        def IsLevelConcentrationNull(self) -> bool: ...
        def IsCompoundIDNull(self) -> bool: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def IsLevelIDNull(self) -> bool: ...
        def SetCalibrationSTDPathNameNull(self) -> None: ...
        def SetLevelAverageCounterNull(self) -> None: ...
        def SetLevelNameNull(self) -> None: ...
        def SetLevelEnableNull(self) -> None: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        ) -> None: ...
        def IsLevelRSDNull(self) -> bool: ...
        def SetBatchIDNull(self) -> None: ...
        def IsCalibrationSTDAcquisitionDateTimeNull(self) -> bool: ...
        def Clone(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
        def IsLevelAverageCounterNull(self) -> bool: ...
        def SetLevelRSDNull(self) -> None: ...
        def SetLevelResponseFactorNull(self) -> None: ...
        def SetLevelResponseNull(self) -> None: ...

    class CalibrationRowTable:  # Class
        def DeleteCalibrationRows(self) -> None: ...
        def NewCalibrationRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.CalibrationRow
        ): ...
        def RemoveCalibrationRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.CalibrationRow,
        ) -> None: ...
        def AddCalibrationRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.CalibrationRow,
        ) -> None: ...

    class PeakQualifierRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow
    ):  # Class
        Area: float
        BaselineEnd: float
        BaselineEndOriginal: float
        BaselineStandardDeviation: float
        BaselineStart: float
        BaselineStartOriginal: float
        BatchID: int
        CoelutionScore: float
        CompoundID: int
        FullWidthHalfMaximum: float
        Height: float
        IntegrationEndTime: float
        IntegrationEndTimeOriginal: float
        IntegrationMetricQualityFlags: str
        IntegrationQualityMetric: str
        IntegrationStartTime: float
        IntegrationStartTimeOriginal: float
        IsZeroPeaked: bool  # readonly
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        MZ: float
        ManuallyIntegrated: bool
        MassAccuracy: float
        Noise: float
        NoiseRegions: str
        OutlierQualifierCoelutionScore: str
        OutlierQualifierFullWidthHalfMaximum: str
        OutlierQualifierIntegrationQualityMetric: str
        OutlierQualifierMassAccuracy: str
        OutlierQualifierOutOfLimits: str
        OutlierQualifierResolutionFront: str
        OutlierQualifierResolutionRear: str
        OutlierQualifierSignalToNoiseRatio: str
        OutlierQualifierSymmetry: str
        OutlierSaturationRecovery: str
        PeakID: int
        PeakRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakRow
        )  # readonly
        QualifierID: int
        QualifierResponseRatio: float
        QualifierResponseRatioOriginal: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ResolutionFront: float
        ResolutionRear: float
        RetentionTime: float
        RetentionTimeOriginal: float
        SampleID: int
        SaturationRecoveryRatio: float
        SignalToNoiseRatio: float
        Symmetry: float
        UserCustomCalculation: float

        def GetPeakRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
        def SetCompoundIDNull(self) -> None: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def SetOutlierQualifierSignalToNoiseRatioNull(self) -> None: ...
        def IsResolutionFrontNull(self) -> bool: ...
        def IsFullWidthHalfMaximumNull(self) -> bool: ...
        def SetOutlierSaturationRecoveryNull(self) -> None: ...
        def IsOutlierQualifierOutOfLimitsNull(self) -> bool: ...
        def IsBatchIDNull(self) -> bool: ...
        def SetAreaNull(self) -> None: ...
        def IsOutlierQualifierMassAccuracyNull(self) -> bool: ...
        def SetCoelutionScoreNull(self) -> None: ...
        def IsOutlierQualifierSignalToNoiseRatioNull(self) -> bool: ...
        def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
        def SetHeightNull(self) -> None: ...
        def IsRetentionTimeOriginalNull(self) -> bool: ...
        def SetSignalToNoiseRatioNull(self) -> None: ...
        def SetFullWidthHalfMaximumNull(self) -> None: ...
        def SetIntegrationStartTimeNull(self) -> None: ...
        def IsPeakIDNull(self) -> bool: ...
        def IsOutlierSaturationRecoveryNull(self) -> bool: ...
        def SetResolutionFrontNull(self) -> None: ...
        def IsNoiseNull(self) -> bool: ...
        def IsOutlierQualifierResolutionRearNull(self) -> bool: ...
        def IsOutlierQualifierSymmetryNull(self) -> bool: ...
        def SetBaselineStandardDeviationNull(self) -> None: ...
        def SetOutlierQualifierFullWidthHalfMaximumNull(self) -> None: ...
        def IsBaselineStartOriginalNull(self) -> bool: ...
        def IsCompoundIDNull(self) -> bool: ...
        def IsBaselineEndOriginalNull(self) -> bool: ...
        def IsResolutionRearNull(self) -> bool: ...
        def SetBatchIDNull(self) -> None: ...
        def SetIntegrationStartTimeOriginalNull(self) -> None: ...
        def SetIntegrationQualityMetricNull(self) -> None: ...
        def SetSampleIDNull(self) -> None: ...
        def SetBaselineStartOriginalNull(self) -> None: ...
        def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
        def SetManuallyIntegratedNull(self) -> None: ...
        def IsOutlierQualifierIntegrationQualityMetricNull(self) -> bool: ...
        def SetIntegrationEndTimeOriginalNull(self) -> None: ...
        def IsSignalToNoiseRatioNull(self) -> bool: ...
        def IsOutlierQualifierResolutionFrontNull(self) -> bool: ...
        def IsSaturationRecoveryRatioNull(self) -> bool: ...
        def IsQualifierIDNull(self) -> bool: ...
        def SetOutlierQualifierResolutionRearNull(self) -> None: ...
        def IsIntegrationStartTimeNull(self) -> bool: ...
        def IsBaselineStartNull(self) -> bool: ...
        def SetRetentionTimeOriginalNull(self) -> None: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetOutlierQualifierOutOfLimitsNull(self) -> None: ...
        def SetPeakIDNull(self) -> None: ...
        def SetOutlierQualifierIntegrationQualityMetricNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
        ) -> None: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
        ) -> None: ...
        def SetNoiseNull(self) -> None: ...
        def SetOutlierQualifierResolutionFrontNull(self) -> None: ...
        def IsQualifierResponseRatioNull(self) -> bool: ...
        def SetBaselineEndOriginalNull(self) -> None: ...
        def SetIntegrationEndTimeNull(self) -> None: ...
        def SetQualifierResponseRatioOriginalNull(self) -> None: ...
        def SetQualifierResponseRatioNull(self) -> None: ...
        def IsSampleIDNull(self) -> bool: ...
        def IsBaselineEndNull(self) -> bool: ...
        def IsHeightNull(self) -> bool: ...
        def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
        def IsBaselineStandardDeviationNull(self) -> bool: ...
        def GetTargetQualifierRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
        def IsIntegrationEndTimeNull(self) -> bool: ...
        def SetMassAccuracyNull(self) -> None: ...
        def IsManuallyIntegratedNull(self) -> bool: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def IsOutlierQualifierCoelutionScoreNull(self) -> bool: ...
        def SetSymmetryNull(self) -> None: ...
        def SetOutlierQualifierCoelutionScoreNull(self) -> None: ...
        def IsMZNull(self) -> bool: ...
        def IsMassAccuracyNull(self) -> bool: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def IsSymmetryNull(self) -> bool: ...
        def SetSaturationRecoveryRatioNull(self) -> None: ...
        def IsCoelutionScoreNull(self) -> bool: ...
        def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetOutlierQualifierMassAccuracyNull(self) -> None: ...
        def IsOutlierQualifierFullWidthHalfMaximumNull(self) -> bool: ...
        def IsAreaNull(self) -> bool: ...
        def SetBaselineStartNull(self) -> None: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def IsQualifierResponseRatioOriginalNull(self) -> bool: ...
        def SetQualifierIDNull(self) -> None: ...
        def IsIntegrationQualityMetricNull(self) -> bool: ...
        def SetResolutionRearNull(self) -> None: ...
        def SetOutlierQualifierSymmetryNull(self) -> None: ...
        def SetBaselineEndNull(self) -> None: ...

    class PeakQualifierRowTable:  # Class
        def RemovePeakQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakQualifierRow,
        ) -> None: ...
        def Clear(self) -> None: ...
        def NewPeakQualifierRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakQualifierRow
        ): ...
        def AddPeakQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakQualifierRow,
        ) -> None: ...

    class PeakRow(Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow):  # Class
        Accuracy: float
        AlternativePeakRTDiff: float
        AlternativeTargetHit: str
        Area: float
        AreaCorrectionResponse: float
        BaselineDraw: str
        BaselineEnd: float
        BaselineEndOriginal: float
        BaselineStandardDeviation: float
        BaselineStart: float
        BaselineStartOriginal: float
        BatchID: int
        CCISTDResponseRatio: float
        CCResponseRatio: float
        CalculatedConcentration: float
        CapacityFactor: float
        CompoundID: int
        EstimatedConcentration: str
        FinalConcentration: float
        FullWidthHalfMaximum: float
        GroupNumber: int
        Height: float
        ISTDConcentrationRatio: float
        ISTDResponsePercentDeviation: float
        ISTDResponseRatio: float
        IntegrationEndTime: float
        IntegrationEndTimeOriginal: float
        IntegrationMetricQualityFlags: str
        IntegrationQualityMetric: str
        IntegrationStartTime: float
        IntegrationStartTimeOriginal: float
        IsZeroPeaked: bool  # readonly
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        MZ: float
        ManuallyIntegrated: bool
        MassAbundanceScore: float
        MassAccuracy: float
        MassAccuracyScore: float
        MassMatchScore: float
        MassSpacingScore: float
        MatrixSpikePercentDeviation: float
        MatrixSpikePercentRecovery: float
        Noise: float
        NoiseRegions: str
        OutlierAccuracy: str
        OutlierBelowLimitOfDetection: str
        OutlierBelowLimitOfQuantitation: str
        OutlierBlankConcentrationOutsideLimit: str
        OutlierCCISTDResponseRatio: str
        OutlierCCResponseRatio: str
        OutlierCCRetentionTime: str
        OutlierCapacityFactor: str
        OutlierFullWidthHalfMaximum: str
        OutlierISTDResponse: str
        OutlierISTDResponsePercentDeviation: str
        OutlierIntegrationQualityMetric: str
        OutlierLibraryMatchScore: str
        OutlierMassAccuracy: str
        OutlierMassMatchScore: str
        OutlierMatrixSpikeGroupRecovery: str
        OutlierMatrixSpikeOutOfLimits: str
        OutlierMatrixSpikeOutsidePercentDeviation: str
        OutlierMatrixSpikePercentRecovery: str
        OutlierOutOfCalibrationRange: str
        OutlierPlates: str
        OutlierPurity: str
        OutlierQCLCSRecoveryOutOfLimits: str
        OutlierQCOutOfLimits: str
        OutlierQCOutsideRSD: str
        OutlierQValue: str
        OutlierRelativeRetentionTime: str
        OutlierResolutionFront: str
        OutlierResolutionRear: str
        OutlierRetentionTime: str
        OutlierSampleAmountOutOfLimits: str
        OutlierSampleOutsideRSD: str
        OutlierSaturationRecovery: str
        OutlierSignalToNoiseRatioBelowLimit: str
        OutlierSurrogateOutOfLimits: str
        OutlierSurrogatePercentRecovery: str
        OutlierSymmetry: str
        PeakID: int
        Plates: int
        Purity: float
        QValueComputed: int
        QValueSort: int
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ReferenceLibraryMatchScore: float
        RelativeRetentionTime: float
        ResolutionFront: float
        ResolutionRear: float
        ResponseRatio: float
        RetentionIndex: float
        RetentionTime: float
        RetentionTimeDifference: float
        RetentionTimeDifferenceKey: int
        RetentionTimeOriginal: float
        SampleID: int
        SampleRSD: float
        SaturationRecoveryRatio: float
        SelectedGroupRetentionTime: float
        SelectedTargetRetentionTime: float
        SignalToNoiseRatio: float
        SurrogatePercentRecovery: float
        Symmetry: float
        TargetResponse: float
        TargetResponseOriginal: float
        UserCustomCalculation: float
        UserCustomCalculation1: float
        UserCustomCalculation2: float
        UserCustomCalculation3: float
        UserCustomCalculation4: float
        Width: float

        def IsTargetResponseNull(self) -> bool: ...
        def SetCompoundIDNull(self) -> None: ...
        def SetOutlierPurityNull(self) -> None: ...
        def SetOutlierCCResponseRatioNull(self) -> None: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def SetOutlierResolutionRearNull(self) -> None: ...
        def IsMatrixSpikePercentDeviationNull(self) -> bool: ...
        def IsUserCustomCalculation2Null(self) -> bool: ...
        def IsOutlierMassAccuracyNull(self) -> bool: ...
        def IsOutlierResolutionRearNull(self) -> bool: ...
        def SetUserCustomCalculation4Null(self) -> None: ...
        def IsOutlierPurityNull(self) -> bool: ...
        def IsFullWidthHalfMaximumNull(self) -> bool: ...
        def IsResolutionFrontNull(self) -> bool: ...
        def SetOutlierSaturationRecoveryNull(self) -> None: ...
        def IsOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> bool: ...
        def IsSelectedGroupRetentionTimeNull(self) -> bool: ...
        def IsOutlierBelowLimitOfDetectionNull(self) -> bool: ...
        def IsBatchIDNull(self) -> bool: ...
        def IsBaselineDrawNull(self) -> bool: ...
        def IsOutlierRetentionTimeNull(self) -> bool: ...
        def SetWidthNull(self) -> None: ...
        def SetResponseRatioNull(self) -> None: ...
        def SetAreaNull(self) -> None: ...
        def SetFinalConcentrationNull(self) -> None: ...
        def IsAlternativeTargetHitNull(self) -> bool: ...
        def IsOutlierCCRetentionTimeNull(self) -> bool: ...
        def IsOutlierOutOfCalibrationRangeNull(self) -> bool: ...
        def IsOutlierSymmetryNull(self) -> bool: ...
        def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
        def IsOutlierBlankConcentrationOutsideLimitNull(self) -> bool: ...
        def SetHeightNull(self) -> None: ...
        def IsOutlierAccuracyNull(self) -> bool: ...
        def SetRetentionTimeDifferenceKeyNull(self) -> None: ...
        def IsOutlierSurrogateOutOfLimitsNull(self) -> bool: ...
        def SetOutlierQCLCSRecoveryOutOfLimitsNull(self) -> None: ...
        def SetOutlierBlankConcentrationOutsideLimitNull(self) -> None: ...
        def IsRetentionTimeOriginalNull(self) -> bool: ...
        def SetSignalToNoiseRatioNull(self) -> None: ...
        def SetOutlierSymmetryNull(self) -> None: ...
        def IsCCResponseRatioNull(self) -> bool: ...
        def SetFullWidthHalfMaximumNull(self) -> None: ...
        def SetOutlierIntegrationQualityMetricNull(self) -> None: ...
        def IsFinalConcentrationNull(self) -> bool: ...
        def SetIntegrationStartTimeNull(self) -> None: ...
        def SetUserCustomCalculation1Null(self) -> None: ...
        def IsPeakIDNull(self) -> bool: ...
        def SetOutlierMassAccuracyNull(self) -> None: ...
        def SetISTDConcentrationRatioNull(self) -> None: ...
        def SetOutlierMatrixSpikeGroupRecoveryNull(self) -> None: ...
        def IsOutlierSaturationRecoveryNull(self) -> bool: ...
        def IsMassSpacingScoreNull(self) -> bool: ...
        def IsNoiseNull(self) -> bool: ...
        def SetAlternativeTargetHitNull(self) -> None: ...
        def SetOutlierAccuracyNull(self) -> None: ...
        def SetResolutionFrontNull(self) -> None: ...
        def SetOutlierQCOutsideRSDNull(self) -> None: ...
        def IsMassAbundanceScoreNull(self) -> bool: ...
        def IsOutlierRelativeRetentionTimeNull(self) -> bool: ...
        def IsCapacityFactorNull(self) -> bool: ...
        def SetMassAccuracyScoreNull(self) -> None: ...
        def SetOutlierQCOutOfLimitsNull(self) -> None: ...
        def IsOutlierISTDResponsePercentDeviationNull(self) -> bool: ...
        def IsOutlierMatrixSpikePercentRecoveryNull(self) -> bool: ...
        def SetMassSpacingScoreNull(self) -> None: ...
        def GetQualifierPeakRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow
        ]: ...
        def SetRelativeRetentionTimeNull(self) -> None: ...
        def IsOutlierSurrogatePercentRecoveryNull(self) -> bool: ...
        def SetOutlierISTDResponseNull(self) -> None: ...
        def SetMatrixSpikePercentDeviationNull(self) -> None: ...
        def IsRetentionTimeDifferenceKeyNull(self) -> bool: ...
        def SetOutlierCapacityFactorNull(self) -> None: ...
        def SetBaselineStandardDeviationNull(self) -> None: ...
        def SetPlatesNull(self) -> None: ...
        def IsUserCustomCalculation4Null(self) -> bool: ...
        def IsBaselineStartOriginalNull(self) -> bool: ...
        def IsCompoundIDNull(self) -> bool: ...
        def IsBaselineEndOriginalNull(self) -> bool: ...
        def SetOutlierQValueNull(self) -> None: ...
        def IsPlatesNull(self) -> bool: ...
        def IsResolutionRearNull(self) -> bool: ...
        def SetAccuracyNull(self) -> None: ...
        def SetBatchIDNull(self) -> None: ...
        def SetIntegrationStartTimeOriginalNull(self) -> None: ...
        def SetOutlierBelowLimitOfQuantitationNull(self) -> None: ...
        def IsOutlierCapacityFactorNull(self) -> bool: ...
        def IsRelativeRetentionTimeNull(self) -> bool: ...
        def SetIntegrationQualityMetricNull(self) -> None: ...
        def IsOutlierIntegrationQualityMetricNull(self) -> bool: ...
        def SetSampleIDNull(self) -> None: ...
        def IsWidthNull(self) -> bool: ...
        def IsOutlierMatrixSpikeGroupRecoveryNull(self) -> bool: ...
        def SetBaselineStartOriginalNull(self) -> None: ...
        def SetTargetResponseNull(self) -> None: ...
        def IsTargetResponseOriginalNull(self) -> bool: ...
        def IsOutlierSignalToNoiseRatioBelowLimitNull(self) -> bool: ...
        def IsAlternativePeakRTDiffNull(self) -> bool: ...
        def IsOutlierQCOutOfLimitsNull(self) -> bool: ...
        def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
        def SetManuallyIntegratedNull(self) -> None: ...
        def IsAccuracyNull(self) -> bool: ...
        def IsQValueComputedNull(self) -> bool: ...
        def SetOutlierSurrogateOutOfLimitsNull(self) -> None: ...
        def IsPurityNull(self) -> bool: ...
        def IsSampleRSDNull(self) -> bool: ...
        def IsOutlierLibraryMatchScoreNull(self) -> bool: ...
        def SetIntegrationEndTimeOriginalNull(self) -> None: ...
        def IsAreaCorrectionResponseNull(self) -> bool: ...
        def IsSignalToNoiseRatioNull(self) -> bool: ...
        def IsOutlierPlatesNull(self) -> bool: ...
        def SetCapacityFactorNull(self) -> None: ...
        def SetEstimatedConcentrationNull(self) -> None: ...
        def SetReferenceLibraryMatchScoreNull(self) -> None: ...
        def IsSaturationRecoveryRatioNull(self) -> bool: ...
        def IsOutlierCCISTDResponseRatioNull(self) -> bool: ...
        def IsUserCustomCalculation1Null(self) -> bool: ...
        def IsIntegrationStartTimeNull(self) -> bool: ...
        def SetAreaCorrectionResponseNull(self) -> None: ...
        def IsBaselineStartNull(self) -> bool: ...
        def SetOutlierOutOfCalibrationRangeNull(self) -> None: ...
        def SetSelectedGroupRetentionTimeNull(self) -> None: ...
        def IsOutlierCCResponseRatioNull(self) -> bool: ...
        def SetQValueComputedNull(self) -> None: ...
        def IsOutlierBelowLimitOfQuantitationNull(self) -> bool: ...
        def IsCCISTDResponseRatioNull(self) -> bool: ...
        def IsOutlierQValueNull(self) -> bool: ...
        def SetOutlierSurrogatePercentRecoveryNull(self) -> None: ...
        def SetCCISTDResponseRatioNull(self) -> None: ...
        def SetOutlierMatrixSpikePercentRecoveryNull(self) -> None: ...
        def IsOutlierMatrixSpikeOutOfLimitsNull(self) -> bool: ...
        def SetRetentionTimeOriginalNull(self) -> None: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetPeakIDNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
        ) -> None: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
        ) -> None: ...
        def IsOutlierSampleAmountOutOfLimitsNull(self) -> bool: ...
        def SetNoiseNull(self) -> None: ...
        def SetPurityNull(self) -> None: ...
        def SetISTDResponsePercentDeviationNull(self) -> None: ...
        def SetMatrixSpikePercentRecoveryNull(self) -> None: ...
        def SetQValueSortNull(self) -> None: ...
        def IsSelectedTargetRetentionTimeNull(self) -> bool: ...
        def SetBaselineEndOriginalNull(self) -> None: ...
        def SetSampleRSDNull(self) -> None: ...
        def SetIntegrationEndTimeNull(self) -> None: ...
        def IsOutlierMassMatchScoreNull(self) -> bool: ...
        def SetSurrogatePercentRecoveryNull(self) -> None: ...
        def SetUserCustomCalculation2Null(self) -> None: ...
        def SetRetentionTimeDifferenceNull(self) -> None: ...
        def IsQValueSortNull(self) -> bool: ...
        def SetOutlierBelowLimitOfDetectionNull(self) -> None: ...
        def SetCCResponseRatioNull(self) -> None: ...
        def IsISTDResponsePercentDeviationNull(self) -> bool: ...
        def IsUserCustomCalculation3Null(self) -> bool: ...
        def SetAlternativePeakRTDiffNull(self) -> None: ...
        def SetOutlierResolutionFrontNull(self) -> None: ...
        def IsSampleIDNull(self) -> bool: ...
        def IsBaselineEndNull(self) -> bool: ...
        def SetOutlierLibraryMatchScoreNull(self) -> None: ...
        def IsOutlierQCOutsideRSDNull(self) -> bool: ...
        def IsOutlierQCLCSRecoveryOutOfLimitsNull(self) -> bool: ...
        def IsHeightNull(self) -> bool: ...
        def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
        def IsBaselineStandardDeviationNull(self) -> bool: ...
        def IsIntegrationEndTimeNull(self) -> bool: ...
        def SetMassAccuracyNull(self) -> None: ...
        def IsMatrixSpikePercentRecoveryNull(self) -> bool: ...
        def SetOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> None: ...
        def IsManuallyIntegratedNull(self) -> bool: ...
        def IsResponseRatioNull(self) -> bool: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def IsOutlierResolutionFrontNull(self) -> bool: ...
        def SetSymmetryNull(self) -> None: ...
        def SetMassMatchScoreNull(self) -> None: ...
        def SetOutlierISTDResponsePercentDeviationNull(self) -> None: ...
        def IsMassAccuracyScoreNull(self) -> bool: ...
        def IsISTDConcentrationRatioNull(self) -> bool: ...
        def IsRetentionIndexNull(self) -> bool: ...
        def IsOutlierISTDResponseNull(self) -> bool: ...
        def IsMZNull(self) -> bool: ...
        def IsMassAccuracyNull(self) -> bool: ...
        def SetGroupNumberNull(self) -> None: ...
        def IsMassMatchScoreNull(self) -> bool: ...
        def SetOutlierCCISTDResponseRatioNull(self) -> None: ...
        def SetMassAbundanceScoreNull(self) -> None: ...
        def IsCalculatedConcentrationNull(self) -> bool: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def SetOutlierRetentionTimeNull(self) -> None: ...
        def IsSymmetryNull(self) -> bool: ...
        def SetSaturationRecoveryRatioNull(self) -> None: ...
        def SetOutlierMassMatchScoreNull(self) -> None: ...
        def SetRetentionIndexNull(self) -> None: ...
        def SetOutlierCCRetentionTimeNull(self) -> None: ...
        def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
        def SetOutlierSampleAmountOutOfLimitsNull(self) -> None: ...
        def SetOutlierSignalToNoiseRatioBelowLimitNull(self) -> None: ...
        def SetTargetResponseOriginalNull(self) -> None: ...
        def SetSelectedTargetRetentionTimeNull(self) -> None: ...
        def IsOutlierFullWidthHalfMaximumNull(self) -> bool: ...
        def IsEstimatedConcentrationNull(self) -> bool: ...
        def IsOutlierSampleOutsideRSDNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetOutlierMatrixSpikeOutOfLimitsNull(self) -> None: ...
        def IsReferenceLibraryMatchScoreNull(self) -> bool: ...
        def IsAreaNull(self) -> bool: ...
        def SetCalculatedConcentrationNull(self) -> None: ...
        def SetBaselineStartNull(self) -> None: ...
        def IsISTDResponseRatioNull(self) -> bool: ...
        def SetOutlierSampleOutsideRSDNull(self) -> None: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def IsSurrogatePercentRecoveryNull(self) -> bool: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def SetBaselineDrawNull(self) -> None: ...
        def SetOutlierFullWidthHalfMaximumNull(self) -> None: ...
        def IsGroupNumberNull(self) -> bool: ...
        def SetOutlierRelativeRetentionTimeNull(self) -> None: ...
        def SetISTDResponseRatioNull(self) -> None: ...
        def SetOutlierPlatesNull(self) -> None: ...
        def IsIntegrationQualityMetricNull(self) -> bool: ...
        def SetResolutionRearNull(self) -> None: ...
        def SetBaselineEndNull(self) -> None: ...
        def IsRetentionTimeDifferenceNull(self) -> bool: ...
        def SetUserCustomCalculation3Null(self) -> None: ...

    class PeakRowTable:  # Class
        def NewPeakRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakRow
        ): ...
        def Clear(self) -> None: ...
        def RemovePeakRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakRow,
        ) -> None: ...
        def AddPeakRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.PeakRow,
        ) -> None: ...

    class TargetCompoundRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
    ):  # Class
        AccuracyLimitMultiplierLOQ: float
        AccuracyMaximumPercentDeviation: float
        AgilentID: str
        AlternativePeakCriteria: str
        AlternativePeakID: int
        AreaCorrectionFactor: float
        AreaCorrectionMZ: float
        AreaCorrectionSelectedMZ: float
        AverageRelativeRetentionTime: float
        AverageResponseFactor: float
        AverageResponseFactorRSD: float
        BatchID: int
        BlankResponseOffset: float
        CASNumber: str
        CCISTDResponseRatioLimitHigh: float
        CCISTDResponseRatioLimitLow: float
        CCResponseRatioLimitHigh: float
        CCResponseRatioLimitLow: float
        CalibrationRangeFilter: str
        CalibrationReferenceCompoundID: int
        CapacityFactorLimit: float
        CellAcceleratorVoltage: float
        CoelutionScoreLimit: float
        CollisionEnergy: float
        CollisionEnergyDelta: float
        ColumnVoidTime: float
        CompoundApproved: bool
        CompoundGroup: str
        CompoundID: int
        CompoundMath: str
        CompoundName: str
        CompoundType: str
        ConcentrationUnits: str
        CurveFit: str
        CurveFitFormula: str
        CurveFitLimitHigh: float
        CurveFitLimitLow: float
        CurveFitMinimumR2: float
        CurveFitOrigin: str
        CurveFitR2: float
        CurveFitStatus: str
        CurveFitWeight: str
        DilutionHighestConcentration: float
        DilutionPattern: str
        DynamicTargetCompoundID: int
        DynamicTargetRank: int
        ExpectedConcentration: float
        FragmentorVoltage: float
        FragmentorVoltageDelta: float
        FullWidthHalfMaximumLimitHigh: float
        FullWidthHalfMaximumLimitLow: float
        GraphicPeakChromatogram: str
        GraphicPeakQualifiers: str
        GraphicPeakSpectrum: str
        GraphicTargetCompoundCalibration: str
        ID: int
        ISTDCompoundID: int
        ISTDConcentration: float
        ISTDFlag: bool
        ISTDResponseLimitHigh: float
        ISTDResponseLimitLow: float
        ISTDResponseMaximumPercentDeviation: float
        ISTDResponseMinimumPercentDeviation: float
        IntegrationParameters: str
        IntegrationParametersModified: bool
        Integrator: str
        IonPolarity: str
        IonSource: str
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        KEGGID: str
        LeftRetentionTimeDelta: float
        LibraryMatchScore: float
        LibraryMatchScoreMinimum: float
        LibraryRetentionIndex: float
        LibraryRetentionTime: float
        LimitOfDetection: float
        LimitOfQuantitation: float
        LinearResponseRangeMax: float
        LinearResponseRangeMin: float
        MZ: float
        MZAdditional: str
        MZExtractionWindowFilterLeft: float
        MZExtractionWindowFilterRight: float
        MZExtractionWindowUnits: str
        MZScanRangeHigh: float
        MZScanRangeLow: float
        MassAccuracyLimit: float
        MassMatchScoreMinimum: float
        MatrixAConcentrationLimitHigh: float
        MatrixAConcentrationLimitLow: float
        MatrixBConcentrationLimitHigh: float
        MatrixBConcentrationLimitLow: float
        MatrixSpikeBConcentration: float
        MatrixSpikeBMaximumPercentDeviation: float
        MatrixSpikeBPercentRecoveryMaximum: float
        MatrixSpikeBPercentRecoveryMinimum: float
        MatrixSpikeConcentration: float
        MatrixSpikeMaximumPercentDeviation: float
        MatrixSpikePercentRecoveryMaximum: float
        MatrixSpikePercentRecoveryMinimum: float
        MatrixTypeOverride: str
        MaximumAverageResponseFactorRSD: float
        MaximumBlankConcentration: float
        MaximumBlankResponse: float
        MaximumCCResponseFactorDeviation: float
        MaximumNumberOfHits: int
        MaximumPercentResidual: float
        MethodDetectionLimit: float
        MinimumAverageResponseFactor: float
        MinimumCCRelativeResponseFactor: float
        MinimumPercentPurity: float
        MinimumSignalToNoiseRatio: float
        MolecularFormula: str
        Multiplier: float
        NeutralLossGain: float
        NoiseAlgorithmType: str
        NoiseOfRawSignal: float
        NoiseReference: str
        NoiseRegions: str
        NoiseStandardDeviationMultiplier: float
        NonReferenceWindowOverride: float
        OutlierAlternativePeak: str
        OutlierAverageResponseFactor: str
        OutlierAverageResponseFactorRSD: str
        OutlierBlankResponseOutsideLimit: str
        OutlierCCAverageResponseFactor: str
        OutlierCCRelativeResponseFactor: str
        OutlierCustomCalculation: str
        OutlierMethodDetectionLimit: str
        OutlierMinimumCurveFitR2: str
        OutlierPeakNotFound: str
        OutlierRelativeResponseFactor: str
        OutlierRelativeStandardError: str
        OutlierResponseCheckBelowLimit: str
        OutlierResponseFactor: str
        PeakFilterThreshold: str
        PeakFilterThresholdValue: float
        PeakSelectionCriterion: str
        PlatesCalculationType: str
        PlatesLimit: int
        PrimaryHitPeakID: int
        QCLCSMaximumRecoveryA: float
        QCLCSMaximumRecoveryB: float
        QCLCSMinimumRecoveryA: float
        QCLCSMinimumRecoveryB: float
        QCMaximumDeviation: float
        QCMaximumPercentRSD: float
        QValueMinimum: int
        QualifierRatioMethod: int
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitateByHeight: bool
        QuantitationMessage: str
        ReferenceMSPathName: str
        ReferenceWindowOverride: float
        RelativeISTDMultiplier: float
        RelativeResponseFactorMaximumPercentDeviation: float
        RelativeRetentionTimeMaximumPercentDeviation: float
        RelativeStandardError: float
        RelativeStandardErrorMaximum: float
        ResolutionCalculationType: str
        ResolutionLimit: float
        ResponseCheckMinimum: float
        ResponseFactorMaximumPercentDeviation: float
        RetentionIndex: float
        RetentionTime: float
        RetentionTimeDeltaUnits: str
        RetentionTimeWindow: float
        RetentionTimeWindowCC: float
        RetentionTimeWindowUnits: str
        RightRetentionTimeDelta: float
        RxUnlabeledIsotopicDilution: float
        RyLabeledIsotopicDilution: float
        SampleAmountLimitHigh: float
        SampleAmountLimitLow: float
        SampleID: int
        SampleMaximumPercentRSD: float
        ScanType: str
        SelectedMZ: float
        SignalInstance: int
        SignalName: str
        SignalRetentionTimeOffset: float
        SignalToNoiseMultiplier: float
        SignalType: str
        Smoothing: str
        SmoothingFunctionWidth: int
        SmoothingGaussianWidth: float
        Species: str
        SpectrumBaselineThreshold: float
        SpectrumExtractionOverride: str
        SpectrumPeakHeightPercentThreshold: float
        SpectrumPercentSaturationThreshold: float
        SpectrumQuantifierQualifierOnly: bool
        SpectrumScanInclusion: str
        Sublist: bool
        SurrogateConcentration: float
        SurrogateConcentrationLimitHigh: float
        SurrogateConcentrationLimitLow: float
        SurrogatePercentRecoveryMaximum: float
        SurrogatePercentRecoveryMinimum: float
        SymmetryCalculationType: str
        SymmetryLimitHigh: float
        SymmetryLimitLow: float
        TargetCompoundIDStatus: str
        ThresholdNumberOfPeaks: int
        TimeReferenceFlag: bool
        TimeSegment: int
        Transition: str
        TriggeredTransitions: str
        UncertaintyRelativeOrAbsolute: str
        UserAnnotation: str
        UserCustomCalculation: float
        UserCustomCalculationLimitHigh: float
        UserCustomCalculationLimitLow: float
        UserDefined: str
        UserDefined1: str
        UserDefined2: str
        UserDefined3: str
        UserDefined4: str
        UserDefined5: str
        UserDefined6: str
        UserDefined7: str
        UserDefined8: str
        UserDefined9: str
        UserDefinedTargetCompoundID: int
        WavelengthExtractionRangeHigh: float
        WavelengthExtractionRangeLow: float
        WavelengthReferenceRangeHigh: float
        WavelengthReferenceRangeLow: float

        def SetUserCustomCalculationLimitLowNull(self) -> None: ...
        def IsAgilentIDNull(self) -> bool: ...
        def IsLinearResponseRangeMinNull(self) -> bool: ...
        def SetUserDefined1Null(self) -> None: ...
        def IsTargetCompoundIDStatusNull(self) -> bool: ...
        def SetOutlierAlternativePeakNull(self) -> None: ...
        def IsOutlierResponseCheckBelowLimitNull(self) -> bool: ...
        def SetNoiseReferenceNull(self) -> None: ...
        def IsMatrixBConcentrationLimitHighNull(self) -> bool: ...
        def IsCASNumberNull(self) -> bool: ...
        def SetQualifierRatioMethodNull(self) -> None: ...
        def SetSignalRetentionTimeOffsetNull(self) -> None: ...
        def SetLibraryRetentionTimeNull(self) -> None: ...
        def SetDynamicTargetCompoundIDNull(self) -> None: ...
        def SetRelativeRetentionTimeMaximumPercentDeviationNull(self) -> None: ...
        def SetSurrogatePercentRecoveryMaximumNull(self) -> None: ...
        def SetAccuracyLimitMultiplierLOQNull(self) -> None: ...
        def AddCalRow(
            self,
            calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        ) -> None: ...
        def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
        def SetWavelengthExtractionRangeLowNull(self) -> None: ...
        def IsUserCustomCalculationLimitHighNull(self) -> bool: ...
        def IsWavelengthExtractionRangeLowNull(self) -> bool: ...
        def IsQCMaximumPercentRSDNull(self) -> bool: ...
        def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
        def SetCapacityFactorLimitNull(self) -> None: ...
        def IsSignalToNoiseMultiplierNull(self) -> bool: ...
        def SetIntegratorNull(self) -> None: ...
        def SetCurveFitR2Null(self) -> None: ...
        def SetMinimumCCRelativeResponseFactorNull(self) -> None: ...
        def IsMatrixSpikeBConcentrationNull(self) -> bool: ...
        def SetMaximumAverageResponseFactorRSDNull(self) -> None: ...
        def IsUserDefined8Null(self) -> bool: ...
        def IsISTDResponseLimitHighNull(self) -> bool: ...
        def SetOutlierResponseCheckBelowLimitNull(self) -> None: ...
        def SetQCLCSMinimumRecoveryBNull(self) -> None: ...
        def SetDilutionHighestConcentrationNull(self) -> None: ...
        def IsCurveFitMinimumR2Null(self) -> bool: ...
        def IsCurveFitLimitLowNull(self) -> bool: ...
        def IsCompoundIDNull(self) -> bool: ...
        def IsNoiseAlgorithmTypeNull(self) -> bool: ...
        def SetMinimumAverageResponseFactorNull(self) -> None: ...
        def IsNeutralLossGainNull(self) -> bool: ...
        def SetLeftRetentionTimeDeltaNull(self) -> None: ...
        def IsQCLCSMinimumRecoveryANull(self) -> bool: ...
        def SetOutlierCCAverageResponseFactorNull(self) -> None: ...
        def IsLimitOfQuantitationNull(self) -> bool: ...
        def IsISTDConcentrationNull(self) -> bool: ...
        def IsCurveFitLimitHighNull(self) -> bool: ...
        def SetBlankResponseOffsetNull(self) -> None: ...
        def SetMolecularFormulaNull(self) -> None: ...
        def IsSpectrumQuantifierQualifierOnlyNull(self) -> bool: ...
        def SetSurrogateConcentrationLimitLowNull(self) -> None: ...
        def IsSurrogateConcentrationLimitHighNull(self) -> bool: ...
        def IsMZExtractionWindowUnitsNull(self) -> bool: ...
        def SetNoiseAlgorithmTypeNull(self) -> None: ...
        def SetWavelengthReferenceRangeLowNull(self) -> None: ...
        def SetMatrixSpikeMaximumPercentDeviationNull(self) -> None: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        ) -> None: ...
        def SetFullWidthHalfMaximumLimitLowNull(self) -> None: ...
        def SetLimitOfDetectionNull(self) -> None: ...
        def IsDilutionHighestConcentrationNull(self) -> bool: ...
        def SetQCLCSMinimumRecoveryANull(self) -> None: ...
        def IsDynamicTargetRankNull(self) -> bool: ...
        def SetSignalToNoiseMultiplierNull(self) -> None: ...
        def IsSignalInstanceNull(self) -> bool: ...
        def IsLibraryMatchScoreMinimumNull(self) -> bool: ...
        def SetMZExtractionWindowUnitsNull(self) -> None: ...
        def SetMaximumBlankConcentrationNull(self) -> None: ...
        def SetReferenceMSPathNameNull(self) -> None: ...
        def SetMinimumSignalToNoiseRatioNull(self) -> None: ...
        def SetNonReferenceWindowOverrideNull(self) -> None: ...
        def SetOutlierCCRelativeResponseFactorNull(self) -> None: ...
        def IsMatrixSpikeBPercentRecoveryMaximumNull(self) -> bool: ...
        def IsCollisionEnergyDeltaNull(self) -> bool: ...
        def IsOutlierAverageResponseFactorRSDNull(self) -> bool: ...
        def IsQCLCSMaximumRecoveryANull(self) -> bool: ...
        def IsTimeSegmentNull(self) -> bool: ...
        def SetMaximumBlankResponseNull(self) -> None: ...
        def SetResolutionCalculationTypeNull(self) -> None: ...
        def IsIntegrationParametersNull(self) -> bool: ...
        def IsMZScanRangeHighNull(self) -> bool: ...
        def SetCollisionEnergyNull(self) -> None: ...
        def IsNoiseStandardDeviationMultiplierNull(self) -> bool: ...
        def SetMassMatchScoreMinimumNull(self) -> None: ...
        def SetQCMaximumDeviationNull(self) -> None: ...
        def IsTimeReferenceFlagNull(self) -> bool: ...
        def IsGraphicTargetCompoundCalibrationNull(self) -> bool: ...
        def IsAreaCorrectionMZNull(self) -> bool: ...
        def IsDilutionPatternNull(self) -> bool: ...
        def IsCurveFitFormulaNull(self) -> bool: ...
        def SetSmoothingNull(self) -> None: ...
        def SetSpectrumBaselineThresholdNull(self) -> None: ...
        def IsPlatesLimitNull(self) -> bool: ...
        def IsMatrixSpikePercentRecoveryMaximumNull(self) -> bool: ...
        def SetISTDCompoundIDNull(self) -> None: ...
        def SetBatchIDNull(self) -> None: ...
        def IsOutlierRelativeStandardErrorNull(self) -> bool: ...
        def SetCompoundIDNull(self) -> None: ...
        def SetRelativeStandardErrorNull(self) -> None: ...
        def IsUncertaintyRelativeOrAbsoluteNull(self) -> bool: ...
        def SetCurveFitFormulaNull(self) -> None: ...
        def SetSurrogateConcentrationNull(self) -> None: ...
        def IsSymmetryCalculationTypeNull(self) -> bool: ...
        def IsCompoundApprovedNull(self) -> bool: ...
        def SetSpeciesNull(self) -> None: ...
        def SetCurveFitLimitLowNull(self) -> None: ...
        def IsMinimumAverageResponseFactorNull(self) -> bool: ...
        def IsTriggeredTransitionsNull(self) -> bool: ...
        def IsUserDefined4Null(self) -> bool: ...
        def IsThresholdNumberOfPeaksNull(self) -> bool: ...
        def SetSampleAmountLimitLowNull(self) -> None: ...
        def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
        def IsCompoundTypeNull(self) -> bool: ...
        def IsSymmetryLimitHighNull(self) -> bool: ...
        def SetMatrixSpikeBPercentRecoveryMaximumNull(self) -> None: ...
        def SetUserDefined9Null(self) -> None: ...
        def SetNoiseOfRawSignalNull(self) -> None: ...
        def IsOutlierBlankResponseOutsideLimitNull(self) -> bool: ...
        def SetMatrixSpikePercentRecoveryMaximumNull(self) -> None: ...
        def IsCompoundGroupNull(self) -> bool: ...
        def SetLinearResponseRangeMinNull(self) -> None: ...
        def IsMatrixSpikePercentRecoveryMinimumNull(self) -> bool: ...
        def SetSpectrumQuantifierQualifierOnlyNull(self) -> None: ...
        def IsUserDefinedTargetCompoundIDNull(self) -> bool: ...
        def IsFullWidthHalfMaximumLimitLowNull(self) -> bool: ...
        def IsCurveFitStatusNull(self) -> bool: ...
        def SetCurveFitLimitHighNull(self) -> None: ...
        def SetTransitionNull(self) -> None: ...
        def IsLibraryRetentionTimeNull(self) -> bool: ...
        def SetMethodDetectionLimitNull(self) -> None: ...
        def SetISTDFlagNull(self) -> None: ...
        def SetOutlierPeakNotFoundNull(self) -> None: ...
        def SetMultiplierNull(self) -> None: ...
        def SetCoelutionScoreLimitNull(self) -> None: ...
        def SetDilutionPatternNull(self) -> None: ...
        def IsPeakFilterThresholdValueNull(self) -> bool: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def IsPrimaryHitPeakIDNull(self) -> bool: ...
        def SetOutlierRelativeStandardErrorNull(self) -> None: ...
        def SetQCLCSMaximumRecoveryBNull(self) -> None: ...
        def IsMatrixAConcentrationLimitHighNull(self) -> bool: ...
        def SetIntegrationParametersModifiedNull(self) -> None: ...
        def SetTimeReferenceFlagNull(self) -> None: ...
        def SetUserDefined4Null(self) -> None: ...
        def IsOutlierMinimumCurveFitR2Null(self) -> bool: ...
        def SetMatrixBConcentrationLimitHighNull(self) -> None: ...
        def SetDynamicTargetRankNull(self) -> None: ...
        def IsLimitOfDetectionNull(self) -> bool: ...
        def SetSpectrumScanInclusionNull(self) -> None: ...
        def SetIonPolarityNull(self) -> None: ...
        def IsOutlierPeakNotFoundNull(self) -> bool: ...
        def SetSignalInstanceNull(self) -> None: ...
        def IsBlankResponseOffsetNull(self) -> bool: ...
        def SetLibraryRetentionIndexNull(self) -> None: ...
        def IsOutlierResponseFactorNull(self) -> bool: ...
        def SetGraphicPeakSpectrumNull(self) -> None: ...
        def IsLibraryRetentionIndexNull(self) -> bool: ...
        def IsMZNull(self) -> bool: ...
        def SetISTDResponseLimitHighNull(self) -> None: ...
        def SetSmoothingFunctionWidthNull(self) -> None: ...
        def IsWavelengthReferenceRangeLowNull(self) -> bool: ...
        def IsOutlierCCRelativeResponseFactorNull(self) -> bool: ...
        def IsAverageResponseFactorNull(self) -> bool: ...
        def GetCalRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow
        ]: ...
        def SetAreaCorrectionSelectedMZNull(self) -> None: ...
        def SetTargetCompoundIDStatusNull(self) -> None: ...
        def SetRightRetentionTimeDeltaNull(self) -> None: ...
        def IsMatrixSpikeConcentrationNull(self) -> bool: ...
        def SetQCLCSMaximumRecoveryANull(self) -> None: ...
        def SetCurveFitWeightNull(self) -> None: ...
        def IsAverageRelativeRetentionTimeNull(self) -> bool: ...
        def SetPeakFilterThresholdNull(self) -> None: ...
        def IsIonPolarityNull(self) -> bool: ...
        def SetCASNumberNull(self) -> None: ...
        def IsRetentionTimeWindowCCNull(self) -> bool: ...
        def SetRetentionTimeDeltaUnitsNull(self) -> None: ...
        def IsCapacityFactorLimitNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetCompoundNameNull(self) -> None: ...
        def SetMaximumNumberOfHitsNull(self) -> None: ...
        def IsCurveFitNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetGraphicPeakQualifiersNull(self) -> None: ...
        def IsCollisionEnergyNull(self) -> bool: ...
        def SetOutlierRelativeResponseFactorNull(self) -> None: ...
        def IsFullWidthHalfMaximumLimitHighNull(self) -> bool: ...
        def IsISTDResponseMaximumPercentDeviationNull(self) -> bool: ...
        def SetCCISTDResponseRatioLimitLowNull(self) -> None: ...
        def GetBatchRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
        def SetOutlierAverageResponseFactorNull(self) -> None: ...
        def IsQualifierRatioMethodNull(self) -> bool: ...
        def SetUserAnnotationNull(self) -> None: ...
        def SetMatrixSpikeConcentrationNull(self) -> None: ...
        def IsSignalRetentionTimeOffsetNull(self) -> bool: ...
        def SetLinearResponseRangeMaxNull(self) -> None: ...
        def IsMinimumPercentPurityNull(self) -> bool: ...
        def SetFullWidthHalfMaximumLimitHighNull(self) -> None: ...
        def IsRxUnlabeledIsotopicDilutionNull(self) -> bool: ...
        def SetCCResponseRatioLimitHighNull(self) -> None: ...
        def SetMZAdditionalNull(self) -> None: ...
        def IsPeakSelectionCriterionNull(self) -> bool: ...
        def SetRelativeStandardErrorMaximumNull(self) -> None: ...
        def IsMatrixSpikeBMaximumPercentDeviationNull(self) -> bool: ...
        def SetRelativeISTDMultiplierNull(self) -> None: ...
        def IsNoiseOfRawSignalNull(self) -> bool: ...
        def SetCompoundApprovedNull(self) -> None: ...
        def IsAccuracyLimitMultiplierLOQNull(self) -> bool: ...
        def IsIntegrationParametersModifiedNull(self) -> bool: ...
        def IsISTDFlagNull(self) -> bool: ...
        def IsDynamicTargetCompoundIDNull(self) -> bool: ...
        def IsKEGGIDNull(self) -> bool: ...
        def SetISTDConcentrationNull(self) -> None: ...
        def SetMZScanRangeHighNull(self) -> None: ...
        def IsSampleMaximumPercentRSDNull(self) -> bool: ...
        def SetTriggeredTransitionsNull(self) -> None: ...
        def DeleteCalRow(
            self,
            calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        ) -> None: ...
        def IsRetentionIndexNull(self) -> bool: ...
        def SetSpectrumPercentSaturationThresholdNull(self) -> None: ...
        def IsWavelengthExtractionRangeHighNull(self) -> bool: ...
        def IsCCISTDResponseRatioLimitLowNull(self) -> bool: ...
        def IsCCResponseRatioLimitLowNull(self) -> bool: ...
        def SetResponseFactorMaximumPercentDeviationNull(self) -> None: ...
        def SetCurveFitStatusNull(self) -> None: ...
        def SetMatrixBConcentrationLimitLowNull(self) -> None: ...
        def SetSelectedMZNull(self) -> None: ...
        def IsQuantitateByHeightNull(self) -> bool: ...
        def IsMaximumAverageResponseFactorRSDNull(self) -> bool: ...
        def IsOutlierRelativeResponseFactorNull(self) -> bool: ...
        def SetCalibrationRangeFilterNull(self) -> None: ...
        def IsUserDefined7Null(self) -> bool: ...
        def IsSelectedMZNull(self) -> bool: ...
        def IsTransitionNull(self) -> bool: ...
        def IsMatrixTypeOverrideNull(self) -> bool: ...
        def SetMatrixSpikeBMaximumPercentDeviationNull(self) -> None: ...
        def IsSmoothingFunctionWidthNull(self) -> bool: ...
        def SetFragmentorVoltageNull(self) -> None: ...
        def IsOutlierMethodDetectionLimitNull(self) -> bool: ...
        def IsIonSourceNull(self) -> bool: ...
        def SetCCISTDResponseRatioLimitHighNull(self) -> None: ...
        def SetPeakFilterThresholdValueNull(self) -> None: ...
        def SetCurveFitMinimumR2Null(self) -> None: ...
        def IsUserDefined3Null(self) -> bool: ...
        def SetMaximumCCResponseFactorDeviationNull(self) -> None: ...
        def GetQualifierRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
        ]: ...
        def IsConcentrationUnitsNull(self) -> bool: ...
        def SetMatrixSpikePercentRecoveryMinimumNull(self) -> None: ...
        def SetCellAcceleratorVoltageNull(self) -> None: ...
        def SetPrimaryHitPeakIDNull(self) -> None: ...
        def IsMatrixSpikeBPercentRecoveryMinimumNull(self) -> bool: ...
        def SetSpectrumPeakHeightPercentThresholdNull(self) -> None: ...
        def SetCalibrationReferenceCompoundIDNull(self) -> None: ...
        def IsSignalTypeNull(self) -> bool: ...
        def SetIDNull(self) -> None: ...
        def IsQCLCSMinimumRecoveryBNull(self) -> bool: ...
        def IsIntegratorNull(self) -> bool: ...
        def SetAlternativePeakIDNull(self) -> None: ...
        def IsOutlierAlternativePeakNull(self) -> bool: ...
        def SetGraphicTargetCompoundCalibrationNull(self) -> None: ...
        def IsSurrogateConcentrationNull(self) -> bool: ...
        def SetUserDefinedTargetCompoundIDNull(self) -> None: ...
        def IsQCMaximumDeviationNull(self) -> bool: ...
        def SetSurrogatePercentRecoveryMinimumNull(self) -> None: ...
        def IsSmoothingGaussianWidthNull(self) -> bool: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def SetUserDefined6Null(self) -> None: ...
        def SetISTDResponseLimitLowNull(self) -> None: ...
        def IsCellAcceleratorVoltageNull(self) -> bool: ...
        def SetOutlierMinimumCurveFitR2Null(self) -> None: ...
        def IsMethodDetectionLimitNull(self) -> bool: ...
        def IsMassAccuracyLimitNull(self) -> bool: ...
        def IsMolecularFormulaNull(self) -> bool: ...
        def IsReferenceWindowOverrideNull(self) -> bool: ...
        def IsSublistNull(self) -> bool: ...
        def IsMaximumBlankResponseNull(self) -> bool: ...
        def SetRetentionTimeWindowUnitsNull(self) -> None: ...
        def IsSpectrumExtractionOverrideNull(self) -> bool: ...
        def IsMaximumBlankConcentrationNull(self) -> bool: ...
        def IsResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
        def IsPlatesCalculationTypeNull(self) -> bool: ...
        def IsISTDResponseLimitLowNull(self) -> bool: ...
        def SetAverageResponseFactorNull(self) -> None: ...
        def SetAgilentIDNull(self) -> None: ...
        def IsAccuracyMaximumPercentDeviationNull(self) -> bool: ...
        def IsMaximumPercentResidualNull(self) -> bool: ...
        def IsGraphicPeakChromatogramNull(self) -> bool: ...
        def IsAreaCorrectionFactorNull(self) -> bool: ...
        def SetMZExtractionWindowFilterRightNull(self) -> None: ...
        def SetAreaCorrectionMZNull(self) -> None: ...
        def SetISTDResponseMaximumPercentDeviationNull(self) -> None: ...
        def IsMZScanRangeLowNull(self) -> bool: ...
        def SetRetentionIndexNull(self) -> None: ...
        def IsQCLCSMaximumRecoveryBNull(self) -> bool: ...
        def SetSymmetryLimitHighNull(self) -> None: ...
        def IsOutlierCustomCalculationNull(self) -> bool: ...
        def IsUserAnnotationNull(self) -> bool: ...
        def SetOutlierResponseFactorNull(self) -> None: ...
        def IsSignalNameNull(self) -> bool: ...
        def SetOutlierCustomCalculationNull(self) -> None: ...
        def IsResponseCheckMinimumNull(self) -> bool: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        ) -> None: ...
        def SetFragmentorVoltageDeltaNull(self) -> None: ...
        def IsOutlierCCAverageResponseFactorNull(self) -> bool: ...
        def SetQCMaximumPercentRSDNull(self) -> None: ...
        def IsGraphicPeakQualifiersNull(self) -> bool: ...
        def IsColumnVoidTimeNull(self) -> bool: ...
        def IsAlternativePeakIDNull(self) -> bool: ...
        def SetCompoundTypeNull(self) -> None: ...
        def IsFragmentorVoltageDeltaNull(self) -> bool: ...
        def SetPlatesLimitNull(self) -> None: ...
        def GetPrimaryPeakRow(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
        def IsRelativeISTDMultiplierNull(self) -> bool: ...
        def IsCoelutionScoreLimitNull(self) -> bool: ...
        def IsSmoothingNull(self) -> bool: ...
        def SetSmoothingGaussianWidthNull(self) -> None: ...
        def IsCompoundMathNull(self) -> bool: ...
        def IsQValueMinimumNull(self) -> bool: ...
        def IsCalibrationReferenceCompoundIDNull(self) -> bool: ...
        def IsRelativeStandardErrorNull(self) -> bool: ...
        def IsUserDefined9Null(self) -> bool: ...
        def IsSymmetryLimitLowNull(self) -> bool: ...
        def SetUserDefined7Null(self) -> None: ...
        def SetSymmetryLimitLowNull(self) -> None: ...
        def IsSpectrumPeakHeightPercentThresholdNull(self) -> bool: ...
        def IsAreaCorrectionSelectedMZNull(self) -> bool: ...
        def IsSampleIDNull(self) -> bool: ...
        def IsCCISTDResponseRatioLimitHighNull(self) -> bool: ...
        def SetConcentrationUnitsNull(self) -> None: ...
        def IsIDNull(self) -> bool: ...
        def SetSymmetryCalculationTypeNull(self) -> None: ...
        def SetNoiseStandardDeviationMultiplierNull(self) -> None: ...
        def IsBatchIDNull(self) -> bool: ...
        def SetOutlierMethodDetectionLimitNull(self) -> None: ...
        def SetCompoundMathNull(self) -> None: ...
        def SetMatrixTypeOverrideNull(self) -> None: ...
        def SetCurveFitNull(self) -> None: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetMinimumPercentPurityNull(self) -> None: ...
        def SetResolutionLimitNull(self) -> None: ...
        def IsMatrixAConcentrationLimitLowNull(self) -> bool: ...
        def GetCompoundName(self) -> str: ...
        def SetAverageRelativeRetentionTimeNull(self) -> None: ...
        def SetMassAccuracyLimitNull(self) -> None: ...
        def SetUserDefinedNull(self) -> None: ...
        def IsLeftRetentionTimeDeltaNull(self) -> bool: ...
        def IsOutlierAverageResponseFactorNull(self) -> bool: ...
        def IsCurveFitR2Null(self) -> bool: ...
        def IsMatrixBConcentrationLimitLowNull(self) -> bool: ...
        def IsSurrogateConcentrationLimitLowNull(self) -> bool: ...
        def IsUserCustomCalculationLimitLowNull(self) -> bool: ...
        def SetLibraryMatchScoreMinimumNull(self) -> None: ...
        def IsRelativeStandardErrorMaximumNull(self) -> bool: ...
        def IsSpectrumScanInclusionNull(self) -> bool: ...
        def SetPlatesCalculationTypeNull(self) -> None: ...
        def SetResponseCheckMinimumNull(self) -> None: ...
        def SetSurrogateConcentrationLimitHighNull(self) -> None: ...
        def SetMatrixSpikeBConcentrationNull(self) -> None: ...
        def IsSpeciesNull(self) -> bool: ...
        def SetSpectrumExtractionOverrideNull(self) -> None: ...
        def SetThresholdNumberOfPeaksNull(self) -> None: ...
        def SetAreaCorrectionFactorNull(self) -> None: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def IsUserDefined6Null(self) -> bool: ...
        def SetSignalNameNull(self) -> None: ...
        def SetWavelengthExtractionRangeHighNull(self) -> None: ...
        def IsMinimumSignalToNoiseRatioNull(self) -> bool: ...
        def SetUserDefined2Null(self) -> None: ...
        def IsExpectedConcentrationNull(self) -> bool: ...
        def SetUserDefined8Null(self) -> None: ...
        def SetMZScanRangeLowNull(self) -> None: ...
        def SetUserDefined5Null(self) -> None: ...
        def IsRelativeResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
        def IsUserDefined2Null(self) -> bool: ...
        def IsISTDCompoundIDNull(self) -> bool: ...
        def IsSurrogatePercentRecoveryMaximumNull(self) -> bool: ...
        def SetPeakSelectionCriterionNull(self) -> None: ...
        def IsReferenceMSPathNameNull(self) -> bool: ...
        def SetTimeSegmentNull(self) -> None: ...
        def SetIonSourceNull(self) -> None: ...
        def IsMassMatchScoreMinimumNull(self) -> bool: ...
        def SetRelativeResponseFactorMaximumPercentDeviationNull(self) -> None: ...
        def IsSampleAmountLimitHighNull(self) -> bool: ...
        def SetRetentionTimeWindowCCNull(self) -> None: ...
        def IsCalibrationRangeFilterNull(self) -> bool: ...
        def IsGraphicPeakSpectrumNull(self) -> bool: ...
        def IsSpectrumBaselineThresholdNull(self) -> bool: ...
        def IsUserDefined5Null(self) -> bool: ...
        def IsRyLabeledIsotopicDilutionNull(self) -> bool: ...
        def SetMZNull(self) -> None: ...
        def IsResolutionCalculationTypeNull(self) -> bool: ...
        def IsSpectrumPercentSaturationThresholdNull(self) -> bool: ...
        def IsCurveFitWeightNull(self) -> bool: ...
        def SetScanTypeNull(self) -> None: ...
        def SetRyLabeledIsotopicDilutionNull(self) -> None: ...
        def IsISTDResponseMinimumPercentDeviationNull(self) -> bool: ...
        def SetAverageResponseFactorRSDNull(self) -> None: ...
        def IsRelativeRetentionTimeMaximumPercentDeviationNull(self) -> bool: ...
        def IsSurrogatePercentRecoveryMinimumNull(self) -> bool: ...
        def IsFragmentorVoltageNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def IsCCResponseRatioLimitHighNull(self) -> bool: ...
        def IsUserDefined1Null(self) -> bool: ...
        def SetAlternativePeakCriteriaNull(self) -> None: ...
        def SetMatrixSpikeBPercentRecoveryMinimumNull(self) -> None: ...
        def SetSampleIDNull(self) -> None: ...
        def GetPeakRows(
            self,
        ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
        def IsMZAdditionalNull(self) -> bool: ...
        def SetSampleMaximumPercentRSDNull(self) -> None: ...
        def IsAlternativePeakCriteriaNull(self) -> bool: ...
        def IsMaximumNumberOfHitsNull(self) -> bool: ...
        def SetOutlierBlankResponseOutsideLimitNull(self) -> None: ...
        def IsCompoundNameNull(self) -> bool: ...
        def SetUserDefined3Null(self) -> None: ...
        def SetMatrixAConcentrationLimitHighNull(self) -> None: ...
        def SetRetentionTimeWindowNull(self) -> None: ...
        def IsMaximumCCResponseFactorDeviationNull(self) -> bool: ...
        def SetLibraryMatchScoreNull(self) -> None: ...
        def SetReferenceWindowOverrideNull(self) -> None: ...
        def SetCompoundGroupNull(self) -> None: ...
        def SetWavelengthReferenceRangeHighNull(self) -> None: ...
        def IsRetentionTimeWindowNull(self) -> bool: ...
        def SetQValueMinimumNull(self) -> None: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def SetKEGGIDNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def SetCCResponseRatioLimitLowNull(self) -> None: ...
        def SetCurveFitOriginNull(self) -> None: ...
        def IsWavelengthReferenceRangeHighNull(self) -> bool: ...
        def IsPeakFilterThresholdNull(self) -> bool: ...
        def IsLinearResponseRangeMaxNull(self) -> bool: ...
        def SetQuantitateByHeightNull(self) -> None: ...
        def SetNeutralLossGainNull(self) -> None: ...
        def IsNonReferenceWindowOverrideNull(self) -> bool: ...
        def SetUncertaintyRelativeOrAbsoluteNull(self) -> None: ...
        def IsResolutionLimitNull(self) -> bool: ...
        def SetColumnVoidTimeNull(self) -> None: ...
        def SetOutlierAverageResponseFactorRSDNull(self) -> None: ...
        def IsRetentionTimeDeltaUnitsNull(self) -> bool: ...
        def IsLibraryMatchScoreNull(self) -> bool: ...
        def SetGraphicPeakChromatogramNull(self) -> None: ...
        def SetCollisionEnergyDeltaNull(self) -> None: ...
        def IsRightRetentionTimeDeltaNull(self) -> bool: ...
        def IsAverageResponseFactorRSDNull(self) -> bool: ...
        def IsMinimumCCRelativeResponseFactorNull(self) -> bool: ...
        def SetUserCustomCalculationLimitHighNull(self) -> None: ...
        def SetISTDResponseMinimumPercentDeviationNull(self) -> None: ...
        def SetSampleAmountLimitHighNull(self) -> None: ...
        def IsSampleAmountLimitLowNull(self) -> bool: ...
        def IsMatrixSpikeMaximumPercentDeviationNull(self) -> bool: ...
        def SetSublistNull(self) -> None: ...
        def SetAccuracyMaximumPercentDeviationNull(self) -> None: ...
        def IsRetentionTimeWindowUnitsNull(self) -> bool: ...
        def SetLimitOfQuantitationNull(self) -> None: ...
        def SetIntegrationParametersNull(self) -> None: ...
        def SetMatrixAConcentrationLimitLowNull(self) -> None: ...
        def IsNoiseReferenceNull(self) -> bool: ...
        def IsMultiplierNull(self) -> bool: ...
        def IsCurveFitOriginNull(self) -> bool: ...
        def SetMaximumPercentResidualNull(self) -> None: ...
        def IsScanTypeNull(self) -> bool: ...
        def SetExpectedConcentrationNull(self) -> None: ...
        def SetSignalTypeNull(self) -> None: ...
        def SetRxUnlabeledIsotopicDilutionNull(self) -> None: ...

    class TargetCompoundRowTable:  # Class
        def NewTargetCompoundRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetCompoundRow
        ): ...
        def AddTargetCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetCompoundRow,
        ) -> None: ...
        def RemoveTargetCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetCompoundRow,
        ) -> None: ...

    class TargetQualifierRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
    ):  # Class
        AreaSum: bool
        BatchID: int
        CellAcceleratorVoltage: float
        CollisionEnergy: float
        CollisionEnergyDelta: float
        CompoundID: int
        FragmentorVoltage: float
        FragmentorVoltageDelta: float
        GraphicPeakQualifierChromatogram: str
        IntegrationParameters: str
        IntegrationParametersModified: bool
        IonPolarity: str
        def __getitem__(self, column: System.Data.DataColumn) -> Any: ...
        def __setitem__(self, column: System.Data.DataColumn, value_: Any) -> None: ...
        def __getitem__(self, columnName: str) -> Any: ...
        def __setitem__(self, columnName: str, value_: Any) -> None: ...
        def __getitem__(self, columnIndex: int) -> Any: ...
        def __setitem__(self, columnIndex: int, value_: Any) -> None: ...
        MZ: float
        MZExtractionWindowFilterLeft: float
        MZExtractionWindowFilterRight: float
        MZExtractionWindowUnits: str
        OutlierPeakNotFound: str
        PeakFilterThreshold: str
        PeakFilterThresholdValue: float
        QualifierID: int
        QualifierName: str
        QualifierRangeMaximum: float
        QualifierRangeMinimum: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessage: str
        RelativeResponse: float
        SampleID: int
        ScanType: str
        SelectedMZ: float
        ThresholdNumberOfPeaks: int
        Transition: str
        Uncertainty: float
        UserDefined: str

        def IsMZNull(self) -> bool: ...
        def SetSelectedMZNull(self) -> None: ...
        def IsBatchIDNull(self) -> bool: ...
        def IsOutlierPeakNotFoundNull(self) -> bool: ...
        def SetPeakFilterThresholdValueNull(self) -> None: ...
        def IsFragmentorVoltageDeltaNull(self) -> bool: ...
        def IsAreaSumNull(self) -> bool: ...
        def IsScanTypeNull(self) -> bool: ...
        def SetUserDefinedNull(self) -> None: ...
        def SetMZExtractionWindowFilterRightNull(self) -> None: ...
        def SetCellAcceleratorVoltageNull(self) -> None: ...
        def IsGraphicPeakQualifierChromatogramNull(self) -> bool: ...
        def SetSampleIDNull(self) -> None: ...
        def SetIntegrationParametersNull(self) -> None: ...
        def SetIonPolarityNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def IsQualifierNameNull(self) -> bool: ...
        def SetCollisionEnergyDeltaNull(self) -> None: ...
        def IsSampleIDNull(self) -> bool: ...
        def SetQualifierIDNull(self) -> None: ...
        def IsFragmentorVoltageNull(self) -> bool: ...
        def IsPeakFilterThresholdValueNull(self) -> bool: ...
        def SetThresholdNumberOfPeaksNull(self) -> None: ...
        def SetTransitionNull(self) -> None: ...
        def IsQualifierIDNull(self) -> bool: ...
        def SetFragmentorVoltageNull(self) -> None: ...
        def IsIonPolarityNull(self) -> bool: ...
        def CopyFrom(
            self,
            sourceRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        ) -> None: ...
        def IsQualifierRangeMinimumNull(self) -> bool: ...
        def SetCompoundIDNull(self) -> None: ...
        def IsSelectedMZNull(self) -> bool: ...
        def GetQualifierPeakRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow
        ]: ...
        def IsCollisionEnergyNull(self) -> bool: ...
        def IsIntegrationParametersModifiedNull(self) -> bool: ...
        def IsPeakFilterThresholdNull(self) -> bool: ...
        def SetPeakFilterThresholdNull(self) -> None: ...
        def SetRelativeResponseNull(self) -> None: ...
        def SetOutlierPeakNotFoundNull(self) -> None: ...
        def IsThresholdNumberOfPeaksNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetQualifierRangeMinimumNull(self) -> None: ...
        def SetFragmentorVoltageDeltaNull(self) -> None: ...
        def IsUncertaintyNull(self) -> bool: ...
        def IsCollisionEnergyDeltaNull(self) -> bool: ...
        def SetMZExtractionWindowUnitsNull(self) -> None: ...
        def IsIntegrationParametersNull(self) -> bool: ...
        def IsCompoundIDNull(self) -> bool: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def SetScanTypeNull(self) -> None: ...
        def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
        def SetUncertaintyNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def CopyTo(
            self,
            destRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        ) -> None: ...
        def IsQualifierRangeMaximumNull(self) -> bool: ...
        def IsRelativeResponseNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetBatchIDNull(self) -> None: ...
        def SetCollisionEnergyNull(self) -> None: ...
        def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
        def SetQualifierNameNull(self) -> None: ...
        def SetQualifierRangeMaximumNull(self) -> None: ...
        def SetAreaSumNull(self) -> None: ...
        def IsMZExtractionWindowUnitsNull(self) -> bool: ...
        def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
        def IsTransitionNull(self) -> bool: ...
        def SetIntegrationParametersModifiedNull(self) -> None: ...
        def IsCellAcceleratorVoltageNull(self) -> bool: ...
        def SetGraphicPeakQualifierChromatogramNull(self) -> None: ...

    class TargetQualifierRowTable:  # Class
        def AddTargetQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetQualifierRow,
        ) -> None: ...
        def NewTargetQualifierRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetQualifierRow
        ): ...
        def RemoveTargetQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OptimizedQuantDataSet.TargetQualifierRow,
        ) -> None: ...

class OutlierCategories(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Blank: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    CC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    Calibration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories
    ) = ...  # static # readonly
    Custom: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    ISTD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    Mass: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    Matrix: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    PeakResult: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    QC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    Qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    ResponseCheck: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories
    ) = ...  # static # readonly
    Sample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly
    Surrogate: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories = (
        ...
    )  # static # readonly

class OutlierColumns(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Accuracy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    AlternativePeak: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    AverageResponseFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    AverageResponseFactorRSD: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    BlankConcentration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    BlankResponse: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    CCAverageResponseFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CCISTDResponseRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CCRelativeResponseFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CCResponseRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CCRetentionTime: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CCTime: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    CalibrationRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CapacityFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    CurveFitR2: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    CustomCalculation: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    ISTDResponse: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    ISTDResponsePercentDeviation: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    IntegrationMetric: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    LibraryMatchScore: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    LimitOfDetection: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    LimitOfQuantitation: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    MassAccuracy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    MassMatchScore: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    MatrixSpike: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    MatrixSpikeDeviation: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    MatrixSpikeGroupRecovery: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    MatrixSpikePercentRecovery: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    MethodDetectionLimit: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    PeakFullWidthHalfMaximum: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    PeakNotFound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    PeakPurity: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    PeakResolutionFront: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    PeakResolutionRear: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    PeakSymmetry: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    Plates: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    QC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    QCLCSRecovery: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    QC_RSD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    QValue: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    QualifierCoelutionScore: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierIntegrationMetric: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierMassAccuracy: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierPeakFullWidthHalfMaximum: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierPeakNotFound: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierPeakResolutionFront: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierPeakResolutionRear: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierPeakSymmetry: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierSaturationRecovery: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    QualifierSignalToNoiseRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    RelativeResponseFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    RelativeRetentionTime: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    RelativeStandardError: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    ResponseCheck: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    ResponseFactor: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    RetentionTime: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    SampleAmount: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    SampleRSD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    SaturationRecovery: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    SignalToNoiseRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly
    Surrogate: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns = (
        ...
    )  # static # readonly
    SurrogatePercentRecovery: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    ) = ...  # static # readonly

class OutlierCompoundType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    All: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCompoundType = (
        ...
    )  # static # readonly
    ISTD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCompoundType = (
        ...
    )  # static # readonly
    NonISTD: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCompoundType = (
        ...
    )  # static # readonly

class OutlierConfig:  # Class
    def __init__(self) -> None: ...

    AccuracyMaxPercentDeviation: float  # static # readonly
    QualifierRatioUncertainty: float  # static # readonly
    RelativeRetentionTimeWindow: float  # static # readonly
    RetentionTimeWindow: float  # static # readonly
    RetentionTimeWindowUnits: str  # static # readonly
    UncertaintyMode: str  # static # readonly

class OutlierDetector(System.IDisposable):  # Class
    OUTLIER_HIGH: str = ...  # static # readonly
    OUTLIER_LOW: str = ...  # static # readonly

    DataSet: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet
    )  # readonly
    IsAutoUpdateEnabled: bool  # readonly

    @overload
    def GetDefinedOutliers(
        self,
    ) -> Dict[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns,
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IOutlier,
    ]: ...
    @overload
    def GetDefinedOutliers(
        self,
        category: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories,
    ) -> Dict[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns,
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IOutlier,
    ]: ...
    def UpdateAll(self) -> None: ...
    def DisableAutoUpdates(self) -> None: ...
    def GetOutlierByType(
        self,
        outlierType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IOutlier: ...
    def GetOutlierInfo(
        self, outlierRow: System.Data.DataRow, outlierColumnName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierInfo: ...
    @staticmethod
    def GetInstance(
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierDetector: ...
    def EnableAutoUpdates(self) -> None: ...
    def Dispose(self) -> None: ...
    def AutoUpdateCCTime(self) -> None: ...

class OutlierDisplayComparer:  # Class
    def __init__(self) -> None: ...
    @overload
    def CompareCategory(
        self,
        c1: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories,
        c2: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories,
    ) -> int: ...
    @overload
    def CompareCategory(self, s1: str, s2: str) -> int: ...
    @overload
    def CompareOutlier(
        self,
        c1: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns,
        c2: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns,
    ) -> int: ...
    @overload
    def CompareOutlier(self, s1: str, s2: str) -> int: ...

class OutlierFilterType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Any: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierFilterType = (
        ...
    )  # static # readonly
    High: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierFilterType = (
        ...
    )  # static # readonly
    HighLow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierFilterType = (
        ...
    )  # static # readonly
    Low: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierFilterType = (
        ...
    )  # static # readonly

class OutlierInfo:  # Class
    LimitType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierLimitType
    )  # readonly
    Limits: MinMaxRange  # readonly
    OutlierDetail: str  # readonly
    OutlierMsg: str  # readonly
    OutlierName: str  # readonly
    OutlierValue: Any  # readonly

class OutlierLimitType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Enum: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierLimitType = (
        ...
    )  # static # readonly
    Max: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierLimitType = (
        ...
    )  # static # readonly
    Min: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierLimitType = (
        ...
    )  # static # readonly
    Range: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierLimitType = (
        ...
    )  # static # readonly

class OutlierMasks(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CategoryMask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierMasks = (
        ...
    )  # static # readonly
    ColumnMask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierMasks = (
        ...
    )  # static # readonly
    TableMask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierMasks = (
        ...
    )  # static # readonly

class OutlierTables(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Batch: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables = (
        ...
    )  # static # readonly
    Peak: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables = (
        ...
    )  # static # readonly
    PeakQualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables = (
        ...
    )  # static # readonly
    TargetCompound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables = (
        ...
    )  # static # readonly
    TargetQualifier: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierTables
    ) = ...  # static # readonly

class OverridenColumnValuePair:  # Class
    def __init__(self) -> None: ...

    columnName: str
    value: float

class PFIWrapper(IFindPeaks):  # Class
    def __init__(self) -> None: ...
    def ProcessManualIntegrationResultForClaire(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        chrom: IChromatogram,
        manualIntLimits: MinMaxRange,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.PSetClaireIntegrator: ...
    def LearnMyBias(
        self,
        chrom: IChromatogram,
        manualIntLimits: MinMaxRange,
        halfBaked: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PSetClaireIntegrator,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.PSetClaireIntegrator: ...

class PSetClaireIntegrator(IFindPeaksParameters):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, clairParamsXml: str) -> None: ...
    @overload
    def __init__(
        self, manIntResultFilePath: str, xStart: float, xEnd: float
    ) -> None: ...

    Clairvoyance: str
    IsLearnCompleted: bool  # readonly
    ManualIntegrationResultFilePath: str  # readonly
    XEnd: float  # readonly
    XStart: float  # readonly

    def ReadXML(self, xmlString: str) -> None: ...
    def WriteXML(self) -> str: ...

class PaneIds:  # Class
    CAG_Main: str = ...  # static # readonly
    CalCurve: str = ...  # static # readonly
    ChromSpec: str = ...  # static # readonly
    Main: str = ...  # static # readonly
    MethodErrorList: str = ...  # static # readonly
    MethodTable: str = ...  # static # readonly
    MethodTasks: str = ...  # static # readonly
    MetricsPlot: str = ...  # static # readonly
    SampleData: str = ...  # static # readonly
    ScriptPane: str = ...  # static # readonly
    Worktable: str = ...  # static # readonly

class PaneManager(System.IDisposable):  # Class
    def Dispose(self) -> None: ...
    @staticmethod
    def FitToCalibrationLevel(
        pane: Agilent.MassSpectrometry.GUI.Plot.Pane,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        useLowest: bool,
    ) -> None: ...

class PaneRowBase(System.IDisposable):  # Class
    def Dispose(self) -> None: ...

class PaneRowCompound(
    System.IDisposable, Agilent.MassSpectrometry.DataAnalysis.Quantitative.PaneRowBase
):  # Class
    @staticmethod
    def GetAlternativeTargetHitLibrarySpectrumData(
        manager: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PaneManager,
        libmethod: str,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> RefSpecData: ...
    @staticmethod
    def GetReferenceRetentionTime(
        ba: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchAttributes,
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        refrt: Optional[float],
        refwinmin: Optional[float],
        refwinmax: Optional[float],
    ) -> None: ...
    @staticmethod
    def CollectGroupCompounds(
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        compounds: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ],
    ) -> None: ...
    @staticmethod
    def CalcMassMatchScore(
        observedMzs: List[float],
        observedAbs: List[float],
        compound: LibraryDataSet.CompoundRow,
        pattern: LibraryDataSet.SpectrumRow,
        maxAbundance: float,
        baseMz: float,
        species: str,
        ionMatches: Iterable[Agilent.MassSpectrometry.IIonMatch],
    ) -> float: ...

class ParamSetBuilder(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IParamSetBuilder
):  # Class
    def GetTargetQualifierSpectrumParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @staticmethod
    def GetRTRangeForSpectrum(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> MinMaxRange: ...
    @overload
    def GetCollisionEnergyRange(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IRange: ...
    @overload
    def GetCollisionEnergyRange(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IRange: ...
    @overload
    @staticmethod
    def GetSpectrumType(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> SpecType: ...
    @overload
    @staticmethod
    def GetSpectrumType(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizedForQuant: bool,
    ) -> SpecType: ...
    @staticmethod
    def GetTargetAndQualifierMzRanges(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
    ]: ...
    def GetAreaCorrectionChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    @staticmethod
    def CreateWavelengthRange(low: float, high: float) -> IRange: ...
    def GetChromatogramParameters(
        self,
        rtStart: float,
        rtEnd: float,
        precursorIon: float,
        productIons: List[float],
        ionPolarity: IonPolarity,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetFragmentorVoltageRange(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IRange: ...
    @overload
    def GetFragmentorVoltageRange(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IRange: ...
    @overload
    @staticmethod
    def GetMZRange(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IRange: ...
    @overload
    @staticmethod
    def GetMZRange(
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IRange: ...
    @overload
    @staticmethod
    def GetMZRange(
        mz: float,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IRange: ...
    @staticmethod
    def GetRetentionTimeDeltaUnits(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ): ...
    @staticmethod
    def GetRetentionTimeRange(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> MinMaxRange: ...
    @overload
    def GetTargetCompoundChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetCompoundChromatogramParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...
    @staticmethod
    def GetMzDelta(
        mz: float,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        leftDelta: float,
        rightDelta: float,
    ) -> None: ...
    @staticmethod
    def CreateRTRange(rtMin: float, rtMax: float) -> MinMaxRange: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        selectedPeak: IChromPeak,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    def GetTargetCompoundSpectrumParameters(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        rtRangeStart: float,
        rtRangeEnd: float,
        optimizeForQuant: bool,
    ) -> IPSetExtractSpectrum: ...
    @overload
    @staticmethod
    def CreateMZRange(
        mz: float, leftDelta: float, rightDelta: float, units: str
    ) -> IRange: ...
    @overload
    @staticmethod
    def CreateMZRange(mzLow: float, mzHigh: float) -> IRange: ...
    @overload
    def GetTargetQualifierChromatogramParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> IPSetExtractChrom: ...
    @overload
    def GetTargetQualifierChromatogramParameters(
        self,
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        optimizeForQuant: bool,
    ) -> IPSetExtractChrom: ...

class ParamSetBuilderFactory:  # Class
    @overload
    @staticmethod
    def GetInstance(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IParamSetBuilder: ...
    @overload
    @staticmethod
    def GetInstance(
        qualifierRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IParamSetBuilder: ...
    @overload
    @staticmethod
    def GetInstance(
        scanType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IParamSetBuilder: ...

class PatchNumberAttribute(
    System.Runtime.InteropServices._Attribute, System.Attribute
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, patchNumber: str) -> None: ...

    PatchNumber: str

    @staticmethod
    def GetPatchNumber() -> str: ...

class PathUtil:  # Class
    ExecDir: str  # static # readonly

    QuantLogDir: str  # static # readonly

    @staticmethod
    def GetTempFileName(directory: str, prefix: str, unique: int) -> str: ...
    @staticmethod
    def GetLogFilePath(logSubDirName: str, logFileName: str) -> str: ...

class PeakFilterControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UserControl,
):  # Class
    def __init__(self) -> None: ...

    OriginalPeakFilter: IPSetPeakFilter
    PeakFilter: IPSetPeakFilter

    def Reset(self) -> None: ...

class PeakFilterWrap(
    System.IDisposable,
    System.ComponentModel.IComponent,
    System.ComponentModel.Component,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

    AreaAbsolute: bool
    AreaAbsoluteValue: float
    AreaPercent: bool
    AreaPercentValue: float
    HeightAbsolute: bool
    HeightAbsoluteValue: float
    HeightPercent: bool
    HeightPercentValue: float
    MaxNumPeaks: bool
    MaxNumPeaksValue: int
    SignalToNoise: bool
    SignalToNoiseValue: float

class PeakLocationTypeOptions(
    Iterable[Any],
    EnumItemCollection[PeakLocationType],
    Sequence[EnumItem[PeakLocationType]],
    Iterable[EnumItem[PeakLocationType]],
    Sequence[Any],
    System.ComponentModel.IComponent,
    List[EnumItem[PeakLocationType]],
    List[Any],
    System.IDisposable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, container: System.ComponentModel.IContainer) -> None: ...

class PeakQualifierRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...
    @staticmethod
    def Read_0x1000C(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    @staticmethod
    def Read_0x10006(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    @staticmethod
    def Read_0x10005(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...
    @staticmethod
    def Read_0x10009(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
    ): ...

class PeakQualifierRowId(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
):  # Class
    def __init__(
        self,
        batchId: int,
        sampleId: int,
        compoundId: int,
        peakId: int,
        qualifierId: int,
    ) -> None: ...

    CompoundId: int  # readonly
    PeakId: int  # readonly
    QualifierId: int  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class PeakRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...
    @staticmethod
    def Read_0x10009(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...
    @staticmethod
    def Read_0x10006(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...

class PeakRowId(Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase):  # Class
    def __init__(self, batch: int, sample: int, compound: int, peak: int) -> None: ...

    CompoundId: int  # readonly
    PeakId: int  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class PeakSelectionCriterion(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CloseRT: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion
    ) = ...  # static # readonly
    CloseRTQual: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion
    ) = ...  # static # readonly
    GreatestQValue: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion
    ) = ...  # static # readonly
    GreatestResponse: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PeakSelectionCriterion
    ) = ...  # static # readonly

class PeakUtil:  # Class
    def __init__(self) -> None: ...

    TimeSegments: List[float]  # static # readonly

    @staticmethod
    def GetLargestPeak(peakList: IChromPeakList, useHeight: bool) -> IChromPeak: ...
    @staticmethod
    def GetPeaksInRange(
        peakList: IChromPeakList, xMin: float, xMax: float
    ) -> System.Collections.Generic.List[IChromPeak]: ...
    @staticmethod
    def GetNearestPeak(peakList: IChromPeakList, rt: float) -> IChromPeak: ...
    @overload
    @staticmethod
    def CacheTimeSegments(tsRanges: RangeCollection) -> None: ...
    @overload
    @staticmethod
    def CacheTimeSegments(sampleDataPath: str) -> None: ...
    @staticmethod
    def GetLeftNeighborPeak(
        peakList: IChromPeakList, refPeak: IChromPeak
    ) -> IChromPeak: ...
    @staticmethod
    def GetRightNeighborPeak(
        peakList: IChromPeakList, refPeak: IChromPeak
    ) -> IChromPeak: ...

class PlatesCalculationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EuropeanPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlatesCalculationType
    ) = ...  # static # readonly
    JapanesePharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlatesCalculationType
    ) = ...  # static # readonly
    UnitedStatesPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlatesCalculationType
    ) = ...  # static # readonly

class PlotTitleElement(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AcqDateTime: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly
    CollisionEnergy: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement
    ) = ...  # static # readonly
    CompoundName: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement
    ) = ...  # static # readonly
    FileName: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly
    InstrumentName: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement
    ) = ...  # static # readonly
    Ionization: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly
    SampleName: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly
    ScanType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly
    Transition: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PlotTitleElement = (
        ...
    )  # static # readonly

class PlotTitles:  # Class
    def __init__(
        self,
        numberFormat: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat,
    ) -> None: ...

    BackgroundSubtracted: bool
    IsFeatureData: bool

    def GetUVSpectrumTitle(
        self,
        contributingRtRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        filter: IPSetExtractSpectrum,
        dataDirectory: str,
        noDataPoints: bool,
    ) -> str: ...
    @overload
    def GetSpectrumTitle(
        self,
        contributingRtRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        filter: IPSetExtractSpectrum,
        dataDirectory: str,
        scanStep: float,
    ) -> str: ...
    @overload
    def GetSpectrumTitle(
        self,
        contributingRtRanges: System.Collections.Generic.List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange
        ],
        filter: IPSetExtractSpectrum,
        dataDirectory: str,
        scanCount: int,
    ) -> str: ...
    def GetSignalTitle(
        self,
        deviceName: str,
        signalName: str,
        signalDescription: str,
        dataDirectory: str,
    ) -> str: ...
    def GetChromTitle(
        self, filter: IPSetExtractChrom, dataDirectory: str, scanCount: int
    ) -> str: ...
    def GetTICTitle(
        self,
        scanType: MSScanType,
        polarity: IonPolarity,
        dataDirectory: str,
        scanCount: int,
    ) -> str: ...
    def GetEWCTitle(
        self,
        deviceName: str,
        signalName: str,
        signalRange: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange,
        referenceRange: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange,
        dataDirectory: str,
    ) -> str: ...

class PrecursorIonScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanBaseElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    def __init__(self, scanElementNode: System.Xml.XmlNode) -> None: ...

    HighMz: float  # readonly
    LowMz: float  # readonly
    ProductIonMz: float  # readonly

class PresentationState(
    System.IDisposable, Agilent.MassHunter.Quantitative.UIModel.IPresentationState
):  # Class
    def __init__(
        self,
        commandContext: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
        instrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType,
        applicationType: str,
        formats: NumberFormats,
    ) -> None: ...

    ApplicationType: str  # readonly
    BatchDirectory: str  # readonly
    BatchFileName: str  # readonly
    BatchId: int  # readonly
    CanEditMethod: bool  # readonly
    Context: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext
    )  # readonly
    EditMethodState: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.EditMethodState
    )  # readonly
    EditingMethod: bool  # readonly
    HasBatch: bool  # readonly
    InstrumentType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    )  # readonly
    IsBatchDirty: bool  # readonly
    IsInCommandGroup: bool  # readonly
    IsWPF: bool
    NumberFormats: NumberFormats  # readonly
    SubApplication: str
    SynchronizeInvoke: System.ComponentModel.ISynchronizeInvoke  # readonly

    def EndExecuteCommand(self, result: System.IAsyncResult) -> Any: ...
    def NotifyGraphicsSettingsChanged(self, e: System.EventArgs) -> None: ...
    def BeginRunScript(
        self,
        references: List[str],
        imports: List[str],
        language: str,
        code: System.IO.TextReader,
        customStub: System.MarshalByRefObject,
        callback: System.AsyncCallback,
        asyncState: Any,
    ) -> System.IAsyncResult: ...
    def RevokeForm(self, form: System.Windows.Forms.Form) -> None: ...
    def EndRunScript(self, result: System.IAsyncResult) -> Any: ...
    def ExceptionAbort(self, ex: System.Exception) -> None: ...
    def RegisterForm(self, form: System.Windows.Forms.Form) -> None: ...
    def BeginCommandGroup(self) -> None: ...
    def EndCommandGroup(self) -> None: ...
    def GetLibrary(self, libpath: str) -> T: ...
    def AsyncShowMessageBox(
        self,
        message: str,
        caption: str,
        buttons: System.Windows.Forms.MessageBoxButtons,
        icon: System.Windows.Forms.MessageBoxIcon,
    ) -> None: ...
    @overload
    def ExecuteCommand(
        self, cmd: Agilent.MassSpectrometry.CommandModel.Model.ICommand
    ) -> Any: ...
    @overload
    def ExecuteCommand(
        self,
        parent: System.Windows.Forms.IWin32Window,
        cmd: Agilent.MassSpectrometry.CommandModel.Model.ICommand,
        ret: Any,
    ) -> bool: ...
    def GetLibraryError(self, libpath: str) -> str: ...
    def PerformCompliancePreCommand(
        self, parent: System.Windows.Forms.IWin32Window, commandName: str, action: str
    ) -> bool: ...
    def ShowMessageBox(
        self,
        message: str,
        caption: str,
        buttons: System.Windows.Forms.MessageBoxButtons,
        icon: System.Windows.Forms.MessageBoxIcon,
    ) -> System.Windows.Forms.DialogResult: ...
    def Dispose(self) -> None: ...
    def IsLastForm(self, form: System.Windows.Forms.Form) -> bool: ...
    def BeginExecuteCommand(
        self,
        cmd: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandBase,
        callback: System.AsyncCallback,
        asyncState: Any,
    ) -> System.IAsyncResult: ...
    def NotifyNumericFormatChanged(self, e: System.EventArgs) -> None: ...

    AddSamplesEnd: System.EventHandler  # Event
    AddSamplesStart: System.EventHandler  # Event
    AnalysisEnd: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    AnalysisStart: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    AnalysisStep: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventHandler
    )  # Event
    ApplyMethodEnded: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    ApplyMethodStarted: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    ApplyMethodToSample: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ApplyMethodEventHandler
    )  # Event
    BatchFileClosed: System.EventHandler  # Event
    BatchFileClosing: System.EventHandler  # Event
    BatchFileCreated: System.EventHandler  # Event
    BatchFileOpened: System.EventHandler  # Event
    BatchFileOpening: System.EventHandler  # Event
    BatchFileSaved: System.EventHandler  # Event
    CommandGroupEnded: System.EventHandler  # Event
    CommandGroupStarted: System.EventHandler  # Event
    CompoundIdentificationEnd: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    CompoundIdentificationStart: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    CompoundIdentificationStep: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    DeconvolutionEnd: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    DeconvolutionStart: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    DeconvolutionStep: System.EventHandler[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AnalysisEventArgs
    ]  # Event
    DeleteSamplesEnd: System.EventHandler  # Event
    DeleteSamplesStart: System.EventHandler  # Event
    EndScript: System.EventHandler  # Event
    GraphicsSettingsChanged: System.EventHandler  # Event
    MethodClosed: System.EventHandler  # Event
    MethodClosing: System.EventHandler  # Event
    MethodCreated: System.EventHandler  # Event
    MethodCreating: System.EventHandler  # Event
    MethodEditingEnded: System.EventHandler  # Event
    MethodEditingEnding: System.EventHandler  # Event
    MethodEditingStarted: System.EventHandler  # Event
    MethodEditingStarting: System.EventHandler  # Event
    MethodOpened: System.EventHandler  # Event
    MethodOpening: System.EventHandler  # Event
    NumericFormatChanged: System.EventHandler  # Event
    StartScript: System.EventHandler  # Event

class PrintPlotFitType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    FitToPage: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PrintPlotFitType = (
        ...
    )  # static # readonly
    Zoom: Agilent.MassSpectrometry.DataAnalysis.Quantitative.PrintPlotFitType = (
        ...
    )  # static # readonly

class ProcessTask(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    IQueuedTask,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IProcessTask,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, task: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IProcessTask
    ) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    Arguments: str
    CancelEventName: str
    Context: IQueuedTaskContext
    CreateNoWindow: Optional[bool]
    Domain: str
    ErrorDialog: Optional[bool]
    FileName: str
    Guid: System.Guid
    LoadUserProfile: Optional[bool]
    Name: str
    Password: str
    ProcessingPriority: TaskPriority
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly
    UseShellExecute: Optional[bool]
    UserName: str
    Verb: str
    Wait: Optional[bool]
    WorkingDirectory: str

    def Equals(self, obj: Any) -> bool: ...
    def Process(self) -> None: ...
    def GetHashCode(self) -> int: ...
    def Dispose(self) -> None: ...
    def ToString(self) -> str: ...

class ProcessTaskDefinition(System.Xml.Serialization.IXmlSerializable):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetDefinedTasks() -> (
        Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ProcessTask]
    ): ...
    @staticmethod
    def SaveTasks(
        tasks: Iterable[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ProcessTask],
    ) -> None: ...

class ProductIonScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanBaseElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    def __init__(self, scanElementNode: System.Xml.XmlNode) -> None: ...

    HighMz: float  # readonly
    LowMz: float  # readonly
    PrecursorIonMz: float  # readonly

class ProgressEventArgs(System.EventArgs):  # Class
    def __init__(self, upperBound: int, current: int, message: str) -> None: ...

    Current: int  # readonly
    Message: str  # readonly
    UpperBound: int  # readonly

class PropertyPage(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    IPropertyPage,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    Control: System.Windows.Forms.Control  # readonly
    DisplayName: str
    IsDirty: bool  # readonly

    def Initialize(self, grid: GridControlBase, application: str) -> None: ...
    def SetActive(self) -> None: ...
    def DoDefault(self) -> None: ...
    def Apply(self) -> None: ...

    PageChanged: System.EventHandler  # Event

class PushReportTask(System.MarshalByRefObject):  # Class
    def __init__(self) -> None: ...

    AuditTrailDestinations: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportDestination
    ]
    BatchFile: str
    BatchFolder: str
    Compounds: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFilterItem
    ]
    DeleteGraphicsFiles: bool
    Destinations: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportDestination
    ]
    FixedGraphicsFile: str
    GenerateGraphicsFiles: bool
    GenerateReportResults: bool
    GraphicsSettingsFile: str
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    LoadFixedGraphicsFile: bool
    LoadGraphicsSettings: bool
    OutputPath: str
    ReporterName: str
    Samples: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFilterItem
    ]
    SingleSampleReport: bool

    def PushTaskScript(self, scriptFile: str) -> None: ...
    def PushTask(self, compliance: ICompliance) -> None: ...
    def CreateFilterResultTask(
        self, sampleIds: List[int], compoundIds: List[int], resultFile: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IFilterResultTask: ...
    @staticmethod
    def _WriteXml(obj: Any, writer: System.Xml.XmlWriter) -> None: ...
    def CreateExcelTask(
        self,
        dest: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportDestination,
        resultFile: str,
        destFile: str,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExcelReportTask: ...
    def CreateNotificationTasks(self) -> List[IQueuedTaskNotification]: ...
    def CreatePostProcessTask(
        self,
        dest: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportDestination,
        excelTask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExcelReportTask,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IProcessTask: ...
    def PushTaskDefault(self) -> None: ...
    @staticmethod
    def SetProcessPriority(
        process: System.Diagnostics.Process, priority: TaskPriority
    ) -> None: ...
    @staticmethod
    def _ReadXml(obj: Any, reader: System.Xml.XmlReader) -> None: ...
    def CreateSubTasks(self) -> List[IQueuedTask]: ...
    def CreateReportResultsTask(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsTask: ...

class QDBMS:  # Class
    def __init__(
        self, qds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
    ) -> None: ...

    QUANT_ABSOLUTE: int = ...  # static # readonly
    QUANT_AVG_FIRST_LAST: int = ...  # static # readonly
    QUANT_CLOSE_RT: int = ...  # static # readonly
    QUANT_CLOSE_RT_QUAL: int = ...  # static # readonly
    QUANT_DEFAULT_QHITS_MAX: int = ...  # static # readonly
    QUANT_EXTENDED_AREA: int = ...  # static # readonly
    QUANT_GREATEST_QVALUE: int = ...  # static # readonly
    QUANT_GREATEST_RESP: int = ...  # static # readonly
    QUANT_LOW_FIRST_LAST: int = ...  # static # readonly
    QUANT_MINUTES: int = ...  # static # readonly
    QUANT_NO_SUBTRACTION: int = ...  # static # readonly
    QUANT_NULL_CONC: float = ...  # static # readonly
    QUANT_NULL_RESPONSE: float = ...  # static # readonly
    QUANT_NUM_QUALIFIER_IONS: int  # static # readonly
    QUANT_PERCENT: int = ...  # static # readonly
    QUANT_RELATIVE: int = ...  # static # readonly
    QUANT_REPORTALL: int = ...  # static # readonly

    CurrentIstdID: int  # readonly

    @staticmethod
    def NewQuantitationDataSet() -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet
    ): ...
    def GetEnv(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_ENVIRONMENT: ...

class QUANT_ENVIRONMENT:  # Class
    def __init__(self) -> None: ...

    QUANT_AREAPCT_UNCALIB_REP: int = ...  # static # readonly
    QUANT_DETAILED_NOGR_REP: int = ...  # static # readonly
    QUANT_DETAILED_REP: int = ...  # static # readonly
    QUANT_DETAILED_SNGL_REP: int = ...  # static # readonly
    QUANT_SUMMARY_REP: int = ...  # static # readonly
    calStdDirName: str
    corrWin: int
    db_timestamp: str
    defCurveFit: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitType
    defCurveFitOrigin: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitOrigin
    defCurveFitWeight: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitWeighting
    )
    defIstdConc: float
    defSampleAmt: float
    defUnitsStr: str
    internalVersionNum: int
    multiplier: float
    nonRefWin: int
    nonRefWinType: int
    outputType: int
    paramFile: str
    quantByHeight: bool
    refWin: int
    refWinType: int
    rptFileName: str
    rt_radius: int
    rteint: int
    runMethod: bool
    singleCpndNum: int
    title: str
    toFile: bool
    toPrinter: bool
    toScreen: bool

class QUANT_GROUPED_PEAK:  # Class
    def __init__(self) -> None: ...

    component_index: int
    group_class: int
    num_peaks: int
    signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MassSpectralSignal
    unique_rt: int

class QUANT_INDIV_PEAK:  # Class
    def __init__(self, dPrecursorMZ: float, dProductMZ: float) -> None: ...

    FeatureAssignedMz: Optional[float]
    FeatureID: Optional[int]
    FeatureSaturationRecoveryRatio: Optional[float]
    dBaselineStandardDeviation: float
    ending_baseline: float
    ending_time: int
    height: float
    individual_rt: int
    m_fullWidthHalfMaximum: float
    m_signalToNoise: float
    m_symmetry: float
    peakErrorFlags: PeakErrorFlags
    peakStatus: PeakStatus
    raw_area: float
    rt_end_minutes: float
    rt_start_minutes: float
    signal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MassSpectralSignal
    starting_baseline: float
    starting_time: int
    strBaselineDraw: str

    IsUserSelectedPeak: bool

class QUANT_QRATIO_INFO:  # Class
    def __init__(self) -> None: ...

    hiResponse: List[float]
    loResponse: List[float]

class QUANT_RESULTS:  # Class
    def __init__(self) -> None: ...

    QUANT_IDENTNOQUAL: int = ...  # static # readonly
    QUANT_IDENTQUAL: int = ...  # static # readonly
    QUANT_MI_DIRECT: int = ...  # static # readonly
    QUANT_MI_DIRECT_AND_ISTD: int = ...  # static # readonly
    QUANT_MI_ISTD: int = ...  # static # readonly
    QUANT_MI_NONE: int = ...  # static # readonly
    QUANT_NOIDENT: int = ...  # static # readonly
    adjustedExpRt: int
    cpnd_rt_range_hi: int
    cpnd_rt_range_lo: int
    istdResponse: float
    m_curveFitStatus: Agilent.MassSpectrometry.DataAnalysis.Quantitative.CurveFitStatus
    nTotalHits: int
    primaryHit: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_SINGLE_HIT
    primaryHitNumber: int
    qual_ratio_hi: List[float]
    qual_ratio_lo: List[float]
    qualifierModified: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ManualIntegrationState
    ]
    rho: float

class QUANT_SINGLE_HIT:  # Class
    def __init__(self) -> None: ...

    amtRatio: float
    areaCorrResp: float
    dBaselineStandardDeviation: float
    dTargetSignalToNoise: float
    determined_amt: float
    ending_baseline: float
    ending_time: int
    groupIndex: int
    group_rt: int
    identified: int
    m_uiTrueRetentionTimeDifference: int
    peakErrorFlags: PeakErrorFlags
    peakFullWidthHalfMaximum: float
    peakStatus: PeakStatus
    peakSymmetry: float
    qValueComputed: int
    qValueKey: int
    qdel: bool
    qualifierBaselineStandardDeviation: List[float]
    qualifierFeatureAssignedMz: List[Optional[float]]
    qualifierFeatureID: List[Optional[int]]
    qualifierFeatureSaturationRecoveryRatio: List[Optional[float]]
    qualifierFullWidthHalfMaximum: List[float]
    qualifierPeakErrorFlags: List[PeakErrorFlags]
    qualifierPeakStatus: List[PeakStatus]
    qualifierPeakSymmetry: List[float]
    qualifierResponseArea: List[float]
    qualifierResponseHeight: List[float]
    qualifierSignalToNoise: List[float]
    qualifier_end_bl: List[float]
    qualifier_end_time: List[int]
    qualifier_resp: List[float]
    qualifier_rt: List[int]
    qualifier_st_bl: List[float]
    qualifier_st_time: List[int]
    respRatio: float
    response: float
    responseArea: float
    responseHeight: float
    rtDiffKey: int
    rt_end_minutes: float
    rt_start_minutes: float
    starting_baseline: float
    starting_time: int
    strBaselineDraw: str
    tgt_rt: int

    FeatureAssignedMz: Optional[float]
    FeatureID: Optional[int]
    FeatureSaturationRecoveryRatio: Optional[float]
    ForcedPrimaryHit: bool

class QualifierChromatogram:  # Class
    def __init__(self, row: System.Data.DataRow, fxData: IFXData) -> None: ...

    FXData: IFXData  # readonly
    Row: System.Data.DataRow  # readonly

class QualifierData(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CompoundData
):  # Class
    QualifierId: int  # readonly

class QualifierInfoLabelType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    ExpectedPercent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType
    ) = ...  # static # readonly
    Ratio: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType = (
        ...
    )  # static # readonly
    RatioAndAcceptableRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType
    ) = ...  # static # readonly
    RatioAndExpectedPercent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType
    ) = ...  # static # readonly
    RatioAndExpectedRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierInfoLabelType
    ) = ...  # static # readonly

class QualifierIntegrationSetupDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegrationSetupDialog,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    OriginalUseSameAsParent: bool
    UseSameAsParent: bool

class QuantAmrtScoreCalculator:  # Class
    def __init__(self) -> None: ...
    def BestClusterMatchingAPattern(
        self,
        obsSpectrum: Agilent.MassSpectrometry.IMsXyData,
        expIsoPattern: Agilent.MassSpectrometry.IMsXyData,
        expectedDeviations: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IExpectedDeviationParameters2,
        weightingParameters: Agilent.MassSpectrometry.IScoreWeightingParameters,
        peakExtractParameters: Agilent.MassSpectrometry.IMsPeakExtractParamters,
        ignoreAbundance: bool,
        keyPeakIdx: int,
    ) -> ILwMsPeakList: ...
    def ObservedClusterMatchingAPattern(
        self,
        obsSpectrum: Agilent.MassSpectrometry.IMsXyData,
        expIsoPattern: Agilent.MassSpectrometry.IMsXyData,
        groupingParameters: Agilent.MassSpectrometry.IIonGroupingParameters,
        peakExtractParameters: Agilent.MassSpectrometry.IMsPeakExtractParamters,
        keyPeakIdx: int,
    ) -> ILwMsPeakList: ...
    @staticmethod
    def CalculateMassScore(
        measuredMz: float,
        refMz: float,
        deviations: Agilent.MassSpectrometry.IExpectedDeviationParameters,
    ) -> float: ...
    def CombineIonAndRtScores(
        self,
        match: Agilent.MassSpectrometry.IAmrtMatch,
        rtScore: float,
        weightingParameters: Agilent.MassSpectrometry.IScoreWeightingParameters,
    ) -> None: ...
    @overload
    def CalculateAmMatchScores(
        self,
        obsSpectrum: Agilent.MassSpectrometry.IMsXyData,
        calcSpectrum: Agilent.MassSpectrometry.IMsXyData,
        ionFormula: str,
        ionAdducts: str,
        ionLosses: str,
        signedChargeState: int,
        groupingParameters: Agilent.MassSpectrometry.IIonGroupingParameters,
        expectedDeviations: Agilent.MassSpectrometry.IExpectedDeviationParameters,
        weightingParameters: Agilent.MassSpectrometry.IScoreWeightingParameters,
    ) -> Agilent.MassSpectrometry.IAmrtMatch: ...
    @overload
    def CalculateAmMatchScores(
        self,
        obsCluster: ILwMsPeakList,
        calcCluster: Agilent.MassSpectrometry.IMsXyData,
        ionAdducts: str,
        ionLosses: str,
        signedChargeState: int,
        groupingParameters: Agilent.MassSpectrometry.IIonGroupingParameters,
        expectedDeviations: Agilent.MassSpectrometry.IExpectedDeviationParameters,
        weightingParameters: Agilent.MassSpectrometry.IScoreWeightingParameters,
    ) -> Agilent.MassSpectrometry.IAmrtMatch: ...
    def CalculateRtMatchScore(
        self, observedRt: float, expectedRt: float, expectedRtDeviation: float
    ) -> float: ...

class QuantChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantPeak,
    IResultAttributes,
    IConsistency,
    IConvertibleValueContainer,
    IPeak,
    IPeakInternals,
    IChangeNotify,
    System.Runtime.Serialization.ISerializable,
    IChromPeak,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, copy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromPeak
    ) -> None: ...

class QuantChromPeakList(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantPeakList,
    IAdjustDelayTime,
    IResultAttributes,
    IItemHighlighting,
    Sequence[IPeak],
    IResult,
    IPeakList,
    Iterable[Any],
    List[IPeak],
    System.ICloneable,
    IChromPeakList,
    ISortByAttribute,
    IConvertibleValueContainer,
    IConsistency,
    System.Runtime.Serialization.ISerializable,
    Iterable[IPeak],
    ILastOperation,
    IPeakHiding,
    IChangeNotify,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        copy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromPeakList,
    ) -> None: ...

    BaselineOffset: float
    BaselineStdDev: float
    LastError: int
    LastErrorMessage: str

    def Clone(self) -> IPeakList: ...

class QuantChromSpecControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.ComponentModel.ISupportInitialize,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    Agilent.MassSpectrometry.GUI.Plot.PlotControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    Properties: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromSpecProperties
    )  # readonly

    def GetActiveObject(self) -> T: ...
    def GetPreferredYRangeLimit(
        self, row: int, column: int
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def DrawChromatogramTo(
        self,
        fxData: IFXData,
        title: str,
        rowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase,
        peaks: Iterable[CachedPeak],
        components: Iterable[Component],
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        compoundToFitToLevel: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawSpectrumTo(
        self,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawSpectrumTo(
        self,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawSpectrumTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def UpdatePanes(self) -> None: ...
    def GetAutoScaleRangeX(
        self, pane: Agilent.MassSpectrometry.GUI.Plot.Pane
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def GetReferenceSpectrumRange(
        self,
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def DrawReferenceSpectrumTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        drawStructure: bool,
    ) -> None: ...
    def DrawAverageSpectrumTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def DrawTicTo(
        self,
        fxData: IFXData,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def DrawAlternativeTargetHitLibrarySpectrumTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        istd: bool,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        mzrange: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def GetSpectrumRange(
        self,
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def ZeroPeak(self) -> None: ...
    def DrawOriginalPeakChromatogramTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def InitConfiguration(self) -> None: ...
    def DrawOriginalPeakQualifierTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def DrawStructure(self, graphics: System.Drawing.Graphics) -> None: ...
    @overload
    def DrawPeakQualifierTo(
        self,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawPeakQualifierTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def GetPeakAverageSpectrumRange(
        self,
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    def GetAutoScaleRangeY(
        self, pane: Agilent.MassSpectrometry.GUI.Plot.Pane, minX: float, maxX: float
    ) -> Agilent.MassSpectrometry.GUI.Plot.PlotRange: ...
    def SetDataNavigator(
        self, dataNavigator: Agilent.MassHunter.Quantitative.UIModel.IDataNavigator
    ) -> None: ...
    @overload
    def DrawPeakChromatogramTo(
        self,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawPeakChromatogramTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    def GetAlternativeTargetHitLibrarySpectrumRange(
        self,
    ) -> Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange]: ...
    @overload
    def DrawPeakQualifiersTo(
        self,
        graphics: System.Drawing.Graphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...
    @overload
    def DrawPeakQualifiersTo(
        self,
        graphics: Agilent.MassSpectrometry.GUI.Plot.IGraphics,
        rect: System.Drawing.Rectangle,
        autoScaleType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ChromatogramAutoScaleType,
        rangeX: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
        rangeY: Optional[Agilent.MassSpectrometry.GUI.Plot.PlotRange],
    ) -> None: ...

class QuantCoreAlgoFactory(
    ICoreAlgorithmFactory,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.CoreAlgorithmFactory,
):  # Class
    def __init__(self) -> None: ...
    def GetPSetSignalToNoise(self) -> IPSetSignalToNoise: ...
    def GetChromPeakFinderParams(
        self, peakFinder: IFindPeaks
    ) -> IFindPeaksParameters: ...
    def GetPSetExtractChrom(self) -> IPSetExtractChrom: ...
    def GetMinRequiredNumberOfChromPoints(self, peakFinder: IFindPeaks) -> int: ...
    def GetPSetExtractSpectrum(self) -> IPSetExtractSpectrum: ...
    def GetChromPeakFinder(self, separationType: SeparationTechnique) -> IFindPeaks: ...
    def GetSpectrumPeakFinder(self) -> IFindPeaks: ...
    def RunFeatureDeconvolution(
        self, chromRegion: ChromRegion, cpParams: ComponentPerceptionParams
    ) -> System.Collections.Generic.List[Component]: ...
    def GetSignalToNoiseAlgorithm(self) -> ISignalToNoise: ...
    def GetScanDeskewParameters(
        self,
        dataAccess: IDataAccess,
        chromRegion: ChromRegion,
        mzHigh: float,
        skewRate: float,
    ) -> None: ...

class QuantDataAccess(
    ISample,
    IActuals,
    IDataAccess,
    IReadChromatogram,
    System.IDisposable,
    IReadSpectra,
    IUserCalibration,
):  # Class
    def __init__(
        self,
        numberFormat: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat,
    ) -> None: ...

    AcquisitionMetaData: IAcqMetaData  # readonly
    BaseDataAccess: IBDADataAccess  # readonly
    DataFileName: str  # readonly
    DataUnit: IPSetUnits  # readonly
    DesiredMSStorageTypeToUse: DesiredMSStorageType
    FileInformation: IBDAFileInformation  # readonly
    MassRangesOverallLimit: DoubleParameterLimit  # readonly
    PrecisionType: IPSetPrecision  # readonly
    ScanData: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MSScanData  # readonly
    ScanRejectionFlagValueTable: System.Data.DataTable
    SchemaDefaultDirectory: str

    def UpdateDelayInformation(self, psetDeviceDelay: IPSetDeviceDelayInfo) -> None: ...
    @overload
    def ReadSpectrum(
        self, spectrumRequest: IPSetExtractSpectrum
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        spectrumRequest: IPSetExtractSpectrum,
        backgroundSpecArrayToSubtract: List[ISpectrum],
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self, specType: SpecType, scanIDArray: List[int]
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(self, scanNumber: int, bMassUnits: bool) -> ISpectrum: ...
    @overload
    def ReadSpectrum(
        self,
        apseParameters: IPSetPeakSpectrumExtraction,
        specRequest: IPSetExtractSpectrum,
        sourceChromatogram: IChromatogram,
        backgroundSpectrum: List[ISpectrum],
        peakNumber: int,
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        specType: SpecType,
        scanIDArray: List[int],
        desiredStorageMode: DesiredMSStorageType,
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        specRequest: IPSetExtractSpectrum,
        apseParameters: IPSetPeakSpectrumExtraction,
        peakIDParam: IPSetPeakID,
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self,
        specRequest: IPSetExtractSpectrum,
        apseParameters: IPSetPeakSpectrumExtraction,
        peakIDParam: IPSetPeakID,
        startEndTimeRanges: IPSetRangeCollection,
    ) -> List[ISpectrum]: ...
    @overload
    def ReadSpectrum(
        self, rowIndex: int, bMassUnits: bool, desiredStorageMode: DesiredMSStorageType
    ) -> ISpectrum: ...
    def Dispose(self) -> None: ...
    def RefreshDataFile(self, isNewDataPresent: bool) -> bool: ...
    def GetSampleValue(self, internalName: str) -> str: ...
    def CloseDataFile(self) -> None: ...
    def GetActuals(self, timeInMins: float) -> System.Data.DataSet: ...
    def GetActualValue(
        self, actualDisplayName: str, xArray: List[float], yArray: List[float]
    ) -> None: ...
    def GetTimeSegmentsIDArray(self) -> List[int]: ...
    @overload
    def GetSampleData(self, category: SampleCategory) -> System.Data.DataSet: ...
    @overload
    def GetSampleData(self, internalNamePrefix: str) -> System.Data.DataSet: ...
    def GetDataDependentScanInfo(self) -> IBdaMsScanRecordCollection: ...
    @overload
    def SaveUserCalibration(self, psetTofCalib: IPSetTofCalibration) -> None: ...
    @overload
    def SaveUserCalibration(
        self, specArray: List[ISpectrum], psetTofCalib: IPSetTofCalibration
    ) -> None: ...
    def ClearScanRejectionFlagValueTable(self) -> None: ...
    def IsActualsPresent(self) -> bool: ...
    @overload
    def ReadChromatogram(
        self, extractParamSet: IPSetExtractChrom
    ) -> List[IChromatogram]: ...
    @overload
    def ReadChromatogram(
        self, extractParamSet: IPSetExtractChrom, excludeParamSet: IPSetExcludeMass
    ) -> List[IChromatogram]: ...
    def SetUnitPrecisionValue(
        self, psetUnits: IPSetUnits, psetPrecision: IPSetPrecision
    ) -> None: ...
    def GetTimeSegmentDetails(self, timesegmentID: int, numOfScans: int) -> IRange: ...
    def IsUserCalibrationPresent(self) -> bool: ...
    def IsFileOpen(self) -> bool: ...
    def GetActualNames(self) -> List[str]: ...
    def GetTimeSegmentRanges(self) -> RangeCollection: ...
    @overload
    def OpenDataFile(self, dataDir: str) -> bool: ...
    @overload
    def OpenDataFile(self, dataDir: str, bOptimizeFileHandling: bool) -> bool: ...
    def IsAcquisitionStatusComplete(self) -> bool: ...
    def GetScanRecordsInfo(
        self, scanType: MSScanType
    ) -> IBdaMsScanRecordCollection: ...
    def ClearUserCalibration(self) -> None: ...
    def SetUnitValue(self, psetUnits: IPSetUnits) -> None: ...
    def PersistScanRejectionFlagValueTable(self) -> None: ...
    def IsDataDependentScanInfoPresent(self) -> bool: ...
    def GetMsDeviceDelayTime(self, dDelay: float) -> bool: ...
    def GetElementNameCollection(self, timesegmentID: int) -> Dict[float, str]: ...

class QuantEngine:  # Class
    def __init__(
        self,
        initialQDS: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    ) -> None: ...

    BatchId: int
    CurrentIstdID: int  # readonly
    FSILIstd: bool
    IAnalyteCompoundId: int
    IIStdPeakRetentionTimeMsec: int
    Istd_response: float
    NGroups: int
    NPeaks: int
    NoIstdsYet: bool
    PGPeak: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_GROUPED_PEAK]
    PIndivPeakList: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IndividualPeakList
    )
    Qdbms: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QDBMS
    SampleId: int
    SortMethod: int

    def AnalyzeCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        isotopicDilution: bool,
        computeConcentration: bool,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QUANT_SINGLE_HIT
    ]: ...
    def StartSet(self, bSortBySignal: bool) -> None: ...
    def EndSet(
        self, bSortBySignal: bool, correlationWindowInMilliseconds: int
    ) -> None: ...
    @overload
    def AddPeaks(
        self,
        peakList: IPeakList,
        dPrecursorMZ: float,
        dProductMZ: float,
        userSelectedPeakIndex: int,
    ) -> None: ...
    @overload
    def AddPeaks(self, peakList: IPeakList, dProductMZ: float) -> None: ...
    @overload
    def AddPeaks(
        self, peakList: IPeakList, dProductMZ: float, userSelectedPeakIndex: int
    ) -> None: ...
    @overload
    def AddPeaks(
        self, peakList: IPeakList, dPrecursorMZ: float, dProductMZ: float
    ) -> None: ...

class QuantFindPeaksGeneralChrom(IFindPeaks):  # Class
    def __init__(self) -> None: ...

class QuantFindPeaksMS(IFindPeaks):  # Class
    def __init__(self) -> None: ...

class QuantGcMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsIntBase, IFindPeaks
):  # Class
    def __init__(self) -> None: ...

class QuantGcMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsIntBase, IFindPeaks
):  # Class
    def __init__(self) -> None: ...

class QuantLcMsMsIntCurvedBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsIntBase, IFindPeaks
):  # Class
    def __init__(self) -> None: ...

class QuantLcMsMsIntFlatBase(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsIntBase, IFindPeaks
):  # Class
    def __init__(self) -> None: ...

class QuantLogListener(System.IDisposable, System.Diagnostics.TraceListener):  # Class
    def __init__(self, name: str) -> None: ...

    FilePath: str  # readonly

    def CompressGzip(self, path: str) -> None: ...
    def InitFile(self, path: str) -> None: ...
    def Write(self, message: str) -> None: ...
    def WriteLine(self, message: str) -> None: ...

class QuantMSPeak(
    IPeakInternals,
    IResultAttributes,
    IPeak,
    IConsistency,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantPeak,
    System.ICloneable,
    IChangeNotify,
    System.Runtime.Serialization.ISerializable,
    IMsPeak,
):  # Class
    def __init__(self) -> None: ...

class QuantMSPeakList(
    Iterable[IPeak],
    IItemHighlighting,
    IResultAttributes,
    IConsistency,
    IChangeNotify,
    IPeakHiding,
    IMsPeakList,
    ISortByAttribute,
    IResult,
    IConvertibleValueContainer,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantPeakList,
    Sequence[IPeak],
    IPeakList,
    System.Runtime.Serialization.ISerializable,
    List[IPeak],
    System.ICloneable,
    Iterable[Any],
):  # Class
    def __init__(self) -> None: ...

class QuantMethodCtrl(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    Agilent.MassHunter.Quantitative.UIModel.IMethodTablePane,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    ArrangeCompoundsBy: str
    CalibrationsBandVisible: bool
    CanBrowseAcquisitionMethod: bool  # readonly
    CanDelete: bool  # readonly
    CanDeleteRows: bool  # readonly
    CanFillDown: bool  # readonly
    CanGroupByTimeSegment: bool  # readonly
    CanPrint: bool  # readonly
    CompoundsBandVisible: bool
    GridControl: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGridCtrl
    )  # readonly
    GroupByTimeSegment: bool
    MethodEditTaskMode: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodEditTaskMode
    )
    OutlierSetup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierColumns
    QualifiersBandVisible: bool
    TimeSegmentFilterInfo: Agilent.MassHunter.Quantitative.UIModel.TimeSegmentFilterInfo

    def FillDown(self) -> None: ...
    def OpenAcqMethodBrowser(self, dataPath: str) -> None: ...
    def GetSelectedCompoundIds(self) -> List[int]: ...
    def SetToolbarsManager(self, toolbarsMgr: IToolbarsManager) -> None: ...
    def CollapseAll(self) -> None: ...
    def SetDataNavigator(
        self,
        dataNavigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator,
    ) -> None: ...
    def ExpandAll(self) -> None: ...
    def GetFilteredCompoundIds(self) -> List[int]: ...
    def CreatePropertyPages(self) -> List[IPropertyPage]: ...
    def DeleteRows(self) -> None: ...
    @overload
    def ActivateCell(self, columnName: str) -> None: ...
    @overload
    def ActivateCell(self, compoundId: int, columnName: str) -> None: ...
    def GenerateStatusText(self) -> str: ...
    def Delete(self) -> None: ...
    def FindNext(
        self,
        tableName: str,
        columnName: str,
        operatorType: FindOperatorType,
        value_: Any,
    ) -> bool: ...
    def PageSetup(self) -> None: ...
    def Print(self, displayDialog: bool) -> None: ...
    def PrintPreview(self) -> None: ...
    def BrowseAcquisitionMethod(self) -> None: ...
    def CloseMethod(self) -> None: ...

    FilterChanged: System.EventHandler  # Event

class QuantMsMsChromPeak(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantChromPeak,
    IConsistency,
    IConvertibleValueContainer,
    IPeak,
    IResultAttributes,
    IMsMsChromPeak,
    System.Runtime.Serialization.ISerializable,
    IPeakInternals,
    IChromPeak,
    IChangeNotify,
    System.ICloneable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        copy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsChromPeak,
    ) -> None: ...

class QuantMsMsIntBase(IFindPeaks):  # Class
    def __init__(self) -> None: ...

class QuantOriginalMsMsInt(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantMsMsIntBase, IFindPeaks
):  # Class
    def __init__(self) -> None: ...

class QuantPeak(
    IPeakInternals,
    IPeak,
    System.ICloneable,
    IResultAttributes,
    IConsistency,
    IChangeNotify,
    System.Runtime.Serialization.ISerializable,
):  # Class
    IsSaturated: bool  # readonly

class QuantPeakList(
    System.Runtime.Serialization.ISerializable,
    List[IPeak],
    Sequence[IPeak],
    IConsistency,
    IPeakHiding,
    ISortByAttribute,
    Iterable[Any],
    IResultAttributes,
    IChangeNotify,
    IItemHighlighting,
    IPeakList,
    IConvertibleValueContainer,
    System.ICloneable,
    IResult,
    Iterable[IPeak],
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self, copy: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantPeakList
    ) -> None: ...
    def FilterOnSignalToNoise(self, filters: IPSetPeakFilter) -> None: ...
    def Add(self, peak: IPeak) -> None: ...
    def Clone(self) -> IPeakList: ...

class QuantReportConfiguration:  # Class
    ...

class QuantScriptTask(
    IQueuedTask, System.IDisposable, System.Xml.Serialization.IXmlSerializable
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    Context: IQueuedTaskContext
    ProcessingPriority: TaskPriority
    ScriptFile: str

    def Dispose(self) -> None: ...

class QuantitationConfig:  # Class
    def __init__(self) -> None: ...

    IntegratorChoice: str  # static # readonly
    IntegratorParameterFile: str  # static # readonly
    IntegratorParameters: str  # static # readonly
    MaxNumberOfQualifiersPerCompound: int  # static # readonly
    Multiplier: float  # static # readonly
    PeakFilterMaxPeakCount: int  # static # readonly
    PeakFilterSnrThresholdValue: float  # static # readonly
    PeakFilterThreshold: str  # static # readonly
    PeakFilterThresholdValue: float  # static # readonly
    PeakSelectionCriterion: str  # static # readonly
    QuantitateByHeight: bool  # static # readonly
    RetentionTimeWindow: float  # static # readonly
    UnitOfConcentration: str  # static # readonly

class QuantitationDataSet(
    System.IDisposable,
    System.ComponentModel.IListSource,
    System.Xml.Serialization.IXmlSerializable,
    System.ComponentModel.ISupportInitializeNotification,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet,
    System.ComponentModel.IComponent,
    System.ComponentModel.ISupportInitialize,
    System.IServiceProvider,
    System.Runtime.Serialization.ISerializable,
    System.Data.DataSet,
):  # Class
    def __init__(self) -> None: ...

    Batch: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchDataTable
    )  # readonly
    BatchProperties: System.Data.PropertyCollection  # readonly
    BatchRowCount: int  # readonly
    BatchTable: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchTable
    )  # readonly
    Calibration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationDataTable
    )  # readonly
    CalibrationRowCount: int  # readonly
    ColumnEventsDisabled: bool
    NumberFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericFormat
    )  # readonly
    Peak: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakDataTable
    )  # readonly
    PeakQualifier: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierDataTable
    )  # readonly
    PeakQualifierRowCount: int  # readonly
    PeakRowCount: int  # readonly
    Relations: System.Data.DataRelationCollection  # readonly
    SchemaSerializationMode: System.Data.SchemaSerializationMode
    Tables: System.Data.DataTableCollection  # readonly
    TargetCompound: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundDataTable
    )  # readonly
    TargetCompoundRowCount: int  # readonly
    TargetQualifier: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierDataTable
    )  # readonly
    TargetQualifierRowCount: int  # readonly

    @staticmethod
    def GetTypedDataSetSchema(
        xs: System.Xml.Schema.XmlSchemaSet,
    ) -> System.Xml.Schema.XmlSchemaComplexType: ...
    @overload
    def GetCompoundRow(
        self, batchId: int, sampleId: int, compoundId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    @overload
    def GetCompoundRow(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        compoundId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def FindPrimaryPeak(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
    ): ...
    @staticmethod
    def GetEnabledLevelCount(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> int: ...
    def GetTargetQualifierRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
    ]: ...
    def FindCalibrationRow(
        self, batchID: int, sampleID: int, compoundID: int, levelID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def FindTargetCompoundRow(
        self, batchID: int, sampleID: int, compoundID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def GetCalReferenceForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def CopyCompoundRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        calRefCompoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        batchId: int,
        sampleId: int,
        compoundId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def FindPeakQualifierRow(
        self,
        batchID: int,
        sampleID: int,
        compoundID: int,
        qualifierID: int,
        peakID: int,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow: ...
    def FindRelatedISTDCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
    def GetCalReferenceCompoundRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def GetPeakQualifierRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow]: ...
    @overload
    def GetCalibrationRows(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
    ]: ...
    @overload
    def GetCalibrationRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def FindTargetQualifierRow(
        self, batchID: int, sampleID: int, compoundID: int, qualifierID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
    def GetBatchRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow]: ...
    def CreateCalibrationRowForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
    def FindUnusedCalibrationLevelID(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> int: ...
    def FindUnusedSampleID(self, batchId: int) -> int: ...
    def GetSampleRow(
        self, batchId: int, sampleId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...
    def GetTargetCompoundRows(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
    ]: ...
    @staticmethod
    def GetUniqueColumnName(column: System.Data.DataColumn) -> str: ...
    def FindBatchRow(
        self, batchID: int, sampleID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
    def ParseColumnName(self, uniqueColumnName: str) -> System.Data.DataColumn: ...
    def FindRelatedISTDCompoundRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def GetTargetQualifierRow(
        self, batchId: int, sampleId: int, compoundId: int, qualifierId: int
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...
    def FindUnusedQualifierID(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> int: ...
    def FindPeakRow(
        self, batchID: int, sampleID: int, compoundID: int, peakID: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def GetCalibrationRowsForCompound(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow]: ...
    def FindCompoundRow(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        compoundId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    def FindUnusedCompoundID(self, batchId: int, sampleId: int) -> int: ...
    def FindPrimaryPeakRow(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
    def Clone(self) -> System.Data.DataSet: ...
    def GetDependentTargetCompoundIDs(
        self, batchId: int, sampleId: int, compoundId: int
    ) -> List[int]: ...
    def GetPeakRows(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
    def AssignSampleID(self, row: System.Data.DataRow, sampleId: int) -> None: ...
    def DeleteAllCalibrationRows(self) -> None: ...
    def GetDependentTargetCompounds(
        self, batchId: int, sampleId: int, compoundId: int
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ]: ...
    def MoveCalibrationData(
        self,
        fromSample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        toSample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...

    # Nested Types

    class BatchDataTable(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchTable,
        System.ComponentModel.IListSource,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ],
        System.IServiceProvider,
        System.ComponentModel.ISupportInitializeNotification,
        System.ComponentModel.ISupportInitialize,
        System.IDisposable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        System.Xml.Serialization.IXmlSerializable,
        Iterable[Any],
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ],
    ):  # Class
        def __init__(self) -> None: ...

        AcqDateTimeColumn: System.Data.DataColumn  # readonly
        AcqDateTimeLocalColumn: System.Data.DataColumn  # readonly
        AcqMethodFileNameColumn: System.Data.DataColumn  # readonly
        AcqMethodPathNameColumn: System.Data.DataColumn  # readonly
        AcqOperatorColumn: System.Data.DataColumn  # readonly
        BalanceOverrideColumn: System.Data.DataColumn  # readonly
        BarcodeColumn: System.Data.DataColumn  # readonly
        BatchIDColumn: System.Data.DataColumn  # readonly
        CalibrationReferenceSampleIDColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        CommentColumn: System.Data.DataColumn  # readonly
        CompletedColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        DADateTimeColumn: System.Data.DataColumn  # readonly
        DAMethodFileNameColumn: System.Data.DataColumn  # readonly
        DAMethodPathNameColumn: System.Data.DataColumn  # readonly
        DataFileNameColumn: System.Data.DataColumn  # readonly
        DataPathNameColumn: System.Data.DataColumn  # readonly
        DilutionColumn: System.Data.DataColumn  # readonly
        DualInjectorAcqDateTimeColumn: System.Data.DataColumn  # readonly
        DualInjectorBarcodeColumn: System.Data.DataColumn  # readonly
        DualInjectorColumn: System.Data.DataColumn  # readonly
        DualInjectorExpectedBarcodeColumn: System.Data.DataColumn  # readonly
        DualInjectorVialColumn: System.Data.DataColumn  # readonly
        DualInjectorVolumeColumn: System.Data.DataColumn  # readonly
        EquilibrationTimeColumn: System.Data.DataColumn  # readonly
        ExpectedBarcodeColumn: System.Data.DataColumn  # readonly
        GraphicSampleChromatogramColumn: System.Data.DataColumn  # readonly
        ISTDDilutionColumn: System.Data.DataColumn  # readonly
        InjectionsPerPositionColumn: System.Data.DataColumn  # readonly
        InjectorVolumeColumn: System.Data.DataColumn  # readonly
        InstrumentNameColumn: System.Data.DataColumn  # readonly
        InstrumentTypeColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ): ...
        LevelNameColumn: System.Data.DataColumn  # readonly
        LockedColumn: System.Data.DataColumn  # readonly
        MatrixSpikeDilutionColumn: System.Data.DataColumn  # readonly
        MatrixSpikeGroupColumn: System.Data.DataColumn  # readonly
        MatrixTypeColumn: System.Data.DataColumn  # readonly
        OutlierCCTimeColumn: System.Data.DataColumn  # readonly
        PlateCodeColumn: System.Data.DataColumn  # readonly
        PlatePositionColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessageColumn: System.Data.DataColumn  # readonly
        RackCodeColumn: System.Data.DataColumn  # readonly
        RackPositionColumn: System.Data.DataColumn  # readonly
        RunStartValvePositionDescriptionColumn: System.Data.DataColumn  # readonly
        RunStartValvePositionNumberColumn: System.Data.DataColumn  # readonly
        RunStopValvePositionDescriptionColumn: System.Data.DataColumn  # readonly
        RunStopValvePositionNumberColumn: System.Data.DataColumn  # readonly
        SampleAmountColumn: System.Data.DataColumn  # readonly
        SampleApprovedColumn: System.Data.DataColumn  # readonly
        SampleGroupColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        SampleInformationColumn: System.Data.DataColumn  # readonly
        SampleNameColumn: System.Data.DataColumn  # readonly
        SamplePositionColumn: System.Data.DataColumn  # readonly
        SamplePrepFileNameColumn: System.Data.DataColumn  # readonly
        SamplePrepPathNameColumn: System.Data.DataColumn  # readonly
        SampleTypeColumn: System.Data.DataColumn  # readonly
        SamplingDateTimeColumn: System.Data.DataColumn  # readonly
        SamplingTimeColumn: System.Data.DataColumn  # readonly
        SequenceFileNameColumn: System.Data.DataColumn  # readonly
        SequencePathNameColumn: System.Data.DataColumn  # readonly
        SurrogateDilutionColumn: System.Data.DataColumn  # readonly
        TotalSampleAmountColumn: System.Data.DataColumn  # readonly
        TrayNameColumn: System.Data.DataColumn  # readonly
        TuneFileLastTimeStampColumn: System.Data.DataColumn  # readonly
        TuneFileNameColumn: System.Data.DataColumn  # readonly
        TunePathNameColumn: System.Data.DataColumn  # readonly
        UserDefined1Column: System.Data.DataColumn  # readonly
        UserDefined2Column: System.Data.DataColumn  # readonly
        UserDefined3Column: System.Data.DataColumn  # readonly
        UserDefined4Column: System.Data.DataColumn  # readonly
        UserDefined5Column: System.Data.DataColumn  # readonly
        UserDefined6Column: System.Data.DataColumn  # readonly
        UserDefined7Column: System.Data.DataColumn  # readonly
        UserDefined8Column: System.Data.DataColumn  # readonly
        UserDefined9Column: System.Data.DataColumn  # readonly
        UserDefinedColumn: System.Data.DataColumn  # readonly
        VialColumn: System.Data.DataColumn  # readonly

        def RemoveBatchRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        ) -> None: ...
        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def FindByBatchIDSampleID(
            self, BatchID: int, SampleID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ): ...
        @overload
        def AddBatchRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        ) -> None: ...
        @overload
        def AddBatchRow(
            self,
            BatchID: int,
            SampleID: int,
            AcqDateTime: System.DateTime,
            AcqDateTimeLocal: System.DateTimeOffset,
            AcqMethodFileName: str,
            AcqMethodPathName: str,
            AcqOperator: str,
            BalanceOverride: str,
            Barcode: str,
            CalibrationReferenceSampleID: int,
            Comment: str,
            Completed: bool,
            DADateTime: System.DateTime,
            DAMethodFileName: str,
            DAMethodPathName: str,
            DataFileName: str,
            DataPathName: str,
            Dilution: float,
            DualInjector: bool,
            DualInjectorAcqDateTime: System.DateTime,
            DualInjectorBarcode: str,
            DualInjectorExpectedBarcode: str,
            DualInjectorVial: int,
            DualInjectorVolume: float,
            EquilibrationTime: float,
            ExpectedBarcode: str,
            GraphicSampleChromatogram: str,
            InjectionsPerPosition: int,
            InjectorVolume: float,
            InstrumentName: str,
            InstrumentType: str,
            ISTDDilution: float,
            LevelName: str,
            Locked: bool,
            MatrixSpikeDilution: float,
            MatrixSpikeGroup: str,
            MatrixType: str,
            OutlierCCTime: str,
            PlateCode: str,
            PlatePosition: str,
            QuantitationMessage: str,
            RackCode: str,
            RackPosition: str,
            RunStartValvePositionDescription: str,
            RunStartValvePositionNumber: str,
            RunStopValvePositionDescription: str,
            RunStopValvePositionNumber: str,
            SampleAmount: float,
            SampleApproved: bool,
            SampleGroup: str,
            SampleInformation: str,
            SampleName: str,
            SamplePosition: str,
            SamplePrepFileName: str,
            SamplePrepPathName: str,
            SampleType: str,
            SamplingDateTime: System.DateTime,
            SamplingTime: float,
            SequenceFileName: str,
            SequencePathName: str,
            SurrogateDilution: float,
            TotalSampleAmount: float,
            TuneFileLastTimeStamp: System.DateTime,
            TuneFileName: str,
            TunePathName: str,
            TrayName: str,
            UserDefined: str,
            UserDefined1: str,
            UserDefined2: str,
            UserDefined3: str,
            UserDefined4: str,
            UserDefined5: str,
            UserDefined6: str,
            UserDefined7: str,
            UserDefined8: str,
            UserDefined9: str,
            Vial: int,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ): ...
        def NewBatchRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...

        AcqDateTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        AcqDateTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        AcqDateTimeLocalChanged: System.Data.DataColumnChangeEventHandler  # Event
        AcqDateTimeLocalChanging: System.Data.DataColumnChangeEventHandler  # Event
        AcqMethodFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        AcqMethodFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        AcqMethodPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        AcqMethodPathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        AcqOperatorChanged: System.Data.DataColumnChangeEventHandler  # Event
        AcqOperatorChanging: System.Data.DataColumnChangeEventHandler  # Event
        BalanceOverrideChanged: System.Data.DataColumnChangeEventHandler  # Event
        BalanceOverrideChanging: System.Data.DataColumnChangeEventHandler  # Event
        BarcodeChanged: System.Data.DataColumnChangeEventHandler  # Event
        BarcodeChanging: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        BatchRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEventHandler
        )  # Event
        BatchRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEventHandler
        )  # Event
        BatchRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEventHandler
        )  # Event
        BatchRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEventHandler
        )  # Event
        CalibrationReferenceSampleIDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalibrationReferenceSampleIDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CommentChanged: System.Data.DataColumnChangeEventHandler  # Event
        CommentChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompletedChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompletedChanging: System.Data.DataColumnChangeEventHandler  # Event
        DADateTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        DADateTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        DAMethodFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        DAMethodFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        DAMethodPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        DAMethodPathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        DataFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        DataFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        DataPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        DataPathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        DilutionChanged: System.Data.DataColumnChangeEventHandler  # Event
        DilutionChanging: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorAcqDateTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DualInjectorAcqDateTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DualInjectorChanged: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorChanging: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorExpectedBarcodeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DualInjectorExpectedBarcodeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DualInjectorVialChanged: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorVialChanging: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorVolumeChanged: System.Data.DataColumnChangeEventHandler  # Event
        DualInjectorVolumeChanging: System.Data.DataColumnChangeEventHandler  # Event
        EquilibrationTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        EquilibrationTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        ExpectedBarcodeChanged: System.Data.DataColumnChangeEventHandler  # Event
        ExpectedBarcodeChanging: System.Data.DataColumnChangeEventHandler  # Event
        GraphicSampleChromatogramChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicSampleChromatogramChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDDilutionChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDDilutionChanging: System.Data.DataColumnChangeEventHandler  # Event
        InjectionsPerPositionChanged: System.Data.DataColumnChangeEventHandler  # Event
        InjectionsPerPositionChanging: System.Data.DataColumnChangeEventHandler  # Event
        InjectorVolumeChanged: System.Data.DataColumnChangeEventHandler  # Event
        InjectorVolumeChanging: System.Data.DataColumnChangeEventHandler  # Event
        InstrumentNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        InstrumentNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        InstrumentTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        InstrumentTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        LockedChanged: System.Data.DataColumnChangeEventHandler  # Event
        LockedChanging: System.Data.DataColumnChangeEventHandler  # Event
        MatrixSpikeDilutionChanged: System.Data.DataColumnChangeEventHandler  # Event
        MatrixSpikeDilutionChanging: System.Data.DataColumnChangeEventHandler  # Event
        MatrixSpikeGroupChanged: System.Data.DataColumnChangeEventHandler  # Event
        MatrixSpikeGroupChanging: System.Data.DataColumnChangeEventHandler  # Event
        MatrixTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        MatrixTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierCCTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierCCTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        PlateCodeChanged: System.Data.DataColumnChangeEventHandler  # Event
        PlateCodeChanging: System.Data.DataColumnChangeEventHandler  # Event
        PlatePositionChanged: System.Data.DataColumnChangeEventHandler  # Event
        PlatePositionChanging: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanged: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanging: System.Data.DataColumnChangeEventHandler  # Event
        RackCodeChanged: System.Data.DataColumnChangeEventHandler  # Event
        RackCodeChanging: System.Data.DataColumnChangeEventHandler  # Event
        RackPositionChanged: System.Data.DataColumnChangeEventHandler  # Event
        RackPositionChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleAmountChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleAmountChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleApprovedChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleApprovedChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleGroupChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleGroupChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleInformationChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleInformationChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SamplePositionChanged: System.Data.DataColumnChangeEventHandler  # Event
        SamplePositionChanging: System.Data.DataColumnChangeEventHandler  # Event
        SamplePrepFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SamplePrepFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SamplePrepPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SamplePrepPathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        SamplingDateTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        SamplingDateTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        SamplingTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        SamplingTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        SequenceFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SequenceFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SequencePathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SequencePathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SurrogateDilutionChanged: System.Data.DataColumnChangeEventHandler  # Event
        SurrogateDilutionChanging: System.Data.DataColumnChangeEventHandler  # Event
        TotalSampleAmountChanged: System.Data.DataColumnChangeEventHandler  # Event
        TotalSampleAmountChanging: System.Data.DataColumnChangeEventHandler  # Event
        TrayNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        TrayNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        TuneFileLastTimeStampChanged: System.Data.DataColumnChangeEventHandler  # Event
        TuneFileLastTimeStampChanging: System.Data.DataColumnChangeEventHandler  # Event
        TuneFileNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        TuneFileNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        TunePathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        TunePathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined1Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined1Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined2Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined2Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined3Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined3Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined4Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined4Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined5Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined5Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined6Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined6Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined7Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined7Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined8Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined8Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined9Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined9Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanging: System.Data.DataColumnChangeEventHandler  # Event
        VialChanged: System.Data.DataColumnChangeEventHandler  # Event
        VialChanging: System.Data.DataColumnChangeEventHandler  # Event

    class BatchRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow,
        System.Data.DataRow,
    ):  # Class
        AcqDateTime: System.DateTime
        AcqDateTimeLocal: System.DateTimeOffset
        AcqMethodFileName: str
        AcqMethodPathName: str
        AcqOperator: str
        BalanceOverride: str
        Barcode: str
        Batch: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchDataTable
        )  # readonly
        BatchID: int
        CalibrationReferenceSampleID: int
        Comment: str
        Completed: bool
        DADateTime: System.DateTime
        DAMethodFileName: str
        DAMethodPathName: str
        DataFileName: str
        DataPathName: str
        Dilution: float
        DualInjector: bool
        DualInjectorAcqDateTime: System.DateTime
        DualInjectorBarcode: str
        DualInjectorExpectedBarcode: str
        DualInjectorVial: int
        DualInjectorVolume: float
        EquilibrationTime: float
        ExpectedBarcode: str
        GraphicSampleChromatogram: str
        ISTDDilution: float
        InjectionsPerPosition: int
        InjectorVolume: float
        InstrumentName: str
        InstrumentType: str
        LevelName: str
        Locked: bool
        MatrixSpikeDilution: float
        MatrixSpikeGroup: str
        MatrixType: str
        OutlierCCTime: str
        PlateCode: str
        PlatePosition: str
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessage: str
        RackCode: str
        RackPosition: str
        RunStartValvePositionDescription: str
        RunStartValvePositionNumber: str
        RunStopValvePositionDescription: str
        RunStopValvePositionNumber: str
        SampleAmount: float
        SampleApproved: bool
        SampleGroup: str
        SampleID: int
        SampleInformation: str
        SampleName: str
        SamplePosition: str
        SamplePrepFileName: str
        SamplePrepPathName: str
        SampleType: str
        SamplingDateTime: System.DateTime
        SamplingTime: float
        SequenceFileName: str
        SequencePathName: str
        SurrogateDilution: float
        TotalSampleAmount: float
        TrayName: str
        TuneFileLastTimeStamp: System.DateTime
        TuneFileName: str
        TunePathName: str
        UserDefined: str
        UserDefined1: str
        UserDefined2: str
        UserDefined3: str
        UserDefined4: str
        UserDefined5: str
        UserDefined6: str
        UserDefined7: str
        UserDefined8: str
        UserDefined9: str
        Vial: int

        def SetGraphicSampleChromatogramNull(self) -> None: ...
        def SetEquilibrationTimeNull(self) -> None: ...
        def IsRackPositionNull(self) -> bool: ...
        def SetDataPathNameNull(self) -> None: ...
        def IsSampleTypeNull(self) -> bool: ...
        def GetTargetCompoundRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ]: ...
        def SetRunStopValvePositionDescriptionNull(self) -> None: ...
        def IsISTDDilutionNull(self) -> bool: ...
        def IsDualInjectorVolumeNull(self) -> bool: ...
        def IsTrayNameNull(self) -> bool: ...
        def SetTotalSampleAmountNull(self) -> None: ...
        def IsAcqOperatorNull(self) -> bool: ...
        def IsBarcodeNull(self) -> bool: ...
        def IsUserDefined8Null(self) -> bool: ...
        def IsCalibrationReferenceSampleIDNull(self) -> bool: ...
        def SetSamplingDateTimeNull(self) -> None: ...
        def IsInstrumentTypeNull(self) -> bool: ...
        def SetDAMethodFileNameNull(self) -> None: ...
        def SetUserDefined5Null(self) -> None: ...
        def IsLockedNull(self) -> bool: ...
        def IsRunStartValvePositionDescriptionNull(self) -> bool: ...
        def IsDualInjectorExpectedBarcodeNull(self) -> bool: ...
        def IsUserDefined1Null(self) -> bool: ...
        def IsMatrixSpikeGroupNull(self) -> bool: ...
        def SetRunStartValvePositionNumberNull(self) -> None: ...
        def SetDilutionNull(self) -> None: ...
        def IsCompletedNull(self) -> bool: ...
        def IsDataPathNameNull(self) -> bool: ...
        def IsDualInjectorAcqDateTimeNull(self) -> bool: ...
        def SetSampleNameNull(self) -> None: ...
        def IsAcqMethodFileNameNull(self) -> bool: ...
        def IsSequenceFileNameNull(self) -> bool: ...
        def SetSamplingTimeNull(self) -> None: ...
        def IsSampleInformationNull(self) -> bool: ...
        def SetTuneFileLastTimeStampNull(self) -> None: ...
        def IsSamplingDateTimeNull(self) -> bool: ...
        def SetSampleInformationNull(self) -> None: ...
        def SetCommentNull(self) -> None: ...
        def IsDADateTimeNull(self) -> bool: ...
        def IsUserDefined6Null(self) -> bool: ...
        def IsSampleApprovedNull(self) -> bool: ...
        def IsUserDefined3Null(self) -> bool: ...
        def SetSampleGroupNull(self) -> None: ...
        def IsSampleAmountNull(self) -> bool: ...
        def IsDualInjectorNull(self) -> bool: ...
        def SetDualInjectorNull(self) -> None: ...
        def SetTunePathNameNull(self) -> None: ...
        def SetAcqDateTimeLocalNull(self) -> None: ...
        def IsRunStartValvePositionNumberNull(self) -> bool: ...
        def SetVialNull(self) -> None: ...
        def SetUserDefinedNull(self) -> None: ...
        def SetRunStartValvePositionDescriptionNull(self) -> None: ...
        def SetUserDefined3Null(self) -> None: ...
        def SetOutlierCCTimeNull(self) -> None: ...
        def SetMatrixSpikeDilutionNull(self) -> None: ...
        def IsPlateCodeNull(self) -> bool: ...
        def SetBarcodeNull(self) -> None: ...
        def SetRackCodeNull(self) -> None: ...
        def SetDualInjectorExpectedBarcodeNull(self) -> None: ...
        def IsSamplePrepPathNameNull(self) -> bool: ...
        def SetUserDefined4Null(self) -> None: ...
        def SetInstrumentTypeNull(self) -> None: ...
        def SetSamplePositionNull(self) -> None: ...
        def IsUserDefined4Null(self) -> bool: ...
        def SetDualInjectorVialNull(self) -> None: ...
        def SetUserDefined9Null(self) -> None: ...
        def IsUserDefined9Null(self) -> bool: ...
        def GetCompoundRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow
        ]: ...
        def IsTuneFileLastTimeStampNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetSampleApprovedNull(self) -> None: ...
        def IsLevelNameNull(self) -> bool: ...
        def SetPlateCodeNull(self) -> None: ...
        def IsAcqMethodPathNameNull(self) -> bool: ...
        def SetPlatePositionNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def SetUserDefined6Null(self) -> None: ...
        def SetLevelNameNull(self) -> None: ...
        def SetUserDefined1Null(self) -> None: ...
        def IsInjectorVolumeNull(self) -> bool: ...
        def IsInstrumentNameNull(self) -> bool: ...
        def IsDataFileNameNull(self) -> bool: ...
        def IsSamplingTimeNull(self) -> bool: ...
        def IsDilutionNull(self) -> bool: ...
        def SetTuneFileNameNull(self) -> None: ...
        def SetDataFileNameNull(self) -> None: ...
        def SetBalanceOverrideNull(self) -> None: ...
        def SetInjectionsPerPositionNull(self) -> None: ...
        def IsGraphicSampleChromatogramNull(self) -> bool: ...
        def SetSequenceFileNameNull(self) -> None: ...
        def IsSamplePrepFileNameNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetAcqMethodPathNameNull(self) -> None: ...
        def IsMatrixTypeNull(self) -> bool: ...
        def IsUserDefined2Null(self) -> bool: ...
        def IsTotalSampleAmountNull(self) -> bool: ...
        def SetUserDefined8Null(self) -> None: ...
        def SetInjectorVolumeNull(self) -> None: ...
        def IsTuneFileNameNull(self) -> bool: ...
        def IsDAMethodPathNameNull(self) -> bool: ...
        def SetSurrogateDilutionNull(self) -> None: ...
        def SetMatrixTypeNull(self) -> None: ...
        def SetAcqOperatorNull(self) -> None: ...
        def IsUserDefined5Null(self) -> bool: ...
        def IsTunePathNameNull(self) -> bool: ...
        def SetSamplePrepFileNameNull(self) -> None: ...
        def IsBalanceOverrideNull(self) -> bool: ...
        def SetExpectedBarcodeNull(self) -> None: ...
        def IsOutlierCCTimeNull(self) -> bool: ...
        def SetDADateTimeNull(self) -> None: ...
        def SetLockedNull(self) -> None: ...
        def IsSamplePositionNull(self) -> bool: ...
        def SetSequencePathNameNull(self) -> None: ...
        def SetCompletedNull(self) -> None: ...
        def IsDAMethodFileNameNull(self) -> bool: ...
        def IsCommentNull(self) -> bool: ...
        def SetAcqMethodFileNameNull(self) -> None: ...
        def IsExpectedBarcodeNull(self) -> bool: ...
        def IsInjectionsPerPositionNull(self) -> bool: ...
        def SetTrayNameNull(self) -> None: ...
        def IsMatrixSpikeDilutionNull(self) -> bool: ...
        def IsAcqDateTimeLocalNull(self) -> bool: ...
        def IsUserDefined7Null(self) -> bool: ...
        def IsDualInjectorBarcodeNull(self) -> bool: ...
        def IsRunStopValvePositionNumberNull(self) -> bool: ...
        def SetSampleTypeNull(self) -> None: ...
        def SetDAMethodPathNameNull(self) -> None: ...
        def IsRunStopValvePositionDescriptionNull(self) -> bool: ...
        def SetUserDefined7Null(self) -> None: ...
        def IsEquilibrationTimeNull(self) -> bool: ...
        def SetISTDDilutionNull(self) -> None: ...
        def SetAcqDateTimeNull(self) -> None: ...
        def SetUserDefined2Null(self) -> None: ...
        def SetMatrixSpikeGroupNull(self) -> None: ...
        def SetSamplePrepPathNameNull(self) -> None: ...
        def SetDualInjectorBarcodeNull(self) -> None: ...
        def SetDualInjectorVolumeNull(self) -> None: ...
        def SetDualInjectorAcqDateTimeNull(self) -> None: ...
        def IsRackCodeNull(self) -> bool: ...
        def IsAcqDateTimeNull(self) -> bool: ...
        def SetCalibrationReferenceSampleIDNull(self) -> None: ...
        def SetSampleAmountNull(self) -> None: ...
        def SetRunStopValvePositionNumberNull(self) -> None: ...
        def IsSampleGroupNull(self) -> bool: ...
        def IsDualInjectorVialNull(self) -> bool: ...
        def IsSequencePathNameNull(self) -> bool: ...
        def SetInstrumentNameNull(self) -> None: ...
        def IsPlatePositionNull(self) -> bool: ...
        def SetRackPositionNull(self) -> None: ...
        def IsSampleNameNull(self) -> bool: ...
        def IsSurrogateDilutionNull(self) -> bool: ...
        def IsVialNull(self) -> bool: ...

    class BatchRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        )  # readonly

    class BatchRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRowChangeEvent,
        ) -> None: ...

    class CalibrationDataTable(
        System.IServiceProvider,
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ],
    ):  # Class
        def __init__(self) -> None: ...

        BatchIDColumn: System.Data.DataColumn  # readonly
        CalibrationSTDAcquisitionDateTimeColumn: System.Data.DataColumn  # readonly
        CalibrationSTDPathNameColumn: System.Data.DataColumn  # readonly
        CalibrationTypeColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        CompoundIDColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ): ...
        LevelAverageCounterColumn: System.Data.DataColumn  # readonly
        LevelConcentrationColumn: System.Data.DataColumn  # readonly
        LevelEnableColumn: System.Data.DataColumn  # readonly
        LevelIDColumn: System.Data.DataColumn  # readonly
        LevelLastUpdateTimeColumn: System.Data.DataColumn  # readonly
        LevelNameColumn: System.Data.DataColumn  # readonly
        LevelRSDColumn: System.Data.DataColumn  # readonly
        LevelResponseColumn: System.Data.DataColumn  # readonly
        LevelResponseFactorColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def RemoveCalibrationRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
        ) -> None: ...
        @overload
        def AddCalibrationRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
        ) -> None: ...
        @overload
        def AddCalibrationRow(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            LevelID: int,
            CalibrationSTDAcquisitionDateTime: System.DateTime,
            CalibrationSTDPathName: str,
            CalibrationType: str,
            LevelAverageCounter: float,
            LevelConcentration: float,
            LevelEnable: bool,
            LevelLastUpdateTime: System.DateTime,
            LevelName: str,
            LevelResponse: float,
            LevelResponseFactor: float,
            LevelRSD: float,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ): ...
        def NewCalibrationRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        def FindByBatchIDSampleIDCompoundIDLevelID(
            self, BatchID: int, SampleID: int, CompoundID: int, LevelID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ): ...

        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        CalibrationRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEventHandler
        )  # Event
        CalibrationRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEventHandler
        )  # Event
        CalibrationRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEventHandler
        )  # Event
        CalibrationRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEventHandler
        )  # Event
        CalibrationSTDAcquisitionDateTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalibrationSTDAcquisitionDateTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalibrationSTDPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        CalibrationSTDPathNameChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalibrationTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        CalibrationTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelAverageCounterChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelAverageCounterChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelConcentrationChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelEnableChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelEnableChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelLastUpdateTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelLastUpdateTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelRSDChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelRSDChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelResponseChanging: System.Data.DataColumnChangeEventHandler  # Event
        LevelResponseFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        LevelResponseFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event

    class CalibrationRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        System.Data.DataRow,
    ):  # Class
        BatchID: int
        Calibration: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationDataTable
        )  # readonly
        CalibrationSTDAcquisitionDateTime: System.DateTime
        CalibrationSTDPathName: str
        CalibrationType: str
        CompoundID: int
        LevelAverageCounter: float
        LevelConcentration: float
        LevelEnable: bool
        LevelID: int
        LevelLastUpdateTime: System.DateTime
        LevelName: str
        LevelRSD: float
        LevelResponse: float
        LevelResponseFactor: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        SampleID: int
        TargetCompoundRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        )

        def IsCalibrationTypeNull(self) -> bool: ...
        def IsCalibrationSTDPathNameNull(self) -> bool: ...
        def IsLevelNameNull(self) -> bool: ...
        def IsLevelLastUpdateTimeNull(self) -> bool: ...
        def SetCalibrationSTDAcquisitionDateTimeNull(self) -> None: ...
        def SetLevelLastUpdateTimeNull(self) -> None: ...
        def IsLevelResponseFactorNull(self) -> bool: ...
        def SetCalibrationTypeNull(self) -> None: ...
        def IsLevelEnableNull(self) -> bool: ...
        def SetLevelConcentrationNull(self) -> None: ...
        def IsLevelEnabled(self) -> bool: ...
        def IsLevelResponseNull(self) -> bool: ...
        def IsLevelConcentrationNull(self) -> bool: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def SetLevelAverageCounterNull(self) -> None: ...
        def SetCalibrationSTDPathNameNull(self) -> None: ...
        def SetLevelNameNull(self) -> None: ...
        def SetLevelEnableNull(self) -> None: ...
        def IsLevelRSDNull(self) -> bool: ...
        def IsCalibrationSTDAcquisitionDateTimeNull(self) -> bool: ...
        def Clone(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow: ...
        def IsLevelAverageCounterNull(self) -> bool: ...
        def SetLevelRSDNull(self) -> None: ...
        def SetLevelResponseFactorNull(self) -> None: ...
        def SetLevelResponseNull(self) -> None: ...

    class CalibrationRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        )  # readonly

    class CalibrationRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRowChangeEvent,
        ) -> None: ...

    class PeakDataTable(
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        AccuracyColumn: System.Data.DataColumn  # readonly
        AlternativePeakRTDiffColumn: System.Data.DataColumn  # readonly
        AlternativeTargetHitColumn: System.Data.DataColumn  # readonly
        AreaColumn: System.Data.DataColumn  # readonly
        AreaCorrectionResponseColumn: System.Data.DataColumn  # readonly
        BaselineDrawColumn: System.Data.DataColumn  # readonly
        BaselineEndColumn: System.Data.DataColumn  # readonly
        BaselineEndOriginalColumn: System.Data.DataColumn  # readonly
        BaselineStandardDeviationColumn: System.Data.DataColumn  # readonly
        BaselineStartColumn: System.Data.DataColumn  # readonly
        BaselineStartOriginalColumn: System.Data.DataColumn  # readonly
        BatchIDColumn: System.Data.DataColumn  # readonly
        CCISTDResponseRatioColumn: System.Data.DataColumn  # readonly
        CCResponseRatioColumn: System.Data.DataColumn  # readonly
        CalculatedConcentrationColumn: System.Data.DataColumn  # readonly
        CapacityFactorColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        CompoundIDColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        EstimatedConcentrationColumn: System.Data.DataColumn  # readonly
        FinalConcentrationColumn: System.Data.DataColumn  # readonly
        FullWidthHalfMaximumColumn: System.Data.DataColumn  # readonly
        GroupNumberColumn: System.Data.DataColumn  # readonly
        HeightColumn: System.Data.DataColumn  # readonly
        ISTDConcentrationRatioColumn: System.Data.DataColumn  # readonly
        ISTDResponsePercentDeviationColumn: System.Data.DataColumn  # readonly
        ISTDResponseRatioColumn: System.Data.DataColumn  # readonly
        IntegrationEndTimeColumn: System.Data.DataColumn  # readonly
        IntegrationEndTimeOriginalColumn: System.Data.DataColumn  # readonly
        IntegrationMetricQualityFlagsColumn: System.Data.DataColumn  # readonly
        IntegrationQualityMetricColumn: System.Data.DataColumn  # readonly
        IntegrationStartTimeColumn: System.Data.DataColumn  # readonly
        IntegrationStartTimeOriginalColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ): ...
        MZColumn: System.Data.DataColumn  # readonly
        ManuallyIntegratedColumn: System.Data.DataColumn  # readonly
        MassAbundanceScoreColumn: System.Data.DataColumn  # readonly
        MassAccuracyColumn: System.Data.DataColumn  # readonly
        MassAccuracyScoreColumn: System.Data.DataColumn  # readonly
        MassMatchScoreColumn: System.Data.DataColumn  # readonly
        MassSpacingScoreColumn: System.Data.DataColumn  # readonly
        MatrixSpikePercentDeviationColumn: System.Data.DataColumn  # readonly
        MatrixSpikePercentRecoveryColumn: System.Data.DataColumn  # readonly
        NoiseColumn: System.Data.DataColumn  # readonly
        NoiseRegionsColumn: System.Data.DataColumn  # readonly
        OutlierAccuracyColumn: System.Data.DataColumn  # readonly
        OutlierBelowLimitOfDetectionColumn: System.Data.DataColumn  # readonly
        OutlierBelowLimitOfQuantitationColumn: System.Data.DataColumn  # readonly
        OutlierBlankConcentrationOutsideLimitColumn: System.Data.DataColumn  # readonly
        OutlierCCISTDResponseRatioColumn: System.Data.DataColumn  # readonly
        OutlierCCResponseRatioColumn: System.Data.DataColumn  # readonly
        OutlierCCRetentionTimeColumn: System.Data.DataColumn  # readonly
        OutlierCapacityFactorColumn: System.Data.DataColumn  # readonly
        OutlierFullWidthHalfMaximumColumn: System.Data.DataColumn  # readonly
        OutlierISTDResponseColumn: System.Data.DataColumn  # readonly
        OutlierISTDResponsePercentDeviationColumn: System.Data.DataColumn  # readonly
        OutlierIntegrationQualityMetricColumn: System.Data.DataColumn  # readonly
        OutlierLibraryMatchScoreColumn: System.Data.DataColumn  # readonly
        OutlierMassAccuracyColumn: System.Data.DataColumn  # readonly
        OutlierMassMatchScoreColumn: System.Data.DataColumn  # readonly
        OutlierMatrixSpikeGroupRecoveryColumn: System.Data.DataColumn  # readonly
        OutlierMatrixSpikeOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierMatrixSpikeOutsidePercentDeviationColumn: (
            System.Data.DataColumn
        )  # readonly
        OutlierMatrixSpikePercentRecoveryColumn: System.Data.DataColumn  # readonly
        OutlierOutOfCalibrationRangeColumn: System.Data.DataColumn  # readonly
        OutlierPlatesColumn: System.Data.DataColumn  # readonly
        OutlierPurityColumn: System.Data.DataColumn  # readonly
        OutlierQCLCSRecoveryOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierQCOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierQCOutsideRSDColumn: System.Data.DataColumn  # readonly
        OutlierQValueColumn: System.Data.DataColumn  # readonly
        OutlierRelativeRetentionTimeColumn: System.Data.DataColumn  # readonly
        OutlierResolutionFrontColumn: System.Data.DataColumn  # readonly
        OutlierResolutionRearColumn: System.Data.DataColumn  # readonly
        OutlierRetentionTimeColumn: System.Data.DataColumn  # readonly
        OutlierSampleAmountOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierSampleOutsideRSDColumn: System.Data.DataColumn  # readonly
        OutlierSaturationRecoveryColumn: System.Data.DataColumn  # readonly
        OutlierSignalToNoiseRatioBelowLimitColumn: System.Data.DataColumn  # readonly
        OutlierSurrogateOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierSurrogatePercentRecoveryColumn: System.Data.DataColumn  # readonly
        OutlierSymmetryColumn: System.Data.DataColumn  # readonly
        PeakIDColumn: System.Data.DataColumn  # readonly
        PlatesColumn: System.Data.DataColumn  # readonly
        PurityColumn: System.Data.DataColumn  # readonly
        QValueComputedColumn: System.Data.DataColumn  # readonly
        QValueSortColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ReferenceLibraryMatchScoreColumn: System.Data.DataColumn  # readonly
        RelativeRetentionTimeColumn: System.Data.DataColumn  # readonly
        ResolutionFrontColumn: System.Data.DataColumn  # readonly
        ResolutionRearColumn: System.Data.DataColumn  # readonly
        ResponseRatioColumn: System.Data.DataColumn  # readonly
        RetentionIndexColumn: System.Data.DataColumn  # readonly
        RetentionTimeColumn: System.Data.DataColumn  # readonly
        RetentionTimeDifferenceColumn: System.Data.DataColumn  # readonly
        RetentionTimeDifferenceKeyColumn: System.Data.DataColumn  # readonly
        RetentionTimeOriginalColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        SampleRSDColumn: System.Data.DataColumn  # readonly
        SaturationRecoveryRatioColumn: System.Data.DataColumn  # readonly
        SelectedGroupRetentionTimeColumn: System.Data.DataColumn  # readonly
        SelectedTargetRetentionTimeColumn: System.Data.DataColumn  # readonly
        SignalToNoiseRatioColumn: System.Data.DataColumn  # readonly
        SurrogatePercentRecoveryColumn: System.Data.DataColumn  # readonly
        SymmetryColumn: System.Data.DataColumn  # readonly
        TargetResponseColumn: System.Data.DataColumn  # readonly
        TargetResponseOriginalColumn: System.Data.DataColumn  # readonly
        UserCustomCalculation1Column: System.Data.DataColumn  # readonly
        UserCustomCalculation2Column: System.Data.DataColumn  # readonly
        UserCustomCalculation3Column: System.Data.DataColumn  # readonly
        UserCustomCalculation4Column: System.Data.DataColumn  # readonly
        UserCustomCalculationColumn: System.Data.DataColumn  # readonly
        WidthColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def RemovePeakRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
        ) -> None: ...
        def NewPeakRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ): ...
        def FindByBatchIDSampleIDCompoundIDPeakID(
            self, BatchID: int, SampleID: int, CompoundID: int, PeakID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        @overload
        def AddPeakRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
        ) -> None: ...
        @overload
        def AddPeakRow(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            PeakID: int,
            Accuracy: float,
            AlternativePeakRTDiff: float,
            AlternativeTargetHit: str,
            Area: float,
            AreaCorrectionResponse: float,
            BaselineDraw: str,
            BaselineEnd: float,
            BaselineEndOriginal: float,
            BaselineStandardDeviation: float,
            BaselineStart: float,
            BaselineStartOriginal: float,
            CalculatedConcentration: float,
            CapacityFactor: float,
            CCISTDResponseRatio: float,
            CCResponseRatio: float,
            EstimatedConcentration: str,
            FinalConcentration: float,
            FullWidthHalfMaximum: float,
            GroupNumber: int,
            Height: float,
            IntegrationEndTime: float,
            IntegrationEndTimeOriginal: float,
            IntegrationMetricQualityFlags: str,
            IntegrationQualityMetric: str,
            IntegrationStartTime: float,
            IntegrationStartTimeOriginal: float,
            ISTDConcentrationRatio: float,
            ISTDResponsePercentDeviation: float,
            ISTDResponseRatio: float,
            ManuallyIntegrated: bool,
            MassAbundanceScore: float,
            MassAccuracy: float,
            MassAccuracyScore: float,
            MassMatchScore: float,
            MassSpacingScore: float,
            MatrixSpikePercentDeviation: float,
            MatrixSpikePercentRecovery: float,
            MZ: float,
            Noise: float,
            NoiseRegions: str,
            OutlierAccuracy: str,
            OutlierBelowLimitOfDetection: str,
            OutlierBelowLimitOfQuantitation: str,
            OutlierBlankConcentrationOutsideLimit: str,
            OutlierCapacityFactor: str,
            OutlierCCISTDResponseRatio: str,
            OutlierCCResponseRatio: str,
            OutlierCCRetentionTime: str,
            OutlierFullWidthHalfMaximum: str,
            OutlierIntegrationQualityMetric: str,
            OutlierISTDResponse: str,
            OutlierISTDResponsePercentDeviation: str,
            OutlierLibraryMatchScore: str,
            OutlierMassAccuracy: str,
            OutlierMassMatchScore: str,
            OutlierMatrixSpikeGroupRecovery: str,
            OutlierMatrixSpikeOutOfLimits: str,
            OutlierMatrixSpikeOutsidePercentDeviation: str,
            OutlierMatrixSpikePercentRecovery: str,
            OutlierOutOfCalibrationRange: str,
            OutlierPlates: str,
            OutlierPurity: str,
            OutlierQCLCSRecoveryOutOfLimits: str,
            OutlierQCOutOfLimits: str,
            OutlierQCOutsideRSD: str,
            OutlierQValue: str,
            OutlierRelativeRetentionTime: str,
            OutlierResolutionFront: str,
            OutlierResolutionRear: str,
            OutlierRetentionTime: str,
            OutlierSampleAmountOutOfLimits: str,
            OutlierSampleOutsideRSD: str,
            OutlierSaturationRecovery: str,
            OutlierSignalToNoiseRatioBelowLimit: str,
            OutlierSurrogateOutOfLimits: str,
            OutlierSurrogatePercentRecovery: str,
            OutlierSymmetry: str,
            Plates: int,
            Purity: float,
            QValueComputed: int,
            QValueSort: int,
            ReferenceLibraryMatchScore: float,
            RelativeRetentionTime: float,
            ResolutionFront: float,
            ResolutionRear: float,
            ResponseRatio: float,
            RetentionIndex: float,
            RetentionTime: float,
            RetentionTimeDifference: float,
            RetentionTimeDifferenceKey: int,
            RetentionTimeOriginal: float,
            SampleRSD: float,
            SaturationRecoveryRatio: float,
            SelectedGroupRetentionTime: float,
            SelectedTargetRetentionTime: float,
            SignalToNoiseRatio: float,
            SurrogatePercentRecovery: float,
            Symmetry: float,
            TargetResponse: float,
            TargetResponseOriginal: float,
            UserCustomCalculation: float,
            UserCustomCalculation1: float,
            UserCustomCalculation2: float,
            UserCustomCalculation3: float,
            UserCustomCalculation4: float,
            Width: float,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ): ...

        AccuracyChanged: System.Data.DataColumnChangeEventHandler  # Event
        AccuracyChanging: System.Data.DataColumnChangeEventHandler  # Event
        AlternativePeakRTDiffChanged: System.Data.DataColumnChangeEventHandler  # Event
        AlternativePeakRTDiffChanging: System.Data.DataColumnChangeEventHandler  # Event
        AlternativeTargetHitChanged: System.Data.DataColumnChangeEventHandler  # Event
        AlternativeTargetHitChanging: System.Data.DataColumnChangeEventHandler  # Event
        AreaChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaChanging: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionResponseChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BaselineDrawChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineDrawChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStandardDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BaselineStandardDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BaselineStartChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        CCISTDResponseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        CCISTDResponseRatioChanging: System.Data.DataColumnChangeEventHandler  # Event
        CalculatedConcentrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalculatedConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CapacityFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        CapacityFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        EstimatedConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        EstimatedConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        FinalConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        FinalConcentrationChanging: System.Data.DataColumnChangeEventHandler  # Event
        FullWidthHalfMaximumChanged: System.Data.DataColumnChangeEventHandler  # Event
        FullWidthHalfMaximumChanging: System.Data.DataColumnChangeEventHandler  # Event
        GroupNumberChanged: System.Data.DataColumnChangeEventHandler  # Event
        GroupNumberChanging: System.Data.DataColumnChangeEventHandler  # Event
        HeightChanged: System.Data.DataColumnChangeEventHandler  # Event
        HeightChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDConcentrationRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDConcentrationRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponsePercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponsePercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseRatioChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeOriginalChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationEndTimeOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationMetricQualityFlagsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationMetricQualityFlagsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationQualityMetricChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationQualityMetricChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationStartTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationStartTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationStartTimeOriginalChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationStartTimeOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZChanging: System.Data.DataColumnChangeEventHandler  # Event
        ManuallyIntegratedChanged: System.Data.DataColumnChangeEventHandler  # Event
        ManuallyIntegratedChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassAbundanceScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassAbundanceScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassMatchScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassMatchScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassSpacingScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassSpacingScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        MatrixSpikePercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        NoiseChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierAccuracyChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierAccuracyChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierBelowLimitOfDetectionChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBelowLimitOfDetectionChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBelowLimitOfQuantitationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBelowLimitOfQuantitationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBlankConcentrationOutsideLimitChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBlankConcentrationOutsideLimitChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCISTDResponseRatioChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCISTDResponseRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCResponseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierCCResponseRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCRetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierCCRetentionTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCapacityFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierCapacityFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierFullWidthHalfMaximumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierFullWidthHalfMaximumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierISTDResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierISTDResponseChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierISTDResponsePercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierISTDResponsePercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierIntegrationQualityMetricChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierIntegrationQualityMetricChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierLibraryMatchScoreChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierLibraryMatchScoreChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMassAccuracyChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierMassAccuracyChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierMassMatchScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierMassMatchScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierMatrixSpikeGroupRecoveryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikeGroupRecoveryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikeOutOfLimitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikeOutOfLimitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikeOutsidePercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikeOutsidePercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikePercentRecoveryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMatrixSpikePercentRecoveryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierOutOfCalibrationRangeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierOutOfCalibrationRangeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierPlatesChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierPlatesChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierPurityChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierPurityChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQCLCSRecoveryOutOfLimitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQCLCSRecoveryOutOfLimitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQCOutOfLimitsChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQCOutOfLimitsChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQCOutsideRSDChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQCOutsideRSDChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQValueChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQValueChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierRelativeRetentionTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierRelativeRetentionTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierResolutionFrontChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierResolutionFrontChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierResolutionRearChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierResolutionRearChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierRetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierRetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierSampleAmountOutOfLimitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSampleAmountOutOfLimitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSampleOutsideRSDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSampleOutsideRSDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSignalToNoiseRatioBelowLimitChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSignalToNoiseRatioBelowLimitChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSurrogateOutOfLimitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSurrogateOutOfLimitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSurrogatePercentRecoveryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSurrogatePercentRecoveryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierSymmetryChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierSymmetryChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        PeakIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEventHandler
        )  # Event
        PeakRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEventHandler
        )  # Event
        PeakRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEventHandler
        )  # Event
        PeakRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEventHandler
        )  # Event
        PlatesChanged: System.Data.DataColumnChangeEventHandler  # Event
        PlatesChanging: System.Data.DataColumnChangeEventHandler  # Event
        PurityChanged: System.Data.DataColumnChangeEventHandler  # Event
        PurityChanging: System.Data.DataColumnChangeEventHandler  # Event
        QValueComputedChanged: System.Data.DataColumnChangeEventHandler  # Event
        QValueComputedChanging: System.Data.DataColumnChangeEventHandler  # Event
        QValueSortChanged: System.Data.DataColumnChangeEventHandler  # Event
        QValueSortChanging: System.Data.DataColumnChangeEventHandler  # Event
        ReferenceLibraryMatchScoreChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ReferenceLibraryMatchScoreChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RelativeRetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        RelativeRetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionFrontChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionFrontChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionRearChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionRearChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResponseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResponseRatioChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionIndexChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionIndexChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeDifferenceChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeDifferenceChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeDifferenceKeyChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeDifferenceKeyChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleRSDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleRSDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SaturationRecoveryRatioChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SaturationRecoveryRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SelectedGroupRetentionTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SelectedGroupRetentionTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SelectedTargetRetentionTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SelectedTargetRetentionTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SignalToNoiseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        SignalToNoiseRatioChanging: System.Data.DataColumnChangeEventHandler  # Event
        SurrogatePercentRecoveryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogatePercentRecoveryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SymmetryChanged: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryChanging: System.Data.DataColumnChangeEventHandler  # Event
        TargetResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        TargetResponseChanging: System.Data.DataColumnChangeEventHandler  # Event
        TargetResponseOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        TargetResponseOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculation1Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculation1Changing: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculation2Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculation2Changing: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculation3Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculation3Changing: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculation4Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculation4Changing: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculationChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationChanging: System.Data.DataColumnChangeEventHandler  # Event
        WidthChanged: System.Data.DataColumnChangeEventHandler  # Event
        WidthChanging: System.Data.DataColumnChangeEventHandler  # Event

    class PeakQualifierDataTable(
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ],
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        AreaColumn: System.Data.DataColumn  # readonly
        BaselineEndColumn: System.Data.DataColumn  # readonly
        BaselineEndOriginalColumn: System.Data.DataColumn  # readonly
        BaselineStandardDeviationColumn: System.Data.DataColumn  # readonly
        BaselineStartColumn: System.Data.DataColumn  # readonly
        BaselineStartOriginalColumn: System.Data.DataColumn  # readonly
        BatchIDColumn: System.Data.DataColumn  # readonly
        CoelutionScoreColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        CompoundIDColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        FullWidthHalfMaximumColumn: System.Data.DataColumn  # readonly
        HeightColumn: System.Data.DataColumn  # readonly
        IntegrationEndTimeColumn: System.Data.DataColumn  # readonly
        IntegrationEndTimeOriginalColumn: System.Data.DataColumn  # readonly
        IntegrationMetricQualityFlagsColumn: System.Data.DataColumn  # readonly
        IntegrationQualityMetricColumn: System.Data.DataColumn  # readonly
        IntegrationStartTimeColumn: System.Data.DataColumn  # readonly
        IntegrationStartTimeOriginalColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ): ...
        MZColumn: System.Data.DataColumn  # readonly
        ManuallyIntegratedColumn: System.Data.DataColumn  # readonly
        MassAccuracyColumn: System.Data.DataColumn  # readonly
        NoiseColumn: System.Data.DataColumn  # readonly
        NoiseRegionsColumn: System.Data.DataColumn  # readonly
        OutlierQualifierCoelutionScoreColumn: System.Data.DataColumn  # readonly
        OutlierQualifierFullWidthHalfMaximumColumn: System.Data.DataColumn  # readonly
        OutlierQualifierIntegrationQualityMetricColumn: (
            System.Data.DataColumn
        )  # readonly
        OutlierQualifierMassAccuracyColumn: System.Data.DataColumn  # readonly
        OutlierQualifierOutOfLimitsColumn: System.Data.DataColumn  # readonly
        OutlierQualifierResolutionFrontColumn: System.Data.DataColumn  # readonly
        OutlierQualifierResolutionRearColumn: System.Data.DataColumn  # readonly
        OutlierQualifierSignalToNoiseRatioColumn: System.Data.DataColumn  # readonly
        OutlierQualifierSymmetryColumn: System.Data.DataColumn  # readonly
        OutlierSaturationRecoveryColumn: System.Data.DataColumn  # readonly
        PeakIDColumn: System.Data.DataColumn  # readonly
        QualifierIDColumn: System.Data.DataColumn  # readonly
        QualifierResponseRatioColumn: System.Data.DataColumn  # readonly
        QualifierResponseRatioOriginalColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ResolutionFrontColumn: System.Data.DataColumn  # readonly
        ResolutionRearColumn: System.Data.DataColumn  # readonly
        RetentionTimeColumn: System.Data.DataColumn  # readonly
        RetentionTimeOriginalColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        SaturationRecoveryRatioColumn: System.Data.DataColumn  # readonly
        SignalToNoiseRatioColumn: System.Data.DataColumn  # readonly
        SymmetryColumn: System.Data.DataColumn  # readonly
        UserCustomCalculationColumn: System.Data.DataColumn  # readonly

        def NewPeakQualifierRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ): ...
        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def RemovePeakQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
        ) -> None: ...
        @overload
        def AddPeakQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
        ) -> None: ...
        @overload
        def AddPeakQualifierRow(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            PeakID: int,
            QualifierID: int,
            Area: float,
            BaselineEnd: float,
            BaselineEndOriginal: float,
            BaselineStandardDeviation: float,
            BaselineStart: float,
            BaselineStartOriginal: float,
            CoelutionScore: float,
            FullWidthHalfMaximum: float,
            Height: float,
            IntegrationEndTime: float,
            IntegrationEndTimeOriginal: float,
            IntegrationMetricQualityFlags: str,
            IntegrationQualityMetric: str,
            IntegrationStartTime: float,
            IntegrationStartTimeOriginal: float,
            ManuallyIntegrated: bool,
            MassAccuracy: float,
            MZ: float,
            Noise: float,
            NoiseRegions: str,
            OutlierQualifierCoelutionScore: str,
            OutlierQualifierFullWidthHalfMaximum: str,
            OutlierQualifierIntegrationQualityMetric: str,
            OutlierQualifierMassAccuracy: str,
            OutlierQualifierOutOfLimits: str,
            OutlierQualifierResolutionFront: str,
            OutlierQualifierResolutionRear: str,
            OutlierQualifierSignalToNoiseRatio: str,
            OutlierQualifierSymmetry: str,
            OutlierSaturationRecovery: str,
            QualifierResponseRatio: float,
            QualifierResponseRatioOriginal: float,
            ResolutionFront: float,
            ResolutionRear: float,
            RetentionTime: float,
            RetentionTimeOriginal: float,
            SaturationRecoveryRatio: float,
            SignalToNoiseRatio: float,
            Symmetry: float,
            UserCustomCalculation: float,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        def FindByBatchIDSampleIDCompoundIDQualifierIDPeakID(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            QualifierID: int,
            PeakID: int,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ): ...

        AreaChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineEndOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStandardDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BaselineStandardDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BaselineStartChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartChanging: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        BaselineStartOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        CoelutionScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        CoelutionScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        FullWidthHalfMaximumChanged: System.Data.DataColumnChangeEventHandler  # Event
        FullWidthHalfMaximumChanging: System.Data.DataColumnChangeEventHandler  # Event
        HeightChanged: System.Data.DataColumnChangeEventHandler  # Event
        HeightChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationEndTimeOriginalChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationEndTimeOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationMetricQualityFlagsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationMetricQualityFlagsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationQualityMetricChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationQualityMetricChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationStartTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationStartTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationStartTimeOriginalChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationStartTimeOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZChanging: System.Data.DataColumnChangeEventHandler  # Event
        ManuallyIntegratedChanged: System.Data.DataColumnChangeEventHandler  # Event
        ManuallyIntegratedChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierQualifierCoelutionScoreChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierCoelutionScoreChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierFullWidthHalfMaximumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierFullWidthHalfMaximumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierIntegrationQualityMetricChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierIntegrationQualityMetricChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierMassAccuracyChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierMassAccuracyChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierOutOfLimitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierOutOfLimitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierResolutionFrontChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierResolutionFrontChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierResolutionRearChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierResolutionRearChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierSignalToNoiseRatioChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierSignalToNoiseRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierSymmetryChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierQualifierSymmetryChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        PeakIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        PeakIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakQualifierRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEventHandler
        )  # Event
        PeakQualifierRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEventHandler
        )  # Event
        PeakQualifierRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEventHandler
        )  # Event
        PeakQualifierRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEventHandler
        )  # Event
        QualifierIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        QualifierResponseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierResponseRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        QualifierResponseRatioOriginalChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        QualifierResponseRatioOriginalChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ResolutionFrontChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionFrontChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionRearChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionRearChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeOriginalChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeOriginalChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SaturationRecoveryRatioChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SaturationRecoveryRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SignalToNoiseRatioChanged: System.Data.DataColumnChangeEventHandler  # Event
        SignalToNoiseRatioChanging: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryChanged: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryChanging: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationChanging: System.Data.DataColumnChangeEventHandler  # Event

    class PeakQualifierRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow,
        System.Data.DataRow,
    ):  # Class
        Area: float
        BaselineEnd: float
        BaselineEndOriginal: float
        BaselineStandardDeviation: float
        BaselineStart: float
        BaselineStartOriginal: float
        BatchID: int
        CoelutionScore: float
        CompoundID: int
        FullWidthHalfMaximum: float
        Height: float
        IntegrationEndTime: float
        IntegrationEndTimeOriginal: float
        IntegrationMetricQualityFlags: str
        IntegrationQualityMetric: str
        IntegrationStartTime: float
        IntegrationStartTimeOriginal: float
        IsZeroPeaked: bool  # readonly
        MZ: float
        ManuallyIntegrated: bool
        MassAccuracy: float
        Noise: float
        NoiseRegions: str
        OutlierQualifierCoelutionScore: str
        OutlierQualifierFullWidthHalfMaximum: str
        OutlierQualifierIntegrationQualityMetric: str
        OutlierQualifierMassAccuracy: str
        OutlierQualifierOutOfLimits: str
        OutlierQualifierResolutionFront: str
        OutlierQualifierResolutionRear: str
        OutlierQualifierSignalToNoiseRatio: str
        OutlierQualifierSymmetry: str
        OutlierSaturationRecovery: str
        PeakID: int
        PeakQualifier: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierDataTable
        )  # readonly
        PeakRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        )
        QualifierID: int
        QualifierResponseRatio: float
        QualifierResponseRatioOriginal: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ResolutionFront: float
        ResolutionRear: float
        RetentionTime: float
        RetentionTimeOriginal: float
        SampleID: int
        SaturationRecoveryRatio: float
        SignalToNoiseRatio: float
        Symmetry: float
        TargetQualifierRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        )
        UserCustomCalculation: float

        def IsMZNull(self) -> bool: ...
        def IsOutlierQualifierSignalToNoiseRatioNull(self) -> bool: ...
        def SetIntegrationQualityMetricNull(self) -> None: ...
        def IsBaselineStandardDeviationNull(self) -> bool: ...
        def IsMassAccuracyNull(self) -> bool: ...
        def IsQualifierResponseRatioOriginalNull(self) -> bool: ...
        def IsResolutionRearNull(self) -> bool: ...
        def IsOutlierQualifierResolutionFrontNull(self) -> bool: ...
        def SetBaselineEndNull(self) -> None: ...
        def SetOutlierQualifierIntegrationQualityMetricNull(self) -> None: ...
        def SetOutlierSaturationRecoveryNull(self) -> None: ...
        def IsHeightNull(self) -> bool: ...
        def SetIntegrationStartTimeNull(self) -> None: ...
        def SetOutlierQualifierResolutionFrontNull(self) -> None: ...
        def IsRetentionTimeOriginalNull(self) -> bool: ...
        def IsBaselineEndOriginalNull(self) -> bool: ...
        def IsManuallyIntegratedNull(self) -> bool: ...
        def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
        def GetTargetQualifierRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow: ...
        def IsAreaNull(self) -> bool: ...
        def IsBaselineEndNull(self) -> bool: ...
        def IsNoiseNull(self) -> bool: ...
        def SetOutlierQualifierCoelutionScoreNull(self) -> None: ...
        def SetResolutionFrontNull(self) -> None: ...
        def IsFullWidthHalfMaximumNull(self) -> bool: ...
        def SetManuallyIntegratedNull(self) -> None: ...
        def SetIntegrationEndTimeNull(self) -> None: ...
        def IsOutlierQualifierOutOfLimitsNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetQualifierResponseRatioOriginalNull(self) -> None: ...
        def SetOutlierQualifierSignalToNoiseRatioNull(self) -> None: ...
        def IsIntegrationQualityMetricNull(self) -> bool: ...
        def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
        def IsOutlierQualifierMassAccuracyNull(self) -> bool: ...
        def IsOutlierQualifierSymmetryNull(self) -> bool: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def SetOutlierQualifierSymmetryNull(self) -> None: ...
        def SetResolutionRearNull(self) -> None: ...
        def IsSignalToNoiseRatioNull(self) -> bool: ...
        def SetBaselineStartOriginalNull(self) -> None: ...
        def SetSaturationRecoveryRatioNull(self) -> None: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def SetBaselineStartNull(self) -> None: ...
        def SetIntegrationStartTimeOriginalNull(self) -> None: ...
        def IsOutlierQualifierCoelutionScoreNull(self) -> bool: ...
        def IsSaturationRecoveryRatioNull(self) -> bool: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def SetSignalToNoiseRatioNull(self) -> None: ...
        def SetBaselineStandardDeviationNull(self) -> None: ...
        def SetHeightNull(self) -> None: ...
        def SetOutlierQualifierOutOfLimitsNull(self) -> None: ...
        def IsCoelutionScoreNull(self) -> bool: ...
        def SetCoelutionScoreNull(self) -> None: ...
        def SetMassAccuracyNull(self) -> None: ...
        def SetSymmetryNull(self) -> None: ...
        def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
        def SetIntegrationEndTimeOriginalNull(self) -> None: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def SetBaselineEndOriginalNull(self) -> None: ...
        def IsIntegrationEndTimeNull(self) -> bool: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetNoiseNull(self) -> None: ...
        def IsOutlierQualifierIntegrationQualityMetricNull(self) -> bool: ...
        def SetOutlierQualifierFullWidthHalfMaximumNull(self) -> None: ...
        def SetQualifierResponseRatioNull(self) -> None: ...
        def IsOutlierQualifierFullWidthHalfMaximumNull(self) -> bool: ...
        def IsIntegrationStartTimeNull(self) -> bool: ...
        def IsOutlierQualifierResolutionRearNull(self) -> bool: ...
        def IsBaselineStartNull(self) -> bool: ...
        def IsQualifierResponseRatioNull(self) -> bool: ...
        def SetFullWidthHalfMaximumNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def SetAreaNull(self) -> None: ...
        def SetRetentionTimeOriginalNull(self) -> None: ...
        def SetOutlierQualifierMassAccuracyNull(self) -> None: ...
        def SetOutlierQualifierResolutionRearNull(self) -> None: ...
        def GetPeakRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
        def IsOutlierSaturationRecoveryNull(self) -> bool: ...
        def IsSymmetryNull(self) -> bool: ...
        def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
        def IsResolutionFrontNull(self) -> bool: ...
        def IsBaselineStartOriginalNull(self) -> bool: ...

    class PeakQualifierRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        )  # readonly

    class PeakQualifierRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRowChangeEvent,
        ) -> None: ...

    class PeakRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow, System.Data.DataRow
    ):  # Class
        Accuracy: float
        AlternativePeakRTDiff: float
        AlternativeTargetHit: str
        Area: float
        AreaCorrectionResponse: float
        BaselineDraw: str
        BaselineEnd: float
        BaselineEndOriginal: float
        BaselineStandardDeviation: float
        BaselineStart: float
        BaselineStartOriginal: float
        BatchID: int
        CCISTDResponseRatio: float
        CCResponseRatio: float
        CalculatedConcentration: float
        CapacityFactor: float
        CompoundID: int
        EstimatedConcentration: str
        FinalConcentration: float
        FullWidthHalfMaximum: float
        GroupNumber: int
        Height: float
        ISTDConcentrationRatio: float
        ISTDResponsePercentDeviation: float
        ISTDResponseRatio: float
        IntegrationEndTime: float
        IntegrationEndTimeOriginal: float
        IntegrationMetricQualityFlags: str
        IntegrationQualityMetric: str
        IntegrationStartTime: float
        IntegrationStartTimeOriginal: float
        IsZeroPeaked: bool  # readonly
        MZ: float
        ManuallyIntegrated: bool
        MassAbundanceScore: float
        MassAccuracy: float
        MassAccuracyScore: float
        MassMatchScore: float
        MassSpacingScore: float
        MatrixSpikePercentDeviation: float
        MatrixSpikePercentRecovery: float
        Noise: float
        NoiseRegions: str
        OutlierAccuracy: str
        OutlierBelowLimitOfDetection: str
        OutlierBelowLimitOfQuantitation: str
        OutlierBlankConcentrationOutsideLimit: str
        OutlierCCISTDResponseRatio: str
        OutlierCCResponseRatio: str
        OutlierCCRetentionTime: str
        OutlierCapacityFactor: str
        OutlierFullWidthHalfMaximum: str
        OutlierISTDResponse: str
        OutlierISTDResponsePercentDeviation: str
        OutlierIntegrationQualityMetric: str
        OutlierLibraryMatchScore: str
        OutlierMassAccuracy: str
        OutlierMassMatchScore: str
        OutlierMatrixSpikeGroupRecovery: str
        OutlierMatrixSpikeOutOfLimits: str
        OutlierMatrixSpikeOutsidePercentDeviation: str
        OutlierMatrixSpikePercentRecovery: str
        OutlierOutOfCalibrationRange: str
        OutlierPlates: str
        OutlierPurity: str
        OutlierQCLCSRecoveryOutOfLimits: str
        OutlierQCOutOfLimits: str
        OutlierQCOutsideRSD: str
        OutlierQValue: str
        OutlierRelativeRetentionTime: str
        OutlierResolutionFront: str
        OutlierResolutionRear: str
        OutlierRetentionTime: str
        OutlierSampleAmountOutOfLimits: str
        OutlierSampleOutsideRSD: str
        OutlierSaturationRecovery: str
        OutlierSignalToNoiseRatioBelowLimit: str
        OutlierSurrogateOutOfLimits: str
        OutlierSurrogatePercentRecovery: str
        OutlierSymmetry: str
        Peak: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakDataTable
        )  # readonly
        PeakID: int
        Plates: int
        Purity: float
        QValueComputed: int
        QValueSort: int
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        ReferenceLibraryMatchScore: float
        RelativeRetentionTime: float
        ResolutionFront: float
        ResolutionRear: float
        ResponseRatio: float
        RetentionIndex: float
        RetentionTime: float
        RetentionTimeDifference: float
        RetentionTimeDifferenceKey: int
        RetentionTimeOriginal: float
        SampleID: int
        SampleRSD: float
        SaturationRecoveryRatio: float
        SelectedGroupRetentionTime: float
        SelectedTargetRetentionTime: float
        SignalToNoiseRatio: float
        SurrogatePercentRecovery: float
        Symmetry: float
        TargetCompoundRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        )
        TargetResponse: float
        TargetResponseOriginal: float
        UserCustomCalculation: float
        UserCustomCalculation1: float
        UserCustomCalculation2: float
        UserCustomCalculation3: float
        UserCustomCalculation4: float
        Width: float

        def IsTargetResponseNull(self) -> bool: ...
        def SetOutlierPurityNull(self) -> None: ...
        def SetOutlierCCResponseRatioNull(self) -> None: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def SetOutlierResolutionRearNull(self) -> None: ...
        def IsMatrixSpikePercentDeviationNull(self) -> bool: ...
        def IsUserCustomCalculation2Null(self) -> bool: ...
        def IsOutlierMassAccuracyNull(self) -> bool: ...
        def IsOutlierResolutionRearNull(self) -> bool: ...
        def SetUserCustomCalculation4Null(self) -> None: ...
        def IsOutlierPurityNull(self) -> bool: ...
        def IsFullWidthHalfMaximumNull(self) -> bool: ...
        def IsResolutionFrontNull(self) -> bool: ...
        def SetOutlierSaturationRecoveryNull(self) -> None: ...
        def IsOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> bool: ...
        def IsSelectedGroupRetentionTimeNull(self) -> bool: ...
        def IsOutlierBelowLimitOfDetectionNull(self) -> bool: ...
        def IsBaselineDrawNull(self) -> bool: ...
        def SetWidthNull(self) -> None: ...
        def IsOutlierRetentionTimeNull(self) -> bool: ...
        def SetResponseRatioNull(self) -> None: ...
        def SetAreaNull(self) -> None: ...
        def SetFinalConcentrationNull(self) -> None: ...
        def IsAlternativeTargetHitNull(self) -> bool: ...
        def IsOutlierCCRetentionTimeNull(self) -> bool: ...
        def IsOutlierOutOfCalibrationRangeNull(self) -> bool: ...
        def IsOutlierSymmetryNull(self) -> bool: ...
        def IsIntegrationEndTimeOriginalNull(self) -> bool: ...
        def IsOutlierBlankConcentrationOutsideLimitNull(self) -> bool: ...
        def SetHeightNull(self) -> None: ...
        def IsOutlierAccuracyNull(self) -> bool: ...
        def SetRetentionTimeDifferenceKeyNull(self) -> None: ...
        def IsOutlierSurrogateOutOfLimitsNull(self) -> bool: ...
        def SetOutlierQCLCSRecoveryOutOfLimitsNull(self) -> None: ...
        def SetOutlierBlankConcentrationOutsideLimitNull(self) -> None: ...
        def IsRetentionTimeOriginalNull(self) -> bool: ...
        def SetSignalToNoiseRatioNull(self) -> None: ...
        def SetOutlierSymmetryNull(self) -> None: ...
        def IsCCResponseRatioNull(self) -> bool: ...
        def SetFullWidthHalfMaximumNull(self) -> None: ...
        def SetOutlierIntegrationQualityMetricNull(self) -> None: ...
        def IsFinalConcentrationNull(self) -> bool: ...
        def SetIntegrationStartTimeNull(self) -> None: ...
        def SetUserCustomCalculation1Null(self) -> None: ...
        def SetOutlierMassAccuracyNull(self) -> None: ...
        def SetISTDConcentrationRatioNull(self) -> None: ...
        def SetOutlierMatrixSpikeGroupRecoveryNull(self) -> None: ...
        def IsOutlierSaturationRecoveryNull(self) -> bool: ...
        def IsMassSpacingScoreNull(self) -> bool: ...
        def IsNoiseNull(self) -> bool: ...
        def SetAlternativeTargetHitNull(self) -> None: ...
        def SetOutlierAccuracyNull(self) -> None: ...
        def SetResolutionFrontNull(self) -> None: ...
        def SetOutlierQCOutsideRSDNull(self) -> None: ...
        def IsMassAbundanceScoreNull(self) -> bool: ...
        def IsOutlierRelativeRetentionTimeNull(self) -> bool: ...
        def IsCapacityFactorNull(self) -> bool: ...
        def SetMassAccuracyScoreNull(self) -> None: ...
        def SetOutlierQCOutOfLimitsNull(self) -> None: ...
        def IsOutlierISTDResponsePercentDeviationNull(self) -> bool: ...
        def IsOutlierMatrixSpikePercentRecoveryNull(self) -> bool: ...
        def SetMassSpacingScoreNull(self) -> None: ...
        def GetQualifierPeakRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow
        ]: ...
        def SetRelativeRetentionTimeNull(self) -> None: ...
        def IsOutlierSurrogatePercentRecoveryNull(self) -> bool: ...
        def SetOutlierISTDResponseNull(self) -> None: ...
        def SetMatrixSpikePercentDeviationNull(self) -> None: ...
        def IsRetentionTimeDifferenceKeyNull(self) -> bool: ...
        def SetOutlierCapacityFactorNull(self) -> None: ...
        def SetBaselineStandardDeviationNull(self) -> None: ...
        def SetPlatesNull(self) -> None: ...
        def IsUserCustomCalculation4Null(self) -> bool: ...
        def IsBaselineStartOriginalNull(self) -> bool: ...
        def IsBaselineEndOriginalNull(self) -> bool: ...
        def SetOutlierQValueNull(self) -> None: ...
        def GetPeakQualifierRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ]: ...
        def IsResolutionRearNull(self) -> bool: ...
        def IsPlatesNull(self) -> bool: ...
        def SetAccuracyNull(self) -> None: ...
        def SetIntegrationStartTimeOriginalNull(self) -> None: ...
        def SetOutlierBelowLimitOfQuantitationNull(self) -> None: ...
        def IsOutlierCapacityFactorNull(self) -> bool: ...
        def IsRelativeRetentionTimeNull(self) -> bool: ...
        def SetIntegrationQualityMetricNull(self) -> None: ...
        def IsOutlierIntegrationQualityMetricNull(self) -> bool: ...
        def IsWidthNull(self) -> bool: ...
        def IsOutlierMatrixSpikeGroupRecoveryNull(self) -> bool: ...
        def SetBaselineStartOriginalNull(self) -> None: ...
        def SetTargetResponseNull(self) -> None: ...
        def IsTargetResponseOriginalNull(self) -> bool: ...
        def IsOutlierSignalToNoiseRatioBelowLimitNull(self) -> bool: ...
        def IsAlternativePeakRTDiffNull(self) -> bool: ...
        def IsOutlierQCOutOfLimitsNull(self) -> bool: ...
        def IsIntegrationMetricQualityFlagsNull(self) -> bool: ...
        def SetManuallyIntegratedNull(self) -> None: ...
        def IsAccuracyNull(self) -> bool: ...
        def IsQValueComputedNull(self) -> bool: ...
        def SetOutlierSurrogateOutOfLimitsNull(self) -> None: ...
        def IsPurityNull(self) -> bool: ...
        def IsSampleRSDNull(self) -> bool: ...
        def IsOutlierLibraryMatchScoreNull(self) -> bool: ...
        def SetIntegrationEndTimeOriginalNull(self) -> None: ...
        def IsAreaCorrectionResponseNull(self) -> bool: ...
        def IsSignalToNoiseRatioNull(self) -> bool: ...
        def IsOutlierPlatesNull(self) -> bool: ...
        def SetCapacityFactorNull(self) -> None: ...
        def SetEstimatedConcentrationNull(self) -> None: ...
        def SetReferenceLibraryMatchScoreNull(self) -> None: ...
        def IsSaturationRecoveryRatioNull(self) -> bool: ...
        def IsOutlierCCISTDResponseRatioNull(self) -> bool: ...
        def IsUserCustomCalculation1Null(self) -> bool: ...
        def IsIntegrationStartTimeNull(self) -> bool: ...
        def SetAreaCorrectionResponseNull(self) -> None: ...
        def IsBaselineStartNull(self) -> bool: ...
        def SetOutlierOutOfCalibrationRangeNull(self) -> None: ...
        def SetSelectedGroupRetentionTimeNull(self) -> None: ...
        def IsOutlierCCResponseRatioNull(self) -> bool: ...
        def SetQValueComputedNull(self) -> None: ...
        def IsOutlierBelowLimitOfQuantitationNull(self) -> bool: ...
        def IsCCISTDResponseRatioNull(self) -> bool: ...
        def IsOutlierQValueNull(self) -> bool: ...
        def SetOutlierSurrogatePercentRecoveryNull(self) -> None: ...
        def SetCCISTDResponseRatioNull(self) -> None: ...
        def SetOutlierMatrixSpikePercentRecoveryNull(self) -> None: ...
        def IsOutlierMatrixSpikeOutOfLimitsNull(self) -> bool: ...
        def SetRetentionTimeOriginalNull(self) -> None: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def SetNoiseNull(self) -> None: ...
        def IsOutlierSampleAmountOutOfLimitsNull(self) -> bool: ...
        def SetPurityNull(self) -> None: ...
        def SetISTDResponsePercentDeviationNull(self) -> None: ...
        def SetMatrixSpikePercentRecoveryNull(self) -> None: ...
        def SetQValueSortNull(self) -> None: ...
        def IsSelectedTargetRetentionTimeNull(self) -> bool: ...
        def SetBaselineEndOriginalNull(self) -> None: ...
        def SetSampleRSDNull(self) -> None: ...
        def SetIntegrationEndTimeNull(self) -> None: ...
        def IsOutlierMassMatchScoreNull(self) -> bool: ...
        def SetSurrogatePercentRecoveryNull(self) -> None: ...
        def SetUserCustomCalculation2Null(self) -> None: ...
        def SetRetentionTimeDifferenceNull(self) -> None: ...
        def IsQValueSortNull(self) -> bool: ...
        def SetOutlierBelowLimitOfDetectionNull(self) -> None: ...
        def SetCCResponseRatioNull(self) -> None: ...
        def IsISTDResponsePercentDeviationNull(self) -> bool: ...
        def IsUserCustomCalculation3Null(self) -> bool: ...
        def SetAlternativePeakRTDiffNull(self) -> None: ...
        def SetOutlierResolutionFrontNull(self) -> None: ...
        def IsBaselineEndNull(self) -> bool: ...
        def SetOutlierLibraryMatchScoreNull(self) -> None: ...
        def IsOutlierQCOutsideRSDNull(self) -> bool: ...
        def IsOutlierQCLCSRecoveryOutOfLimitsNull(self) -> bool: ...
        def IsHeightNull(self) -> bool: ...
        def SetIntegrationMetricQualityFlagsNull(self) -> None: ...
        def IsBaselineStandardDeviationNull(self) -> bool: ...
        def IsIntegrationEndTimeNull(self) -> bool: ...
        def SetMassAccuracyNull(self) -> None: ...
        def IsMatrixSpikePercentRecoveryNull(self) -> bool: ...
        def SetOutlierMatrixSpikeOutsidePercentDeviationNull(self) -> None: ...
        def IsManuallyIntegratedNull(self) -> bool: ...
        def IsResponseRatioNull(self) -> bool: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def IsOutlierResolutionFrontNull(self) -> bool: ...
        def SetSymmetryNull(self) -> None: ...
        def SetMassMatchScoreNull(self) -> None: ...
        def SetOutlierISTDResponsePercentDeviationNull(self) -> None: ...
        def IsMassAccuracyScoreNull(self) -> bool: ...
        def IsISTDConcentrationRatioNull(self) -> bool: ...
        def IsRetentionIndexNull(self) -> bool: ...
        def IsOutlierISTDResponseNull(self) -> bool: ...
        def IsMZNull(self) -> bool: ...
        def IsMassAccuracyNull(self) -> bool: ...
        def SetGroupNumberNull(self) -> None: ...
        def IsMassMatchScoreNull(self) -> bool: ...
        def SetOutlierCCISTDResponseRatioNull(self) -> None: ...
        def SetMassAbundanceScoreNull(self) -> None: ...
        def IsCalculatedConcentrationNull(self) -> bool: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def SetOutlierRetentionTimeNull(self) -> None: ...
        def IsSymmetryNull(self) -> bool: ...
        def SetSaturationRecoveryRatioNull(self) -> None: ...
        def SetOutlierMassMatchScoreNull(self) -> None: ...
        def SetRetentionIndexNull(self) -> None: ...
        def SetOutlierCCRetentionTimeNull(self) -> None: ...
        def IsIntegrationStartTimeOriginalNull(self) -> bool: ...
        def SetOutlierSampleAmountOutOfLimitsNull(self) -> None: ...
        def SetOutlierSignalToNoiseRatioBelowLimitNull(self) -> None: ...
        def SetTargetResponseOriginalNull(self) -> None: ...
        def SetSelectedTargetRetentionTimeNull(self) -> None: ...
        def IsOutlierFullWidthHalfMaximumNull(self) -> bool: ...
        def IsEstimatedConcentrationNull(self) -> bool: ...
        def IsOutlierSampleOutsideRSDNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetOutlierMatrixSpikeOutOfLimitsNull(self) -> None: ...
        def IsReferenceLibraryMatchScoreNull(self) -> bool: ...
        def IsAreaNull(self) -> bool: ...
        def SetCalculatedConcentrationNull(self) -> None: ...
        def SetBaselineStartNull(self) -> None: ...
        def IsISTDResponseRatioNull(self) -> bool: ...
        def SetOutlierSampleOutsideRSDNull(self) -> None: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def IsSurrogatePercentRecoveryNull(self) -> bool: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def SetBaselineDrawNull(self) -> None: ...
        def SetOutlierFullWidthHalfMaximumNull(self) -> None: ...
        def IsGroupNumberNull(self) -> bool: ...
        def SetOutlierRelativeRetentionTimeNull(self) -> None: ...
        def SetISTDResponseRatioNull(self) -> None: ...
        def SetOutlierPlatesNull(self) -> None: ...
        def IsIntegrationQualityMetricNull(self) -> bool: ...
        def SetResolutionRearNull(self) -> None: ...
        def SetBaselineEndNull(self) -> None: ...
        def IsRetentionTimeDifferenceNull(self) -> bool: ...
        def SetUserCustomCalculation3Null(self) -> None: ...

    class PeakRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        )  # readonly

    class PeakRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRowChangeEvent,
        ) -> None: ...

    class TargetCompoundDataTable(
        System.IServiceProvider,
        System.ComponentModel.ISupportInitialize,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ],
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        System.ComponentModel.IListSource,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ],
        System.IDisposable,
    ):  # Class
        def __init__(self) -> None: ...

        AccuracyLimitMultiplierLOQColumn: System.Data.DataColumn  # readonly
        AccuracyMaximumPercentDeviationColumn: System.Data.DataColumn  # readonly
        AgilentIDColumn: System.Data.DataColumn  # readonly
        AlternativePeakCriteriaColumn: System.Data.DataColumn  # readonly
        AlternativePeakIDColumn: System.Data.DataColumn  # readonly
        AreaCorrectionFactorColumn: System.Data.DataColumn  # readonly
        AreaCorrectionMZColumn: System.Data.DataColumn  # readonly
        AreaCorrectionSelectedMZColumn: System.Data.DataColumn  # readonly
        AverageRelativeRetentionTimeColumn: System.Data.DataColumn  # readonly
        AverageResponseFactorColumn: System.Data.DataColumn  # readonly
        AverageResponseFactorRSDColumn: System.Data.DataColumn  # readonly
        BatchIDColumn: System.Data.DataColumn  # readonly
        BlankResponseOffsetColumn: System.Data.DataColumn  # readonly
        CASNumberColumn: System.Data.DataColumn  # readonly
        CCISTDResponseRatioLimitHighColumn: System.Data.DataColumn  # readonly
        CCISTDResponseRatioLimitLowColumn: System.Data.DataColumn  # readonly
        CCResponseRatioLimitHighColumn: System.Data.DataColumn  # readonly
        CCResponseRatioLimitLowColumn: System.Data.DataColumn  # readonly
        CalibrationRangeFilterColumn: System.Data.DataColumn  # readonly
        CalibrationReferenceCompoundIDColumn: System.Data.DataColumn  # readonly
        CapacityFactorLimitColumn: System.Data.DataColumn  # readonly
        CellAcceleratorVoltageColumn: System.Data.DataColumn  # readonly
        CoelutionScoreLimitColumn: System.Data.DataColumn  # readonly
        CollisionEnergyColumn: System.Data.DataColumn  # readonly
        CollisionEnergyDeltaColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        ColumnVoidTimeColumn: System.Data.DataColumn  # readonly
        CompoundApprovedColumn: System.Data.DataColumn  # readonly
        CompoundGroupColumn: System.Data.DataColumn  # readonly
        CompoundIDColumn: System.Data.DataColumn  # readonly
        CompoundMathColumn: System.Data.DataColumn  # readonly
        CompoundNameColumn: System.Data.DataColumn  # readonly
        CompoundTypeColumn: System.Data.DataColumn  # readonly
        ConcentrationUnitsColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        CurveFitColumn: System.Data.DataColumn  # readonly
        CurveFitFormulaColumn: System.Data.DataColumn  # readonly
        CurveFitLimitHighColumn: System.Data.DataColumn  # readonly
        CurveFitLimitLowColumn: System.Data.DataColumn  # readonly
        CurveFitMinimumR2Column: System.Data.DataColumn  # readonly
        CurveFitOriginColumn: System.Data.DataColumn  # readonly
        CurveFitR2Column: System.Data.DataColumn  # readonly
        CurveFitStatusColumn: System.Data.DataColumn  # readonly
        CurveFitWeightColumn: System.Data.DataColumn  # readonly
        DilutionHighestConcentrationColumn: System.Data.DataColumn  # readonly
        DilutionPatternColumn: System.Data.DataColumn  # readonly
        DynamicTargetCompoundIDColumn: System.Data.DataColumn  # readonly
        DynamicTargetRankColumn: System.Data.DataColumn  # readonly
        ExpectedConcentrationColumn: System.Data.DataColumn  # readonly
        FragmentorVoltageColumn: System.Data.DataColumn  # readonly
        FragmentorVoltageDeltaColumn: System.Data.DataColumn  # readonly
        FullWidthHalfMaximumLimitHighColumn: System.Data.DataColumn  # readonly
        FullWidthHalfMaximumLimitLowColumn: System.Data.DataColumn  # readonly
        GraphicPeakChromatogramColumn: System.Data.DataColumn  # readonly
        GraphicPeakQualifiersColumn: System.Data.DataColumn  # readonly
        GraphicPeakSpectrumColumn: System.Data.DataColumn  # readonly
        GraphicTargetCompoundCalibrationColumn: System.Data.DataColumn  # readonly
        IDColumn: System.Data.DataColumn  # readonly
        ISTDCompoundIDColumn: System.Data.DataColumn  # readonly
        ISTDConcentrationColumn: System.Data.DataColumn  # readonly
        ISTDFlagColumn: System.Data.DataColumn  # readonly
        ISTDResponseLimitHighColumn: System.Data.DataColumn  # readonly
        ISTDResponseLimitLowColumn: System.Data.DataColumn  # readonly
        ISTDResponseMaximumPercentDeviationColumn: System.Data.DataColumn  # readonly
        ISTDResponseMinimumPercentDeviationColumn: System.Data.DataColumn  # readonly
        IntegrationParametersColumn: System.Data.DataColumn  # readonly
        IntegrationParametersModifiedColumn: System.Data.DataColumn  # readonly
        IntegratorColumn: System.Data.DataColumn  # readonly
        IonPolarityColumn: System.Data.DataColumn  # readonly
        IonSourceColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ): ...
        KEGGIDColumn: System.Data.DataColumn  # readonly
        LeftRetentionTimeDeltaColumn: System.Data.DataColumn  # readonly
        LibraryMatchScoreColumn: System.Data.DataColumn  # readonly
        LibraryMatchScoreMinimumColumn: System.Data.DataColumn  # readonly
        LibraryRetentionIndexColumn: System.Data.DataColumn  # readonly
        LibraryRetentionTimeColumn: System.Data.DataColumn  # readonly
        LimitOfDetectionColumn: System.Data.DataColumn  # readonly
        LimitOfQuantitationColumn: System.Data.DataColumn  # readonly
        LinearResponseRangeMaxColumn: System.Data.DataColumn  # readonly
        LinearResponseRangeMinColumn: System.Data.DataColumn  # readonly
        MZAdditionalColumn: System.Data.DataColumn  # readonly
        MZColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowFilterLeftColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowFilterRightColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowUnitsColumn: System.Data.DataColumn  # readonly
        MZScanRangeHighColumn: System.Data.DataColumn  # readonly
        MZScanRangeLowColumn: System.Data.DataColumn  # readonly
        MassAccuracyLimitColumn: System.Data.DataColumn  # readonly
        MassMatchScoreMinimumColumn: System.Data.DataColumn  # readonly
        MatrixAConcentrationLimitHighColumn: System.Data.DataColumn  # readonly
        MatrixAConcentrationLimitLowColumn: System.Data.DataColumn  # readonly
        MatrixBConcentrationLimitHighColumn: System.Data.DataColumn  # readonly
        MatrixBConcentrationLimitLowColumn: System.Data.DataColumn  # readonly
        MatrixSpikeBConcentrationColumn: System.Data.DataColumn  # readonly
        MatrixSpikeBMaximumPercentDeviationColumn: System.Data.DataColumn  # readonly
        MatrixSpikeBPercentRecoveryMaximumColumn: System.Data.DataColumn  # readonly
        MatrixSpikeBPercentRecoveryMinimumColumn: System.Data.DataColumn  # readonly
        MatrixSpikeConcentrationColumn: System.Data.DataColumn  # readonly
        MatrixSpikeMaximumPercentDeviationColumn: System.Data.DataColumn  # readonly
        MatrixSpikePercentRecoveryMaximumColumn: System.Data.DataColumn  # readonly
        MatrixSpikePercentRecoveryMinimumColumn: System.Data.DataColumn  # readonly
        MatrixTypeOverrideColumn: System.Data.DataColumn  # readonly
        MaximumAverageResponseFactorRSDColumn: System.Data.DataColumn  # readonly
        MaximumBlankConcentrationColumn: System.Data.DataColumn  # readonly
        MaximumBlankResponseColumn: System.Data.DataColumn  # readonly
        MaximumCCResponseFactorDeviationColumn: System.Data.DataColumn  # readonly
        MaximumNumberOfHitsColumn: System.Data.DataColumn  # readonly
        MaximumPercentResidualColumn: System.Data.DataColumn  # readonly
        MethodDetectionLimitColumn: System.Data.DataColumn  # readonly
        MinimumAverageResponseFactorColumn: System.Data.DataColumn  # readonly
        MinimumCCRelativeResponseFactorColumn: System.Data.DataColumn  # readonly
        MinimumPercentPurityColumn: System.Data.DataColumn  # readonly
        MinimumSignalToNoiseRatioColumn: System.Data.DataColumn  # readonly
        MolecularFormulaColumn: System.Data.DataColumn  # readonly
        MultiplierColumn: System.Data.DataColumn  # readonly
        NeutralLossGainColumn: System.Data.DataColumn  # readonly
        NoiseAlgorithmTypeColumn: System.Data.DataColumn  # readonly
        NoiseOfRawSignalColumn: System.Data.DataColumn  # readonly
        NoiseReferenceColumn: System.Data.DataColumn  # readonly
        NoiseRegionsColumn: System.Data.DataColumn  # readonly
        NoiseStandardDeviationMultiplierColumn: System.Data.DataColumn  # readonly
        NonReferenceWindowOverrideColumn: System.Data.DataColumn  # readonly
        OutlierAlternativePeakColumn: System.Data.DataColumn  # readonly
        OutlierAverageResponseFactorColumn: System.Data.DataColumn  # readonly
        OutlierAverageResponseFactorRSDColumn: System.Data.DataColumn  # readonly
        OutlierBlankResponseOutsideLimitColumn: System.Data.DataColumn  # readonly
        OutlierCCAverageResponseFactorColumn: System.Data.DataColumn  # readonly
        OutlierCCRelativeResponseFactorColumn: System.Data.DataColumn  # readonly
        OutlierCustomCalculationColumn: System.Data.DataColumn  # readonly
        OutlierMethodDetectionLimitColumn: System.Data.DataColumn  # readonly
        OutlierMinimumCurveFitR2Column: System.Data.DataColumn  # readonly
        OutlierPeakNotFoundColumn: System.Data.DataColumn  # readonly
        OutlierRelativeResponseFactorColumn: System.Data.DataColumn  # readonly
        OutlierRelativeStandardErrorColumn: System.Data.DataColumn  # readonly
        OutlierResponseCheckBelowLimitColumn: System.Data.DataColumn  # readonly
        OutlierResponseFactorColumn: System.Data.DataColumn  # readonly
        PeakFilterThresholdColumn: System.Data.DataColumn  # readonly
        PeakFilterThresholdValueColumn: System.Data.DataColumn  # readonly
        PeakSelectionCriterionColumn: System.Data.DataColumn  # readonly
        PlatesCalculationTypeColumn: System.Data.DataColumn  # readonly
        PlatesLimitColumn: System.Data.DataColumn  # readonly
        PrimaryHitPeakIDColumn: System.Data.DataColumn  # readonly
        QCLCSMaximumRecoveryAColumn: System.Data.DataColumn  # readonly
        QCLCSMaximumRecoveryBColumn: System.Data.DataColumn  # readonly
        QCLCSMinimumRecoveryAColumn: System.Data.DataColumn  # readonly
        QCLCSMinimumRecoveryBColumn: System.Data.DataColumn  # readonly
        QCMaximumDeviationColumn: System.Data.DataColumn  # readonly
        QCMaximumPercentRSDColumn: System.Data.DataColumn  # readonly
        QValueMinimumColumn: System.Data.DataColumn  # readonly
        QualifierRatioMethodColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitateByHeightColumn: System.Data.DataColumn  # readonly
        QuantitationMessageColumn: System.Data.DataColumn  # readonly
        ReferenceMSPathNameColumn: System.Data.DataColumn  # readonly
        ReferenceWindowOverrideColumn: System.Data.DataColumn  # readonly
        RelativeISTDMultiplierColumn: System.Data.DataColumn  # readonly
        RelativeResponseFactorMaximumPercentDeviationColumn: (
            System.Data.DataColumn
        )  # readonly
        RelativeRetentionTimeMaximumPercentDeviationColumn: (
            System.Data.DataColumn
        )  # readonly
        RelativeStandardErrorColumn: System.Data.DataColumn  # readonly
        RelativeStandardErrorMaximumColumn: System.Data.DataColumn  # readonly
        ResolutionCalculationTypeColumn: System.Data.DataColumn  # readonly
        ResolutionLimitColumn: System.Data.DataColumn  # readonly
        ResponseCheckMinimumColumn: System.Data.DataColumn  # readonly
        ResponseFactorMaximumPercentDeviationColumn: System.Data.DataColumn  # readonly
        RetentionIndexColumn: System.Data.DataColumn  # readonly
        RetentionTimeColumn: System.Data.DataColumn  # readonly
        RetentionTimeDeltaUnitsColumn: System.Data.DataColumn  # readonly
        RetentionTimeWindowCCColumn: System.Data.DataColumn  # readonly
        RetentionTimeWindowColumn: System.Data.DataColumn  # readonly
        RetentionTimeWindowUnitsColumn: System.Data.DataColumn  # readonly
        RightRetentionTimeDeltaColumn: System.Data.DataColumn  # readonly
        RxUnlabeledIsotopicDilutionColumn: System.Data.DataColumn  # readonly
        RyLabeledIsotopicDilutionColumn: System.Data.DataColumn  # readonly
        SampleAmountLimitHighColumn: System.Data.DataColumn  # readonly
        SampleAmountLimitLowColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        SampleMaximumPercentRSDColumn: System.Data.DataColumn  # readonly
        ScanTypeColumn: System.Data.DataColumn  # readonly
        SelectedMZColumn: System.Data.DataColumn  # readonly
        SignalInstanceColumn: System.Data.DataColumn  # readonly
        SignalNameColumn: System.Data.DataColumn  # readonly
        SignalRetentionTimeOffsetColumn: System.Data.DataColumn  # readonly
        SignalToNoiseMultiplierColumn: System.Data.DataColumn  # readonly
        SignalTypeColumn: System.Data.DataColumn  # readonly
        SmoothingColumn: System.Data.DataColumn  # readonly
        SmoothingFunctionWidthColumn: System.Data.DataColumn  # readonly
        SmoothingGaussianWidthColumn: System.Data.DataColumn  # readonly
        SpeciesColumn: System.Data.DataColumn  # readonly
        SpectrumBaselineThresholdColumn: System.Data.DataColumn  # readonly
        SpectrumExtractionOverrideColumn: System.Data.DataColumn  # readonly
        SpectrumPeakHeightPercentThresholdColumn: System.Data.DataColumn  # readonly
        SpectrumPercentSaturationThresholdColumn: System.Data.DataColumn  # readonly
        SpectrumQuantifierQualifierOnlyColumn: System.Data.DataColumn  # readonly
        SpectrumScanInclusionColumn: System.Data.DataColumn  # readonly
        SublistColumn: System.Data.DataColumn  # readonly
        SurrogateConcentrationColumn: System.Data.DataColumn  # readonly
        SurrogateConcentrationLimitHighColumn: System.Data.DataColumn  # readonly
        SurrogateConcentrationLimitLowColumn: System.Data.DataColumn  # readonly
        SurrogatePercentRecoveryMaximumColumn: System.Data.DataColumn  # readonly
        SurrogatePercentRecoveryMinimumColumn: System.Data.DataColumn  # readonly
        SymmetryCalculationTypeColumn: System.Data.DataColumn  # readonly
        SymmetryLimitHighColumn: System.Data.DataColumn  # readonly
        SymmetryLimitLowColumn: System.Data.DataColumn  # readonly
        TargetCompoundIDStatusColumn: System.Data.DataColumn  # readonly
        ThresholdNumberOfPeaksColumn: System.Data.DataColumn  # readonly
        TimeReferenceFlagColumn: System.Data.DataColumn  # readonly
        TimeSegmentColumn: System.Data.DataColumn  # readonly
        TransitionColumn: System.Data.DataColumn  # readonly
        TriggeredTransitionsColumn: System.Data.DataColumn  # readonly
        UncertaintyRelativeOrAbsoluteColumn: System.Data.DataColumn  # readonly
        UserAnnotationColumn: System.Data.DataColumn  # readonly
        UserCustomCalculationColumn: System.Data.DataColumn  # readonly
        UserCustomCalculationLimitHighColumn: System.Data.DataColumn  # readonly
        UserCustomCalculationLimitLowColumn: System.Data.DataColumn  # readonly
        UserDefined1Column: System.Data.DataColumn  # readonly
        UserDefined2Column: System.Data.DataColumn  # readonly
        UserDefined3Column: System.Data.DataColumn  # readonly
        UserDefined4Column: System.Data.DataColumn  # readonly
        UserDefined5Column: System.Data.DataColumn  # readonly
        UserDefined6Column: System.Data.DataColumn  # readonly
        UserDefined7Column: System.Data.DataColumn  # readonly
        UserDefined8Column: System.Data.DataColumn  # readonly
        UserDefined9Column: System.Data.DataColumn  # readonly
        UserDefinedColumn: System.Data.DataColumn  # readonly
        UserDefinedTargetCompoundIDColumn: System.Data.DataColumn  # readonly
        WavelengthExtractionRangeHighColumn: System.Data.DataColumn  # readonly
        WavelengthExtractionRangeLowColumn: System.Data.DataColumn  # readonly
        WavelengthReferenceRangeHighColumn: System.Data.DataColumn  # readonly
        WavelengthReferenceRangeLowColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddTargetCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        ) -> None: ...
        @overload
        def AddTargetCompoundRow(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            AccuracyLimitMultiplierLOQ: float,
            AccuracyMaximumPercentDeviation: float,
            AgilentID: str,
            AlternativePeakCriteria: str,
            AlternativePeakID: int,
            AreaCorrectionFactor: float,
            AreaCorrectionSelectedMZ: float,
            AreaCorrectionMZ: float,
            AverageRelativeRetentionTime: float,
            AverageResponseFactor: float,
            AverageResponseFactorRSD: float,
            BlankResponseOffset: float,
            CalibrationRangeFilter: str,
            CalibrationReferenceCompoundID: int,
            CapacityFactorLimit: float,
            CASNumber: str,
            CCISTDResponseRatioLimitHigh: float,
            CCISTDResponseRatioLimitLow: float,
            CCResponseRatioLimitHigh: float,
            CCResponseRatioLimitLow: float,
            CellAcceleratorVoltage: float,
            CoelutionScoreLimit: float,
            CollisionEnergy: float,
            CollisionEnergyDelta: float,
            ColumnVoidTime: float,
            CompoundApproved: bool,
            CompoundGroup: str,
            CompoundMath: str,
            CompoundName: str,
            CompoundType: str,
            ConcentrationUnits: str,
            CurveFit: str,
            CurveFitFormula: str,
            CurveFitLimitHigh: float,
            CurveFitLimitLow: float,
            CurveFitMinimumR2: float,
            CurveFitOrigin: str,
            CurveFitR2: float,
            CurveFitStatus: str,
            CurveFitWeight: str,
            DilutionHighestConcentration: float,
            DilutionPattern: str,
            DynamicTargetCompoundID: int,
            DynamicTargetRank: int,
            ExpectedConcentration: float,
            FragmentorVoltage: float,
            FragmentorVoltageDelta: float,
            FullWidthHalfMaximumLimitHigh: float,
            FullWidthHalfMaximumLimitLow: float,
            GraphicPeakChromatogram: str,
            GraphicPeakQualifiers: str,
            GraphicPeakSpectrum: str,
            GraphicTargetCompoundCalibration: str,
            ID: int,
            IntegrationParameters: str,
            IntegrationParametersModified: bool,
            Integrator: str,
            IonPolarity: str,
            IonSource: str,
            ISTDCompoundID: int,
            ISTDConcentration: float,
            ISTDFlag: bool,
            ISTDResponseLimitHigh: float,
            ISTDResponseLimitLow: float,
            ISTDResponseMaximumPercentDeviation: float,
            ISTDResponseMinimumPercentDeviation: float,
            KEGGID: str,
            LeftRetentionTimeDelta: float,
            LibraryMatchScore: float,
            LibraryMatchScoreMinimum: float,
            LibraryRetentionIndex: float,
            LibraryRetentionTime: float,
            LimitOfDetection: float,
            LimitOfQuantitation: float,
            LinearResponseRangeMax: float,
            LinearResponseRangeMin: float,
            MassAccuracyLimit: float,
            MassMatchScoreMinimum: float,
            MatrixAConcentrationLimitHigh: float,
            MatrixAConcentrationLimitLow: float,
            MatrixBConcentrationLimitHigh: float,
            MatrixBConcentrationLimitLow: float,
            MatrixSpikeBConcentration: float,
            MatrixSpikeBPercentRecoveryMaximum: float,
            MatrixSpikeBPercentRecoveryMinimum: float,
            MatrixSpikeConcentration: float,
            MatrixSpikeMaximumPercentDeviation: float,
            MatrixSpikeBMaximumPercentDeviation: float,
            MatrixSpikePercentRecoveryMaximum: float,
            MatrixSpikePercentRecoveryMinimum: float,
            MatrixTypeOverride: str,
            MaximumAverageResponseFactorRSD: float,
            MaximumBlankConcentration: float,
            MaximumBlankResponse: float,
            MaximumCCResponseFactorDeviation: float,
            MaximumNumberOfHits: int,
            MaximumPercentResidual: float,
            MethodDetectionLimit: float,
            MinimumAverageResponseFactor: float,
            MinimumCCRelativeResponseFactor: float,
            MinimumPercentPurity: float,
            MinimumSignalToNoiseRatio: float,
            MolecularFormula: str,
            Multiplier: float,
            MZ: float,
            MZAdditional: str,
            MZExtractionWindowFilterLeft: float,
            MZExtractionWindowFilterRight: float,
            MZExtractionWindowUnits: str,
            MZScanRangeHigh: float,
            MZScanRangeLow: float,
            NeutralLossGain: float,
            NoiseAlgorithmType: str,
            NoiseOfRawSignal: float,
            NoiseReference: str,
            NoiseRegions: str,
            NoiseStandardDeviationMultiplier: float,
            NonReferenceWindowOverride: float,
            OutlierAlternativePeak: str,
            OutlierAverageResponseFactor: str,
            OutlierAverageResponseFactorRSD: str,
            OutlierBlankResponseOutsideLimit: str,
            OutlierCCAverageResponseFactor: str,
            OutlierCCRelativeResponseFactor: str,
            OutlierCustomCalculation: str,
            OutlierMethodDetectionLimit: str,
            OutlierMinimumCurveFitR2: str,
            OutlierPeakNotFound: str,
            OutlierRelativeResponseFactor: str,
            OutlierRelativeStandardError: str,
            OutlierResponseCheckBelowLimit: str,
            OutlierResponseFactor: str,
            PeakFilterThreshold: str,
            PeakFilterThresholdValue: float,
            PeakSelectionCriterion: str,
            PlatesCalculationType: str,
            PlatesLimit: int,
            PrimaryHitPeakID: int,
            QCLCSMaximumRecoveryA: float,
            QCLCSMaximumRecoveryB: float,
            QCLCSMinimumRecoveryA: float,
            QCLCSMinimumRecoveryB: float,
            QCMaximumDeviation: float,
            QCMaximumPercentRSD: float,
            QualifierRatioMethod: int,
            QuantitateByHeight: bool,
            QuantitationMessage: str,
            QValueMinimum: int,
            ReferenceMSPathName: str,
            ReferenceWindowOverride: float,
            RelativeISTDMultiplier: float,
            RelativeResponseFactorMaximumPercentDeviation: float,
            RelativeRetentionTimeMaximumPercentDeviation: float,
            RelativeStandardError: float,
            RelativeStandardErrorMaximum: float,
            ResolutionCalculationType: str,
            ResolutionLimit: float,
            ResponseCheckMinimum: float,
            ResponseFactorMaximumPercentDeviation: float,
            RetentionIndex: float,
            RetentionTime: float,
            RetentionTimeDeltaUnits: str,
            RetentionTimeWindow: float,
            RetentionTimeWindowCC: float,
            RetentionTimeWindowUnits: str,
            RightRetentionTimeDelta: float,
            RxUnlabeledIsotopicDilution: float,
            RyLabeledIsotopicDilution: float,
            SampleAmountLimitHigh: float,
            SampleAmountLimitLow: float,
            SampleMaximumPercentRSD: float,
            ScanType: str,
            SelectedMZ: float,
            SignalInstance: int,
            SignalName: str,
            SignalRetentionTimeOffset: float,
            SignalToNoiseMultiplier: float,
            SignalType: str,
            Smoothing: str,
            SmoothingFunctionWidth: int,
            SmoothingGaussianWidth: float,
            Species: str,
            SpectrumBaselineThreshold: float,
            SpectrumExtractionOverride: str,
            SpectrumScanInclusion: str,
            SpectrumPeakHeightPercentThreshold: float,
            SpectrumPercentSaturationThreshold: float,
            SpectrumQuantifierQualifierOnly: bool,
            Sublist: bool,
            SurrogateConcentration: float,
            SurrogateConcentrationLimitHigh: float,
            SurrogateConcentrationLimitLow: float,
            SurrogatePercentRecoveryMaximum: float,
            SurrogatePercentRecoveryMinimum: float,
            SymmetryCalculationType: str,
            SymmetryLimitHigh: float,
            SymmetryLimitLow: float,
            TargetCompoundIDStatus: str,
            ThresholdNumberOfPeaks: int,
            TimeReferenceFlag: bool,
            TimeSegment: int,
            Transition: str,
            TriggeredTransitions: str,
            UncertaintyRelativeOrAbsolute: str,
            UserAnnotation: str,
            UserCustomCalculation: float,
            UserCustomCalculationLimitHigh: float,
            UserCustomCalculationLimitLow: float,
            UserDefined: str,
            UserDefined1: str,
            UserDefined2: str,
            UserDefined3: str,
            UserDefined4: str,
            UserDefined5: str,
            UserDefined6: str,
            UserDefined7: str,
            UserDefined8: str,
            UserDefined9: str,
            UserDefinedTargetCompoundID: int,
            WavelengthExtractionRangeHigh: float,
            WavelengthExtractionRangeLow: float,
            WavelengthReferenceRangeHigh: float,
            WavelengthReferenceRangeLow: float,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ): ...
        def FindByBatchIDSampleIDCompoundID(
            self, BatchID: int, SampleID: int, CompoundID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ): ...
        def NewTargetCompoundRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        def RemoveTargetCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        ) -> None: ...

        AccuracyLimitMultiplierLOQChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AccuracyLimitMultiplierLOQChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AccuracyMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AccuracyMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AgilentIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        AgilentIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        AlternativePeakCriteriaChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AlternativePeakCriteriaChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AlternativePeakIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        AlternativePeakIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionMZChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionMZChanging: System.Data.DataColumnChangeEventHandler  # Event
        AreaCorrectionSelectedMZChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AreaCorrectionSelectedMZChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AverageRelativeRetentionTimeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AverageRelativeRetentionTimeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AverageResponseFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        AverageResponseFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        AverageResponseFactorRSDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        AverageResponseFactorRSDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        BlankResponseOffsetChanged: System.Data.DataColumnChangeEventHandler  # Event
        BlankResponseOffsetChanging: System.Data.DataColumnChangeEventHandler  # Event
        CASNumberChanged: System.Data.DataColumnChangeEventHandler  # Event
        CASNumberChanging: System.Data.DataColumnChangeEventHandler  # Event
        CCISTDResponseRatioLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCISTDResponseRatioLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCISTDResponseRatioLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCISTDResponseRatioLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCResponseRatioLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCResponseRatioLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCResponseRatioLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CCResponseRatioLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CalibrationRangeFilterChanged: System.Data.DataColumnChangeEventHandler  # Event
        CalibrationRangeFilterChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CapacityFactorLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        CapacityFactorLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        CellAcceleratorVoltageChanged: System.Data.DataColumnChangeEventHandler  # Event
        CellAcceleratorVoltageChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CoelutionScoreLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        CoelutionScoreLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyChanged: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyChanging: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyDeltaChanged: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyDeltaChanging: System.Data.DataColumnChangeEventHandler  # Event
        ColumnVoidTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        ColumnVoidTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundApprovedChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundApprovedChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundGroupChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundGroupChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundMathChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundMathChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        ConcentrationUnitsChanged: System.Data.DataColumnChangeEventHandler  # Event
        ConcentrationUnitsChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitFormulaChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitFormulaChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitLimitHighChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitLimitHighChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitLimitLowChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitLimitLowChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitMinimumR2Changed: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitMinimumR2Changing: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitOriginChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitOriginChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitR2Changed: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitR2Changing: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitStatusChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitStatusChanging: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitWeightChanged: System.Data.DataColumnChangeEventHandler  # Event
        CurveFitWeightChanging: System.Data.DataColumnChangeEventHandler  # Event
        DilutionHighestConcentrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DilutionHighestConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        DilutionPatternChanged: System.Data.DataColumnChangeEventHandler  # Event
        DilutionPatternChanging: System.Data.DataColumnChangeEventHandler  # Event
        ExpectedConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        ExpectedConcentrationChanging: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageChanged: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageChanging: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageDeltaChanged: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageDeltaChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        FullWidthHalfMaximumLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        FullWidthHalfMaximumLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        FullWidthHalfMaximumLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        FullWidthHalfMaximumLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicPeakChromatogramChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicPeakChromatogramChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicPeakQualifiersChanged: System.Data.DataColumnChangeEventHandler  # Event
        GraphicPeakQualifiersChanging: System.Data.DataColumnChangeEventHandler  # Event
        GraphicPeakSpectrumChanged: System.Data.DataColumnChangeEventHandler  # Event
        GraphicPeakSpectrumChanging: System.Data.DataColumnChangeEventHandler  # Event
        GraphicTargetCompoundCalibrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicTargetCompoundCalibrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IDChanged: System.Data.DataColumnChangeEventHandler  # Event
        IDChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDCompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDCompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDConcentrationChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDFlagChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDFlagChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseLimitHighChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseLimitHighChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseLimitLowChanged: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseLimitLowChanging: System.Data.DataColumnChangeEventHandler  # Event
        ISTDResponseMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponseMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponseMinimumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ISTDResponseMinimumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationParametersChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationParametersChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationParametersModifiedChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationParametersModifiedChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegratorChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegratorChanging: System.Data.DataColumnChangeEventHandler  # Event
        IonPolarityChanged: System.Data.DataColumnChangeEventHandler  # Event
        IonPolarityChanging: System.Data.DataColumnChangeEventHandler  # Event
        IonSourceChanged: System.Data.DataColumnChangeEventHandler  # Event
        IonSourceChanging: System.Data.DataColumnChangeEventHandler  # Event
        KEGGIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        KEGGIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        LeftRetentionTimeDeltaChanged: System.Data.DataColumnChangeEventHandler  # Event
        LeftRetentionTimeDeltaChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        LibraryMatchScoreChanged: System.Data.DataColumnChangeEventHandler  # Event
        LibraryMatchScoreChanging: System.Data.DataColumnChangeEventHandler  # Event
        LibraryMatchScoreMinimumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        LibraryMatchScoreMinimumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        LibraryRetentionIndexChanged: System.Data.DataColumnChangeEventHandler  # Event
        LibraryRetentionIndexChanging: System.Data.DataColumnChangeEventHandler  # Event
        LibraryRetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        LibraryRetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        LimitOfDetectionChanged: System.Data.DataColumnChangeEventHandler  # Event
        LimitOfDetectionChanging: System.Data.DataColumnChangeEventHandler  # Event
        LimitOfQuantitationChanged: System.Data.DataColumnChangeEventHandler  # Event
        LimitOfQuantitationChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZAdditionalChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZAdditionalChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZExtractionWindowFilterLeftChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterLeftChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterRightChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterRightChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowUnitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowUnitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZScanRangeHighChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZScanRangeHighChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZScanRangeLowChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZScanRangeLowChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassAccuracyLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        MassMatchScoreMinimumChanged: System.Data.DataColumnChangeEventHandler  # Event
        MassMatchScoreMinimumChanging: System.Data.DataColumnChangeEventHandler  # Event
        MatrixAConcentrationLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixAConcentrationLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixAConcentrationLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixAConcentrationLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixBConcentrationLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixBConcentrationLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixBConcentrationLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixBConcentrationLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBConcentrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBPercentRecoveryMaximumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBPercentRecoveryMaximumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBPercentRecoveryMinimumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeBPercentRecoveryMinimumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeConcentrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikeMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryMaximumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryMaximumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryMinimumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixSpikePercentRecoveryMinimumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MatrixTypeOverrideChanged: System.Data.DataColumnChangeEventHandler  # Event
        MatrixTypeOverrideChanging: System.Data.DataColumnChangeEventHandler  # Event
        MaximumAverageResponseFactorRSDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumAverageResponseFactorRSDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumBlankConcentrationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumBlankConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumBlankResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        MaximumBlankResponseChanging: System.Data.DataColumnChangeEventHandler  # Event
        MaximumCCResponseFactorDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumCCResponseFactorDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MaximumNumberOfHitsChanged: System.Data.DataColumnChangeEventHandler  # Event
        MaximumNumberOfHitsChanging: System.Data.DataColumnChangeEventHandler  # Event
        MaximumPercentResidualChanged: System.Data.DataColumnChangeEventHandler  # Event
        MaximumPercentResidualChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MethodDetectionLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        MethodDetectionLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        MinimumAverageResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MinimumAverageResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MinimumCCRelativeResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MinimumCCRelativeResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MinimumPercentPurityChanged: System.Data.DataColumnChangeEventHandler  # Event
        MinimumPercentPurityChanging: System.Data.DataColumnChangeEventHandler  # Event
        MinimumSignalToNoiseRatioChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MinimumSignalToNoiseRatioChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MolecularFormulaChanged: System.Data.DataColumnChangeEventHandler  # Event
        MolecularFormulaChanging: System.Data.DataColumnChangeEventHandler  # Event
        MultiplierChanged: System.Data.DataColumnChangeEventHandler  # Event
        MultiplierChanging: System.Data.DataColumnChangeEventHandler  # Event
        NeutralLossGainChanged: System.Data.DataColumnChangeEventHandler  # Event
        NeutralLossGainChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseAlgorithmTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseAlgorithmTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseOfRawSignalChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseOfRawSignalChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseReferenceChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseReferenceChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanged: System.Data.DataColumnChangeEventHandler  # Event
        NoiseRegionsChanging: System.Data.DataColumnChangeEventHandler  # Event
        NoiseStandardDeviationMultiplierChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        NoiseStandardDeviationMultiplierChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierAlternativePeakChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierAlternativePeakChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierAverageResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierAverageResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierAverageResponseFactorRSDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierAverageResponseFactorRSDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBlankResponseOutsideLimitChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierBlankResponseOutsideLimitChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCAverageResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCAverageResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCRelativeResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCCRelativeResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCustomCalculationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierCustomCalculationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMethodDetectionLimitChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMethodDetectionLimitChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMinimumCurveFitR2Changed: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierMinimumCurveFitR2Changing: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierPeakNotFoundChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierPeakNotFoundChanging: System.Data.DataColumnChangeEventHandler  # Event
        OutlierRelativeResponseFactorChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierRelativeResponseFactorChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierResponseCheckBelowLimitChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierResponseCheckBelowLimitChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierResponseFactorChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierResponseFactorChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdChanged: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdValueChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        PeakFilterThresholdValueChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        PeakSelectionCriterionChanged: System.Data.DataColumnChangeEventHandler  # Event
        PeakSelectionCriterionChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        PlatesCalculationTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        PlatesCalculationTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        PlatesLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        PlatesLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        PrimaryHitPeakIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        PrimaryHitPeakIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMaximumRecoveryAChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMaximumRecoveryAChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMaximumRecoveryBChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMaximumRecoveryBChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMinimumRecoveryAChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMinimumRecoveryAChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMinimumRecoveryBChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCLCSMinimumRecoveryBChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCMaximumDeviationChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCMaximumDeviationChanging: System.Data.DataColumnChangeEventHandler  # Event
        QCMaximumPercentRSDChanged: System.Data.DataColumnChangeEventHandler  # Event
        QCMaximumPercentRSDChanging: System.Data.DataColumnChangeEventHandler  # Event
        QValueMaximumChanged: System.Data.DataColumnChangeEventHandler  # Event
        QValueMaximumChanging: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRatioMethodChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRatioMethodChanging: System.Data.DataColumnChangeEventHandler  # Event
        QuantitateByHeightChanged: System.Data.DataColumnChangeEventHandler  # Event
        QuantitateByHeightChanging: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanged: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanging: System.Data.DataColumnChangeEventHandler  # Event
        ReferenceMSPathNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        ReferenceMSPathNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        RelativeISTDMultiplierChanged: System.Data.DataColumnChangeEventHandler  # Event
        RelativeISTDMultiplierChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RelativeResponseFactorMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RelativeResponseFactorMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RelativeRetentionTimeMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RelativeRetentionTimeMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ResolutionCalculationTypeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ResolutionCalculationTypeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ResolutionLimitChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResolutionLimitChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResponseCheckMinimumChanged: System.Data.DataColumnChangeEventHandler  # Event
        ResponseCheckMinimumChanging: System.Data.DataColumnChangeEventHandler  # Event
        ResponseFactorMaximumPercentDeviationChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ResponseFactorMaximumPercentDeviationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionIndexChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionIndexChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeDeltaUnitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeDeltaUnitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeWindowCCChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeWindowCCChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeWindowChanged: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeWindowChanging: System.Data.DataColumnChangeEventHandler  # Event
        RetentionTimeWindowUnitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RetentionTimeWindowUnitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RightRetentionTimeDeltaChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RightRetentionTimeDeltaChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RxUnlabeledIsotopicDilutionChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RxUnlabeledIsotopicDilutionChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RyLabeledIsotopicDilutionChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        RyLabeledIsotopicDilutionChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SampleAmountLimitHighChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleAmountLimitHighChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleAmountLimitLowChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleAmountLimitLowChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleMaximumPercentRSDChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SampleMaximumPercentRSDChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        ScanTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        ScanTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        SelectedMZChanged: System.Data.DataColumnChangeEventHandler  # Event
        SelectedMZChanging: System.Data.DataColumnChangeEventHandler  # Event
        SignalInstanceChanged: System.Data.DataColumnChangeEventHandler  # Event
        SignalInstanceChanging: System.Data.DataColumnChangeEventHandler  # Event
        SignalNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        SignalNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        SignalRetentionTimeOffsetChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SignalRetentionTimeOffsetChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SignalTypeChanged: System.Data.DataColumnChangeEventHandler  # Event
        SignalTypeChanging: System.Data.DataColumnChangeEventHandler  # Event
        SmoothingChanged: System.Data.DataColumnChangeEventHandler  # Event
        SmoothingChanging: System.Data.DataColumnChangeEventHandler  # Event
        SmoothingFunctionWidthChanged: System.Data.DataColumnChangeEventHandler  # Event
        SmoothingFunctionWidthChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SmoothingGaussianWidthChanged: System.Data.DataColumnChangeEventHandler  # Event
        SmoothingGaussianWidthChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumBaselineThresholdChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumBaselineThresholdChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumExtractionOverrideChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumExtractionOverrideChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumPeakHeightPercentThresholdChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumPeakHeightPercentThresholdChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumPercentSaturationThresholdChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumPercentSaturationThresholdChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SpectrumScanInclusionChanged: System.Data.DataColumnChangeEventHandler  # Event
        SpectrumScanInclusionChanging: System.Data.DataColumnChangeEventHandler  # Event
        SublistChanged: System.Data.DataColumnChangeEventHandler  # Event
        SublistChanging: System.Data.DataColumnChangeEventHandler  # Event
        SurrogateConcentrationChanged: System.Data.DataColumnChangeEventHandler  # Event
        SurrogateConcentrationChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogateConcentrationLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogateConcentrationLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogateConcentrationLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogateConcentrationLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogatePercentRecoveryMaximumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogatePercentRecoveryMaximumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogatePercentRecoveryMinimumChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SurrogatePercentRecoveryMinimumChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SymmetryCalculationTypeChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SymmetryCalculationTypeChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        SymmetryLimitHighChanged: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryLimitHighChanging: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryLimitLowChanged: System.Data.DataColumnChangeEventHandler  # Event
        SymmetryLimitLowChanging: System.Data.DataColumnChangeEventHandler  # Event
        TargetCompoundIDStatusChanged: System.Data.DataColumnChangeEventHandler  # Event
        TargetCompoundIDStatusChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        TargetCompoundRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEventHandler
        )  # Event
        TargetCompoundRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEventHandler
        )  # Event
        TargetCompoundRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEventHandler
        )  # Event
        TargetCompoundRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEventHandler
        )  # Event
        ThresholdNumberOfPeaksChanged: System.Data.DataColumnChangeEventHandler  # Event
        ThresholdNumberOfPeaksChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        TimeReferenceFlagChanged: System.Data.DataColumnChangeEventHandler  # Event
        TimeReferenceFlagChanging: System.Data.DataColumnChangeEventHandler  # Event
        TimeSegmentChanged: System.Data.DataColumnChangeEventHandler  # Event
        TimeSegmentChanging: System.Data.DataColumnChangeEventHandler  # Event
        TransitionChanged: System.Data.DataColumnChangeEventHandler  # Event
        TransitionChanging: System.Data.DataColumnChangeEventHandler  # Event
        TriggeredTransitionsChanged: System.Data.DataColumnChangeEventHandler  # Event
        TriggeredTransitionsChanging: System.Data.DataColumnChangeEventHandler  # Event
        UncertaintyRelativeOrAbsoluteChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UncertaintyRelativeOrAbsoluteChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserAnnotationChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserAnnotationChanging: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationChanging: System.Data.DataColumnChangeEventHandler  # Event
        UserCustomCalculationLimitHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculationLimitHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculationLimitLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserCustomCalculationLimitLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        UserDefined1Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined1Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined2Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined2Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined3Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined3Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined4Changed: System.Data.DataColumnChangeEventHandler  # Event
        UserDefined4Changing: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanging: System.Data.DataColumnChangeEventHandler  # Event
        WavelengthExtractionRangeHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthExtractionRangeHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthExtractionRangeLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthExtractionRangeLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthReferenceRangeHighChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthReferenceRangeHighChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthReferenceRangeLowChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        WavelengthReferenceRangeLowChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event

    class TargetCompoundRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        System.Data.DataRow,
    ):  # Class
        AccuracyLimitMultiplierLOQ: float
        AccuracyMaximumPercentDeviation: float
        AgilentID: str
        AlternativePeakCriteria: str
        AlternativePeakID: int
        AreaCorrectionFactor: float
        AreaCorrectionMZ: float
        AreaCorrectionSelectedMZ: float
        AverageRelativeRetentionTime: float
        AverageResponseFactor: float
        AverageResponseFactorRSD: float
        BatchID: int
        BatchRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
        )
        BlankResponseOffset: float
        CASNumber: str
        CCISTDResponseRatioLimitHigh: float
        CCISTDResponseRatioLimitLow: float
        CCResponseRatioLimitHigh: float
        CCResponseRatioLimitLow: float
        CalibrationRangeFilter: str
        CalibrationReferenceCompoundID: int
        CapacityFactorLimit: float
        CellAcceleratorVoltage: float
        CoelutionScoreLimit: float
        CollisionEnergy: float
        CollisionEnergyDelta: float
        ColumnVoidTime: float
        CompoundApproved: bool
        CompoundGroup: str
        CompoundID: int
        CompoundMath: str
        CompoundName: str
        CompoundType: str
        ConcentrationUnits: str
        CurveFit: str
        CurveFitFormula: str
        CurveFitLimitHigh: float
        CurveFitLimitLow: float
        CurveFitMinimumR2: float
        CurveFitOrigin: str
        CurveFitR2: float
        CurveFitStatus: str
        CurveFitWeight: str
        DilutionHighestConcentration: float
        DilutionPattern: str
        DynamicTargetCompoundID: int
        DynamicTargetRank: int
        ExpectedConcentration: float
        FragmentorVoltage: float
        FragmentorVoltageDelta: float
        FullWidthHalfMaximumLimitHigh: float
        FullWidthHalfMaximumLimitLow: float
        GraphicPeakChromatogram: str
        GraphicPeakQualifiers: str
        GraphicPeakSpectrum: str
        GraphicTargetCompoundCalibration: str
        ID: int
        ISTDCompoundID: int
        ISTDConcentration: float
        ISTDFlag: bool
        ISTDResponseLimitHigh: float
        ISTDResponseLimitLow: float
        ISTDResponseMaximumPercentDeviation: float
        ISTDResponseMinimumPercentDeviation: float
        IntegrationParameters: str
        IntegrationParametersModified: bool
        Integrator: str
        IonPolarity: str
        IonSource: str
        KEGGID: str
        LeftRetentionTimeDelta: float
        LibraryMatchScore: float
        LibraryMatchScoreMinimum: float
        LibraryRetentionIndex: float
        LibraryRetentionTime: float
        LimitOfDetection: float
        LimitOfQuantitation: float
        LinearResponseRangeMax: float
        LinearResponseRangeMin: float
        MZ: float
        MZAdditional: str
        MZExtractionWindowFilterLeft: float
        MZExtractionWindowFilterRight: float
        MZExtractionWindowUnits: str
        MZScanRangeHigh: float
        MZScanRangeLow: float
        MassAccuracyLimit: float
        MassMatchScoreMinimum: float
        MatrixAConcentrationLimitHigh: float
        MatrixAConcentrationLimitLow: float
        MatrixBConcentrationLimitHigh: float
        MatrixBConcentrationLimitLow: float
        MatrixSpikeBConcentration: float
        MatrixSpikeBMaximumPercentDeviation: float
        MatrixSpikeBPercentRecoveryMaximum: float
        MatrixSpikeBPercentRecoveryMinimum: float
        MatrixSpikeConcentration: float
        MatrixSpikeMaximumPercentDeviation: float
        MatrixSpikePercentRecoveryMaximum: float
        MatrixSpikePercentRecoveryMinimum: float
        MatrixTypeOverride: str
        MaximumAverageResponseFactorRSD: float
        MaximumBlankConcentration: float
        MaximumBlankResponse: float
        MaximumCCResponseFactorDeviation: float
        MaximumNumberOfHits: int
        MaximumPercentResidual: float
        MethodDetectionLimit: float
        MinimumAverageResponseFactor: float
        MinimumCCRelativeResponseFactor: float
        MinimumPercentPurity: float
        MinimumSignalToNoiseRatio: float
        MolecularFormula: str
        Multiplier: float
        NeutralLossGain: float
        NoiseAlgorithmType: str
        NoiseOfRawSignal: float
        NoiseReference: str
        NoiseRegions: str
        NoiseStandardDeviationMultiplier: float
        NonReferenceWindowOverride: float
        OutlierAlternativePeak: str
        OutlierAverageResponseFactor: str
        OutlierAverageResponseFactorRSD: str
        OutlierBlankResponseOutsideLimit: str
        OutlierCCAverageResponseFactor: str
        OutlierCCRelativeResponseFactor: str
        OutlierCustomCalculation: str
        OutlierMethodDetectionLimit: str
        OutlierMinimumCurveFitR2: str
        OutlierPeakNotFound: str
        OutlierRelativeResponseFactor: str
        OutlierRelativeStandardError: str
        OutlierResponseCheckBelowLimit: str
        OutlierResponseFactor: str
        PeakFilterThreshold: str
        PeakFilterThresholdValue: float
        PeakSelectionCriterion: str
        PlatesCalculationType: str
        PlatesLimit: int
        PrimaryHitPeakID: int
        PrimaryHitPeakIDLockObj: Any  # readonly
        QCLCSMaximumRecoveryA: float
        QCLCSMaximumRecoveryB: float
        QCLCSMinimumRecoveryA: float
        QCLCSMinimumRecoveryB: float
        QCMaximumDeviation: float
        QCMaximumPercentRSD: float
        QValueMinimum: int
        QualifierRatioMethod: int
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitateByHeight: bool
        QuantitationMessage: str
        ReferenceMSPathName: str
        ReferenceWindowOverride: float
        RelativeISTDMultiplier: float
        RelativeResponseFactorMaximumPercentDeviation: float
        RelativeRetentionTimeMaximumPercentDeviation: float
        RelativeStandardError: float
        RelativeStandardErrorMaximum: float
        ResolutionCalculationType: str
        ResolutionLimit: float
        ResponseCheckMinimum: float
        ResponseFactorMaximumPercentDeviation: float
        RetentionIndex: float
        RetentionTime: float
        RetentionTimeDeltaUnits: str
        RetentionTimeWindow: float
        RetentionTimeWindowCC: float
        RetentionTimeWindowUnits: str
        RightRetentionTimeDelta: float
        RxUnlabeledIsotopicDilution: float
        RyLabeledIsotopicDilution: float
        SampleAmountLimitHigh: float
        SampleAmountLimitLow: float
        SampleID: int
        SampleMaximumPercentRSD: float
        ScanType: str
        SelectedMZ: float
        SignalInstance: int
        SignalName: str
        SignalRetentionTimeOffset: float
        SignalToNoiseMultiplier: float
        SignalType: str
        Smoothing: str
        SmoothingFunctionWidth: int
        SmoothingGaussianWidth: float
        Species: str
        SpectrumBaselineThreshold: float
        SpectrumExtractionOverride: str
        SpectrumPeakHeightPercentThreshold: float
        SpectrumPercentSaturationThreshold: float
        SpectrumQuantifierQualifierOnly: bool
        SpectrumScanInclusion: str
        Sublist: bool
        SurrogateConcentration: float
        SurrogateConcentrationLimitHigh: float
        SurrogateConcentrationLimitLow: float
        SurrogatePercentRecoveryMaximum: float
        SurrogatePercentRecoveryMinimum: float
        SymmetryCalculationType: str
        SymmetryLimitHigh: float
        SymmetryLimitLow: float
        TargetCompound: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundDataTable
        )  # readonly
        TargetCompoundIDStatus: str
        TargetCompoundRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        )
        ThresholdNumberOfPeaks: int
        TimeReferenceFlag: bool
        TimeSegment: int
        Transition: str
        TriggeredTransitions: str
        UncertaintyRelativeOrAbsolute: str
        UserAnnotation: str
        UserCustomCalculation: float
        UserCustomCalculationLimitHigh: float
        UserCustomCalculationLimitLow: float
        UserDefined: str
        UserDefined1: str
        UserDefined2: str
        UserDefined3: str
        UserDefined4: str
        UserDefined5: str
        UserDefined6: str
        UserDefined7: str
        UserDefined8: str
        UserDefined9: str
        UserDefinedTargetCompoundID: int
        WavelengthExtractionRangeHigh: float
        WavelengthExtractionRangeLow: float
        WavelengthReferenceRangeHigh: float
        WavelengthReferenceRangeLow: float

        def SetUserCustomCalculationLimitLowNull(self) -> None: ...
        def IsAgilentIDNull(self) -> bool: ...
        def IsLinearResponseRangeMinNull(self) -> bool: ...
        def SetUserDefined1Null(self) -> None: ...
        def IsTargetCompoundIDStatusNull(self) -> bool: ...
        def SetOutlierAlternativePeakNull(self) -> None: ...
        def IsOutlierResponseCheckBelowLimitNull(self) -> bool: ...
        def SetNoiseReferenceNull(self) -> None: ...
        def IsMatrixBConcentrationLimitHighNull(self) -> bool: ...
        def IsCASNumberNull(self) -> bool: ...
        def SetQualifierRatioMethodNull(self) -> None: ...
        def SetSignalRetentionTimeOffsetNull(self) -> None: ...
        def SetLibraryRetentionTimeNull(self) -> None: ...
        def SetDynamicTargetCompoundIDNull(self) -> None: ...
        def SetRelativeRetentionTimeMaximumPercentDeviationNull(self) -> None: ...
        def SetSurrogatePercentRecoveryMaximumNull(self) -> None: ...
        def SetAccuracyLimitMultiplierLOQNull(self) -> None: ...
        def AddCalRow(
            self,
            calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        ) -> None: ...
        def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
        def SetWavelengthExtractionRangeLowNull(self) -> None: ...
        def IsUserCustomCalculationLimitHighNull(self) -> bool: ...
        def IsWavelengthExtractionRangeLowNull(self) -> bool: ...
        def IsQCMaximumPercentRSDNull(self) -> bool: ...
        def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
        def SetCapacityFactorLimitNull(self) -> None: ...
        def IsSignalToNoiseMultiplierNull(self) -> bool: ...
        def SetIntegratorNull(self) -> None: ...
        def SetCurveFitR2Null(self) -> None: ...
        def SetMinimumCCRelativeResponseFactorNull(self) -> None: ...
        def IsMatrixSpikeBConcentrationNull(self) -> bool: ...
        def SetMaximumAverageResponseFactorRSDNull(self) -> None: ...
        def IsUserDefined8Null(self) -> bool: ...
        def IsISTDResponseLimitHighNull(self) -> bool: ...
        def SetOutlierResponseCheckBelowLimitNull(self) -> None: ...
        def SetQCLCSMinimumRecoveryBNull(self) -> None: ...
        def SetDilutionHighestConcentrationNull(self) -> None: ...
        def IsCurveFitMinimumR2Null(self) -> bool: ...
        def IsCurveFitLimitLowNull(self) -> bool: ...
        def IsNoiseAlgorithmTypeNull(self) -> bool: ...
        def SetMinimumAverageResponseFactorNull(self) -> None: ...
        def IsNeutralLossGainNull(self) -> bool: ...
        def SetLeftRetentionTimeDeltaNull(self) -> None: ...
        def IsQCLCSMinimumRecoveryANull(self) -> bool: ...
        def SetOutlierCCAverageResponseFactorNull(self) -> None: ...
        def IsLimitOfQuantitationNull(self) -> bool: ...
        def IsISTDConcentrationNull(self) -> bool: ...
        def IsCurveFitLimitHighNull(self) -> bool: ...
        def SetBlankResponseOffsetNull(self) -> None: ...
        def SetMolecularFormulaNull(self) -> None: ...
        def IsSpectrumQuantifierQualifierOnlyNull(self) -> bool: ...
        def SetSurrogateConcentrationLimitLowNull(self) -> None: ...
        def IsSurrogateConcentrationLimitHighNull(self) -> bool: ...
        def IsMZExtractionWindowUnitsNull(self) -> bool: ...
        def SetNoiseAlgorithmTypeNull(self) -> None: ...
        def SetWavelengthReferenceRangeLowNull(self) -> None: ...
        def SetMatrixSpikeMaximumPercentDeviationNull(self) -> None: ...
        def SetFullWidthHalfMaximumLimitLowNull(self) -> None: ...
        def SetLimitOfDetectionNull(self) -> None: ...
        def IsDilutionHighestConcentrationNull(self) -> bool: ...
        def SetQCLCSMinimumRecoveryANull(self) -> None: ...
        def IsDynamicTargetRankNull(self) -> bool: ...
        def SetSignalToNoiseMultiplierNull(self) -> None: ...
        def IsSignalInstanceNull(self) -> bool: ...
        def IsLibraryMatchScoreMinimumNull(self) -> bool: ...
        def SetMZExtractionWindowUnitsNull(self) -> None: ...
        def SetMaximumBlankConcentrationNull(self) -> None: ...
        def SetReferenceMSPathNameNull(self) -> None: ...
        def SetMinimumSignalToNoiseRatioNull(self) -> None: ...
        def SetNonReferenceWindowOverrideNull(self) -> None: ...
        def SetOutlierCCRelativeResponseFactorNull(self) -> None: ...
        def IsMatrixSpikeBPercentRecoveryMaximumNull(self) -> bool: ...
        def IsCollisionEnergyDeltaNull(self) -> bool: ...
        def IsOutlierAverageResponseFactorRSDNull(self) -> bool: ...
        def IsQCLCSMaximumRecoveryANull(self) -> bool: ...
        def IsTimeSegmentNull(self) -> bool: ...
        def SetMaximumBlankResponseNull(self) -> None: ...
        def SetResolutionCalculationTypeNull(self) -> None: ...
        def IsIntegrationParametersNull(self) -> bool: ...
        def IsMZScanRangeHighNull(self) -> bool: ...
        def SetCollisionEnergyNull(self) -> None: ...
        def IsNoiseStandardDeviationMultiplierNull(self) -> bool: ...
        def SetMassMatchScoreMinimumNull(self) -> None: ...
        def SetQCMaximumDeviationNull(self) -> None: ...
        def IsTimeReferenceFlagNull(self) -> bool: ...
        def IsGraphicTargetCompoundCalibrationNull(self) -> bool: ...
        def IsAreaCorrectionMZNull(self) -> bool: ...
        def IsDilutionPatternNull(self) -> bool: ...
        def IsCurveFitFormulaNull(self) -> bool: ...
        def SetSmoothingNull(self) -> None: ...
        def SetSpectrumBaselineThresholdNull(self) -> None: ...
        def IsPlatesLimitNull(self) -> bool: ...
        def IsMatrixSpikePercentRecoveryMaximumNull(self) -> bool: ...
        def SetISTDCompoundIDNull(self) -> None: ...
        def IsOutlierRelativeStandardErrorNull(self) -> bool: ...
        def SetRelativeStandardErrorNull(self) -> None: ...
        def GetPeakRowsByFK_TargetCompound_Peak(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakRow
        ]: ...
        def IsUncertaintyRelativeOrAbsoluteNull(self) -> bool: ...
        def SetCurveFitFormulaNull(self) -> None: ...
        def SetSurrogateConcentrationNull(self) -> None: ...
        def IsSymmetryCalculationTypeNull(self) -> bool: ...
        def IsCompoundApprovedNull(self) -> bool: ...
        def SetSpeciesNull(self) -> None: ...
        def SetCurveFitLimitLowNull(self) -> None: ...
        def IsMinimumAverageResponseFactorNull(self) -> bool: ...
        def IsTriggeredTransitionsNull(self) -> bool: ...
        def IsUserDefined4Null(self) -> bool: ...
        def IsThresholdNumberOfPeaksNull(self) -> bool: ...
        def SetSampleAmountLimitLowNull(self) -> None: ...
        def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
        def IsCompoundTypeNull(self) -> bool: ...
        def IsSymmetryLimitHighNull(self) -> bool: ...
        def SetMatrixSpikeBPercentRecoveryMaximumNull(self) -> None: ...
        def SetUserDefined9Null(self) -> None: ...
        def SetNoiseOfRawSignalNull(self) -> None: ...
        def IsOutlierBlankResponseOutsideLimitNull(self) -> bool: ...
        def SetMatrixSpikePercentRecoveryMaximumNull(self) -> None: ...
        def IsCompoundGroupNull(self) -> bool: ...
        def SetLinearResponseRangeMinNull(self) -> None: ...
        def IsMatrixSpikePercentRecoveryMinimumNull(self) -> bool: ...
        def SetSpectrumQuantifierQualifierOnlyNull(self) -> None: ...
        def IsUserDefinedTargetCompoundIDNull(self) -> bool: ...
        def IsFullWidthHalfMaximumLimitLowNull(self) -> bool: ...
        def IsCurveFitStatusNull(self) -> bool: ...
        def SetCurveFitLimitHighNull(self) -> None: ...
        def SetTransitionNull(self) -> None: ...
        def IsLibraryRetentionTimeNull(self) -> bool: ...
        def SetMethodDetectionLimitNull(self) -> None: ...
        def SetISTDFlagNull(self) -> None: ...
        def SetOutlierPeakNotFoundNull(self) -> None: ...
        def SetMultiplierNull(self) -> None: ...
        def SetCoelutionScoreLimitNull(self) -> None: ...
        def SetDilutionPatternNull(self) -> None: ...
        def IsPeakFilterThresholdValueNull(self) -> bool: ...
        def IsNoiseRegionsNull(self) -> bool: ...
        def IsPrimaryHitPeakIDNull(self) -> bool: ...
        def SetOutlierRelativeStandardErrorNull(self) -> None: ...
        def SetQCLCSMaximumRecoveryBNull(self) -> None: ...
        def IsMatrixAConcentrationLimitHighNull(self) -> bool: ...
        def SetIntegrationParametersModifiedNull(self) -> None: ...
        def SetTimeReferenceFlagNull(self) -> None: ...
        def SetUserDefined4Null(self) -> None: ...
        def IsOutlierMinimumCurveFitR2Null(self) -> bool: ...
        def SetMatrixBConcentrationLimitHighNull(self) -> None: ...
        def SetDynamicTargetRankNull(self) -> None: ...
        def IsLimitOfDetectionNull(self) -> bool: ...
        def SetSpectrumScanInclusionNull(self) -> None: ...
        def SetIonPolarityNull(self) -> None: ...
        def IsOutlierPeakNotFoundNull(self) -> bool: ...
        def SetSignalInstanceNull(self) -> None: ...
        def IsBlankResponseOffsetNull(self) -> bool: ...
        def SetLibraryRetentionIndexNull(self) -> None: ...
        def IsOutlierResponseFactorNull(self) -> bool: ...
        def SetGraphicPeakSpectrumNull(self) -> None: ...
        def IsLibraryRetentionIndexNull(self) -> bool: ...
        def IsMZNull(self) -> bool: ...
        def SetISTDResponseLimitHighNull(self) -> None: ...
        def SetSmoothingFunctionWidthNull(self) -> None: ...
        def IsWavelengthReferenceRangeLowNull(self) -> bool: ...
        def IsOutlierCCRelativeResponseFactorNull(self) -> bool: ...
        def IsAverageResponseFactorNull(self) -> bool: ...
        def GetCalRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow
        ]: ...
        def SetAreaCorrectionSelectedMZNull(self) -> None: ...
        def SetTargetCompoundIDStatusNull(self) -> None: ...
        def SetRightRetentionTimeDeltaNull(self) -> None: ...
        def IsMatrixSpikeConcentrationNull(self) -> bool: ...
        def SetQCLCSMaximumRecoveryANull(self) -> None: ...
        def SetCurveFitWeightNull(self) -> None: ...
        def IsAverageRelativeRetentionTimeNull(self) -> bool: ...
        def SetPeakFilterThresholdNull(self) -> None: ...
        def IsIonPolarityNull(self) -> bool: ...
        def SetCASNumberNull(self) -> None: ...
        def IsRetentionTimeWindowCCNull(self) -> bool: ...
        def SetRetentionTimeDeltaUnitsNull(self) -> None: ...
        def IsCapacityFactorLimitNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetCompoundNameNull(self) -> None: ...
        def SetMaximumNumberOfHitsNull(self) -> None: ...
        def IsCurveFitNull(self) -> bool: ...
        def IsRetentionTimeNull(self) -> bool: ...
        def SetGraphicPeakQualifiersNull(self) -> None: ...
        def IsCollisionEnergyNull(self) -> bool: ...
        def SetOutlierRelativeResponseFactorNull(self) -> None: ...
        def IsFullWidthHalfMaximumLimitHighNull(self) -> bool: ...
        def IsISTDResponseMaximumPercentDeviationNull(self) -> bool: ...
        def SetCCISTDResponseRatioLimitLowNull(self) -> None: ...
        def GetBatchRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IBatchRow: ...
        def SetOutlierAverageResponseFactorNull(self) -> None: ...
        def IsQualifierRatioMethodNull(self) -> bool: ...
        def SetUserAnnotationNull(self) -> None: ...
        def SetMatrixSpikeConcentrationNull(self) -> None: ...
        def IsSignalRetentionTimeOffsetNull(self) -> bool: ...
        def SetLinearResponseRangeMaxNull(self) -> None: ...
        def IsMinimumPercentPurityNull(self) -> bool: ...
        def SetFullWidthHalfMaximumLimitHighNull(self) -> None: ...
        def IsRxUnlabeledIsotopicDilutionNull(self) -> bool: ...
        def SetCCResponseRatioLimitHighNull(self) -> None: ...
        def SetMZAdditionalNull(self) -> None: ...
        def IsPeakSelectionCriterionNull(self) -> bool: ...
        def GetTargetQualifierRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ]: ...
        def SetRelativeStandardErrorMaximumNull(self) -> None: ...
        def IsMatrixSpikeBMaximumPercentDeviationNull(self) -> bool: ...
        def SetRelativeISTDMultiplierNull(self) -> None: ...
        def IsNoiseOfRawSignalNull(self) -> bool: ...
        def SetCompoundApprovedNull(self) -> None: ...
        def IsAccuracyLimitMultiplierLOQNull(self) -> bool: ...
        def IsIntegrationParametersModifiedNull(self) -> bool: ...
        def IsISTDFlagNull(self) -> bool: ...
        def IsDynamicTargetCompoundIDNull(self) -> bool: ...
        def IsKEGGIDNull(self) -> bool: ...
        def SetISTDConcentrationNull(self) -> None: ...
        def SetMZScanRangeHighNull(self) -> None: ...
        def IsSampleMaximumPercentRSDNull(self) -> bool: ...
        def SetTriggeredTransitionsNull(self) -> None: ...
        def DeleteCalRow(
            self,
            calibrationRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICalibrationRow,
        ) -> None: ...
        def IsRetentionIndexNull(self) -> bool: ...
        def SetSpectrumPercentSaturationThresholdNull(self) -> None: ...
        def IsWavelengthExtractionRangeHighNull(self) -> bool: ...
        def IsCCISTDResponseRatioLimitLowNull(self) -> bool: ...
        def GetCalibrationRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.CalibrationRow
        ]: ...
        def IsCCResponseRatioLimitLowNull(self) -> bool: ...
        def SetResponseFactorMaximumPercentDeviationNull(self) -> None: ...
        def SetCurveFitStatusNull(self) -> None: ...
        def SetMatrixBConcentrationLimitLowNull(self) -> None: ...
        def SetSelectedMZNull(self) -> None: ...
        def IsQuantitateByHeightNull(self) -> bool: ...
        def IsMaximumAverageResponseFactorRSDNull(self) -> bool: ...
        def IsOutlierRelativeResponseFactorNull(self) -> bool: ...
        def SetCalibrationRangeFilterNull(self) -> None: ...
        def IsUserDefined7Null(self) -> bool: ...
        def IsSelectedMZNull(self) -> bool: ...
        def IsTransitionNull(self) -> bool: ...
        def IsMatrixTypeOverrideNull(self) -> bool: ...
        def SetMatrixSpikeBMaximumPercentDeviationNull(self) -> None: ...
        def IsSmoothingFunctionWidthNull(self) -> bool: ...
        def SetFragmentorVoltageNull(self) -> None: ...
        def IsOutlierMethodDetectionLimitNull(self) -> bool: ...
        def IsIonSourceNull(self) -> bool: ...
        def SetCCISTDResponseRatioLimitHighNull(self) -> None: ...
        def SetPeakFilterThresholdValueNull(self) -> None: ...
        def SetCurveFitMinimumR2Null(self) -> None: ...
        def IsUserDefined3Null(self) -> bool: ...
        def SetMaximumCCResponseFactorDeviationNull(self) -> None: ...
        def GetQualifierRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow
        ]: ...
        def IsConcentrationUnitsNull(self) -> bool: ...
        def SetMatrixSpikePercentRecoveryMinimumNull(self) -> None: ...
        def SetCellAcceleratorVoltageNull(self) -> None: ...
        def SetPrimaryHitPeakIDNull(self) -> None: ...
        def IsMatrixSpikeBPercentRecoveryMinimumNull(self) -> bool: ...
        def SetSpectrumPeakHeightPercentThresholdNull(self) -> None: ...
        def SetCalibrationReferenceCompoundIDNull(self) -> None: ...
        def IsSignalTypeNull(self) -> bool: ...
        def SetIDNull(self) -> None: ...
        def IsQCLCSMinimumRecoveryBNull(self) -> bool: ...
        def IsIntegratorNull(self) -> bool: ...
        def SetAlternativePeakIDNull(self) -> None: ...
        def IsOutlierAlternativePeakNull(self) -> bool: ...
        def SetGraphicTargetCompoundCalibrationNull(self) -> None: ...
        def IsSurrogateConcentrationNull(self) -> bool: ...
        def SetUserDefinedTargetCompoundIDNull(self) -> None: ...
        def IsQCMaximumDeviationNull(self) -> bool: ...
        def SetSurrogatePercentRecoveryMinimumNull(self) -> None: ...
        def IsSmoothingGaussianWidthNull(self) -> bool: ...
        def IsUserCustomCalculationNull(self) -> bool: ...
        def SetUserDefined6Null(self) -> None: ...
        def SetISTDResponseLimitLowNull(self) -> None: ...
        def IsCellAcceleratorVoltageNull(self) -> bool: ...
        def SetOutlierMinimumCurveFitR2Null(self) -> None: ...
        def IsMethodDetectionLimitNull(self) -> bool: ...
        def IsMassAccuracyLimitNull(self) -> bool: ...
        def IsMolecularFormulaNull(self) -> bool: ...
        def IsReferenceWindowOverrideNull(self) -> bool: ...
        def IsSublistNull(self) -> bool: ...
        def IsMaximumBlankResponseNull(self) -> bool: ...
        def SetRetentionTimeWindowUnitsNull(self) -> None: ...
        def IsSpectrumExtractionOverrideNull(self) -> bool: ...
        def IsMaximumBlankConcentrationNull(self) -> bool: ...
        def IsResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
        def IsPlatesCalculationTypeNull(self) -> bool: ...
        def IsISTDResponseLimitLowNull(self) -> bool: ...
        def SetAverageResponseFactorNull(self) -> None: ...
        def SetAgilentIDNull(self) -> None: ...
        def IsAccuracyMaximumPercentDeviationNull(self) -> bool: ...
        def IsMaximumPercentResidualNull(self) -> bool: ...
        def IsGraphicPeakChromatogramNull(self) -> bool: ...
        def IsAreaCorrectionFactorNull(self) -> bool: ...
        def SetMZExtractionWindowFilterRightNull(self) -> None: ...
        def SetAreaCorrectionMZNull(self) -> None: ...
        def SetISTDResponseMaximumPercentDeviationNull(self) -> None: ...
        def IsMZScanRangeLowNull(self) -> bool: ...
        def SetRetentionIndexNull(self) -> None: ...
        def IsQCLCSMaximumRecoveryBNull(self) -> bool: ...
        def SetSymmetryLimitHighNull(self) -> None: ...
        def IsOutlierCustomCalculationNull(self) -> bool: ...
        def IsUserAnnotationNull(self) -> bool: ...
        def SetOutlierResponseFactorNull(self) -> None: ...
        def IsSignalNameNull(self) -> bool: ...
        def SetOutlierCustomCalculationNull(self) -> None: ...
        def IsResponseCheckMinimumNull(self) -> bool: ...
        def SetFragmentorVoltageDeltaNull(self) -> None: ...
        def IsOutlierCCAverageResponseFactorNull(self) -> bool: ...
        def SetQCMaximumPercentRSDNull(self) -> None: ...
        def IsGraphicPeakQualifiersNull(self) -> bool: ...
        def IsColumnVoidTimeNull(self) -> bool: ...
        def IsAlternativePeakIDNull(self) -> bool: ...
        def SetCompoundTypeNull(self) -> None: ...
        def IsFragmentorVoltageDeltaNull(self) -> bool: ...
        def SetPlatesLimitNull(self) -> None: ...
        def GetPrimaryPeakRow(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow: ...
        def IsRelativeISTDMultiplierNull(self) -> bool: ...
        def IsCoelutionScoreLimitNull(self) -> bool: ...
        def IsSmoothingNull(self) -> bool: ...
        def SetSmoothingGaussianWidthNull(self) -> None: ...
        def IsCompoundMathNull(self) -> bool: ...
        def GetUniqueKey(self) -> str: ...
        def GetTargetCompoundRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        ]: ...
        def IsQValueMinimumNull(self) -> bool: ...
        def IsCalibrationReferenceCompoundIDNull(self) -> bool: ...
        def IsRelativeStandardErrorNull(self) -> bool: ...
        def IsUserDefined9Null(self) -> bool: ...
        def IsSymmetryLimitLowNull(self) -> bool: ...
        def SetUserDefined7Null(self) -> None: ...
        def SetSymmetryLimitLowNull(self) -> None: ...
        def IsSpectrumPeakHeightPercentThresholdNull(self) -> bool: ...
        def IsAreaCorrectionSelectedMZNull(self) -> bool: ...
        def IsCCISTDResponseRatioLimitHighNull(self) -> bool: ...
        def SetConcentrationUnitsNull(self) -> None: ...
        def IsIDNull(self) -> bool: ...
        def SetSymmetryCalculationTypeNull(self) -> None: ...
        def SetNoiseStandardDeviationMultiplierNull(self) -> None: ...
        def SetOutlierMethodDetectionLimitNull(self) -> None: ...
        def SetCompoundMathNull(self) -> None: ...
        def SetMatrixTypeOverrideNull(self) -> None: ...
        def SetCurveFitNull(self) -> None: ...
        def SetRetentionTimeNull(self) -> None: ...
        def SetMinimumPercentPurityNull(self) -> None: ...
        def SetResolutionLimitNull(self) -> None: ...
        def IsMatrixAConcentrationLimitLowNull(self) -> bool: ...
        def GetCompoundName(self) -> str: ...
        def SetAverageRelativeRetentionTimeNull(self) -> None: ...
        def SetMassAccuracyLimitNull(self) -> None: ...
        def SetUserDefinedNull(self) -> None: ...
        def IsLeftRetentionTimeDeltaNull(self) -> bool: ...
        def IsOutlierAverageResponseFactorNull(self) -> bool: ...
        def IsCurveFitR2Null(self) -> bool: ...
        def IsMatrixBConcentrationLimitLowNull(self) -> bool: ...
        def IsSurrogateConcentrationLimitLowNull(self) -> bool: ...
        def IsUserCustomCalculationLimitLowNull(self) -> bool: ...
        def SetLibraryMatchScoreMinimumNull(self) -> None: ...
        def IsRelativeStandardErrorMaximumNull(self) -> bool: ...
        def IsSpectrumScanInclusionNull(self) -> bool: ...
        def SetPlatesCalculationTypeNull(self) -> None: ...
        def SetResponseCheckMinimumNull(self) -> None: ...
        def SetSurrogateConcentrationLimitHighNull(self) -> None: ...
        def SetMatrixSpikeBConcentrationNull(self) -> None: ...
        def IsSpeciesNull(self) -> bool: ...
        def SetSpectrumExtractionOverrideNull(self) -> None: ...
        def SetThresholdNumberOfPeaksNull(self) -> None: ...
        def SetAreaCorrectionFactorNull(self) -> None: ...
        def SetNoiseRegionsNull(self) -> None: ...
        def IsUserDefined6Null(self) -> bool: ...
        def SetSignalNameNull(self) -> None: ...
        def SetWavelengthExtractionRangeHighNull(self) -> None: ...
        def IsMinimumSignalToNoiseRatioNull(self) -> bool: ...
        def SetUserDefined2Null(self) -> None: ...
        def IsExpectedConcentrationNull(self) -> bool: ...
        def SetUserDefined8Null(self) -> None: ...
        def SetMZScanRangeLowNull(self) -> None: ...
        def SetUserDefined5Null(self) -> None: ...
        def IsRelativeResponseFactorMaximumPercentDeviationNull(self) -> bool: ...
        def IsUserDefined2Null(self) -> bool: ...
        def IsISTDCompoundIDNull(self) -> bool: ...
        def IsSurrogatePercentRecoveryMaximumNull(self) -> bool: ...
        def SetPeakSelectionCriterionNull(self) -> None: ...
        def IsReferenceMSPathNameNull(self) -> bool: ...
        def SetTimeSegmentNull(self) -> None: ...
        def SetIonSourceNull(self) -> None: ...
        def IsMassMatchScoreMinimumNull(self) -> bool: ...
        def SetRelativeResponseFactorMaximumPercentDeviationNull(self) -> None: ...
        def IsSampleAmountLimitHighNull(self) -> bool: ...
        def SetRetentionTimeWindowCCNull(self) -> None: ...
        def IsCalibrationRangeFilterNull(self) -> bool: ...
        def IsGraphicPeakSpectrumNull(self) -> bool: ...
        def IsSpectrumBaselineThresholdNull(self) -> bool: ...
        def IsUserDefined5Null(self) -> bool: ...
        def IsRyLabeledIsotopicDilutionNull(self) -> bool: ...
        def SetMZNull(self) -> None: ...
        def IsResolutionCalculationTypeNull(self) -> bool: ...
        def IsSpectrumPercentSaturationThresholdNull(self) -> bool: ...
        def IsCurveFitWeightNull(self) -> bool: ...
        def SetScanTypeNull(self) -> None: ...
        def SetRyLabeledIsotopicDilutionNull(self) -> None: ...
        def IsISTDResponseMinimumPercentDeviationNull(self) -> bool: ...
        def SetAverageResponseFactorRSDNull(self) -> None: ...
        def IsRelativeRetentionTimeMaximumPercentDeviationNull(self) -> bool: ...
        def IsSurrogatePercentRecoveryMinimumNull(self) -> bool: ...
        def IsFragmentorVoltageNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def IsCCResponseRatioLimitHighNull(self) -> bool: ...
        def IsUserDefined1Null(self) -> bool: ...
        def SetAlternativePeakCriteriaNull(self) -> None: ...
        def SetMatrixSpikeBPercentRecoveryMinimumNull(self) -> None: ...
        def GetPeakRows(
            self,
        ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakRow]: ...
        def IsMZAdditionalNull(self) -> bool: ...
        def SetSampleMaximumPercentRSDNull(self) -> None: ...
        def IsAlternativePeakCriteriaNull(self) -> bool: ...
        def IsMaximumNumberOfHitsNull(self) -> bool: ...
        def SetOutlierBlankResponseOutsideLimitNull(self) -> None: ...
        def IsCompoundNameNull(self) -> bool: ...
        def SetUserDefined3Null(self) -> None: ...
        def SetMatrixAConcentrationLimitHighNull(self) -> None: ...
        def SetRetentionTimeWindowNull(self) -> None: ...
        def IsMaximumCCResponseFactorDeviationNull(self) -> bool: ...
        def SetLibraryMatchScoreNull(self) -> None: ...
        def SetReferenceWindowOverrideNull(self) -> None: ...
        def SetCompoundGroupNull(self) -> None: ...
        def SetWavelengthReferenceRangeHighNull(self) -> None: ...
        def IsRetentionTimeWindowNull(self) -> bool: ...
        def SetQValueMinimumNull(self) -> None: ...
        def SetUserCustomCalculationNull(self) -> None: ...
        def SetKEGGIDNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def SetCCResponseRatioLimitLowNull(self) -> None: ...
        def SetCurveFitOriginNull(self) -> None: ...
        def IsWavelengthReferenceRangeHighNull(self) -> bool: ...
        def IsPeakFilterThresholdNull(self) -> bool: ...
        def IsLinearResponseRangeMaxNull(self) -> bool: ...
        def SetQuantitateByHeightNull(self) -> None: ...
        def SetNeutralLossGainNull(self) -> None: ...
        def IsNonReferenceWindowOverrideNull(self) -> bool: ...
        def SetUncertaintyRelativeOrAbsoluteNull(self) -> None: ...
        def IsResolutionLimitNull(self) -> bool: ...
        def SetColumnVoidTimeNull(self) -> None: ...
        def SetOutlierAverageResponseFactorRSDNull(self) -> None: ...
        def IsRetentionTimeDeltaUnitsNull(self) -> bool: ...
        def IsLibraryMatchScoreNull(self) -> bool: ...
        def SetGraphicPeakChromatogramNull(self) -> None: ...
        def SetCollisionEnergyDeltaNull(self) -> None: ...
        def IsRightRetentionTimeDeltaNull(self) -> bool: ...
        def IsAverageResponseFactorRSDNull(self) -> bool: ...
        def IsMinimumCCRelativeResponseFactorNull(self) -> bool: ...
        def SetUserCustomCalculationLimitHighNull(self) -> None: ...
        def SetISTDResponseMinimumPercentDeviationNull(self) -> None: ...
        def SetSampleAmountLimitHighNull(self) -> None: ...
        def IsSampleAmountLimitLowNull(self) -> bool: ...
        def IsMatrixSpikeMaximumPercentDeviationNull(self) -> bool: ...
        def SetSublistNull(self) -> None: ...
        def SetAccuracyMaximumPercentDeviationNull(self) -> None: ...
        def IsRetentionTimeWindowUnitsNull(self) -> bool: ...
        def SetLimitOfQuantitationNull(self) -> None: ...
        def SetIntegrationParametersNull(self) -> None: ...
        def SetMatrixAConcentrationLimitLowNull(self) -> None: ...
        def IsNoiseReferenceNull(self) -> bool: ...
        def IsMultiplierNull(self) -> bool: ...
        def IsCurveFitOriginNull(self) -> bool: ...
        def SetMaximumPercentResidualNull(self) -> None: ...
        def IsScanTypeNull(self) -> bool: ...
        def SetExpectedConcentrationNull(self) -> None: ...
        def SetSignalTypeNull(self) -> None: ...
        def SetRxUnlabeledIsotopicDilutionNull(self) -> None: ...

    class TargetCompoundRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        )  # readonly

    class TargetCompoundRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRowChangeEvent,
        ) -> None: ...

    class TargetQualifierDataTable(
        System.IServiceProvider,
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ],
    ):  # Class
        def __init__(self) -> None: ...

        AreaSumColumn: System.Data.DataColumn  # readonly
        BatchIDColumn: System.Data.DataColumn  # readonly
        CellAcceleratorVoltageColumn: System.Data.DataColumn  # readonly
        CollisionEnergyColumn: System.Data.DataColumn  # readonly
        CollisionEnergyDeltaColumn: System.Data.DataColumn  # readonly
        ColumnEventsDisabled: bool
        CompoundIDColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        FragmentorVoltageColumn: System.Data.DataColumn  # readonly
        FragmentorVoltageDeltaColumn: System.Data.DataColumn  # readonly
        GraphicPeakQualifierChromatogramColumn: System.Data.DataColumn  # readonly
        IntegrationParametersColumn: System.Data.DataColumn  # readonly
        IntegrationParametersModifiedColumn: System.Data.DataColumn  # readonly
        IonPolarityColumn: System.Data.DataColumn  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ): ...
        MZColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowFilterLeftColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowFilterRightColumn: System.Data.DataColumn  # readonly
        MZExtractionWindowUnitsColumn: System.Data.DataColumn  # readonly
        OutlierPeakNotFoundColumn: System.Data.DataColumn  # readonly
        PeakFilterThresholdColumn: System.Data.DataColumn  # readonly
        PeakFilterThresholdValueColumn: System.Data.DataColumn  # readonly
        QualifierIDColumn: System.Data.DataColumn  # readonly
        QualifierNameColumn: System.Data.DataColumn  # readonly
        QualifierRangeMaximumColumn: System.Data.DataColumn  # readonly
        QualifierRangeMinimumColumn: System.Data.DataColumn  # readonly
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessageColumn: System.Data.DataColumn  # readonly
        RelativeResponseColumn: System.Data.DataColumn  # readonly
        SampleIDColumn: System.Data.DataColumn  # readonly
        ScanTypeColumn: System.Data.DataColumn  # readonly
        SelectedMZColumn: System.Data.DataColumn  # readonly
        ThresholdNumberOfPeaksColumn: System.Data.DataColumn  # readonly
        TransitionColumn: System.Data.DataColumn  # readonly
        UncertaintyColumn: System.Data.DataColumn  # readonly
        UserDefinedColumn: System.Data.DataColumn  # readonly

        def RemoveTargetQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        ) -> None: ...
        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        def FindByBatchIDSampleIDCompoundIDQualifierID(
            self, BatchID: int, SampleID: int, CompoundID: int, QualifierID: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ): ...
        def NewTargetQualifierRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        @overload
        def AddTargetQualifierRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        ) -> None: ...
        @overload
        def AddTargetQualifierRow(
            self,
            BatchID: int,
            SampleID: int,
            CompoundID: int,
            QualifierID: int,
            AreaSum: bool,
            CellAcceleratorVoltage: float,
            CollisionEnergy: float,
            CollisionEnergyDelta: float,
            FragmentorVoltage: float,
            FragmentorVoltageDelta: float,
            GraphicPeakQualifierChromatogram: str,
            IntegrationParameters: str,
            IntegrationParametersModified: bool,
            IonPolarity: str,
            MZ: float,
            MZExtractionWindowFilterLeft: float,
            MZExtractionWindowFilterRight: float,
            MZExtractionWindowUnits: str,
            OutlierPeakNotFound: str,
            PeakFilterThreshold: str,
            PeakFilterThresholdValue: float,
            QualifierName: str,
            QualifierRangeMaximum: float,
            QualifierRangeMinimum: float,
            QuantitationMessage: str,
            RelativeResponse: float,
            ScanType: str,
            SelectedMZ: float,
            ThresholdNumberOfPeaks: int,
            Transition: str,
            Uncertainty: float,
            UserDefined: str,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        ): ...

        AreaSumChanged: System.Data.DataColumnChangeEventHandler  # Event
        AreaSumChanging: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        BatchIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        CellAcceleratorVoltageChanged: System.Data.DataColumnChangeEventHandler  # Event
        CellAcceleratorVoltageChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        CollisionEnergyChanged: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyChanging: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyDeltaChanged: System.Data.DataColumnChangeEventHandler  # Event
        CollisionEnergyDeltaChanging: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        CompoundIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageChanged: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageChanging: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageDeltaChanged: System.Data.DataColumnChangeEventHandler  # Event
        FragmentorVoltageDeltaChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicPeakQualifierChromatogramChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        GraphicPeakQualifierChromatogramChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationParametersChanged: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationParametersChanging: System.Data.DataColumnChangeEventHandler  # Event
        IntegrationParametersModifiedChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IntegrationParametersModifiedChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        IonPolarityChanged: System.Data.DataColumnChangeEventHandler  # Event
        IonPolarityChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZChanged: System.Data.DataColumnChangeEventHandler  # Event
        MZChanging: System.Data.DataColumnChangeEventHandler  # Event
        MZExtractionWindowFilterLeftChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterLeftChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterRightChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowFilterRightChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowUnitsChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        MZExtractionWindowUnitsChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        OutlierPeakNotFoundChanged: System.Data.DataColumnChangeEventHandler  # Event
        OutlierPeakNotFoundChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdChanged: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdChanging: System.Data.DataColumnChangeEventHandler  # Event
        PeakFilterThresholdValueChanged: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        PeakFilterThresholdValueChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        QualifierIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        QualifierNameChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierNameChanging: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRangeMaximumChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRangeMaximumChanging: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRangeMinimumChanged: System.Data.DataColumnChangeEventHandler  # Event
        QualifierRangeMinimumChanging: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanged: System.Data.DataColumnChangeEventHandler  # Event
        QuantitationMessageChanging: System.Data.DataColumnChangeEventHandler  # Event
        RelativeResponseChanged: System.Data.DataColumnChangeEventHandler  # Event
        RelativeResponseChanging: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanged: System.Data.DataColumnChangeEventHandler  # Event
        SampleIDChanging: System.Data.DataColumnChangeEventHandler  # Event
        SelectedMZChanged: System.Data.DataColumnChangeEventHandler  # Event
        SelectedMZChanging: System.Data.DataColumnChangeEventHandler  # Event
        TargetQualifierRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEventHandler
        )  # Event
        TargetQualifierRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEventHandler
        )  # Event
        TargetQualifierRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEventHandler
        )  # Event
        TargetQualifierRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEventHandler
        )  # Event
        ThresholdNumberOfPeaksChanged: System.Data.DataColumnChangeEventHandler  # Event
        ThresholdNumberOfPeaksChanging: (
            System.Data.DataColumnChangeEventHandler
        )  # Event
        TransitionChanged: System.Data.DataColumnChangeEventHandler  # Event
        TransitionChanging: System.Data.DataColumnChangeEventHandler  # Event
        UncertaintyChanged: System.Data.DataColumnChangeEventHandler  # Event
        UncertaintyChanging: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanged: System.Data.DataColumnChangeEventHandler  # Event
        UserDefinedChanging: System.Data.DataColumnChangeEventHandler  # Event

    class TargetQualifierRow(
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetQualifierRow,
        System.Data.DataRow,
    ):  # Class
        AreaSum: bool
        BatchID: int
        CellAcceleratorVoltage: float
        CollisionEnergy: float
        CollisionEnergyDelta: float
        CompoundID: int
        FragmentorVoltage: float
        FragmentorVoltageDelta: float
        GraphicPeakQualifierChromatogram: str
        IntegrationParameters: str
        IntegrationParametersModified: bool
        IonPolarity: str
        MZ: float
        MZExtractionWindowFilterLeft: float
        MZExtractionWindowFilterRight: float
        MZExtractionWindowUnits: str
        OutlierPeakNotFound: str
        PeakFilterThreshold: str
        PeakFilterThresholdValue: float
        QualifierID: int
        QualifierName: str
        QualifierRangeMaximum: float
        QualifierRangeMinimum: float
        QuantDataSet: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IQuantDataSet
        )  # readonly
        QuantitationMessage: str
        RelativeResponse: float
        SampleID: int
        ScanType: str
        SelectedMZ: float
        TargetCompoundRowParent: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
        )
        TargetQualifier: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierDataTable
        )  # readonly
        ThresholdNumberOfPeaks: int
        Transition: str
        Uncertainty: float
        UserDefined: str

        def IsMZNull(self) -> bool: ...
        def SetSelectedMZNull(self) -> None: ...
        def SetPeakFilterThresholdValueNull(self) -> None: ...
        def IsOutlierPeakNotFoundNull(self) -> bool: ...
        def IsFragmentorVoltageDeltaNull(self) -> bool: ...
        def IsAreaSumNull(self) -> bool: ...
        def IsScanTypeNull(self) -> bool: ...
        def SetUserDefinedNull(self) -> None: ...
        def SetMZExtractionWindowFilterRightNull(self) -> None: ...
        def SetCellAcceleratorVoltageNull(self) -> None: ...
        def IsGraphicPeakQualifierChromatogramNull(self) -> bool: ...
        def SetIntegrationParametersNull(self) -> None: ...
        def SetIonPolarityNull(self) -> None: ...
        def IsQuantitationMessageNull(self) -> bool: ...
        def IsQualifierNameNull(self) -> bool: ...
        def SetCollisionEnergyDeltaNull(self) -> None: ...
        def IsFragmentorVoltageNull(self) -> bool: ...
        def IsPeakFilterThresholdValueNull(self) -> bool: ...
        def SetThresholdNumberOfPeaksNull(self) -> None: ...
        def SetTransitionNull(self) -> None: ...
        def SetFragmentorVoltageNull(self) -> None: ...
        def IsIonPolarityNull(self) -> bool: ...
        def GetPeakQualifierRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.PeakQualifierRow
        ]: ...
        def IsQualifierRangeMinimumNull(self) -> bool: ...
        def IsSelectedMZNull(self) -> bool: ...
        def GetQualifierPeakRows(
            self,
        ) -> List[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.IPeakQualifierRow
        ]: ...
        def IsPeakFilterThresholdNull(self) -> bool: ...
        def IsIntegrationParametersModifiedNull(self) -> bool: ...
        def IsCollisionEnergyNull(self) -> bool: ...
        def SetPeakFilterThresholdNull(self) -> None: ...
        def SetRelativeResponseNull(self) -> None: ...
        def SetOutlierPeakNotFoundNull(self) -> None: ...
        def IsThresholdNumberOfPeaksNull(self) -> bool: ...
        def SetQuantitationMessageNull(self) -> None: ...
        def SetQualifierRangeMinimumNull(self) -> None: ...
        def SetFragmentorVoltageDeltaNull(self) -> None: ...
        def IsUncertaintyNull(self) -> bool: ...
        def IsCollisionEnergyDeltaNull(self) -> bool: ...
        def SetMZExtractionWindowUnitsNull(self) -> None: ...
        def IsIntegrationParametersNull(self) -> bool: ...
        def GetTargetCompoundRowParent(
            self,
        ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow: ...
        def SetScanTypeNull(self) -> None: ...
        def IsMZExtractionWindowFilterRightNull(self) -> bool: ...
        def SetUncertaintyNull(self) -> None: ...
        def SetMZNull(self) -> None: ...
        def IsQualifierRangeMaximumNull(self) -> bool: ...
        def IsRelativeResponseNull(self) -> bool: ...
        def IsUserDefinedNull(self) -> bool: ...
        def SetCollisionEnergyNull(self) -> None: ...
        def SetQualifierNameNull(self) -> None: ...
        def IsMZExtractionWindowFilterLeftNull(self) -> bool: ...
        def SetQualifierRangeMaximumNull(self) -> None: ...
        def SetAreaSumNull(self) -> None: ...
        def IsMZExtractionWindowUnitsNull(self) -> bool: ...
        def SetMZExtractionWindowFilterLeftNull(self) -> None: ...
        def IsTransitionNull(self) -> bool: ...
        def SetIntegrationParametersModifiedNull(self) -> None: ...
        def IsCellAcceleratorVoltageNull(self) -> bool: ...
        def SetGraphicPeakQualifierChromatogramNull(self) -> None: ...

    class TargetQualifierRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
        )  # readonly

    class TargetQualifierRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRowChangeEvent,
        ) -> None: ...

class QuantitationMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Area: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationMode = (
        ...
    )  # static # readonly
    Height: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationMode = (
        ...
    )  # static # readonly

class RTRecognitionWindowUnits(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Minutes: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ) = ...  # static # readonly
    Percent: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.RTRecognitionWindowUnits
    ) = ...  # static # readonly

class RecoverableQuantitationException(
    System.ApplicationException,
    System.Runtime.InteropServices._Exception,
    System.Runtime.Serialization.ISerializable,
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, message: str) -> None: ...
    @overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class ReferenceSpectrumSetup:  # Class
    def __init__(
        self,
        methodSetup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodSetupSession,
    ) -> None: ...

    CompoundSetup: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ICompoundSetup
    )  # readonly
    ReferenceLibrary: ILibrary  # readonly

    def SetUpReferenceSpectraFromData(
        self, refLibraryName: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...
    def SetUpReferenceSpectra(
        self, refLibraryName: str, lookupLibraryPath: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodValidationMessage
    ]: ...

class ReportDestination(System.MarshalByRefObject):  # Class
    def __init__(self) -> None: ...

    AuditTrail: bool
    OpenPublishFile: bool
    PostReportTask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IProcessTask
    Printer: str
    PublishFormat: str
    ReportFileName: str
    Template: str

class ReportDialogSettingsSection(System.Configuration.ConfigurationSection):  # Class
    def __init__(self) -> None: ...

    ColumnWidths: str
    DeleteGraphicsFiles: bool
    GenerateGraphics: bool
    LastBatchFolder: str
    LastFixedGraphicsFile: str
    LastGraphicsSettingsFile: str
    LastOutputFolder: str
    LastPostReportTask: System.Guid
    LastPrinter: str
    LastPublish: str
    LastTemplate: str
    LoadFixedGraphicsFile: bool
    LoadGraphicsSettingsFile: bool
    SingleSampleReport: bool
    Size: System.Drawing.Size
    StartQueueViewer: bool

class ReportFilterItem:  # Class
    def __init__(self, id: int, name: str) -> None: ...

    Id: int  # readonly
    Name: str  # readonly

    def GetFileName(self) -> str: ...

class ReportFixedGraphicsDataSet(
    System.IDisposable,
    System.ComponentModel.ISupportInitializeNotification,
    System.IServiceProvider,
    System.Data.DataSet,
    System.Xml.Serialization.IXmlSerializable,
    System.Runtime.Serialization.ISerializable,
    System.ComponentModel.IListSource,
    System.ComponentModel.ISupportInitialize,
    System.ComponentModel.IComponent,
):  # Class
    def __init__(self) -> None: ...

    Compound: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundDataTable
    )  # readonly
    Relations: System.Data.DataRelationCollection  # readonly
    Sample: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleDataTable
    )  # readonly
    SchemaSerializationMode: System.Data.SchemaSerializationMode
    Tables: System.Data.DataTableCollection  # readonly

    @staticmethod
    def GetTypedDataSetSchema(
        xs: System.Xml.Schema.XmlSchemaSet,
    ) -> System.Xml.Schema.XmlSchemaComplexType: ...
    def Clone(self) -> System.Data.DataSet: ...

    # Nested Types

    class CompoundDataTable(
        System.ComponentModel.ISupportInitialize,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ],
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ],
        System.ComponentModel.IListSource,
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        CompoundNameColumn: System.Data.DataColumn  # readonly
        Count: int  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ): ...
        MaxMzColumn: System.Data.DataColumn  # readonly
        MaxXColumn: System.Data.DataColumn  # readonly
        MaxYColumn: System.Data.DataColumn  # readonly
        MinMzColumn: System.Data.DataColumn  # readonly
        MinXColumn: System.Data.DataColumn  # readonly
        MinYColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow,
        ) -> None: ...
        @overload
        def AddCompoundRow(
            self,
            CompoundName: str,
            MinX: float,
            MaxX: float,
            MinY: float,
            MaxY: float,
            MinMz: float,
            MaxMz: float,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ): ...
        def FindByCompoundName(
            self, CompoundName: str
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ): ...
        def NewCompoundRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        ): ...
        def RemoveCompoundRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow,
        ) -> None: ...
        def Clone(self) -> System.Data.DataTable: ...

        CompoundRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEventHandler
        )  # Event
        CompoundRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEventHandler
        )  # Event

    class CompoundRow(System.Data.DataRow):  # Class
        CompoundName: str
        MaxMz: float
        MaxX: float
        MaxY: float
        MinMz: float
        MinX: float
        MinY: float

        def IsMinXNull(self) -> bool: ...
        def IsMinYNull(self) -> bool: ...
        def SetMinYNull(self) -> None: ...
        def IsMaxYNull(self) -> bool: ...
        def SetMaxMzNull(self) -> None: ...
        def SetMaxYNull(self) -> None: ...
        def IsMaxMzNull(self) -> bool: ...
        def IsMaxXNull(self) -> bool: ...
        def SetMinMzNull(self) -> None: ...
        def SetMinXNull(self) -> None: ...
        def SetMaxXNull(self) -> None: ...
        def IsMinMzNull(self) -> bool: ...

    class CompoundRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRow
        )  # readonly

    class CompoundRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.CompoundRowChangeEvent,
        ) -> None: ...

    class SampleDataTable(
        System.ComponentModel.IListSource,
        System.ComponentModel.ISupportInitialize,
        Iterable[Any],
        System.ComponentModel.ISupportInitializeNotification,
        System.Xml.Serialization.IXmlSerializable,
        System.ComponentModel.IComponent,
        System.Runtime.Serialization.ISerializable,
        Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ],
        System.Data.TypedTableBase[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ],
        System.IDisposable,
        System.IServiceProvider,
    ):  # Class
        def __init__(self) -> None: ...

        Count: int  # readonly
        def __getitem__(
            self, index: int
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ): ...
        MaxXColumn: System.Data.DataColumn  # readonly
        MaxYColumn: System.Data.DataColumn  # readonly
        MinXColumn: System.Data.DataColumn  # readonly
        MinYColumn: System.Data.DataColumn  # readonly
        SampleNameColumn: System.Data.DataColumn  # readonly

        @staticmethod
        def GetTypedTableSchema(
            xs: System.Xml.Schema.XmlSchemaSet,
        ) -> System.Xml.Schema.XmlSchemaComplexType: ...
        @overload
        def AddSampleRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow,
        ) -> None: ...
        @overload
        def AddSampleRow(
            self, SampleName: str, MinX: float, MaxX: float, MinY: float, MaxY: float
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ): ...
        def FindBySampleName(
            self, SampleName: str
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ): ...
        def Clone(self) -> System.Data.DataTable: ...
        def NewSampleRow(
            self,
        ) -> (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        ): ...
        def RemoveSampleRow(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow,
        ) -> None: ...

        SampleRowChanged: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEventHandler
        )  # Event
        SampleRowChanging: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEventHandler
        )  # Event
        SampleRowDeleted: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEventHandler
        )  # Event
        SampleRowDeleting: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEventHandler
        )  # Event

    class SampleRow(System.Data.DataRow):  # Class
        MaxX: float
        MaxY: float
        MinX: float
        MinY: float
        SampleName: str

        def IsMinXNull(self) -> bool: ...
        def IsMinYNull(self) -> bool: ...
        def SetMinYNull(self) -> None: ...
        def IsMaxYNull(self) -> bool: ...
        def SetMaxYNull(self) -> None: ...
        def IsMaxXNull(self) -> bool: ...
        def SetMinXNull(self) -> None: ...
        def SetMaxXNull(self) -> None: ...

    class SampleRowChangeEvent(System.EventArgs):  # Class
        def __init__(
            self,
            row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow,
            action: System.Data.DataRowAction,
        ) -> None: ...

        Action: System.Data.DataRowAction  # readonly
        Row: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRow
        )  # readonly

    class SampleRowChangeEventHandler(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEvent,
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(
            self,
            sender: Any,
            e: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFixedGraphicsDataSet.SampleRowChangeEvent,
        ) -> None: ...

class ReportGraphics(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphics,
    System.IDisposable,
):  # Class
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...

class ReportGraphicsGenerator(
    System.MarshalByRefObject,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsGenerator,
):  # Class
    def __init__(self) -> None: ...

    Tag_AuditTrailBatchHashCodeOk: str = ...  # static # readonly
    Tag_AuditTrailHashCodeOk: str = ...  # static # readonly
    Tag_BatchFileHashCodeOk: str = ...  # static # readonly
    Tag_OriginalAuditTrailBatchHashCode: str = ...  # static # readonly
    Tag_OriginalAuditTrailHashCode: str = ...  # static # readonly
    Tag_OriginalBatchHashCode: str = ...  # static # readonly
    Tag_ReportResultHashCode: str = ...  # static # readonly

    def Dispose(self) -> None: ...

class ReportGraphicsGeneratorCommandLine:  # Class
    def __init__(self) -> None: ...

    AccountName: str
    BatchFileName: str
    BatchPath: str
    CancelEventName: str
    ConnectionTicket: str
    ConsoleTrace: bool
    Culture: str
    Domain: str
    EncryptedPassword: str
    FixedGraphicsFile: str
    Help: bool
    InstrumentType: str
    IonTraceFiles: bool
    NoGraphics: bool
    NoLogFile: bool
    NoLogo: bool
    OutputPath: str
    Password: str
    Progress: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsProgress
    ReporterName: str
    Server: str
    SettingsFile: str
    User: str

    def Run(self) -> int: ...
    def Generate(self) -> None: ...

class ReportGraphicsGeneratorProxy(
    System.MarshalByRefObject, System.IDisposable
):  # Class
    def __init__(self) -> None: ...

    ApplicationType: str
    CancelEventName: str
    Context: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext
    )  # readonly
    FixedGraphicsFile: str
    Graphics: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphics
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    IonTraceFiles: bool
    Log: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsLog
    NoGraphics: bool
    Parameters: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsParameters
    )
    Progress: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsProgress
    ReporterName: str
    SettingsFile: str

    def Dispose(self) -> None: ...
    def Generate(
        self, batchFolder: str, batchFile: str, outputFolder: str, outputFile: str
    ) -> None: ...

class ReportGraphicsLog(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsLog,
    System.MarshalByRefObject,
    System.IDisposable,
):  # Class
    def __init__(self, outputPath: str) -> None: ...
    def Dispose(self) -> None: ...

class ReportGraphicsParameters(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsParameters,
    System.IDisposable,
):  # Class
    def __init__(self, configExePath: str, reportFixedGraphicsFile: str) -> None: ...
    def Dispose(self) -> None: ...

class ReportGraphicsTask(
    System.Xml.Serialization.IXmlSerializable,
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsTask,
    IQueuedTask,
):  # Class
    def __init__(self) -> None: ...

    Actions: List[IQueuedTaskAction]  # readonly
    BatchFile: str
    BatchFolder: str
    CancelEventName: str
    Context: IQueuedTaskContext
    FixedGraphicsFile: str
    GenerateGraphicsFiles: bool
    GraphicsSettingsFile: str
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    OutputPath: str
    ProcessingPriority: TaskPriority
    Progress: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsProgress
    ReporterName: str
    TaskDescription: str  # readonly
    TaskLockName: str  # readonly
    TaskName: str  # readonly

    def Process(self) -> None: ...
    def Dispose(self) -> None: ...

class ReportProcessingDialog(
    System.Windows.Forms.Layout.IArrangedElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IReportGraphicsProgress,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    ExcelTask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ExcelReportTask
    GraphicsTask: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportGraphicsTask

class ReportTasksConfiguration:  # Class
    ClientNotifications: QueuedTaskNotificationSettingCollection  # static # readonly
    DefaultPrinter: str  # static # readonly
    EmailNotifySettingsSection: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.EmailNotifySettingsSection
    )  # static # readonly
    ExcelArguments: str  # static # readonly
    ExcelCommand: str  # static # readonly
    ReportDialogSettingsSection: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportDialogSettingsSection
    )  # static # readonly
    SmtpSettingsSection: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmtpSettingsSection
    )  # static # readonly

    @staticmethod
    def GetSmtpSettingsSection(
        config: System.Configuration.Configuration,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmtpSettingsSection: ...
    @staticmethod
    def Save() -> None: ...

class ReportTasksSettingsSection(System.Configuration.ConfigurationSection):  # Class
    def __init__(self) -> None: ...

    ClientNotifications: QueuedTaskNotificationSettingCollection  # readonly
    ExcelReport: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ExcelReportSetting
    )  # readonly

class ReportWindow(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    BatchFile: str
    BatchFolder: str
    EnableSelectBatch: bool
    GenerateNow: bool
    Method: str
    OpenReportFolder: bool
    QueueTask: bool
    ReportFolder: str
    StartQueueViewer: bool
    UIState: IUIState

class ResolutionCalculationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EuropeanPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly
    JapanesePharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly
    UnitedStatesPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly
    ValleyHeightPeakHeightRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly
    ValleyHeightToPeakHeightAverageRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly
    ValleyHeightToPeakHeightSumRatio: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResolutionCalculationType
    ) = ...  # static # readonly

class ResultGraphicsType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    PeakChromatogram: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly
    PeakQualifierChromatogram: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly
    PeakQualifiers: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly
    PeakSpectrum: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly
    SampleChromatogram: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly
    TargetCompoundCalibration: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultGraphicsType
    ) = ...  # static # readonly

class ResultsLogLevel(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Error: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultsLogLevel = (
        ...
    )  # static # readonly
    Info: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultsLogLevel = (
        ...
    )  # static # readonly
    Verbose: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultsLogLevel = (
        ...
    )  # static # readonly
    Warning: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ResultsLogLevel = (
        ...
    )  # static # readonly

class RowIdBase:  # Class
    BatchId: int  # readonly
    SampleId: int  # readonly

    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class RowStore:  # Class
    def __init__(self, row: System.Data.DataRow, storeChildren: bool) -> None: ...
    def Dispose(self) -> None: ...

class RteIntegratorParametersControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UserControl,
):  # Class
    def __init__(self) -> None: ...

    OriginalParameters: IPSetRTEIntegrator
    Parameters: IPSetRTEIntegrator

    def Reset(self) -> None: ...

class RunScriptFiles:  # Class
    def __init__(
        self,
        appContext: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAppContext,
        scriptFiles: List[str],
        exitOnFinish: bool,
    ) -> None: ...
    def RunScript(self) -> None: ...

class RuntimeMassCal(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibration,
):  # Class
    def __init__(self) -> None: ...

    RUNTIME_MASS_CAL_FILE: str = ...  # static # readonly

    def Write(self, path: str, aArray: List[float], t0Array: List[float]) -> None: ...
    def Dispose(self) -> None: ...
    def ReadMassCalibration(self, acqDataDir: str) -> bool: ...
    def GetTimeToMassConversion(
        self,
        massCalID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion: ...

class SDKVisibility(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Hidden: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SDKVisibility = (
        ...
    )  # static # readonly
    InternalOnly: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SDKVisibility = (
        ...
    )  # static # readonly
    Public: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SDKVisibility = (
        ...
    )  # static # readonly

class SDKVisibleAttribute(
    System.Runtime.InteropServices._Attribute, System.Attribute
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        visibility: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SDKVisibility,
    ) -> None: ...

    Visibility: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SDKVisibility
    )  # readonly

class SIMScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ISingleCompoundScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.SingleCompoundScanElement,
):  # Class
    def __init__(
        self, scanElementNode: System.Xml.XmlNode, ms1Active: bool
    ) -> None: ...

    IsMs1Scan: bool  # readonly
    MZ: float  # readonly

class SNRCalculator(ISignalToNoise):  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def AddNoiseRegion_CheckMinWidth(
        start: float, end: float, minWidth: float, noiseRegions: RangeCollection
    ) -> None: ...
    @staticmethod
    def GetNoiseRegions(
        chrom: IChromatogram,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        manuallyIntegrated: bool,
    ) -> RangeCollection: ...
    @staticmethod
    def ApplySignalToNoiseMultiplierForPeak(
        peak: IPeak, signalToNoiseMultiplier: float
    ) -> None: ...
    @staticmethod
    def ParseNoiseRegions(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.DoubleRange]: ...
    @staticmethod
    def AddNoiseRegionsFromBaselineInfo(
        peakList: IPeakList, noiseRegions: RangeCollection, minWidth: float
    ) -> None: ...
    @staticmethod
    def AddNoiseRegion(
        start: float, end: float, noiseRegions: RangeCollection
    ) -> None: ...
    @overload
    @staticmethod
    def ComputeSignalToNoise(
        chromatogram: IChromatogram,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        manuallyIntegrated: bool,
    ) -> None: ...
    @overload
    @staticmethod
    def ComputeSignalToNoise(
        chromatogram: IChromatogram,
        noiseRegions: RangeCollection,
        noiseType: NoiseType,
        noiseMultiplier: float,
    ) -> None: ...
    @staticmethod
    def SetSignalToNoiseForPeak(peak: IPeak, computedNoise: float) -> None: ...

class SampleFileInfo(IBDAFileInformation, System.ICloneable):  # Class
    AcquisitionTime: System.DateTime  # readonly
    DataFileName: str  # readonly
    DeviceReader: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DevicesXmlReader
    )  # readonly
    IRMStatus: IRMStatus  # readonly
    MSScanFileInformation: IBDAMSScanFileInformation  # readonly
    MeasurementType: MeasurementType  # readonly
    SeparationTechnique: SeparationTechnique  # readonly

    def IsMSDataPresent(self) -> bool: ...
    def GetSpectrumXAxisLimit(self, deviceNameOrdinalNumber: str) -> IRange: ...
    def IsUVSignalPresent(
        self, devType: DeviceType, signalName: str, devName: str
    ) -> bool: ...
    def GetDeviceName(self, deviceType: DeviceType) -> str: ...
    def Clear(self) -> None: ...
    def IsNonMSDataPresent(self) -> bool: ...
    def IsUVSpectralDataPresent(self) -> bool: ...
    def GetDeviceTable(self, desiredType: StoredDataType) -> System.Data.DataTable: ...
    def Clone(self) -> Any: ...
    def GetSignalTable(
        self, deviceNameOrdinalNumber: str, desiredType: StoredDataType
    ) -> System.Data.DataTable: ...
    def IsStoredDataTypePresent(
        self, deviceNameOrdinalNumber: str, desiredType: StoredDataType
    ) -> bool: ...
    @staticmethod
    def GetSeparationTechnique(dataFileName: str) -> SeparationTechnique: ...

class SampleInfo:  # Class
    def __init__(self, sampleFilePath: str, sampleInfoXmlPath: str) -> None: ...
    def LoadSampleInfo(
        self,
        batchDataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...

class SampleRowId(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
):  # Class
    @overload
    def __init__(self, batch: int, sample: int) -> None: ...
    @overload
    def __init__(
        self,
        sampleRowId: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId,
    ) -> None: ...
    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class SampleRowIdsParameter(
    Agilent.MassSpectrometry.CommandModel.Model.ICodeDomParameter
):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        sampleIds: Iterable[
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId
        ],
    ) -> None: ...

class SampleType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Blank: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    CC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    Calibration: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    DoubleBlank: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    Matrix: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    MatrixBlank: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    MatrixDup: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    QC: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    ResponseCheck: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    Sample: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly
    TuneCheck: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleType = (
        ...
    )  # static # readonly

class ScanBaseElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    HighMz: float  # readonly
    LowMz: float  # readonly

class ScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement
):  # Class
    CellAcceleratorVoltage: Optional[float]  # readonly
    CollisionEnergy: float  # readonly
    DeltaEMV: Optional[float]  # readonly
    DwellTime: Optional[float]  # readonly
    FragmentorVoltage: float  # readonly
    Gain: Optional[float]  # readonly
    Index: int  # readonly
    IonPolarity: IonPolarity  # readonly
    IonSource: str  # readonly
    Ms1Res: str  # readonly
    Ms2Res: str  # readonly
    ScanSegmentIndex: int  # readonly
    ScanType: MSScanType  # readonly

class ScanRecord(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    System.IDisposable,
):  # Class
    AbundanceLimit: float  # readonly
    BasePeakAbundance: float  # readonly
    CalibrationID: int  # readonly
    CollisionEnergy: float  # readonly
    CycleNumber: int  # readonly
    FragmentorVoltage: float  # readonly
    IonPolarity: int  # readonly
    MassCalOffset: int  # readonly
    MzOfInterest: float  # readonly
    ScanID: int  # readonly
    ScanMethodID: int  # readonly
    ScanTime: float  # readonly
    ScanType: int  # readonly
    SpectrumData: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumData
    )  # readonly
    TIC: float  # readonly
    TimeSegmentID: int  # readonly

    def ReadSpectrumUsingCachedHeader(
        self,
        scanData: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MSScanData,
        spectrumType: MSStorageMode,
    ) -> int: ...
    def ClearSpectrumData(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetProfileSpectrumHeader(
        self, scanData: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MSScanData
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.MSSpectrumHeader: ...

class ScanRecordDump:  # Class
    def __init__(
        self, sampleData: Agilent.MassSpectrometry.DataAnalysis.Quantitative.MSScanData
    ) -> None: ...

class ScanType(System.IConvertible, System.IComparable, System.IFormattable):  # Struct
    MRM: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    Ms1SIM: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    Ms1Scan: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    Ms2SIM: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    Ms2Scan: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    NeutralGain: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    NeutralLoss: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    PrecursorIon: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly
    ProductIon: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanType = (
        ...
    )  # static # readonly

class SchemaBasedScanRecordFields:  # Class
    def __init__(self, versionNumber: int) -> None: ...

class SchemaConsts:  # Class
    BatchAttrBatchState: str = ...  # static # readonly
    BatchAttrDataTimeStamp: str = ...  # static # readonly
    BatchAttrDataVersion: str = ...  # static # readonly
    BatchAttrSchemaVersion: str = ...  # static # readonly
    BatchBatchID: str  # static # readonly
    BatchDAMethod: str  # static # readonly
    BatchLevelName: str  # static # readonly
    BatchSampleID: str  # static # readonly
    BatchSampleName: str  # static # readonly
    BatchSamplePosition: str  # static # readonly
    BatchSampleType: str  # static # readonly
    BatchTableName: str  # static # readonly
    CalibrationBatchID: str  # static # readonly
    CalibrationCalibrationName: str  # static # readonly
    CalibrationCompoundID: str  # static # readonly
    CalibrationLevelConcentration: str  # static # readonly
    CalibrationLevelEnable: str  # static # readonly
    CalibrationLevelID: str  # static # readonly
    CalibrationLevelName: str  # static # readonly
    CalibrationLevelResponse: str  # static # readonly
    CalibrationSampleID: str  # static # readonly
    CalibrationTableName: str  # static # readonly
    PeakArea: str  # static # readonly
    PeakBatchID: str  # static # readonly
    PeakCalculatedConcentration: str  # static # readonly
    PeakCompoundID: str  # static # readonly
    PeakPeakID: str  # static # readonly
    PeakQualifierArea: str  # static # readonly
    PeakQualifierBatchID: str  # static # readonly
    PeakQualifierCompoundID: str  # static # readonly
    PeakQualifierPeakID: str  # static # readonly
    PeakQualifierQualifierID: str  # static # readonly
    PeakQualifierRetentionTime: str  # static # readonly
    PeakQualifierSampleID: str  # static # readonly
    PeakQualifierTableName: str  # static # readonly
    PeakRetentionTime: str  # static # readonly
    PeakSampleID: str  # static # readonly
    PeakTableName: str  # static # readonly
    PeakTargetResponse: str  # static # readonly
    RelationFkBatchTargetCompound: str  # static # readonly
    RelationFkPeakPeakQualifier: str  # static # readonly
    RelationFkTargetCompoundCalibration: str  # static # readonly
    RelationFkTargetCompoundPeak: str  # static # readonly
    RelationFkTargetCompoundTargetQualifier: str  # static # readonly
    RelationFkTargetQualifierPeakQualifier: str  # static # readonly
    RelationTargetCompoundISTDCompoundID: str  # static # readonly
    TargetCompoundBatchID: str  # static # readonly
    TargetCompoundCompoundID: str  # static # readonly
    TargetCompoundCompoundName: str  # static # readonly
    TargetCompoundCompoundType: str  # static # readonly
    TargetCompoundCurveFit: str  # static # readonly
    TargetCompoundCurveFitOrigin: str  # static # readonly
    TargetCompoundCurveFitWeight: str  # static # readonly
    TargetCompoundExpectedConcentration: str  # static # readonly
    TargetCompoundISTDConcentration: str  # static # readonly
    TargetCompoundMZ: str  # static # readonly
    TargetCompoundPrimaryHitPeakID: str  # static # readonly
    TargetCompoundRetentionTime: str  # static # readonly
    TargetCompoundSampleID: str  # static # readonly
    TargetCompoundTableName: str  # static # readonly
    TargetCompoundTransition: str  # static # readonly
    TargetQualifierBatchID: str  # static # readonly
    TargetQualifierCompoundID: str  # static # readonly
    TargetQualifierMZ: str  # static # readonly
    TargetQualifierQualifierID: str  # static # readonly
    TargetQualifierRelativeResponse: str  # static # readonly
    TargetQualifierSampleID: str  # static # readonly
    TargetQualifierTableName: str  # static # readonly

class ScriptableBatch(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableBatch
):  # Class
    def __init__(self) -> None: ...
    def _OnBatchAnalysisStarting(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...
    def _OnBatchLoaded(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...
    def _OnBatchAnalyzed(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
    ) -> None: ...

class ScriptableCompound(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableCompound
):  # Class
    def __init__(self) -> None: ...
    def _OnCompoundCalibrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        average: bool,
    ) -> None: ...
    def _OnCompoundQuantitated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _IgnoreQuantitationErrors(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        manuallyIntegrated: bool,
    ) -> bool: ...
    def _OnCompoundIntegrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundQuantitationFailed(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundIntegrated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...
    def _OnCompoundCalibrated(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        average: bool,
    ) -> None: ...
    def _IgnorePeakNotFoundException(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        e: System.ApplicationException,
        manuallyIntegrated: bool,
    ) -> bool: ...
    def _OnCompoundQuantitationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class ScriptableOutlier(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableOutlier
):  # Class
    def __init__(self) -> None: ...
    def _GetCompoundList(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ]: ...

class ScriptableQualifierIon(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableQualifierIon
):  # Class
    def __init__(self) -> None: ...
    def _OnManualIntegrationStarting(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
        xStart: float,
        xEnd: float,
        yStart: float,
        yEnd: float,
    ) -> None: ...
    def _OnManualIntegrationCompleted(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksCompleted(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksStarting(
        self,
        qualifier: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...

class ScriptableQuantifierIon(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableQuantifierIon
):  # Class
    def __init__(self) -> None: ...
    def _OnManualIntegrationStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
        xStart: float,
        xEnd: float,
        yStart: float,
        yEnd: float,
    ) -> None: ...
    def _OnManualIntegrationCompleted(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksCompleted(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        peakList: IPeakList,
    ) -> None: ...
    def _OnFindPeaksStarting(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
    ) -> None: ...

class ScriptableSample(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScriptableSample
):  # Class
    def __init__(self) -> None: ...
    def _OnSampleIntegrationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleIntegrated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleCalibrationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        average: bool,
    ) -> None: ...
    def _OnSampleCalibrated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
        average: bool,
    ) -> None: ...
    def _OnSampleQuantitated(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...
    def _OnSampleQuantitationStarting(
        self,
        sampleRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow,
    ) -> None: ...

class Scripting:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def CompileScript(
        source: str, references: List[str], dllPath: str
    ) -> System.Reflection.Assembly: ...
    @overload
    @staticmethod
    def CompileScript(
        source: str,
        references: List[str],
        dllPath: str,
        language: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Scripting.Languages,
    ) -> System.Reflection.Assembly: ...
    @overload
    @staticmethod
    def CompileScript(
        source: str,
        references: List[str],
        dllPath: str,
        provider: System.CodeDom.Compiler.CodeDomProvider,
    ) -> System.Reflection.Assembly: ...
    @staticmethod
    def FindInterface(dll: System.Reflection.Assembly, interfaceName: str) -> Any: ...

    # Nested Types

    class Languages(
        System.IConvertible, System.IComparable, System.IFormattable
    ):  # Struct
        CSharp: (
            Agilent.MassSpectrometry.DataAnalysis.Quantitative.Scripting.Languages
        ) = ...  # static # readonly
        VB: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Scripting.Languages = (
            ...
        )  # static # readonly

class SelectGroupsDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

class SelectOutliersDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...
    def Initialize(
        self,
        batchDataSet: System.Data.DataSet,
        batchFiles: Agilent.MassSpectrometry.DataAnalysis.Quantitative.BatchFiles,
        batchId: int,
        worktable: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Worktable,
    ) -> None: ...
    @staticmethod
    def GetOutlierCaption(outlier: str, application: str) -> str: ...
    @staticmethod
    def GetOutlierCategoryCaption(
        category: Agilent.MassSpectrometry.DataAnalysis.Quantitative.OutlierCategories,
    ) -> str: ...

class SelectRowsDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...
    def GetSelectedItems(
        self,
    ) -> Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFilterItem
    ]: ...

class SelectSamplesDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType

class SequenceTable:  # Class
    def __init__(self, batchDataDir: str, sampleDirName: str) -> None: ...

    ACQ_DATA_DIR: str = ...  # static # readonly
    SAMPLE_INFO_FILE: str = ...  # static # readonly
    SEQUENCE_FILE: str = ...  # static # readonly

    SampleInfoFileExists: bool  # readonly
    SequenceFile: str  # readonly
    SequenceFileExists: bool  # readonly

    def LoadSampleInfo(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...

class SerialDilution:  # Class
    def __init__(self, dilutionPattern: str) -> None: ...
    @staticmethod
    def ValidateDilutionPattern(dilutionPattern: str) -> str: ...
    def GetConcentrationLevels(
        self, maximumConcentration: float, numberOfLevels: int
    ) -> List[float]: ...
    def ToString(self) -> str: ...

class SerialDilutionConfig:  # Class
    def __init__(self) -> None: ...

    DilutionPattern: str  # static # readonly
    HighestLevelConcentration: float  # static # readonly
    LevelNameFormat: str  # static # readonly
    LevelNamePrefix: str  # static # readonly
    NumSerialDilutionLevels: int  # static # readonly
    PredefinedDilutionPatterns: str  # static # readonly

class SetupSamplesCompoundsDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    Compounds: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFilterItem
    ]
    InstrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType
    Samples: Iterable[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ReportFilterItem
    ]
    SingleSampleReport: bool

class Signal:  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> None: ...
    @overload
    def __init__(
        self, deviceName: str, ordinalNumber: int, signalName: str
    ) -> None: ...

    DAD_DEVICE: str = ...  # static # readonly
    MS_DEVICE: str = ...  # static # readonly

    DeviceName: str  # readonly
    IsMS: bool  # readonly
    OrdinalNumber: int  # readonly
    SignalName: str  # readonly

    def GetDeviceNameOrdinalNumberString(self) -> str: ...
    def ToString(self) -> str: ...

class SignalCDFileReader(System.IDisposable):  # Class
    def __init__(self, sampleDirPath: str, deviceKey: str) -> None: ...
    def GetSignalByName(
        self, signalName: str
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalInfo: ...
    def Read(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetSignalList(self) -> List[str]: ...

class SignalCGFileReader(System.IDisposable):  # Class
    def __init__(self, sampleDirPath: str, deviceKey: str) -> None: ...
    def ReadSignalChromatogram(
        self,
        signalInfo: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalInfo,
        xArray: List[float],
        yArray: List[float],
    ) -> None: ...
    def Dispose(self) -> None: ...

class SignalInfo:  # Class
    Description: str  # readonly
    NumDataPoints: int  # readonly
    NumPointValueFormats: int  # readonly
    PointValueFormats: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalPointValueFormat
    ]  # readonly
    SignalDataOffset: int  # readonly
    SignalName: str  # readonly
    SignalType: ChromType  # readonly
    XSamplingType: XSamplingType  # readonly

    def GetPointValueFormat(
        self, pointId: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalPointValueFormat: ...

class SignalPointValueFormat:  # Class
    DataType: DataFileValueDataType  # readonly
    PointId: int  # readonly
    PointValueType: DataValueType  # readonly
    ScaleFactor: float  # readonly
    StorageScheme: PointValueStorageScheme  # readonly

class Simplex:  # Class
    def __init__(self) -> None: ...
    def RunSimplexMethod(
        self,
        a: List[List[float]],
        n: int,
        m: int,
        m1: int,
        m2: int,
        m3: int,
        izrov: List[int],
        iposv: List[int],
    ) -> int: ...

class SingleCompoundScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ISingleCompoundScanElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanElement,
):  # Class
    CompoundGroup: str  # readonly
    CompoundName: str  # readonly
    IsISTD: bool  # readonly

class SingleQuadScanElement(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ScanBaseElement,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement,
):  # Class
    def __init__(self, scanElementNode: System.Xml.XmlNode, ms1Scan: bool) -> None: ...

    HighMz: float  # readonly
    LowMz: float  # readonly

class Smoothing:  # Class
    MAX_FUNCTION_WIDTH: float = ...  # static # readonly
    MIN_WIDTH_SAVITZKY_GOLAY_QUADRATIC_CUBIC: float = ...  # static # readonly
    MIN_WIDTH_SAVITZKY_GOLAY_QUARTIC_QUINTIC: float = ...  # static # readonly

    @staticmethod
    def GetSmoothingErrorMessage(
        smoothingError: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError,
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> str: ...
    @staticmethod
    def CheckSmoothing(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError: ...
    @staticmethod
    def SmoothChromatogramIfNeeded(
        compoundRow: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITargetCompoundRow,
        chrom: IChromatogram,
    ) -> None: ...

class SmoothingParameterError(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    GaussianSmoothingWidthNull: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    GaussianSmoothingWidthOutOfRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    InvalidSmoothingType: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    SG23SmoothingWidthOutOfRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    SG45SmoothingWidthOutOfRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    SmoothingFunctionWidthNull: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    SmoothingFunctionWidthOutOfRange: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly
    SmoothingNull: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingParameterError
    ) = ...  # static # readonly

class SmoothingType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Gaussian: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingType = (
        ...
    )  # static # readonly
    SavitzkyGolay23: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingType
    ) = ...  # static # readonly
    SavitzkyGolay45: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmoothingType
    ) = ...  # static # readonly

class SmtpSettingsCache:  # Class
    def __init__(self) -> None: ...

    EnableCustomSettings: bool  # readonly
    From: str
    Host: str
    Password: str
    Port: int
    SendAsync: bool
    UseDefaultCredentials: bool
    UseServiceExeConfiguration: bool
    User: str

    def SaveTo(
        self,
        section: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmtpSettingsSection,
    ) -> None: ...
    def CreateClient(self) -> System.Net.Mail.SmtpClient: ...
    @overload
    def Initialize(self) -> None: ...
    @overload
    def Initialize(
        self,
        section: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmtpSettingsSection,
    ) -> None: ...
    def Save(self) -> None: ...

class SmtpSettingsDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.Form,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(self) -> None: ...

    Settings: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SmtpSettingsCache

class SmtpSettingsSection(System.Configuration.ConfigurationSection):  # Class
    def __init__(self) -> None: ...

    From: str
    Host: str
    Password: str
    Port: int
    SendAsync: bool
    UseDefaultCredentials: bool
    UseServiceExeConfiguration: bool
    User: str

class SpectralSummerIntegrator(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IIntegrator,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.Integrator,
):  # Class
    def __init__(self) -> None: ...

    PSET_CLASS: str = ...  # static # readonly

    Parameters: IPSetPeakFind  # readonly

    def GetType(
        self,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IntegratorType: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(paramXML: str) -> str: ...
    @overload
    @staticmethod
    def GetCondensedParameterString(
        parameters: IPSetSpectralSummerIntegrator,
    ) -> str: ...
    def ParseIntegratorParameters(
        self, parameterString: str
    ) -> PSetSpectralSummerIntegrator: ...

class SpectralSummerParameters(IFindPeaksParameters):  # Class
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(
        self,
        useLowestPointAsBaselineOffset: bool,
        fixeBaselineOffset: float,
        useAbsoluteTimes: bool,
        useRelativeDeltasFromRT: bool,
        startIntegration: float,
        endIntegration: float,
        startIntegrationUnitIsMinutes: bool,
        endIntegrationUnitIsMinutes: bool,
        useLowestPointInRTWindowAsBaselineOffset: bool,
        baselineOffsetStart: float,
        baselineOffsetEnd: float,
        rtWindowBaselineOffset: float,
        setRTatHighestPointInPeak: bool,
    ) -> None: ...

    BaselineOffsetEnd: float  # readonly
    BaselineOffsetStart: float  # readonly
    EndIntegration: float  # readonly
    EndIntegrationUnitIsMinutes: bool  # readonly
    FixedBaselineOffset: float  # readonly
    RTWindowBaselineOffset: float  # readonly
    SetRTatHighestPointInPeak: bool  # readonly
    StartIntegration: float  # readonly
    StartIntegrationUnitIsMinutes: bool  # readonly
    UseAbsoluteTimes: bool  # readonly
    UseLowestPointAsBaselineOffset: bool  # readonly
    UseLowestPointInRTWindowAsBaselineOffset: bool  # readonly
    UseRelativeDeltasFromRT: bool  # readonly

class SpectralSummerParametersControl(
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UserControl,
):  # Class
    def __init__(self) -> None: ...

    OriginalParameters: IPSetSpectralSummerIntegrator
    Parameters: IPSetSpectralSummerIntegrator

    def Reset(self) -> None: ...

class SpectralSummerWrapper(IFindPeaks):  # Class
    def __init__(self) -> None: ...

class SpectrumConverter:  # Class
    @staticmethod
    def ConvertComponentSpectrum(
        componentSpectrum: ComponentSpectrum, polarity: IonPolarity, dataDirectory: str
    ) -> ISpectrum: ...

class SpectrumData:  # Class
    Count: int  # readonly
    IsStepped: bool  # readonly
    def __getitem__(self, index: int) -> float: ...
    MZValues: List[float]  # readonly

    @staticmethod
    def RoundToNearest10MilliDaltons(mz: List[float]) -> None: ...
    def GetMZValueAt(self, index: int) -> float: ...

class SpectrumDirFileReader(System.IDisposable):  # Class
    def __init__(self, sampleDirPath: str, deviceKey: str) -> None: ...

    Header: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumHeader
    )  # readonly
    SpectrumRecords: List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumRecord
    ]  # readonly

    def Read(self) -> bool: ...
    def Dispose(self) -> None: ...

class SpectrumExtractionOverride(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    AverageScan: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride
    ) = ...  # static # readonly
    DeconvolutedScan: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride
    ) = ...  # static # readonly
    Default: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride
    ) = ...  # static # readonly
    TargetedMSMS: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumExtractionOverride
    ) = ...  # static # readonly

class SpectrumFileReader(System.IDisposable):  # Class
    def __init__(self, sampleDirPath: str, deviceKey: str) -> None: ...
    def Dispose(self) -> None: ...
    def ReadSpectrum(
        self,
        header: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumHeader,
        spectrumRecord: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumRecord,
        xArray: List[float],
        yArray: List[float],
    ) -> None: ...

class SpectrumHeader:  # Class
    def __init__(self, br: System.IO.BinaryReader) -> None: ...

    CheckSum: List[int]  # readonly
    DeviceId: int  # readonly
    FileType: FileType  # readonly
    FileVersion: int  # readonly
    MeasuredMaxX: float  # readonly
    MeasuredMinX: float  # readonly
    NumScanRecords: int  # readonly
    NumSpectrumFormats: int  # readonly
    Offset: int  # readonly
    SamplingType: XSamplingType  # readonly
    SpectrumId: int  # readonly
    XPointValueFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalPointValueFormat
    )  # readonly
    YPointValueFormat: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SignalPointValueFormat
    )  # readonly

class SpectrumRecord:  # Class
    def __init__(self, br: System.IO.BinaryReader) -> None: ...

    ByteCount: int  # readonly
    MaxX: float  # readonly
    MaxY: float  # readonly
    MinX: float  # readonly
    MinY: float  # readonly
    PointCount: int  # readonly
    SamplingPeriod: float  # readonly
    ScanId: int  # readonly
    ScanTime: float  # readonly
    SpectrumFormatId: int  # readonly
    SpectrumOffset: int  # readonly
    TotalYValue: float  # readonly

class SpectrumScanInclusion(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Apex: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumScanInclusion = (
        ...
    )  # static # readonly
    Average: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumScanInclusion
    ) = ...  # static # readonly

class SpectrumSubtractionParams:  # Class
    def __init__(self) -> None: ...

    DEFAULT_ASSUME_SORTED_MZ: bool  # static
    DEFAULT_GET_MZ_STEP_SIZE_FROM_DATA: bool  # static
    DEFAULT_MZ_STEP_SIZE: float  # static
    DEFAULT_RESOLUTION_STRATEGY: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MzCollisionResolutionStrategy
    )  # static

    AssumeSortedMz: bool
    GetMzStepSizeFromData: bool
    MzStepSize: float
    ResolutionStrategy: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MzCollisionResolutionStrategy
    )

class SpectrumUtil:  # Class
    def __init__(self) -> None: ...
    @overload
    @staticmethod
    def FindMzStepSize(mz: List[float]) -> float: ...
    @overload
    @staticmethod
    def FindMzStepSize(mz: List[float], assumeSortedMz: bool) -> float: ...
    @staticmethod
    def SubtractBackgroundSpectrum(
        m1: List[float],
        a1: List[float],
        m2: List[float],
        a2: List[float],
        parameters: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumSubtractionParams,
        mResult: List[float],
        aResult: List[float],
    ) -> None: ...

class StandardAdditionChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class StandardMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EStd: Agilent.MassSpectrometry.DataAnalysis.Quantitative.StandardMode = (
        ...
    )  # static # readonly
    IStd: Agilent.MassSpectrometry.DataAnalysis.Quantitative.StandardMode = (
        ...
    )  # static # readonly

class Statistics:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetAverageAndStandardError(
        values: List[float], average: float, stdErr: float
    ) -> None: ...
    @staticmethod
    def SetRandomSeed(seed: int) -> None: ...
    @staticmethod
    def GetTValue(confidence: float, df: int) -> float: ...
    @staticmethod
    def GetAverage(values: List[float]) -> float: ...
    @staticmethod
    def SampleGaussian() -> float: ...
    @staticmethod
    def LinearLeastSquaresFit(
        x: List[float],
        y: List[float],
        sig: List[float],
        a: List[float],
        lista: List[int],
        mfit: int,
        covar: List[List[float]],
        fitFunctions: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Statistics.FitFunctions,
    ) -> float: ...
    @overload
    @staticmethod
    def GetMedian(values: List[int]) -> int: ...
    @overload
    @staticmethod
    def GetMedian(values: System.Collections.Generic.List[int]) -> int: ...
    @overload
    @staticmethod
    def GetMedian(values: List[float]) -> float: ...
    @overload
    @staticmethod
    def GetMedian(values: System.Collections.Generic.List[float]) -> float: ...
    @overload
    @staticmethod
    def GetMedian(values: List[float]) -> float: ...
    @overload
    @staticmethod
    def GetMedian(values: System.Collections.Generic.List[float]) -> float: ...
    @overload
    @staticmethod
    def GetMedianAndQuartiles(
        values: List[float], firstQuartile: float, median: float, thirdQuartile: float
    ) -> None: ...
    @overload
    @staticmethod
    def GetMedianAndQuartiles(
        values: System.Collections.Generic.List[float],
        firstQuartile: float,
        median: float,
        thirdQuartile: float,
    ) -> None: ...
    @overload
    @staticmethod
    def GetMedianAndQuartiles(
        values: List[float], firstQuartile: float, median: float, thirdQuartile: float
    ) -> None: ...
    @overload
    @staticmethod
    def GetMedianAndQuartiles(
        values: System.Collections.Generic.List[float],
        firstQuartile: float,
        median: float,
        thirdQuartile: float,
    ) -> None: ...

    # Nested Types

    class FitFunctions(
        System.MulticastDelegate,
        System.ICloneable,
        System.Runtime.Serialization.ISerializable,
    ):  # Class
        def __init__(self, object: Any, method: System.IntPtr) -> None: ...
        def EndInvoke(self, result: System.IAsyncResult) -> None: ...
        def BeginInvoke(
            self,
            x: float,
            fitValues: List[float],
            callback: System.AsyncCallback,
            object: Any,
        ) -> System.IAsyncResult: ...
        def Invoke(self, x: float, fitValues: List[float]) -> None: ...

class SteppedSpectrumData(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.SpectrumData
):  # Class
    IsStepped: bool  # readonly
    MZValues: List[float]  # readonly
    MzStart: float  # readonly
    MzStep: float  # readonly

    def GetMZValueAt(self, index: int) -> float: ...

class SteppedSpectrumDataInt(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.SteppedSpectrumData
):  # Class
    Count: int  # readonly
    IntAbundanceValues: List[int]  # readonly
    def __getitem__(self, index: int) -> float: ...

class StringUtil:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def MakeTimestampedFileName(filePath: str) -> str: ...
    @staticmethod
    def Base64ToFloatArray(str: str) -> List[float]: ...
    @staticmethod
    def Concat(items: List[str], separator: str) -> str: ...
    @staticmethod
    def Base64ToDoubleArray(str: str) -> List[float]: ...
    @staticmethod
    def FloatArrayToBase64(fValues: List[float]) -> str: ...
    @staticmethod
    def FormatValueInvariant(
        x: float,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...
    @staticmethod
    def RemoveWhiteSpace(str: str) -> str: ...
    @staticmethod
    def AddSQLStringEscapes(str: str) -> str: ...
    @staticmethod
    def DoubleArrayToBase64(dValues: List[float]) -> str: ...
    @staticmethod
    def FormatValue(
        x: float,
        format: Agilent.MassSpectrometry.DataAnalysis.Quantitative.INumericCustomFormat,
    ) -> str: ...

class SymmetryCalculationType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    EuropeanPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SymmetryCalculationType
    ) = ...  # static # readonly
    JapanesePharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SymmetryCalculationType
    ) = ...  # static # readonly
    UnitedStatesPharmacopoeia: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.SymmetryCalculationType
    ) = ...  # static # readonly

class SystemSuitability:  # Class
    @staticmethod
    def CalculateCapacityFactor(
        peakList: IPeakList, peakIndex: int, columnVoidTime: float
    ) -> float: ...
    @staticmethod
    def CalculateSymetryFactor(
        fxData: IFXData, peakList: IPeakList, pharmacopoeiaType: Pharmacopoeia
    ) -> None: ...
    @staticmethod
    def GetTangentWidth(
        fxData: IFXData, peakList: IPeakList, peakIndex: int
    ) -> float: ...
    @staticmethod
    def CalculateSystemSuitability(
        fxData: IFXData,
        peakList: IPeakList,
        psetSystemSuitability: IPSetSystemSuitability,
    ) -> None: ...
    @staticmethod
    def GetSlope(x1: float, y1: float, x2: float, y2: float) -> float: ...
    @staticmethod
    def GetXYValueArrays(
        xyPoints: List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.XYPoint],
        xArray: List[float],
        yArray: List[float],
    ) -> None: ...
    @staticmethod
    def CalculateTailingFactor(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        pharmacopoeia: Pharmacopoeia,
    ) -> float: ...
    @staticmethod
    def GetSigma(fxData: IFXData, peakList: IPeakList, peakIndex: int) -> float: ...
    @staticmethod
    def CalculatePlateNumber(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        pharmacopoeia: Pharmacopoeia,
    ) -> int: ...
    @staticmethod
    def GetDerivative(xArray: List[float], yArray: List[float]) -> List[float]: ...
    @overload
    @staticmethod
    def GetPeakWidthsAtPctHeight(
        fxData: IFXData, peakList: IPeakList, peakIndex: int, heightPct: int
    ) -> float: ...
    @overload
    @staticmethod
    def GetPeakWidthsAtPctHeight(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        heightPct: int,
        frontWidth: float,
        tailWidth: float,
    ) -> float: ...
    @staticmethod
    def GetXYValuesForPeak(
        fxData: IFXData, peakList: IPeakList, peakIndex: int
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.XYPoint]: ...
    @staticmethod
    def GetWidthBetweenInflectionPoints(
        fxData: IFXData, peakList: IPeakList, peakIndex: int
    ) -> float: ...
    @staticmethod
    def GetPharmacopoeiaType(
        symmetryCalculationType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.SymmetryCalculationType,
    ) -> Pharmacopoeia: ...
    @staticmethod
    def CalculatePeakResolution(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        pharmacopoeia: Pharmacopoeia,
    ) -> float: ...
    @staticmethod
    def CalculatePlatesPerMeter(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        pharmacopoeia: Pharmacopoeia,
        columnLengthInCentimeters: float,
    ) -> float: ...
    @staticmethod
    def CalculateSymmetry(
        fxData: IFXData,
        peakList: IPeakList,
        peakIndex: int,
        pharmacopoeia: Pharmacopoeia,
    ) -> float: ...

class TableViewMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    CompoundList: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TableViewMode = (
        ...
    )  # static # readonly
    Flat: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TableViewMode = (
        ...
    )  # static # readonly
    Horizontal: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TableViewMode = (
        ...
    )  # static # readonly
    Vertical: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TableViewMode = (
        ...
    )  # static # readonly

class TargetCompoundRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...
    @staticmethod
    def Read_0x10006(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    @staticmethod
    def Read_0x10005(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...
    @staticmethod
    def Read_0x10009(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetCompoundRow
    ): ...

class TargetCompoundRowId(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
):  # Class
    def __init__(self, batch: int, sample: int, compound: int) -> None: ...

    CompoundId: int  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class TargetQualifierIntegrationSetupDialog(
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.IBindableComponent,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.QualifierIntegrationSetupDialog,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
):  # Class
    def __init__(
        self,
        state: Agilent.MassHunter.Quantitative.UIModel.IPresentationState,
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
    ) -> None: ...

class TargetQualifierRecord:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def Read(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...
    @staticmethod
    def Write(
        row: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow,
        bw: System.IO.BinaryWriter,
    ) -> int: ...
    @staticmethod
    def ReadImpl(
        ds: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        br: System.IO.BinaryReader,
        schemaVersion: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.TargetQualifierRow
    ): ...

class TargetQualifierRowId(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.RowIdBase
):  # Class
    def __init__(
        self, batch: int, sample: int, compound: int, qualifier: int
    ) -> None: ...

    CompoundId: int  # readonly
    QualifierId: int  # readonly

    def Equals(self, obj: Any) -> bool: ...
    def FindRow(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> System.Data.DataRow: ...
    def RemoveRowFrom(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...
    def GetHashCode(self) -> int: ...
    def AddRowTo(
        self, dataset: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataSetBase
    ) -> None: ...

class TicIntegrator(IFindPeaks):  # Class
    def __init__(self) -> None: ...

class TimeSegment(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeSegment
):  # Class
    def __init__(self, index: int, startTime: float, endTime: float) -> None: ...

    _nDMRMs: int

    DynamicMRMScanElementCount: int  # readonly
    EndTime: float  # readonly
    Index: int  # readonly
    StartTime: float  # readonly
    TriggeredMRMScanElementCount: int  # readonly

    def GetTriggeredMRMs(
        self, compoundName: str
    ) -> System.Collections.Generic.List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MRMScanElement
    ]: ...
    def Contains(self, rt: float) -> bool: ...
    def GetPrecursorIons(self) -> List[float]: ...
    def GetCompounds(
        self,
    ) -> List[
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound
    ]: ...
    def GetCompound(
        self, compoundName: str, precursorIon: float
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound: ...
    @overload
    def GetScanElements(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement]: ...
    @overload
    def GetScanElements(
        self, scanType: MSScanType
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.IScanElement]: ...

class TimeToMassConversion(
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion
):  # Class
    def __init__(self) -> None: ...

    A: float  # readonly
    MaxPower: int
    Polynomial: List[float]  # readonly
    T0: float  # readonly

    def SetTraditional(self, a: float, t0: float) -> None: ...
    @overload
    def TimeToMass(self, flightTime: float) -> float: ...
    @overload
    def TimeToMass(self, flightTimes: List[float]) -> None: ...
    def SetPolynomialLimits(self, tMin: float, tMax: float) -> None: ...

class Transition:  # Class
    @overload
    def __init__(self, mz: float) -> None: ...
    @overload
    def __init__(self, polarity: IonPolarity, mz: float) -> None: ...
    @overload
    def __init__(self, precursorMz: float, productMz: float) -> None: ...
    @overload
    def __init__(
        self, polarity: IonPolarity, precursorMz: float, productMz: float
    ) -> None: ...
    @overload
    def __init__(
        self, scanType: MSScanType, polarity: IonPolarity, selectedMz: float, mz: float
    ) -> None: ...

    LOSS_OF_WATER: float = ...  # static # readonly

    IsLossOfWater: bool  # readonly
    Key: str  # readonly
    Polarity: IonPolarity  # readonly
    PrecursorMz: float  # readonly
    ProductMz: float  # readonly
    ScanType: MSScanType  # readonly

    @staticmethod
    def GetKey(
        scanType: MSScanType,
        polarity: IonPolarity,
        precursorMz: float,
        productMz: float,
    ) -> str: ...

class TriggeredTransitions:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetTriggeredTransitions(
        compound: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IAcquisitionCompound,
    ) -> str: ...

class UncertaintyMode(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Absolute: Agilent.MassSpectrometry.DataAnalysis.Quantitative.UncertaintyMode = (
        ...
    )  # static # readonly
    Relative: Agilent.MassSpectrometry.DataAnalysis.Quantitative.UncertaintyMode = (
        ...
    )  # static # readonly

class UnknownsAnalysis:  # Class
    def __init__(
        self,
        context: Agilent.MassSpectrometry.DataAnalysis.Quantitative.AppCommandContext,
    ) -> None: ...

    XML_CONFIG_FILE: str = ...  # static # readonly

    MethodGenerator: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.MethodGenerator
    )  # readonly
    UnknownsBatchNames: List[str]  # readonly
    UnknownsSampleCount: int  # readonly

    def Run(self, batchId: int, libraryPath: str) -> List[str]: ...

class UseProfileDataChangedEventHandler(
    System.MulticastDelegate,
    System.ICloneable,
    System.Runtime.Serialization.ISerializable,
):  # Class
    def __init__(self, object: Any, method: System.IntPtr) -> None: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def BeginInvoke(
        self,
        sender: Any,
        args: System.EventArgs,
        callback: System.AsyncCallback,
        object: Any,
    ) -> System.IAsyncResult: ...
    def Invoke(self, sender: Any, args: System.EventArgs) -> None: ...

class UserMassCal(
    System.IDisposable,
    Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibration,
):  # Class
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def ReadMassCalibration(self, acqDataDir: str) -> bool: ...
    def GetTimeToMassConversion(
        self,
        massCalID: Agilent.MassSpectrometry.DataAnalysis.Quantitative.IMassCalibrationID,
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.ITimeToMassConversion: ...

class ValidationMessageType(
    System.IConvertible, System.IComparable, System.IFormattable
):  # Struct
    Error: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ValidationMessageType = (
        ...
    )  # static # readonly
    Info: Agilent.MassSpectrometry.DataAnalysis.Quantitative.ValidationMessageType = (
        ...
    )  # static # readonly
    Warning: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.ValidationMessageType
    ) = ...  # static # readonly

class Vector:  # Class
    @overload
    def __init__(self, length: int) -> None: ...
    @overload
    def __init__(self, a: List[float]) -> None: ...
    @overload
    def __init__(
        self, a: Agilent.MassSpectrometry.DataAnalysis.Quantitative.Vector
    ) -> None: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value_: float) -> None: ...
    Length: int  # readonly

    @staticmethod
    def UnitVector(
        length: int, index: int
    ) -> Agilent.MassSpectrometry.DataAnalysis.Quantitative.Vector: ...

class Worklist:  # Class
    def __init__(
        self, batchFolder: str, sampleName: str, worklistFile: str
    ) -> None: ...

    SampleName: str  # readonly
    WorklistFile: str  # readonly

    def LoadSampleInfo(
        self,
        dataSet: Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet,
        batchId: int,
        sampleId: int,
    ) -> (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.QuantitationDataSet.BatchRow
    ): ...

class Worktable(
    System.Windows.Forms.Layout.IArrangedElement,
    System.Windows.Forms.UserControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.IContainerControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.IBindableComponent,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    Agilent.MassHunter.Quantitative.UIModel.IWorktablePane,
    System.Windows.Forms.IWin32Window,
    System.ComponentModel.IComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    System.Windows.Forms.ISupportOleDropSource,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
    System.IDisposable,
    System.ComponentModel.ISynchronizeInvoke,
):  # Class
    def __init__(self) -> None: ...

    CanDelete: bool  # readonly
    CanFillDown: bool  # readonly
    CanPrint: bool  # readonly
    CanStartAutoReview: bool  # readonly
    CurrentLevelId: int  # readonly
    CurrentPeakId: int  # readonly
    CurrentQualifierId: int  # readonly
    DataNavigator: (
        Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator
    )  # readonly
    DisplayAllSampleGroups: bool
    DisplayAllSampleTypes: bool
    FlagFilterManager: (
        Agilent.MassHunter.Quantitative.UIModel.IFlagFilterManager
    )  # readonly
    FontSizePercentage: float
    GridControl: Agilent.MassHunter.Quantitative.UIModel.IGridControl  # readonly
    HasNextSample: bool  # readonly
    HasPrevSample: bool  # readonly
    LockSampleColumns: bool
    PlottableGrid: IPlottableGrid  # readonly
    SingleCompoundMode: bool
    TableViewMode: Agilent.MassSpectrometry.DataAnalysis.Quantitative.TableViewMode
    ToolbarsManager: IToolbarsManager  # readonly

    def UpdateColors(self) -> None: ...
    def FillDown(self) -> None: ...
    def StartAutoReview(
        self, reviewCompounds: bool, manualIntegrating: bool
    ) -> None: ...
    def SetDisplaySampleType(self, sampleType: str, display: bool) -> None: ...
    def ResetLayout(self) -> None: ...
    def HasNextCompound(self) -> bool: ...
    def ShowSelectOutliersDialog(self) -> System.Windows.Forms.DialogResult: ...
    def PrevSample(self) -> None: ...
    def GetDisplaySampleGroup(self, sampleGroup: str) -> bool: ...
    def FindNext(
        self,
        tableName: str,
        columnName: str,
        operatorType: FindOperatorType,
        value_: Any,
    ) -> bool: ...
    def NextSample(self, manualIntegrating: bool) -> None: ...
    def DeleteSelectedSamples(self) -> None: ...
    def PrintPreview(self) -> None: ...
    def GetDisplaySampleType(self, sampleType: str) -> bool: ...
    def GotoNextCompound(self) -> None: ...
    def GetDisplayedSampleGroups(self) -> List[str]: ...
    def CanDeleteSelectedSamples(self) -> bool: ...
    def CreatePropertyPages(self) -> List[IPropertyPage]: ...
    def GenerateStatusText(self) -> str: ...
    def GetSelectedSamples(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId]: ...
    def PageSetup(self) -> None: ...
    def GetSamples(self) -> List[System.Data.DataRow]: ...
    def GetDisplayedSampleTypes(self) -> List[str]: ...
    def ShowOutlierColumns(self) -> None: ...
    def Print(self, displayDialog: bool) -> None: ...
    def Delete(self) -> None: ...
    def SetDisplaySampleGroup(self, sampleGroup: str, display: bool) -> None: ...
    def SetToolbarsManager(self, manager: IToolbarsManager) -> None: ...
    def GotoPrevCompound(self) -> None: ...
    def HasPrevCompound(self) -> bool: ...
    def SetDataNavigator(
        self,
        navigator: Agilent.MassSpectrometry.DataAnalysis.Quantitative.DataNavigator,
    ) -> None: ...
    def RefreshSampleFilter(self) -> None: ...

class WorktableConfig(System.IDisposable, GridConfigBase):  # Class
    def __init__(
        self,
        grid: Agilent.MassSpectrometry.DataAnalysis.Quantitative.WorktableGridControl,
    ) -> None: ...
    def SaveToConfigFile(self) -> None: ...
    def ApplyTo(self, grid: Infragistics.Win.UltraWinGrid.UltraGridBase) -> None: ...
    def GetTableName(self, dataset: System.Data.DataSet, name: str) -> str: ...
    def InitValueLists(
        self,
        valueLists: ValueListSet,
        instrumentType: Agilent.MassSpectrometry.DataAnalysis.Quantitative.InstrumentType,
        applicationType: str,
    ) -> None: ...
    def ReadFromGrid(
        self, grid: Infragistics.Win.UltraWinGrid.UltraGridBase
    ) -> None: ...
    def UpdateColumnAttributes(
        self, column: Infragistics.Win.UltraWinGrid.UltraGridColumn
    ) -> None: ...
    def Clone(self) -> GridConfigBase: ...
    def SetDefault(self, readConfig: bool) -> None: ...

class WorktableGridControl(
    System.Windows.Forms.UnsafeNativeMethods.IViewObject2,
    Infragistics.Win.IUIElementProvider,
    System.IDisposable,
    Infragistics.Win.IControlElementEventProcessor,
    Agilent.MassHunter.Quantitative.UIModel.IPlottableGrid,
    Infragistics.Shared.IUltraLicensedComponent,
    System.Windows.Forms.UnsafeNativeMethods.IOleObject,
    IPlottableGrid,
    Infragistics.Win.AppStyling.ISupportAppStyling,
    System.ComponentModel.ISupportInitialize,
    System.ComponentModel.ISynchronizeInvoke,
    Infragistics.Shared.Serialization.ICodeDomSerializable,
    Infragistics.Win.ISupportPresets,
    System.ComponentModel.IComponent,
    System.Windows.Forms.Layout.IArrangedElement,
    Infragistics.Win.IUIElementTextProvider,
    Infragistics.Win.CalcEngine.IUltraCalcParticipant,
    Infragistics.Win.ISelectionManager,
    System.Windows.Forms.IBindableComponent,
    Infragistics.Win.IUltraControlElement,
    System.Windows.Forms.UnsafeNativeMethods.IOleWindow,
    System.Windows.Forms.UnsafeNativeMethods.IPersist,
    Infragistics.Win.Touch.ISupportTouchMetrics,
    Infragistics.Win.AutoEditMode.IAutoEditMode,
    Infragistics.Win.UIAutomation.IProvideUIAutomation,
    System.Windows.Forms.IDropTarget,
    System.Windows.Forms.IWin32Window,
    System.Windows.Forms.UnsafeNativeMethods.IOleControl,
    System.Windows.Forms.UnsafeNativeMethods.IPersistPropertyBag,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStorage,
    Infragistics.Win.IUltraControl,
    System.Windows.Forms.ISupportOleDropSource,
    Infragistics.Win.IValidatorClient,
    System.Windows.Forms.UnsafeNativeMethods.IPersistStreamInit,
    Infragistics.Win.UltraWinGrid.Design.IGridDesignInfo,
    System.Windows.Forms.UnsafeNativeMethods.IQuickActivate,
    Agilent.MassHunter.Quantitative.UIModel.IGridControl,
    Infragistics.Win.Touch.IGestureConsumer,
    GridControlBase,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceObject,
    System.Windows.Forms.UnsafeNativeMethods.IOleInPlaceActiveObject,
    System.Windows.Forms.UnsafeNativeMethods.IViewObject,
):  # Class
    ColNameCalibrationReferenceCompoundName: str = ...  # static # readonly
    ColNameOutlierSummary: str = ...  # static # readonly
    ColNameQuantitationMessageSummary: str = ...  # static # readonly

    CanDelete: bool  # readonly
    CanFillDown: bool  # readonly
    CanPaste: bool  # readonly
    Count: int  # readonly

    def UpdateColors(self) -> None: ...
    def FormatColumn(self, bandName: str, columnName: str) -> None: ...
    def GetCompoundID(
        self,
        index: int,
        column: Agilent.MassHunter.Quantitative.UIModel.IPlottableColumn,
    ) -> Optional[int]: ...
    def IsColumnFormattable(self, rawBandName: str, rawColumnName: str) -> bool: ...
    def GetColumnCaption(self, bandName: str, columnName: str) -> str: ...
    def FindNext(
        self,
        tableName: str,
        columnName: str,
        operatorType: FindOperatorType,
        value_: Any,
    ) -> bool: ...
    def LoadColumnSettings(self, file: str) -> None: ...
    def GetLogicalColumnName(self, bandName: str, columnName: str) -> str: ...
    def ShowColumn(self, bandName: str, columnName: str, columnAfter: str) -> None: ...
    def GetPlottableColumn(
        self, columnName: str
    ) -> Agilent.MassHunter.Quantitative.UIModel.IPlottableColumn: ...
    def DeleteSelectedSamples(self) -> None: ...
    def GetLogicalBandName(self, bandName: str, columnName: str) -> str: ...
    def GetSampleID(
        self,
        index: int,
        column: Agilent.MassHunter.Quantitative.UIModel.IPlottableColumn,
    ) -> Optional[int]: ...
    def GetLabel(self, index: int) -> str: ...
    def DisplayColumnChanging(self) -> None: ...
    def CanDeleteSelectedSamples(self) -> bool: ...
    def SupportsSaveLoadColumnSettings(self) -> bool: ...
    def IsColumnVisible(self, bandName: str, columnName: str) -> bool: ...
    def DisplayColumnChanged(self) -> None: ...
    def GetSelectedSamples(
        self,
    ) -> List[Agilent.MassSpectrometry.DataAnalysis.Quantitative.SampleRowId]: ...
    def SaveColumnSettings(self, file: str) -> None: ...
    def Delete(self) -> None: ...
    def GetColumnNames(self, bandName: str) -> List[str]: ...
    def ResetColumns(self) -> None: ...
    def ResetSort(self) -> None: ...
    def IsPlottableColumn(
        self, column: Agilent.MassHunter.Quantitative.UIModel.IPlottableColumn
    ) -> bool: ...
    def SetDefaultBehavior(self) -> None: ...
    def HideColumn(self, bandName: str, columnName: str) -> None: ...
    def ShowColumnsDialog(self) -> None: ...
    def GetValue(
        self,
        index: int,
        column: Agilent.MassHunter.Quantitative.UIModel.IPlottableColumn,
    ) -> Optional[float]: ...
    def Paste(self) -> None: ...

    CountChanged: System.EventHandler  # Event
    ValueChanged: System.EventHandler  # Event

class XYPoint:  # Class
    def __init__(self, xValue: float, yValue: float) -> None: ...

    XValue: float
    YValue: float

class XmlHashWriter(System.IDisposable, System.Xml.XmlTextWriter):  # Class
    def __init__(
        self,
        stream: System.IO.Stream,
        encoding: System.Text.Encoding,
        attributeName: str,
    ) -> None: ...
    @staticmethod
    def BytesToString(bytes: List[int]) -> str: ...
    @overload
    @staticmethod
    def CheckHashCode(stream: System.IO.Stream, attributeName: str) -> bool: ...
    @overload
    @staticmethod
    def CheckHashCode(
        stream: System.IO.Stream, attributeName: str, hashCodeStringRead: str
    ) -> bool: ...
    def ComputeAndWriteHash(self) -> str: ...
    def WriteStartElement(self, prefix: str, localName: str, ns: str) -> None: ...

class XmlUtil:  # Class
    def __init__(self) -> None: ...
    @staticmethod
    def GetElementValueAsBoolean(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: bool
    ) -> bool: ...
    @staticmethod
    def GetElementValueAsInt32(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: int
    ) -> int: ...
    @staticmethod
    def ElementToColumn(
        dataRow: System.Data.DataRow,
        column: System.Data.DataColumn,
        parentNode: System.Xml.XmlNode,
        elementName: str,
    ) -> None: ...
    @staticmethod
    def GetAttributeText(
        elementNode: System.Xml.XmlNode, attributeName: str
    ) -> str: ...
    @overload
    @staticmethod
    def WriteElement(
        sw: System.IO.StreamWriter, indent: str, elementName: str, value_: Any
    ) -> None: ...
    @overload
    @staticmethod
    def WriteElement(
        sw: System.IO.StreamWriter,
        indent: str,
        elementName: str,
        value_: Any,
        format: str,
    ) -> None: ...
    @staticmethod
    def GetElementValueAsDouble(
        parentNode: System.Xml.XmlNode, elementName: str, defaultValue: float
    ) -> float: ...
    @staticmethod
    def WriteComment(sw: System.IO.StreamWriter, indent: str, comment: str) -> None: ...
    @overload
    @staticmethod
    def GetElementText(parentNode: System.Xml.XmlNode, elementName: str) -> str: ...
    @overload
    @staticmethod
    def GetElementText(
        parentNode: System.Xml.XmlNode, elementName: str, mustExist: bool
    ) -> str: ...
